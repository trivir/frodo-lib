// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PolicySetOps createPolicySet() 1: Create non-existing policy set [FrodoTestPolicySet3] 1`] = `
{
  "applicationType": "iPlanetAMWebAgentService",
  "attributeNames": [],
  "conditions": [
    "Script",
    "AMIdentityMembership",
    "IPv6",
    "IPv4",
    "SimpleTime",
    "LEAuthLevel",
    "LDAPFilter",
    "AuthScheme",
    "Session",
    "AND",
    "AuthenticateToRealm",
    "ResourceEnvIP",
    "Policy",
    "OAuth2Scope",
    "SessionProperty",
    "OR",
    "Transaction",
    "NOT",
    "AuthLevel",
    "AuthenticateToService",
  ],
  "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "creationDate": 1684701958971,
  "description": null,
  "displayName": "Frodo Test Policy Set Template",
  "editable": true,
  "entitlementCombiner": "DenyOverride",
  "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "lastModifiedDate": 1684701958971,
  "name": "FrodoTestPolicySet3",
  "resourceComparator": null,
  "resourceTypeUuids": [
    "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
  ],
  "saveIndex": null,
  "searchIndex": null,
  "subjects": [
    "AuthenticatedUsers",
    "NOT",
    "Identity",
    "OR",
    "AND",
    "NONE",
    "Policy",
    "JwtClaim",
  ],
}
`;

exports[`PolicySetOps createPolicySet() 2: Create existing policy set [FrodoTestPolicySet4] 1`] = `
{
  "code": 409,
  "message": "Application already exists",
  "reason": "Conflict",
}
`;

exports[`PolicySetOps deletePolicySet() 1: Delete existing policy set [FrodoTestPolicySet7] 1`] = `{}`;

exports[`PolicySetOps deletePolicySet() 2: Delete non-existing policy set [DoesNotExist] 1`] = `
{
  "code": 404,
  "message": "DoesNotExist application not found in realm.",
  "reason": "Not Found",
}
`;

exports[`PolicySetOps exportPolicySet() 1: Export existing policy set w/o deps [FrodoTestPolicySet9] 1`] = `
{
  "meta": Any<Object>,
  "policy": {},
  "policyset": {
    "FrodoTestPolicySet9": {
      "applicationType": "iPlanetAMWebAgentService",
      "attributeNames": [],
      "conditions": [
        "Script",
        "AMIdentityMembership",
        "IPv6",
        "IPv4",
        "SimpleTime",
        "LEAuthLevel",
        "LDAPFilter",
        "AuthScheme",
        "Session",
        "AND",
        "AuthenticateToRealm",
        "ResourceEnvIP",
        "Policy",
        "OAuth2Scope",
        "SessionProperty",
        "OR",
        "Transaction",
        "NOT",
        "AuthLevel",
        "AuthenticateToService",
      ],
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": 1684701958381,
      "description": null,
      "displayName": "Frodo Test Policy Set Template",
      "editable": true,
      "entitlementCombiner": "DenyOverride",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": 1684701958381,
      "name": "FrodoTestPolicySet9",
      "resourceComparator": null,
      "resourceTypeUuids": [
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      ],
      "saveIndex": null,
      "searchIndex": null,
      "subjects": [
        "AuthenticatedUsers",
        "NOT",
        "Identity",
        "OR",
        "AND",
        "NONE",
        "Policy",
        "JwtClaim",
      ],
    },
  },
  "resourcetype": {},
  "script": {},
}
`;

exports[`PolicySetOps exportPolicySet() 2: Export existing policy set w/ deps [FrodoTestPolicySet9] 1`] = `
{
  "meta": Any<Object>,
  "policy": {},
  "policyset": {
    "FrodoTestPolicySet9": {
      "applicationType": "iPlanetAMWebAgentService",
      "attributeNames": [],
      "conditions": [
        "Script",
        "AMIdentityMembership",
        "IPv6",
        "IPv4",
        "SimpleTime",
        "LEAuthLevel",
        "LDAPFilter",
        "AuthScheme",
        "Session",
        "AND",
        "AuthenticateToRealm",
        "ResourceEnvIP",
        "Policy",
        "OAuth2Scope",
        "SessionProperty",
        "OR",
        "Transaction",
        "NOT",
        "AuthLevel",
        "AuthenticateToService",
      ],
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": 1684701958381,
      "description": null,
      "displayName": "Frodo Test Policy Set Template",
      "editable": true,
      "entitlementCombiner": "DenyOverride",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": 1684701958381,
      "name": "FrodoTestPolicySet9",
      "resourceComparator": null,
      "resourceTypeUuids": [
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      ],
      "saveIndex": null,
      "searchIndex": null,
      "subjects": [
        "AuthenticatedUsers",
        "NOT",
        "Identity",
        "OR",
        "AND",
        "NONE",
        "Policy",
        "JwtClaim",
      ],
    },
  },
  "resourcetype": {},
  "script": {},
}
`;

exports[`PolicySetOps exportPolicySet() 3: Export non-existing policy set [DoesNotExist] 1`] = `
"Export error:
Request failed with status code 404"
`;

exports[`PolicySetOps exportPolicySets() 1: Export all policy sets 1`] = `
{
  "meta": Any<Object>,
  "policy": {
    "Allow Everything": {
      "_id": "Allow Everything",
      "_rev": "1684694915794",
      "actionValues": {
        "GET": true,
      },
      "active": false,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.335Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:35.794Z",
      "name": "Allow Everything",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/*",
        "*://*:*/*?*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "App2": {
      "_id": "App2",
      "_rev": "1684694915876",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.400Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:35.876Z",
      "name": "App2",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "App3": {
      "_id": "App3",
      "_rev": "1684694915955",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.461Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:35.955Z",
      "name": "App3",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app3/*",
        "*://*:*/app3/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "Bi": {
      "_id": "Bi",
      "_rev": "1684694916200",
      "actionValues": {
        "DELETE": true,
        "GET": true,
        "HEAD": true,
        "OPTIONS": true,
        "PATCH": true,
        "POST": true,
        "PUT": true,
      },
      "active": true,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.654Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:36.200Z",
      "name": "Bi",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://10.1.4.18:*/*",
        "*://bi.scheuber.io:*/*",
        "*://bi.scheuber.io:*/*?*",
        "*://10.1.4.18:*/*?*",
      ],
      "subject": {
        "subjects": [
          {
            "type": "AuthenticatedUsers",
          },
          {
            "subjectValues": [
              "id=BusinessApps,ou=group,o=alpha,ou=services,ou=am-config",
            ],
            "type": "Identity",
          },
        ],
        "type": "AND",
      },
    },
    "Grafana": {
      "_id": "Grafana",
      "_rev": "1684694916292",
      "actionValues": {
        "DELETE": true,
        "GET": true,
        "HEAD": true,
        "OPTIONS": true,
        "PATCH": true,
        "POST": true,
        "PUT": true,
      },
      "active": true,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.720Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:36.292Z",
      "name": "Grafana",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://ig.mytestrun.com:*/grafana",
        "*://ig.mytestrun.com:*/grafana/*?*",
        "*://10.1.4.18:3000/*",
        "*://ig.mytestrun.com:*/grafana/*",
        "*://ig.mytestrun.com:*/grafana?*",
        "*://10.1.4.18:3000/*?*",
      ],
      "subject": {
        "subjects": [
          {
            "type": "AuthenticatedUsers",
          },
          {
            "subjectValues": [
              "id=BusinessApps,ou=group,o=alpha,ou=services,ou=am-config",
            ],
            "type": "Identity",
          },
        ],
        "type": "AND",
      },
    },
    "Pay - Transactional AuthZ": {
      "_id": "Pay - Transactional AuthZ",
      "_rev": "1684694916035",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "condition": {
        "authenticationStrategy": "AuthenticateToTreeConditionAdvice",
        "strategySpecifier": "TxAuthZ",
        "type": "Transaction",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.523Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:36.35Z",
      "name": "Pay - Transactional AuthZ",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/pay/*",
        "*://*:*/forgerock/pay/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "Tomcat - Transactional Auth": {
      "_id": "Tomcat - Transactional Auth",
      "_rev": "1684694915707",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "condition": {
        "authenticationStrategy": "AuthenticateToTreeConditionAdvice",
        "strategySpecifier": "TxAuthZ",
        "type": "Transaction",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.266Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:35.707Z",
      "name": "Tomcat - Transactional Auth",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/sample/hello.jsp",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "Zero Trust": {
      "_id": "Zero Trust",
      "_rev": "1684694916118",
      "actionValues": {
        "GET": true,
      },
      "active": false,
      "applicationName": "newApps",
      "condition": {
        "conditions": [
          {
            "maxSessionTime": 60,
            "terminateSession": false,
            "type": "Session",
          },
          {
            "authenticationStrategy": "AuthenticateToTreeConditionAdvice",
            "strategySpecifier": "ZeroTrust",
            "type": "Transaction",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.590Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:36.118Z",
      "name": "Zero Trust",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/*",
        "*://*:*/*?*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "pol1": {
      "_id": "pol1",
      "_rev": "1684700691679",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:24:51.679Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:24:51.679Z",
      "name": "pol1",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
  },
  "policyset": {
    "FrodoTestPolicySet1": {
      "applicationType": "iPlanetAMWebAgentService",
      "attributeNames": [],
      "conditions": [
        "Script",
        "AMIdentityMembership",
        "IPv6",
        "IPv4",
        "SimpleTime",
        "LEAuthLevel",
        "LDAPFilter",
        "AuthScheme",
        "Session",
        "AND",
        "AuthenticateToRealm",
        "ResourceEnvIP",
        "Policy",
        "OAuth2Scope",
        "SessionProperty",
        "OR",
        "Transaction",
        "NOT",
        "AuthLevel",
        "AuthenticateToService",
      ],
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": 1684701957758,
      "description": null,
      "displayName": "Frodo Test Policy Set Template",
      "editable": true,
      "entitlementCombiner": "DenyOverride",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": 1684701957758,
      "name": "FrodoTestPolicySet1",
      "resourceComparator": null,
      "resourceTypeUuids": [
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      ],
      "saveIndex": null,
      "searchIndex": null,
      "subjects": [
        "AuthenticatedUsers",
        "NOT",
        "Identity",
        "OR",
        "AND",
        "NONE",
        "Policy",
        "JwtClaim",
      ],
    },
    "FrodoTestPolicySet3": {
      "applicationType": "iPlanetAMWebAgentService",
      "attributeNames": [],
      "conditions": [
        "Script",
        "AMIdentityMembership",
        "IPv6",
        "IPv4",
        "SimpleTime",
        "LEAuthLevel",
        "LDAPFilter",
        "AuthScheme",
        "Session",
        "AND",
        "AuthenticateToRealm",
        "ResourceEnvIP",
        "Policy",
        "OAuth2Scope",
        "SessionProperty",
        "OR",
        "Transaction",
        "NOT",
        "AuthLevel",
        "AuthenticateToService",
      ],
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": 1684701958971,
      "description": null,
      "displayName": "Frodo Test Policy Set Template",
      "editable": true,
      "entitlementCombiner": "DenyOverride",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": 1684701958971,
      "name": "FrodoTestPolicySet3",
      "resourceComparator": null,
      "resourceTypeUuids": [
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      ],
      "saveIndex": null,
      "searchIndex": null,
      "subjects": [
        "AuthenticatedUsers",
        "NOT",
        "Identity",
        "OR",
        "AND",
        "NONE",
        "Policy",
        "JwtClaim",
      ],
    },
    "FrodoTestPolicySet4": {
      "applicationType": "iPlanetAMWebAgentService",
      "attributeNames": [],
      "conditions": [
        "Script",
        "AMIdentityMembership",
        "IPv6",
        "IPv4",
        "SimpleTime",
        "LEAuthLevel",
        "LDAPFilter",
        "AuthScheme",
        "Session",
        "AND",
        "AuthenticateToRealm",
        "ResourceEnvIP",
        "Policy",
        "OAuth2Scope",
        "SessionProperty",
        "OR",
        "Transaction",
        "NOT",
        "AuthLevel",
        "AuthenticateToService",
      ],
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": 1684701957942,
      "description": null,
      "displayName": "Frodo Test Policy Set Template",
      "editable": true,
      "entitlementCombiner": "DenyOverride",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": 1684701957942,
      "name": "FrodoTestPolicySet4",
      "resourceComparator": null,
      "resourceTypeUuids": [
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      ],
      "saveIndex": null,
      "searchIndex": null,
      "subjects": [
        "AuthenticatedUsers",
        "NOT",
        "Identity",
        "OR",
        "AND",
        "NONE",
        "Policy",
        "JwtClaim",
      ],
    },
    "FrodoTestPolicySet5": {
      "applicationType": "iPlanetAMWebAgentService",
      "attributeNames": [],
      "conditions": [
        "Script",
        "AMIdentityMembership",
        "IPv6",
        "IPv4",
        "SimpleTime",
        "LEAuthLevel",
        "LDAPFilter",
        "AuthScheme",
        "Session",
        "AND",
        "AuthenticateToRealm",
        "ResourceEnvIP",
        "Policy",
        "OAuth2Scope",
        "SessionProperty",
        "OR",
        "Transaction",
        "NOT",
        "AuthLevel",
        "AuthenticateToService",
      ],
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": 1684701958068,
      "description": null,
      "displayName": "Frodo Test Policy Set Template",
      "editable": true,
      "entitlementCombiner": "DenyOverride",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": 1684701959136,
      "name": "FrodoTestPolicySet5",
      "resourceComparator": null,
      "resourceTypeUuids": [
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      ],
      "saveIndex": null,
      "searchIndex": null,
      "subjects": [
        "AuthenticatedUsers",
        "NOT",
        "Identity",
        "OR",
        "AND",
        "NONE",
        "Policy",
        "JwtClaim",
      ],
    },
    "FrodoTestPolicySet7": {
      "applicationType": "iPlanetAMWebAgentService",
      "attributeNames": [],
      "conditions": [
        "Script",
        "AMIdentityMembership",
        "IPv6",
        "IPv4",
        "SimpleTime",
        "LEAuthLevel",
        "LDAPFilter",
        "AuthScheme",
        "Session",
        "AND",
        "AuthenticateToRealm",
        "ResourceEnvIP",
        "Policy",
        "OAuth2Scope",
        "SessionProperty",
        "OR",
        "Transaction",
        "NOT",
        "AuthLevel",
        "AuthenticateToService",
      ],
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": 1684701958251,
      "description": null,
      "displayName": "Frodo Test Policy Set Template",
      "editable": true,
      "entitlementCombiner": "DenyOverride",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": 1684701958251,
      "name": "FrodoTestPolicySet7",
      "resourceComparator": null,
      "resourceTypeUuids": [
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      ],
      "saveIndex": null,
      "searchIndex": null,
      "subjects": [
        "AuthenticatedUsers",
        "NOT",
        "Identity",
        "OR",
        "AND",
        "NONE",
        "Policy",
        "JwtClaim",
      ],
    },
    "FrodoTestPolicySet9": {
      "applicationType": "iPlanetAMWebAgentService",
      "attributeNames": [],
      "conditions": [
        "Script",
        "AMIdentityMembership",
        "IPv6",
        "IPv4",
        "SimpleTime",
        "LEAuthLevel",
        "LDAPFilter",
        "AuthScheme",
        "Session",
        "AND",
        "AuthenticateToRealm",
        "ResourceEnvIP",
        "Policy",
        "OAuth2Scope",
        "SessionProperty",
        "OR",
        "Transaction",
        "NOT",
        "AuthLevel",
        "AuthenticateToService",
      ],
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": 1684701958381,
      "description": null,
      "displayName": "Frodo Test Policy Set Template",
      "editable": true,
      "entitlementCombiner": "DenyOverride",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": 1684701958381,
      "name": "FrodoTestPolicySet9",
      "resourceComparator": null,
      "resourceTypeUuids": [
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      ],
      "saveIndex": null,
      "searchIndex": null,
      "subjects": [
        "AuthenticatedUsers",
        "NOT",
        "Identity",
        "OR",
        "AND",
        "NONE",
        "Policy",
        "JwtClaim",
      ],
    },
    "newApps": {
      "applicationType": "iPlanetAMWebAgentService",
      "attributeNames": [],
      "conditions": [
        "Script",
        "AMIdentityMembership",
        "IPv6",
        "IPv4",
        "SimpleTime",
        "LEAuthLevel",
        "LDAPFilter",
        "AuthScheme",
        "Session",
        "AND",
        "AuthenticateToRealm",
        "ResourceEnvIP",
        "Policy",
        "OAuth2Scope",
        "SessionProperty",
        "OR",
        "Transaction",
        "NOT",
        "AuthLevel",
        "AuthenticateToService",
      ],
      "createdBy": "id=8efaa5b6-8c98-4489-9b21-ee41f5589ab7,ou=user,ou=am-config",
      "creationDate": 1684694024307,
      "description": null,
      "displayName": "newApps",
      "editable": true,
      "entitlementCombiner": "DenyOverride",
      "lastModifiedBy": "id=8efaa5b6-8c98-4489-9b21-ee41f5589ab7,ou=user,ou=am-config",
      "lastModifiedDate": 1684694024307,
      "name": "newApps",
      "resourceComparator": null,
      "resourceTypeUuids": [
        "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      ],
      "saveIndex": null,
      "searchIndex": null,
      "subjects": [
        "AuthenticatedUsers",
        "NOT",
        "Identity",
        "OR",
        "AND",
        "NONE",
        "Policy",
        "JwtClaim",
      ],
    },
  },
  "resourcetype": {},
  "script": {
    "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a": {
      "_id": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
      "context": "POLICY_CONDITION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Policy Sample Script",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Policy",
      "script": [
        "/*",
        " * Copyright 2015-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/**",
        " * This is a Policy Condition example script. It demonstrates how to access a user's information,",
        " * use that information in external HTTP calls and make a policy decision based on the outcome.",
        " */",
        "",
        "var userAddress, userIP, resourceHost;",
        "",
        "if (validateAndInitializeParameters()) {",
        "",
        "    var countryFromUserAddress = getCountryFromUserAddress();",
        "    logger.message("Country retrieved from user's address: " + countryFromUserAddress);",
        "    var countryFromUserIP = getCountryFromUserIP();",
        "    logger.message("Country retrieved from user's IP: " + countryFromUserIP);",
        "    var countryFromResourceURI = getCountryFromResourceURI();",
        "    logger.message("Country retrieved from resource URI: " + countryFromResourceURI);",
        "",
        "    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {",
        "        logger.message("Authorization Succeeded");",
        "        responseAttributes.put("countryOfOrigin", [countryFromUserAddress]);",
        "        authorized = true;",
        "    } else {",
        "        logger.message("Authorization Failed");",
        "        authorized = false;",
        "    }",
        "",
        "} else {",
        "    logger.message("Required parameters not found. Authorization Failed.");",
        "    authorized = false;",
        "}",
        "",
        "/**",
        " * Use the user's address to lookup their country of residence.",
        " *",
        " * @returns {*} The user's country of residence.",
        " */",
        "function getCountryFromUserAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userAddress));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        var j;",
        "        for (j = 0; j < result.address_components.length; i++) {",
        "            if (result.address_components[i].types[0] == "country") {",
        "                return result.address_components[i].long_name;",
        "            }",
        "        }",
        "    }",
        "}",
        "",
        "/**",
        " * Use the user's IP to lookup the country from which the request originated.",
        " *",
        " * @returns {*} The country from which the request originated.",
        " */",
        "function getCountryFromUserIP() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + userIP);",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Use the requested resource's host name to lookup the country where the resource is hosted.",
        " *",
        " * @returns {*} The country in which the resource is hosted.",
        " */",
        "function getCountryFromResourceURI() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + encodeURIComponent(resourceHost));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Retrieve and validate the variables required to make the external HTTP calls.",
        " *",
        " * @returns {boolean} Will be true if validation was successful.",
        " */",
        "function validateAndInitializeParameters() {",
        "    var userAddressSet = identity.getAttribute("postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    userAddress = userAddressSet.iterator().next();",
        "    logger.message("User address: " + userAddress);",
        "",
        "    if (!environment) {",
        "        logger.warning("No environment parameters specified in the evaluation request.");",
        "        return false;",
        "    }",
        "",
        "    var ipSet = environment.get("IP");",
        "    if (ipSet == null || ipSet.isEmpty()) {",
        "        logger.warning("No IP specified in the evaluation request environment parameters.");",
        "        return false;",
        "    }",
        "    userIP = ipSet.iterator().next();",
        "    logger.message("User IP: " + userIP);",
        "",
        "    if (!resourceURI) {",
        "        logger.warning("No resource URI specified.");",
        "        return false;",
        "    }",
        "    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];",
        "    logger.message("Resource host: " + resourceHost);",
        "",
        "    return true;",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
      ],
    },
    "729ee140-a4e9-43af-b358-d60eeda13cc3": {
      "_id": "729ee140-a4e9-43af-b358-d60eeda13cc3",
      "context": "POLICY_CONDITION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Scripted Sample Policy 2",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Policy 2",
      "script": [
        "/*",
        " * Copyright 2015-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/**",
        " * This is a Policy Condition example script. It demonstrates how to access a user's information,",
        " * use that information in external HTTP calls and make a policy decision based on the outcome.",
        " */",
        "",
        "var userAddress, userIP, resourceHost;",
        "",
        "if (validateAndInitializeParameters()) {",
        "",
        "    var countryFromUserAddress = getCountryFromUserAddress();",
        "    logger.message("Country retrieved from user's address: " + countryFromUserAddress);",
        "    var countryFromUserIP = getCountryFromUserIP();",
        "    logger.message("Country retrieved from user's IP: " + countryFromUserIP);",
        "    var countryFromResourceURI = getCountryFromResourceURI();",
        "    logger.message("Country retrieved from resource URI: " + countryFromResourceURI);",
        "",
        "    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {",
        "        logger.message("Authorization Succeeded");",
        "        responseAttributes.put("countryOfOrigin", [countryFromUserAddress]);",
        "        authorized = true;",
        "    } else {",
        "        logger.message("Authorization Failed");",
        "        authorized = false;",
        "    }",
        "",
        "} else {",
        "    logger.message("Required parameters not found. Authorization Failed.");",
        "    authorized = false;",
        "}",
        "",
        "/**",
        " * Use the user's address to lookup their country of residence.",
        " *",
        " * @returns {*} The user's country of residence.",
        " */",
        "function getCountryFromUserAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userAddress));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        var j;",
        "        for (j = 0; j < result.address_components.length; i++) {",
        "            if (result.address_components[i].types[0] == "country") {",
        "                return result.address_components[i].long_name;",
        "            }",
        "        }",
        "    }",
        "}",
        "",
        "/**",
        " * Use the user's IP to lookup the country from which the request originated.",
        " *",
        " * @returns {*} The country from which the request originated.",
        " */",
        "function getCountryFromUserIP() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + userIP);",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Use the requested resource's host name to lookup the country where the resource is hosted.",
        " *",
        " * @returns {*} The country in which the resource is hosted.",
        " */",
        "function getCountryFromResourceURI() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + encodeURIComponent(resourceHost));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Retrieve and validate the variables required to make the external HTTP calls.",
        " *",
        " * @returns {boolean} Will be true if validation was successful.",
        " */",
        "function validateAndInitializeParameters() {",
        "    var userAddressSet = identity.getAttribute("postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    userAddress = userAddressSet.iterator().next();",
        "    logger.message("User address: " + userAddress);",
        "",
        "    if (!environment) {",
        "        logger.warning("No environment parameters specified in the evaluation request.");",
        "        return false;",
        "    }",
        "",
        "    var ipSet = environment.get("IP");",
        "    if (ipSet == null || ipSet.isEmpty()) {",
        "        logger.warning("No IP specified in the evaluation request environment parameters.");",
        "        return false;",
        "    }",
        "    userIP = ipSet.iterator().next();",
        "    logger.message("User IP: " + userIP);",
        "",
        "    if (!resourceURI) {",
        "        logger.warning("No resource URI specified.");",
        "        return false;",
        "    }",
        "    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];",
        "    logger.message("Resource host: " + resourceHost);",
        "",
        "    return true;",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
      ],
    },
  },
}
`;

exports[`PolicySetOps getPolicySet() 1: Get existing policy set [FrodoTestPolicySet1] 1`] = `
{
  "applicationType": "iPlanetAMWebAgentService",
  "attributeNames": [],
  "conditions": [
    "Script",
    "AMIdentityMembership",
    "IPv6",
    "IPv4",
    "SimpleTime",
    "LEAuthLevel",
    "LDAPFilter",
    "AuthScheme",
    "Session",
    "AND",
    "AuthenticateToRealm",
    "ResourceEnvIP",
    "Policy",
    "OAuth2Scope",
    "SessionProperty",
    "OR",
    "Transaction",
    "NOT",
    "AuthLevel",
    "AuthenticateToService",
  ],
  "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "creationDate": 1684701957758,
  "description": null,
  "displayName": "Frodo Test Policy Set Template",
  "editable": true,
  "entitlementCombiner": "DenyOverride",
  "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "lastModifiedDate": 1684701957758,
  "name": "FrodoTestPolicySet1",
  "resourceComparator": null,
  "resourceTypeUuids": [
    "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
  ],
  "saveIndex": null,
  "searchIndex": null,
  "subjects": [
    "AuthenticatedUsers",
    "NOT",
    "Identity",
    "OR",
    "AND",
    "NONE",
    "Policy",
    "JwtClaim",
  ],
}
`;

exports[`PolicySetOps getPolicySet() 2: Get non-existing policy set [DoesNotExist] 1`] = `
{
  "code": 404,
  "message": "Unable to retrieve application under realm /alpha.",
  "reason": "Not Found",
}
`;

exports[`PolicySetOps getPolicySets() 1: Get all policy sets 1`] = `
[
  {
    "applicationType": "iPlanetAMWebAgentService",
    "attributeNames": [],
    "conditions": [
      "Script",
      "AMIdentityMembership",
      "IPv6",
      "IPv4",
      "SimpleTime",
      "LEAuthLevel",
      "LDAPFilter",
      "AuthScheme",
      "Session",
      "AND",
      "AuthenticateToRealm",
      "ResourceEnvIP",
      "Policy",
      "OAuth2Scope",
      "SessionProperty",
      "OR",
      "Transaction",
      "NOT",
      "AuthLevel",
      "AuthenticateToService",
    ],
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": 1684701957758,
    "description": null,
    "displayName": "Frodo Test Policy Set Template",
    "editable": true,
    "entitlementCombiner": "DenyOverride",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": 1684701957758,
    "name": "FrodoTestPolicySet1",
    "resourceComparator": null,
    "resourceTypeUuids": [
      "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    ],
    "saveIndex": null,
    "searchIndex": null,
    "subjects": [
      "AuthenticatedUsers",
      "NOT",
      "Identity",
      "OR",
      "AND",
      "NONE",
      "Policy",
      "JwtClaim",
    ],
  },
  {
    "applicationType": "iPlanetAMWebAgentService",
    "attributeNames": [],
    "conditions": [
      "Script",
      "AMIdentityMembership",
      "IPv6",
      "IPv4",
      "SimpleTime",
      "LEAuthLevel",
      "LDAPFilter",
      "AuthScheme",
      "Session",
      "AND",
      "AuthenticateToRealm",
      "ResourceEnvIP",
      "Policy",
      "OAuth2Scope",
      "SessionProperty",
      "OR",
      "Transaction",
      "NOT",
      "AuthLevel",
      "AuthenticateToService",
    ],
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": 1684701957942,
    "description": null,
    "displayName": "Frodo Test Policy Set Template",
    "editable": true,
    "entitlementCombiner": "DenyOverride",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": 1684701957942,
    "name": "FrodoTestPolicySet4",
    "resourceComparator": null,
    "resourceTypeUuids": [
      "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    ],
    "saveIndex": null,
    "searchIndex": null,
    "subjects": [
      "AuthenticatedUsers",
      "NOT",
      "Identity",
      "OR",
      "AND",
      "NONE",
      "Policy",
      "JwtClaim",
    ],
  },
  {
    "applicationType": "iPlanetAMWebAgentService",
    "attributeNames": [],
    "conditions": [
      "Script",
      "AMIdentityMembership",
      "IPv6",
      "IPv4",
      "SimpleTime",
      "LEAuthLevel",
      "LDAPFilter",
      "AuthScheme",
      "Session",
      "AND",
      "AuthenticateToRealm",
      "ResourceEnvIP",
      "Policy",
      "OAuth2Scope",
      "SessionProperty",
      "OR",
      "Transaction",
      "NOT",
      "AuthLevel",
      "AuthenticateToService",
    ],
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": 1684701958068,
    "description": null,
    "displayName": "Frodo Test Policy Set Template",
    "editable": true,
    "entitlementCombiner": "DenyOverride",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": 1684701958068,
    "name": "FrodoTestPolicySet5",
    "resourceComparator": null,
    "resourceTypeUuids": [
      "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    ],
    "saveIndex": null,
    "searchIndex": null,
    "subjects": [
      "AuthenticatedUsers",
      "NOT",
      "Identity",
      "OR",
      "AND",
      "NONE",
      "Policy",
      "JwtClaim",
    ],
  },
  {
    "applicationType": "iPlanetAMWebAgentService",
    "attributeNames": [],
    "conditions": [
      "Script",
      "AMIdentityMembership",
      "IPv6",
      "IPv4",
      "SimpleTime",
      "LEAuthLevel",
      "LDAPFilter",
      "AuthScheme",
      "Session",
      "AND",
      "AuthenticateToRealm",
      "ResourceEnvIP",
      "Policy",
      "OAuth2Scope",
      "SessionProperty",
      "OR",
      "Transaction",
      "NOT",
      "AuthLevel",
      "AuthenticateToService",
    ],
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": 1684701958251,
    "description": null,
    "displayName": "Frodo Test Policy Set Template",
    "editable": true,
    "entitlementCombiner": "DenyOverride",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": 1684701958251,
    "name": "FrodoTestPolicySet7",
    "resourceComparator": null,
    "resourceTypeUuids": [
      "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    ],
    "saveIndex": null,
    "searchIndex": null,
    "subjects": [
      "AuthenticatedUsers",
      "NOT",
      "Identity",
      "OR",
      "AND",
      "NONE",
      "Policy",
      "JwtClaim",
    ],
  },
  {
    "applicationType": "iPlanetAMWebAgentService",
    "attributeNames": [],
    "conditions": [
      "Script",
      "AMIdentityMembership",
      "IPv6",
      "IPv4",
      "SimpleTime",
      "LEAuthLevel",
      "LDAPFilter",
      "AuthScheme",
      "Session",
      "AND",
      "AuthenticateToRealm",
      "ResourceEnvIP",
      "Policy",
      "OAuth2Scope",
      "SessionProperty",
      "OR",
      "Transaction",
      "NOT",
      "AuthLevel",
      "AuthenticateToService",
    ],
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": 1684701958381,
    "description": null,
    "displayName": "Frodo Test Policy Set Template",
    "editable": true,
    "entitlementCombiner": "DenyOverride",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": 1684701958381,
    "name": "FrodoTestPolicySet9",
    "resourceComparator": null,
    "resourceTypeUuids": [
      "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    ],
    "saveIndex": null,
    "searchIndex": null,
    "subjects": [
      "AuthenticatedUsers",
      "NOT",
      "Identity",
      "OR",
      "AND",
      "NONE",
      "Policy",
      "JwtClaim",
    ],
  },
  {
    "applicationType": "iPlanetAMWebAgentService",
    "attributeNames": [],
    "conditions": [
      "Script",
      "AMIdentityMembership",
      "IPv6",
      "IPv4",
      "SimpleTime",
      "LEAuthLevel",
      "LDAPFilter",
      "AuthScheme",
      "Session",
      "AND",
      "AuthenticateToRealm",
      "ResourceEnvIP",
      "Policy",
      "OAuth2Scope",
      "SessionProperty",
      "OR",
      "Transaction",
      "NOT",
      "AuthLevel",
      "AuthenticateToService",
    ],
    "createdBy": "id=8efaa5b6-8c98-4489-9b21-ee41f5589ab7,ou=user,ou=am-config",
    "creationDate": 1684694024307,
    "description": null,
    "displayName": "newApps",
    "editable": true,
    "entitlementCombiner": "DenyOverride",
    "lastModifiedBy": "id=8efaa5b6-8c98-4489-9b21-ee41f5589ab7,ou=user,ou=am-config",
    "lastModifiedDate": 1684694024307,
    "name": "newApps",
    "resourceComparator": null,
    "resourceTypeUuids": [
      "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    ],
    "saveIndex": null,
    "searchIndex": null,
    "subjects": [
      "AuthenticatedUsers",
      "NOT",
      "Identity",
      "OR",
      "AND",
      "NONE",
      "Policy",
      "JwtClaim",
    ],
  },
]
`;

exports[`PolicySetOps importFirstPolicySet() 1: Import first policy set 1`] = `
{
  "applicationType": "iPlanetAMWebAgentService",
  "attributeNames": [],
  "conditions": [
    "Script",
    "AMIdentityMembership",
    "IPv6",
    "IPv4",
    "SimpleTime",
    "LEAuthLevel",
    "LDAPFilter",
    "AuthScheme",
    "Session",
    "AND",
    "AuthenticateToRealm",
    "ResourceEnvIP",
    "Policy",
    "OAuth2Scope",
    "SessionProperty",
    "OR",
    "Transaction",
    "NOT",
    "AuthLevel",
    "AuthenticateToService",
  ],
  "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "creationDate": 1684701960243,
  "description": null,
  "displayName": "Frodo Test Policy Set Template",
  "editable": true,
  "entitlementCombiner": "DenyOverride",
  "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "lastModifiedDate": 1684701960243,
  "name": "FrodoTestPolicySet13",
  "resourceComparator": null,
  "resourceTypeUuids": [
    "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
  ],
  "saveIndex": null,
  "searchIndex": null,
  "subjects": [
    "AuthenticatedUsers",
    "NOT",
    "Identity",
    "OR",
    "AND",
    "NONE",
    "Policy",
    "JwtClaim",
  ],
}
`;

exports[`PolicySetOps importPolicySet() 1: Import existing policy set [FrodoTestPolicySet11] 1`] = `
{
  "applicationType": "iPlanetAMWebAgentService",
  "attributeNames": [],
  "conditions": [
    "Script",
    "AMIdentityMembership",
    "IPv6",
    "IPv4",
    "SimpleTime",
    "LEAuthLevel",
    "LDAPFilter",
    "AuthScheme",
    "Session",
    "AND",
    "AuthenticateToRealm",
    "ResourceEnvIP",
    "Policy",
    "OAuth2Scope",
    "SessionProperty",
    "OR",
    "Transaction",
    "NOT",
    "AuthLevel",
    "AuthenticateToService",
  ],
  "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "creationDate": 1684701960153,
  "description": null,
  "displayName": "Frodo Test Policy Set Template",
  "editable": true,
  "entitlementCombiner": "DenyOverride",
  "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "lastModifiedDate": 1684701960153,
  "name": "FrodoTestPolicySet11",
  "resourceComparator": null,
  "resourceTypeUuids": [
    "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
  ],
  "saveIndex": null,
  "searchIndex": null,
  "subjects": [
    "AuthenticatedUsers",
    "NOT",
    "Identity",
    "OR",
    "AND",
    "NONE",
    "Policy",
    "JwtClaim",
  ],
}
`;

exports[`PolicySetOps importPolicySet() 2: Import non-existing policy set [DoesNotExist] 1`] = `
"Import error:
DoesNotExist not found in import data!"
`;

exports[`PolicySetOps importPolicySets() 1: Import all policy sets 1`] = `
{
  "applicationType": "iPlanetAMWebAgentService",
  "attributeNames": [],
  "conditions": [
    "Script",
    "AMIdentityMembership",
    "IPv6",
    "IPv4",
    "SimpleTime",
    "LEAuthLevel",
    "LDAPFilter",
    "AuthScheme",
    "Session",
    "AND",
    "AuthenticateToRealm",
    "ResourceEnvIP",
    "Policy",
    "OAuth2Scope",
    "SessionProperty",
    "OR",
    "Transaction",
    "NOT",
    "AuthLevel",
    "AuthenticateToService",
  ],
  "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "creationDate": 1684701960420,
  "description": null,
  "displayName": "Frodo Test Policy Set Template",
  "editable": true,
  "entitlementCombiner": "DenyOverride",
  "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "lastModifiedDate": 1684701960420,
  "name": "FrodoTestPolicySet16",
  "resourceComparator": null,
  "resourceTypeUuids": [
    "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
  ],
  "saveIndex": null,
  "searchIndex": null,
  "subjects": [
    "AuthenticatedUsers",
    "NOT",
    "Identity",
    "OR",
    "AND",
    "NONE",
    "Policy",
    "JwtClaim",
  ],
}
`;

exports[`PolicySetOps updatePolicySet() 1: Update existing policy set [FrodoTestPolicySet5] 1`] = `
{
  "applicationType": "iPlanetAMWebAgentService",
  "attributeNames": [],
  "conditions": [
    "Script",
    "AMIdentityMembership",
    "IPv6",
    "IPv4",
    "SimpleTime",
    "LEAuthLevel",
    "LDAPFilter",
    "AuthScheme",
    "Session",
    "AND",
    "AuthenticateToRealm",
    "ResourceEnvIP",
    "Policy",
    "OAuth2Scope",
    "SessionProperty",
    "OR",
    "Transaction",
    "NOT",
    "AuthLevel",
    "AuthenticateToService",
  ],
  "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "creationDate": 1684701958068,
  "description": null,
  "displayName": "Frodo Test Policy Set Template",
  "editable": true,
  "entitlementCombiner": "DenyOverride",
  "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "lastModifiedDate": 1684701959136,
  "name": "FrodoTestPolicySet5",
  "resourceComparator": null,
  "resourceTypeUuids": [
    "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
  ],
  "saveIndex": null,
  "searchIndex": null,
  "subjects": [
    "AuthenticatedUsers",
    "NOT",
    "Identity",
    "OR",
    "AND",
    "NONE",
    "Policy",
    "JwtClaim",
  ],
}
`;

exports[`PolicySetOps updatePolicySet() 2: Update non-existing policy set [FrodoTestPolicySet6] 1`] = `
{
  "code": 404,
  "message": "FrodoTestPolicySet6 not found.",
  "reason": "Not Found",
}
`;
