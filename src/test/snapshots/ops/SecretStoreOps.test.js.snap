// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SecretStoreOps Classic Tests exportSecretStores() 0: Export realm SecretStores 1`] = `
{
  "meta": Any<Object>,
  "secretstore": {},
}
`;

exports[`SecretStoreOps Classic Tests exportSecretStores() 1: Export global SecretStores 1`] = `
{
  "meta": Any<Object>,
  "secretstore": {
    "EnvironmentAndSystemPropertySecretStore": {
      "_id": "EnvironmentAndSystemPropertySecretStore",
      "_type": {
        "_id": "EnvironmentAndSystemPropertySecretStore",
        "collection": false,
        "name": "Environment and System Property Secrets Store",
      },
      "format": "BASE64",
    },
    "default-keystore": {
      "_id": "default-keystore",
      "_type": {
        "_id": "KeyStoreSecretStore",
        "collection": true,
        "name": "Keystore",
      },
      "file": "/home/prestonhales/am/security/keystores/keystore.jceks",
      "keyEntryPassword": "entrypass",
      "leaseExpiryDuration": 5,
      "mappings": [
        {
          "_id": "am.applications.agents.remote.consent.request.signing.ES256",
          "_rev": "1192664276",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "es256test",
          ],
          "secretId": "am.applications.agents.remote.consent.request.signing.ES256",
        },
        {
          "_id": "am.applications.agents.remote.consent.request.signing.ES384",
          "_rev": "288173840",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "es384test",
          ],
          "secretId": "am.applications.agents.remote.consent.request.signing.ES384",
        },
        {
          "_id": "am.applications.agents.remote.consent.request.signing.ES512",
          "_rev": "-294942577",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "es512test",
          ],
          "secretId": "am.applications.agents.remote.consent.request.signing.ES512",
        },
        {
          "_id": "am.applications.agents.remote.consent.request.signing.RSA",
          "_rev": "1911324886",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "rsajwtsigningkey",
          ],
          "secretId": "am.applications.agents.remote.consent.request.signing.RSA",
        },
        {
          "_id": "am.authentication.nodes.persistentcookie.encryption",
          "_rev": "-91845293",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "test",
          ],
          "secretId": "am.authentication.nodes.persistentcookie.encryption",
        },
        {
          "_id": "am.authn.authid.signing.HMAC",
          "_rev": "934473037",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "hmacsigningtest",
          ],
          "secretId": "am.authn.authid.signing.HMAC",
        },
        {
          "_id": "am.authn.trees.transientstate.encryption",
          "_rev": "1917709756",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "directenctest",
          ],
          "secretId": "am.authn.trees.transientstate.encryption",
        },
        {
          "_id": "am.default.applications.federation.entity.providers.saml2.idp.encryption",
          "_rev": "1907232131",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "test",
          ],
          "secretId": "am.default.applications.federation.entity.providers.saml2.idp.encryption",
        },
        {
          "_id": "am.default.applications.federation.entity.providers.saml2.idp.signing",
          "_rev": "1976286662",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "rsajwtsigningkey",
          ],
          "secretId": "am.default.applications.federation.entity.providers.saml2.idp.signing",
        },
        {
          "_id": "am.default.applications.federation.entity.providers.saml2.sp.encryption",
          "_rev": "1974801991",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "test",
          ],
          "secretId": "am.default.applications.federation.entity.providers.saml2.sp.encryption",
        },
        {
          "_id": "am.default.applications.federation.entity.providers.saml2.sp.signing",
          "_rev": "-86805022",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "rsajwtsigningkey",
          ],
          "secretId": "am.default.applications.federation.entity.providers.saml2.sp.signing",
        },
        {
          "_id": "am.default.authentication.modules.persistentcookie.encryption",
          "_rev": "-239710853",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "test",
          ],
          "secretId": "am.default.authentication.modules.persistentcookie.encryption",
        },
        {
          "_id": "am.default.authentication.modules.persistentcookie.signing",
          "_rev": "1188815885",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "hmacsigningtest",
          ],
          "secretId": "am.default.authentication.modules.persistentcookie.signing",
        },
        {
          "_id": "am.default.authentication.nodes.persistentcookie.signing",
          "_rev": "986410257",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "hmacsigningtest",
          ],
          "secretId": "am.default.authentication.nodes.persistentcookie.signing",
        },
        {
          "_id": "am.global.services.oauth2.oidc.agent.idtoken.signing",
          "_rev": "-122487018",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "rsajwtsigningkey",
          ],
          "secretId": "am.global.services.oauth2.oidc.agent.idtoken.signing",
        },
        {
          "_id": "am.global.services.saml2.client.storage.jwt.encryption",
          "_rev": "2003184760",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "directenctest",
          ],
          "secretId": "am.global.services.saml2.client.storage.jwt.encryption",
        },
        {
          "_id": "am.global.services.session.clientbased.encryption.AES",
          "_rev": "599325994",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "aestest",
          ],
          "secretId": "am.global.services.session.clientbased.encryption.AES",
        },
        {
          "_id": "am.global.services.session.clientbased.signing.HMAC",
          "_rev": "952853781",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "hmacsigningtest",
          ],
          "secretId": "am.global.services.session.clientbased.signing.HMAC",
        },
        {
          "_id": "am.services.iot.jwt.issuer.signing",
          "_rev": "-1095047595",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "hmacsigningtest",
          ],
          "secretId": "am.services.iot.jwt.issuer.signing",
        },
        {
          "_id": "am.services.oauth2.jwt.authenticity.signing",
          "_rev": "-1210340267",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "hmacsigningtest",
          ],
          "secretId": "am.services.oauth2.jwt.authenticity.signing",
        },
        {
          "_id": "am.services.oauth2.oidc.decryption.RSA.OAEP",
          "_rev": "-75049409",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "test",
          ],
          "secretId": "am.services.oauth2.oidc.decryption.RSA.OAEP",
        },
        {
          "_id": "am.services.oauth2.oidc.decryption.RSA.OAEP.256",
          "_rev": "-108687993",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "test",
          ],
          "secretId": "am.services.oauth2.oidc.decryption.RSA.OAEP.256",
        },
        {
          "_id": "am.services.oauth2.oidc.decryption.RSA1.5",
          "_rev": "2073465911",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "test",
          ],
          "secretId": "am.services.oauth2.oidc.decryption.RSA1.5",
        },
        {
          "_id": "am.services.oauth2.oidc.rp.idtoken.encryption",
          "_rev": "2025247879",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "test",
          ],
          "secretId": "am.services.oauth2.oidc.rp.idtoken.encryption",
        },
        {
          "_id": "am.services.oauth2.oidc.rp.jwt.authenticity.signing",
          "_rev": "-152865330",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "rsajwtsigningkey",
          ],
          "secretId": "am.services.oauth2.oidc.rp.jwt.authenticity.signing",
        },
        {
          "_id": "am.services.oauth2.oidc.signing.ES256",
          "_rev": "1010246364",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "es256test",
          ],
          "secretId": "am.services.oauth2.oidc.signing.ES256",
        },
        {
          "_id": "am.services.oauth2.oidc.signing.ES384",
          "_rev": "105751800",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "es384test",
          ],
          "secretId": "am.services.oauth2.oidc.signing.ES384",
        },
        {
          "_id": "am.services.oauth2.oidc.signing.ES512",
          "_rev": "-477362537",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "es512test",
          ],
          "secretId": "am.services.oauth2.oidc.signing.ES512",
        },
        {
          "_id": "am.services.oauth2.oidc.signing.RSA",
          "_rev": "2112649438",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "rsajwtsigningkey",
          ],
          "secretId": "am.services.oauth2.oidc.signing.RSA",
        },
        {
          "_id": "am.services.oauth2.remote.consent.request.encryption",
          "_rev": "1156224168",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "selfserviceenctest",
          ],
          "secretId": "am.services.oauth2.remote.consent.request.encryption",
        },
        {
          "_id": "am.services.oauth2.remote.consent.response.decryption",
          "_rev": "2022034763",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "test",
          ],
          "secretId": "am.services.oauth2.remote.consent.response.decryption",
        },
        {
          "_id": "am.services.oauth2.remote.consent.response.signing.RSA",
          "_rev": "-219924262",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "rsajwtsigningkey",
          ],
          "secretId": "am.services.oauth2.remote.consent.response.signing.RSA",
        },
        {
          "_id": "am.services.oauth2.stateless.signing.ES256",
          "_rev": "1077337120",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "es256test",
          ],
          "secretId": "am.services.oauth2.stateless.signing.ES256",
        },
        {
          "_id": "am.services.oauth2.stateless.signing.ES384",
          "_rev": "172846524",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "es384test",
          ],
          "secretId": "am.services.oauth2.stateless.signing.ES384",
        },
        {
          "_id": "am.services.oauth2.stateless.signing.ES512",
          "_rev": "-410267929",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "es512test",
          ],
          "secretId": "am.services.oauth2.stateless.signing.ES512",
        },
        {
          "_id": "am.services.oauth2.stateless.signing.HMAC",
          "_rev": "-1093456131",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "hmacsigningtest",
          ],
          "secretId": "am.services.oauth2.stateless.signing.HMAC",
        },
        {
          "_id": "am.services.oauth2.stateless.signing.RSA",
          "_rev": "1960097294",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "rsajwtsigningkey",
          ],
          "secretId": "am.services.oauth2.stateless.signing.RSA",
        },
        {
          "_id": "am.services.oauth2.stateless.token.encryption",
          "_rev": "1900916088",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "directenctest",
          ],
          "secretId": "am.services.oauth2.stateless.token.encryption",
        },
        {
          "_id": "am.services.saml2.metadata.signing.RSA",
          "_rev": "2008235726",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "rsajwtsigningkey",
          ],
          "secretId": "am.services.saml2.metadata.signing.RSA",
        },
        {
          "_id": "am.services.uma.pct.encryption",
          "_rev": "1883661748",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "directenctest",
          ],
          "secretId": "am.services.uma.pct.encryption",
        },
      ],
      "providerName": "SunJCE",
      "storePassword": "storepass",
      "storetype": "JCEKS",
    },
    "default-passwords-store": {
      "_id": "default-passwords-store",
      "_type": {
        "_id": "FileSystemSecretStore",
        "collection": true,
        "name": "File System Secret Volumes",
      },
      "directory": "/home/prestonhales/am/security/secrets/encrypted",
      "format": "ENCRYPTED_PLAIN",
    },
  },
}
`;

exports[`SecretStoreOps Classic Tests readSecretStoreSchema() 0: Read realm secret store schema 1`] = `
{
  "properties": {
    "file": {
      "description": "The keystore file to use",
      "exampleValue": "",
      "propertyOrder": 100,
      "required": true,
      "title": "File",
      "type": "string",
    },
    "keyEntryPassword": {
      "description": "The secret value from which the entry password can be obtained, or none if the password is blank. This secret label will be resolved using one of the other secret stores configured.<br> It must not start or end with the <code>.</code> character. <br>The <code>.</code> character must not be followed by another <code>.</code> character.<br>Must contain <code>a-z</code>, <code>A-Z</code>, <code>0-9</code> and <code>.</code> characters only.",
      "exampleValue": "",
      "propertyOrder": 500,
      "required": false,
      "title": "Entry password secret label",
      "type": "string",
    },
    "leaseExpiryDuration": {
      "default": 5,
      "description": "The amount of minutes a key can be cached from the keystore before it needs to be reloaded.",
      "exampleValue": "",
      "propertyOrder": 600,
      "required": true,
      "title": "Key lease expiry",
      "type": "integer",
    },
    "providerName": {
      "description": "The classname of a provider to use to load the keystore. If blank, the JRE default will be used.",
      "exampleValue": "",
      "propertyOrder": 300,
      "required": false,
      "title": "Provider name",
      "type": "string",
    },
    "storePassword": {
      "description": "The secret label from which the store password can be obtained, or none if the password is blank. This secret label will be resolved using one of the other secret stores configured.<br> It must not start or end with the <code>.</code> character <br>The <code>.</code> character must not be followed by another <code>.</code> character.<br>Must contain <code>a-z</code>, <code>A-Z</code>, <code>0-9</code> and <code>.</code> characters only.",
      "exampleValue": "",
      "propertyOrder": 400,
      "required": false,
      "title": "Store password secret label",
      "type": "string",
    },
    "storetype": {
      "default": "JCEKS",
      "description": "The type of the keystore (JKS, JCEKS, PKCS11, PKCS12, others). This must be a keystore type known or configured on the JRE.",
      "exampleValue": "",
      "propertyOrder": 200,
      "required": true,
      "title": "Keystore type",
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`SecretStoreOps Classic Tests readSecretStoreSchema() 1: Read global secret store schema 1`] = `
{
  "properties": {
    "format": {
      "default": "BASE64",
      "description": "Indicates what format is used to store the secrets in the files. The available options are: <ul> <li>Plain text: the secrets are stored as UTF-8 encoded text.</li> <li>Base64 encoded: the secrets are stored as Base64 encoded binary values.</li> <li>Encrypted text: the plain text secrets are encrypted using AM's encryption key.</li> <li>Encrypted Base64 encoded: the Base64 encoded binary values are encrypted using AM's encryption key.</li>  <li>Encrypted with Google KMS: the secrets are encrypted using Google's Key Management Service.</li> <li>PEM encoded certificate or key: the secrets are certificates, keys, or passwords, in Privacy Enhanced Mail (PEM) format, such as those produced by OpenSSL and other common tools.</li> <li>Encrypted PEM: PEM-encoded objects that are encrypted with AM's server key.</li><li>Google KMS-encrypted PEM: PEM-encoded objects that are encrypted with Google KMS.</li></ul><p>The following formats are also supported but are discouraged (use the PEM variants instead): <ul><li>Encrypted HMAC key: the Base64 encoded binary representation of the HMAC key is encrypted using AM's encryption key. Use this format when working with non generic secrets.</li> <li>Base64 encoded HMAC key: the secrets are binary HMAC keys encoded with Base64.</li> <li>Google KMS-encrypted HMAC key: the secrets are binary HMAC keys that have been encrypted with Google's Key Management Service (KMS).</li> </ul>",
      "enum": [
        "PLAIN",
        "BASE64",
        "ENCRYPTED_PLAIN",
        "ENCRYPTED_BASE64",
        "ENCRYPTED_HMAC_KEY",
        "BASE64_HMAC_KEY",
        "GOOGLE_KMS_ENCRYPTED",
        "GOOGLE_KMS_ENCRYPTED_HMAC_KEY",
        "PEM",
        "ENCRYPTED_PEM",
        "GOOGLE_KMS_ENCRYPTED_PEM",
        "JWK",
      ],
      "enumNames": [
        "Plain text",
        "Base64 encoded",
        "Encrypted text",
        "Encrypted Base64 encoded",
        "Encrypted HMAC key (deprecated)",
        "Base64 encoded HMAC key (deprecated)",
        "Encrypted with Google KMS",
        "Google KMS-encrypted HMAC key (deprecated)",
        "PEM encoded certificate, key, or password",
        "Encrypted PEM",
        "Google KMS-encrypted PEM",
        "JWK",
      ],
      "exampleValue": "",
      "options": {
        "enum_titles": [
          "Plain text",
          "Base64 encoded",
          "Encrypted text",
          "Encrypted Base64 encoded",
          "Encrypted HMAC key (deprecated)",
          "Base64 encoded HMAC key (deprecated)",
          "Encrypted with Google KMS",
          "Google KMS-encrypted HMAC key (deprecated)",
          "PEM encoded certificate, key, or password",
          "Encrypted PEM",
          "Google KMS-encrypted PEM",
          "JWK",
        ],
      },
      "propertyOrder": 100,
      "required": true,
      "title": "Value format",
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`SecretStoreOps Classic Tests readSecretStores() 0: Read realm SecretStores 1`] = `[]`;

exports[`SecretStoreOps Classic Tests readSecretStores() 1: Read global SecretStores 1`] = `
[
  {
    "_id": "default-keystore",
    "_type": {
      "_id": "KeyStoreSecretStore",
      "collection": true,
      "name": "Keystore",
    },
    "file": "/home/prestonhales/am/security/keystores/keystore.jceks",
    "keyEntryPassword": "entrypass",
    "leaseExpiryDuration": 5,
    "providerName": "SunJCE",
    "storePassword": "storepass",
    "storetype": "JCEKS",
  },
  {
    "_id": "default-passwords-store",
    "_type": {
      "_id": "FileSystemSecretStore",
      "collection": true,
      "name": "File System Secret Volumes",
    },
    "directory": "/home/prestonhales/am/security/secrets/encrypted",
    "format": "ENCRYPTED_PLAIN",
  },
  {
    "_id": "EnvironmentAndSystemPropertySecretStore",
    "_type": {
      "_id": "EnvironmentAndSystemPropertySecretStore",
      "collection": false,
      "name": "Environment and System Property Secrets Store",
    },
    "format": "BASE64",
  },
]
`;

exports[`SecretStoreOps Cloud Tests exportSecretStore() 1: Export ESV secret store 1`] = `
{
  "meta": Any<Object>,
  "secretstore": {
    "ESV": {
      "_id": "ESV",
      "_rev": "325689269",
      "_type": {
        "_id": "GoogleSecretManagerSecretStoreProvider",
        "collection": true,
        "name": "Google Secret Manager",
      },
      "expiryDurationSeconds": 600,
      "mappings": [
        {
          "_id": "am.services.httpclient.mtls.clientcert.testClientCert.secret",
          "_rev": "243715290",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "esv-test-client-cert",
          ],
          "secretId": "am.services.httpclient.mtls.clientcert.testClientCert.secret",
        },
      ],
      "project": "&{google.project.id}",
      "secretFormat": "PEM",
      "serviceAccount": "default",
    },
  },
}
`;

exports[`SecretStoreOps Cloud Tests exportSecretStores() 1: Export realm SecretStores 1`] = `
{
  "meta": Any<Object>,
  "secretstore": {
    "ESV": {
      "_id": "ESV",
      "_rev": "325689269",
      "_type": {
        "_id": "GoogleSecretManagerSecretStoreProvider",
        "collection": true,
        "name": "Google Secret Manager",
      },
      "expiryDurationSeconds": 600,
      "mappings": [
        {
          "_id": "am.services.httpclient.mtls.clientcert.testClientCert.secret",
          "_rev": "243715290",
          "_type": {
            "_id": "mappings",
            "collection": true,
            "name": "Mappings",
          },
          "aliases": [
            "esv-test-client-cert",
          ],
          "secretId": "am.services.httpclient.mtls.clientcert.testClientCert.secret",
        },
      ],
      "project": "&{google.project.id}",
      "secretFormat": "PEM",
      "serviceAccount": "default",
    },
  },
}
`;

exports[`SecretStoreOps Cloud Tests readSecretStore() 1: Read ESV secret store 1`] = `
{
  "_id": "ESV",
  "_rev": "325689269",
  "_type": {
    "_id": "GoogleSecretManagerSecretStoreProvider",
    "collection": true,
    "name": "Google Secret Manager",
  },
  "expiryDurationSeconds": 600,
  "project": "&{google.project.id}",
  "secretFormat": "PEM",
  "serviceAccount": "default",
}
`;

exports[`SecretStoreOps Cloud Tests readSecretStoreMapping() 1: Read ESV secret store mapping 1`] = `
{
  "_id": "am.services.httpclient.mtls.clientcert.testClientCert.secret",
  "_rev": "243715290",
  "_type": {
    "_id": "mappings",
    "collection": true,
    "name": "Mappings",
  },
  "aliases": [
    "esv-test-client-cert",
  ],
  "secretId": "am.services.httpclient.mtls.clientcert.testClientCert.secret",
}
`;

exports[`SecretStoreOps Cloud Tests readSecretStoreMappings() 1: Read ESV secret store mappings 1`] = `
[
  {
    "_id": "am.services.httpclient.mtls.clientcert.testClientCert.secret",
    "_rev": "243715290",
    "_type": {
      "_id": "mappings",
      "collection": true,
      "name": "Mappings",
    },
    "aliases": [
      "esv-test-client-cert",
    ],
    "secretId": "am.services.httpclient.mtls.clientcert.testClientCert.secret",
  },
]
`;

exports[`SecretStoreOps Cloud Tests readSecretStoreSchema() 1: Read ESV secret store schema 1`] = `
{
  "properties": {
    "expiryDurationSeconds": {
      "default": 600,
      "description": "Maximum time that AM should cache secret values before refreshing them from Google SecretManager. A longer duration may be more efficient but may take longer for new secret versions to be picked up. Thistypically only affects operations that use the "active" (latest) version of a secret. Operations that use previousversions of a secret will always query Secret Manager to ensure timely revocation.",
      "exampleValue": "",
      "propertyOrder": 400,
      "required": true,
      "title": "Expiry Time (seconds)",
      "type": "integer",
    },
    "project": {
      "description": "The GCP project that contains the Secret Manager instance to use.",
      "exampleValue": "",
      "propertyOrder": 100,
      "required": true,
      "title": "Project",
      "type": "string",
    },
    "secretFormat": {
      "default": "PLAIN",
      "description": "Indicates what format is used to store the secrets in the files. The available options are: <ul> <li>Plain text: the secrets are stored as UTF-8 encoded text.</li> <li>Base64 encoded: the secrets are stored as Base64 encoded binary values.</li> <li>Encrypted text: the plain text secrets are encrypted using AM's encryption key.</li> <li>Encrypted Base64 encoded: the Base64 encoded binary values are encrypted using AM's encryption key.</li>  <li>Encrypted with Google KMS: the secrets are encrypted using Google's Key Management Service.</li> <li>PEM encoded certificate or key: the secrets are certificates, keys, or passwords, in Privacy Enhanced Mail (PEM) format, such as those produced by OpenSSL and other common tools.</li> <li>Encrypted PEM: PEM-encoded objects that are encrypted with AM's server key.</li><li>Google KMS-encrypted PEM: PEM-encoded objects that are encrypted with Google KMS.</li></ul><p>The following formats are also supported but are discouraged (use the PEM variants instead): <ul><li>Encrypted HMAC key: the Base64 encoded binary representation of the HMAC key is encrypted using AM's encryption key. Use this format when working with non generic secrets.</li> <li>Base64 encoded HMAC key: the secrets are binary HMAC keys encoded with Base64.</li> <li>Google KMS-encrypted HMAC key: the secrets are binary HMAC keys that have been encrypted with Google's Key Management Service (KMS).</li> </ul>",
      "enum": [
        "PLAIN",
        "BASE64",
        "ENCRYPTED_PLAIN",
        "ENCRYPTED_BASE64",
        "ENCRYPTED_HMAC_KEY",
        "BASE64_HMAC_KEY",
        "GOOGLE_KMS_ENCRYPTED",
        "GOOGLE_KMS_ENCRYPTED_HMAC_KEY",
        "PEM",
        "ENCRYPTED_PEM",
        "GOOGLE_KMS_ENCRYPTED_PEM",
        "JWK",
      ],
      "enumNames": [
        "Plain text",
        "Base64 encoded",
        "Encrypted text",
        "Encrypted Base64-encoded",
        "Encrypted HMAC key",
        "Base64-encoded HMAC key",
        "Encrypted with Google KMS",
        "Google KMS-encrypted HMAC key",
        "PEM encoded certificate, key, or password",
        "Encrypted PEM",
        "Google KMS-encrypted PEM",
        "JWK",
      ],
      "exampleValue": "",
      "options": {
        "enum_titles": [
          "Plain text",
          "Base64 encoded",
          "Encrypted text",
          "Encrypted Base64-encoded",
          "Encrypted HMAC key",
          "Base64-encoded HMAC key",
          "Encrypted with Google KMS",
          "Google KMS-encrypted HMAC key",
          "PEM encoded certificate, key, or password",
          "Encrypted PEM",
          "Google KMS-encrypted PEM",
          "JWK",
        ],
      },
      "propertyOrder": 300,
      "required": true,
      "title": "Secret Format",
      "type": "string",
    },
    "serviceAccount": {
      "default": "default",
      "description": "The ID of the GCP service account to use when connecting to Secret Manager.<br><br>GCP service accounts can be configured in the global Google Service Account service. The service account must be enabled for this realm otherwise the secret store will fail to load.",
      "exampleValue": "",
      "propertyOrder": 200,
      "required": true,
      "title": "GCP Service Account ID",
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`SecretStoreOps Cloud Tests readSecretStores() 1: Read realm SecretStores 1`] = `
[
  {
    "_id": "ESV",
    "_rev": "325689269",
    "_type": {
      "_id": "GoogleSecretManagerSecretStoreProvider",
      "collection": true,
      "name": "Google Secret Manager",
    },
    "expiryDurationSeconds": 600,
    "project": "&{google.project.id}",
    "secretFormat": "PEM",
    "serviceAccount": "default",
  },
]
`;

exports[`SecretStoreOps createSecretStoreExportTemplate() 1: Create SecretStore Export Template 1`] = `
{
  "meta": Any<Object>,
  "secretstore": {},
}
`;
