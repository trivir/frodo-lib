// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PolicyOps deletePolicy() 1: Delete existing policy [FrodoTestPolicy7] 1`] = `
{
  "_id": "FrodoTestPolicy7",
  "_rev": "0",
}
`;

exports[`PolicyOps deletePolicy() 2: Delete non-existing policy [DoesNotExist] 1`] = `
{
  "code": 404,
  "message": "Policy DoesNotExist does not exist.",
  "reason": "Not Found",
}
`;

exports[`PolicyOps exportPolicies() 1: Export all policies w/o deps 1`] = `
{
  "meta": Any<Object>,
  "policy": {
    "Allow Everything": {
      "_id": "Allow Everything",
      "_rev": "1684694915794",
      "actionValues": {
        "GET": true,
      },
      "active": false,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.335Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:35.794Z",
      "name": "Allow Everything",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/*",
        "*://*:*/*?*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "App2": {
      "_id": "App2",
      "_rev": "1684694915876",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.400Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:35.876Z",
      "name": "App2",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "App3": {
      "_id": "App3",
      "_rev": "1684694915955",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.461Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:35.955Z",
      "name": "App3",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app3/*",
        "*://*:*/app3/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "Bi": {
      "_id": "Bi",
      "_rev": "1684694916200",
      "actionValues": {
        "DELETE": true,
        "GET": true,
        "HEAD": true,
        "OPTIONS": true,
        "PATCH": true,
        "POST": true,
        "PUT": true,
      },
      "active": true,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.654Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:36.200Z",
      "name": "Bi",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://10.1.4.18:*/*",
        "*://bi.scheuber.io:*/*",
        "*://bi.scheuber.io:*/*?*",
        "*://10.1.4.18:*/*?*",
      ],
      "subject": {
        "subjects": [
          {
            "type": "AuthenticatedUsers",
          },
          {
            "subjectValues": [
              "id=BusinessApps,ou=group,o=alpha,ou=services,ou=am-config",
            ],
            "type": "Identity",
          },
        ],
        "type": "AND",
      },
    },
    "FrodoTestPolicy1": {
      "_id": "FrodoTestPolicy1",
      "_rev": "1684702168885",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:28.885Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:28.885Z",
      "name": "FrodoTestPolicy1",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy3": {
      "_id": "FrodoTestPolicy3",
      "_rev": "1684702170512",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:30.512Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:30.512Z",
      "name": "FrodoTestPolicy3",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy4": {
      "_id": "FrodoTestPolicy4",
      "_rev": "1684702170596",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.66Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:30.596Z",
      "name": "FrodoTestPolicy4",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy5": {
      "_id": "FrodoTestPolicy5",
      "_rev": "1684702169188",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.188Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.188Z",
      "name": "FrodoTestPolicy5",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy7": {
      "_id": "FrodoTestPolicy7",
      "_rev": "1684702169360",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.360Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.360Z",
      "name": "FrodoTestPolicy7",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy9": {
      "_id": "FrodoTestPolicy9",
      "_rev": "1684702169488",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.488Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.488Z",
      "name": "FrodoTestPolicy9",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "Grafana": {
      "_id": "Grafana",
      "_rev": "1684694916292",
      "actionValues": {
        "DELETE": true,
        "GET": true,
        "HEAD": true,
        "OPTIONS": true,
        "PATCH": true,
        "POST": true,
        "PUT": true,
      },
      "active": true,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.720Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:36.292Z",
      "name": "Grafana",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://ig.mytestrun.com:*/grafana",
        "*://ig.mytestrun.com:*/grafana/*?*",
        "*://10.1.4.18:3000/*",
        "*://ig.mytestrun.com:*/grafana/*",
        "*://ig.mytestrun.com:*/grafana?*",
        "*://10.1.4.18:3000/*?*",
      ],
      "subject": {
        "subjects": [
          {
            "type": "AuthenticatedUsers",
          },
          {
            "subjectValues": [
              "id=BusinessApps,ou=group,o=alpha,ou=services,ou=am-config",
            ],
            "type": "Identity",
          },
        ],
        "type": "AND",
      },
    },
    "Pay - Transactional AuthZ": {
      "_id": "Pay - Transactional AuthZ",
      "_rev": "1684694916035",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "condition": {
        "authenticationStrategy": "AuthenticateToTreeConditionAdvice",
        "strategySpecifier": "TxAuthZ",
        "type": "Transaction",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.523Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:36.35Z",
      "name": "Pay - Transactional AuthZ",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/pay/*",
        "*://*:*/forgerock/pay/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "Tomcat - Transactional Auth": {
      "_id": "Tomcat - Transactional Auth",
      "_rev": "1684694915707",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "condition": {
        "authenticationStrategy": "AuthenticateToTreeConditionAdvice",
        "strategySpecifier": "TxAuthZ",
        "type": "Transaction",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.266Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:35.707Z",
      "name": "Tomcat - Transactional Auth",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/sample/hello.jsp",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "Zero Trust": {
      "_id": "Zero Trust",
      "_rev": "1684694916118",
      "actionValues": {
        "GET": true,
      },
      "active": false,
      "applicationName": "newApps",
      "condition": {
        "conditions": [
          {
            "maxSessionTime": 60,
            "terminateSession": false,
            "type": "Session",
          },
          {
            "authenticationStrategy": "AuthenticateToTreeConditionAdvice",
            "strategySpecifier": "ZeroTrust",
            "type": "Transaction",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.590Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:36.118Z",
      "name": "Zero Trust",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/*",
        "*://*:*/*?*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "pol1": {
      "_id": "pol1",
      "_rev": "1684700691679",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:24:51.679Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:24:51.679Z",
      "name": "pol1",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
  },
  "policyset": {},
  "resourcetype": {},
  "script": {},
}
`;

exports[`PolicyOps exportPolicies() 2: Export all policies w/ deps 1`] = `
{
  "meta": Any<Object>,
  "policy": {
    "Allow Everything": {
      "_id": "Allow Everything",
      "_rev": "1684694915794",
      "actionValues": {
        "GET": true,
      },
      "active": false,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.335Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:35.794Z",
      "name": "Allow Everything",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/*",
        "*://*:*/*?*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "App2": {
      "_id": "App2",
      "_rev": "1684694915876",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.400Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:35.876Z",
      "name": "App2",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "App3": {
      "_id": "App3",
      "_rev": "1684694915955",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.461Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:35.955Z",
      "name": "App3",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app3/*",
        "*://*:*/app3/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "Bi": {
      "_id": "Bi",
      "_rev": "1684694916200",
      "actionValues": {
        "DELETE": true,
        "GET": true,
        "HEAD": true,
        "OPTIONS": true,
        "PATCH": true,
        "POST": true,
        "PUT": true,
      },
      "active": true,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.654Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:36.200Z",
      "name": "Bi",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://10.1.4.18:*/*",
        "*://bi.scheuber.io:*/*",
        "*://bi.scheuber.io:*/*?*",
        "*://10.1.4.18:*/*?*",
      ],
      "subject": {
        "subjects": [
          {
            "type": "AuthenticatedUsers",
          },
          {
            "subjectValues": [
              "id=BusinessApps,ou=group,o=alpha,ou=services,ou=am-config",
            ],
            "type": "Identity",
          },
        ],
        "type": "AND",
      },
    },
    "FrodoTestPolicy1": {
      "_id": "FrodoTestPolicy1",
      "_rev": "1684702168885",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:28.885Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:28.885Z",
      "name": "FrodoTestPolicy1",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy3": {
      "_id": "FrodoTestPolicy3",
      "_rev": "1684702170512",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:30.512Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:30.512Z",
      "name": "FrodoTestPolicy3",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy4": {
      "_id": "FrodoTestPolicy4",
      "_rev": "1684702170596",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.66Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:30.596Z",
      "name": "FrodoTestPolicy4",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy5": {
      "_id": "FrodoTestPolicy5",
      "_rev": "1684702169188",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.188Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.188Z",
      "name": "FrodoTestPolicy5",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy7": {
      "_id": "FrodoTestPolicy7",
      "_rev": "1684702169360",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.360Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.360Z",
      "name": "FrodoTestPolicy7",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy9": {
      "_id": "FrodoTestPolicy9",
      "_rev": "1684702169488",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.488Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.488Z",
      "name": "FrodoTestPolicy9",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "Grafana": {
      "_id": "Grafana",
      "_rev": "1684694916292",
      "actionValues": {
        "DELETE": true,
        "GET": true,
        "HEAD": true,
        "OPTIONS": true,
        "PATCH": true,
        "POST": true,
        "PUT": true,
      },
      "active": true,
      "applicationName": "newApps",
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.720Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:36.292Z",
      "name": "Grafana",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://ig.mytestrun.com:*/grafana",
        "*://ig.mytestrun.com:*/grafana/*?*",
        "*://10.1.4.18:3000/*",
        "*://ig.mytestrun.com:*/grafana/*",
        "*://ig.mytestrun.com:*/grafana?*",
        "*://10.1.4.18:3000/*?*",
      ],
      "subject": {
        "subjects": [
          {
            "type": "AuthenticatedUsers",
          },
          {
            "subjectValues": [
              "id=BusinessApps,ou=group,o=alpha,ou=services,ou=am-config",
            ],
            "type": "Identity",
          },
        ],
        "type": "AND",
      },
    },
    "Pay - Transactional AuthZ": {
      "_id": "Pay - Transactional AuthZ",
      "_rev": "1684694916035",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "condition": {
        "authenticationStrategy": "AuthenticateToTreeConditionAdvice",
        "strategySpecifier": "TxAuthZ",
        "type": "Transaction",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.523Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:36.35Z",
      "name": "Pay - Transactional AuthZ",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/pay/*",
        "*://*:*/forgerock/pay/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "Tomcat - Transactional Auth": {
      "_id": "Tomcat - Transactional Auth",
      "_rev": "1684694915707",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "condition": {
        "authenticationStrategy": "AuthenticateToTreeConditionAdvice",
        "strategySpecifier": "TxAuthZ",
        "type": "Transaction",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.266Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:35.707Z",
      "name": "Tomcat - Transactional Auth",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/sample/hello.jsp",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "Zero Trust": {
      "_id": "Zero Trust",
      "_rev": "1684694916118",
      "actionValues": {
        "GET": true,
      },
      "active": false,
      "applicationName": "newApps",
      "condition": {
        "conditions": [
          {
            "maxSessionTime": 60,
            "terminateSession": false,
            "type": "Session",
          },
          {
            "authenticationStrategy": "AuthenticateToTreeConditionAdvice",
            "strategySpecifier": "ZeroTrust",
            "type": "Transaction",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T18:38:13.590Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T18:48:36.118Z",
      "name": "Zero Trust",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/*",
        "*://*:*/*?*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "pol1": {
      "_id": "pol1",
      "_rev": "1684700691679",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "newApps",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:24:51.679Z",
      "description": "",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:24:51.679Z",
      "name": "pol1",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
  },
  "policyset": {},
  "resourcetype": {},
  "script": {
    "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a": {
      "_id": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
      "context": "POLICY_CONDITION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Policy Sample Script",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Policy",
      "script": [
        "/*",
        " * Copyright 2015-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/**",
        " * This is a Policy Condition example script. It demonstrates how to access a user's information,",
        " * use that information in external HTTP calls and make a policy decision based on the outcome.",
        " */",
        "",
        "var userAddress, userIP, resourceHost;",
        "",
        "if (validateAndInitializeParameters()) {",
        "",
        "    var countryFromUserAddress = getCountryFromUserAddress();",
        "    logger.message("Country retrieved from user's address: " + countryFromUserAddress);",
        "    var countryFromUserIP = getCountryFromUserIP();",
        "    logger.message("Country retrieved from user's IP: " + countryFromUserIP);",
        "    var countryFromResourceURI = getCountryFromResourceURI();",
        "    logger.message("Country retrieved from resource URI: " + countryFromResourceURI);",
        "",
        "    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {",
        "        logger.message("Authorization Succeeded");",
        "        responseAttributes.put("countryOfOrigin", [countryFromUserAddress]);",
        "        authorized = true;",
        "    } else {",
        "        logger.message("Authorization Failed");",
        "        authorized = false;",
        "    }",
        "",
        "} else {",
        "    logger.message("Required parameters not found. Authorization Failed.");",
        "    authorized = false;",
        "}",
        "",
        "/**",
        " * Use the user's address to lookup their country of residence.",
        " *",
        " * @returns {*} The user's country of residence.",
        " */",
        "function getCountryFromUserAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userAddress));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        var j;",
        "        for (j = 0; j < result.address_components.length; i++) {",
        "            if (result.address_components[i].types[0] == "country") {",
        "                return result.address_components[i].long_name;",
        "            }",
        "        }",
        "    }",
        "}",
        "",
        "/**",
        " * Use the user's IP to lookup the country from which the request originated.",
        " *",
        " * @returns {*} The country from which the request originated.",
        " */",
        "function getCountryFromUserIP() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + userIP);",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Use the requested resource's host name to lookup the country where the resource is hosted.",
        " *",
        " * @returns {*} The country in which the resource is hosted.",
        " */",
        "function getCountryFromResourceURI() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + encodeURIComponent(resourceHost));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Retrieve and validate the variables required to make the external HTTP calls.",
        " *",
        " * @returns {boolean} Will be true if validation was successful.",
        " */",
        "function validateAndInitializeParameters() {",
        "    var userAddressSet = identity.getAttribute("postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    userAddress = userAddressSet.iterator().next();",
        "    logger.message("User address: " + userAddress);",
        "",
        "    if (!environment) {",
        "        logger.warning("No environment parameters specified in the evaluation request.");",
        "        return false;",
        "    }",
        "",
        "    var ipSet = environment.get("IP");",
        "    if (ipSet == null || ipSet.isEmpty()) {",
        "        logger.warning("No IP specified in the evaluation request environment parameters.");",
        "        return false;",
        "    }",
        "    userIP = ipSet.iterator().next();",
        "    logger.message("User IP: " + userIP);",
        "",
        "    if (!resourceURI) {",
        "        logger.warning("No resource URI specified.");",
        "        return false;",
        "    }",
        "    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];",
        "    logger.message("Resource host: " + resourceHost);",
        "",
        "    return true;",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
      ],
    },
    "729ee140-a4e9-43af-b358-d60eeda13cc3": {
      "_id": "729ee140-a4e9-43af-b358-d60eeda13cc3",
      "context": "POLICY_CONDITION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Scripted Sample Policy 2",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Policy 2",
      "script": [
        "/*",
        " * Copyright 2015-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/**",
        " * This is a Policy Condition example script. It demonstrates how to access a user's information,",
        " * use that information in external HTTP calls and make a policy decision based on the outcome.",
        " */",
        "",
        "var userAddress, userIP, resourceHost;",
        "",
        "if (validateAndInitializeParameters()) {",
        "",
        "    var countryFromUserAddress = getCountryFromUserAddress();",
        "    logger.message("Country retrieved from user's address: " + countryFromUserAddress);",
        "    var countryFromUserIP = getCountryFromUserIP();",
        "    logger.message("Country retrieved from user's IP: " + countryFromUserIP);",
        "    var countryFromResourceURI = getCountryFromResourceURI();",
        "    logger.message("Country retrieved from resource URI: " + countryFromResourceURI);",
        "",
        "    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {",
        "        logger.message("Authorization Succeeded");",
        "        responseAttributes.put("countryOfOrigin", [countryFromUserAddress]);",
        "        authorized = true;",
        "    } else {",
        "        logger.message("Authorization Failed");",
        "        authorized = false;",
        "    }",
        "",
        "} else {",
        "    logger.message("Required parameters not found. Authorization Failed.");",
        "    authorized = false;",
        "}",
        "",
        "/**",
        " * Use the user's address to lookup their country of residence.",
        " *",
        " * @returns {*} The user's country of residence.",
        " */",
        "function getCountryFromUserAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userAddress));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        var j;",
        "        for (j = 0; j < result.address_components.length; i++) {",
        "            if (result.address_components[i].types[0] == "country") {",
        "                return result.address_components[i].long_name;",
        "            }",
        "        }",
        "    }",
        "}",
        "",
        "/**",
        " * Use the user's IP to lookup the country from which the request originated.",
        " *",
        " * @returns {*} The country from which the request originated.",
        " */",
        "function getCountryFromUserIP() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + userIP);",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Use the requested resource's host name to lookup the country where the resource is hosted.",
        " *",
        " * @returns {*} The country in which the resource is hosted.",
        " */",
        "function getCountryFromResourceURI() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + encodeURIComponent(resourceHost));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Retrieve and validate the variables required to make the external HTTP calls.",
        " *",
        " * @returns {boolean} Will be true if validation was successful.",
        " */",
        "function validateAndInitializeParameters() {",
        "    var userAddressSet = identity.getAttribute("postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    userAddress = userAddressSet.iterator().next();",
        "    logger.message("User address: " + userAddress);",
        "",
        "    if (!environment) {",
        "        logger.warning("No environment parameters specified in the evaluation request.");",
        "        return false;",
        "    }",
        "",
        "    var ipSet = environment.get("IP");",
        "    if (ipSet == null || ipSet.isEmpty()) {",
        "        logger.warning("No IP specified in the evaluation request environment parameters.");",
        "        return false;",
        "    }",
        "    userIP = ipSet.iterator().next();",
        "    logger.message("User IP: " + userIP);",
        "",
        "    if (!resourceURI) {",
        "        logger.warning("No resource URI specified.");",
        "        return false;",
        "    }",
        "    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];",
        "    logger.message("Resource host: " + resourceHost);",
        "",
        "    return true;",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
      ],
    },
  },
}
`;

exports[`PolicyOps exportPoliciesByPolicySet() 1: Export all policies in policy set FrodoTestPolicySet1 w/o deps 1`] = `
{
  "meta": Any<Object>,
  "policy": {
    "FrodoTestPolicy1": {
      "_id": "FrodoTestPolicy1",
      "_rev": "1684702168885",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:28.885Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:28.885Z",
      "name": "FrodoTestPolicy1",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy3": {
      "_id": "FrodoTestPolicy3",
      "_rev": "1684702170512",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:30.512Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:30.512Z",
      "name": "FrodoTestPolicy3",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy4": {
      "_id": "FrodoTestPolicy4",
      "_rev": "1684702170596",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.66Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:30.596Z",
      "name": "FrodoTestPolicy4",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy5": {
      "_id": "FrodoTestPolicy5",
      "_rev": "1684702169188",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.188Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.188Z",
      "name": "FrodoTestPolicy5",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy7": {
      "_id": "FrodoTestPolicy7",
      "_rev": "1684702169360",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.360Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.360Z",
      "name": "FrodoTestPolicy7",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy9": {
      "_id": "FrodoTestPolicy9",
      "_rev": "1684702169488",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.488Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.488Z",
      "name": "FrodoTestPolicy9",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
  },
  "policyset": {},
  "resourcetype": {},
  "script": {},
}
`;

exports[`PolicyOps exportPoliciesByPolicySet() 2: Export all policies in policy set FrodoTestPolicySet1 w/ deps 1`] = `
{
  "meta": Any<Object>,
  "policy": {
    "FrodoTestPolicy1": {
      "_id": "FrodoTestPolicy1",
      "_rev": "1684702168885",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:28.885Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:28.885Z",
      "name": "FrodoTestPolicy1",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy3": {
      "_id": "FrodoTestPolicy3",
      "_rev": "1684702170512",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:30.512Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:30.512Z",
      "name": "FrodoTestPolicy3",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy4": {
      "_id": "FrodoTestPolicy4",
      "_rev": "1684702170596",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.66Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:30.596Z",
      "name": "FrodoTestPolicy4",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy5": {
      "_id": "FrodoTestPolicy5",
      "_rev": "1684702169188",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.188Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.188Z",
      "name": "FrodoTestPolicy5",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy7": {
      "_id": "FrodoTestPolicy7",
      "_rev": "1684702169360",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.360Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.360Z",
      "name": "FrodoTestPolicy7",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
    "FrodoTestPolicy9": {
      "_id": "FrodoTestPolicy9",
      "_rev": "1684702169488",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.488Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.488Z",
      "name": "FrodoTestPolicy9",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
  },
  "policyset": {},
  "resourcetype": {},
  "script": {
    "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a": {
      "_id": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
      "context": "POLICY_CONDITION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Policy Sample Script",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Policy",
      "script": [
        "/*",
        " * Copyright 2015-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/**",
        " * This is a Policy Condition example script. It demonstrates how to access a user's information,",
        " * use that information in external HTTP calls and make a policy decision based on the outcome.",
        " */",
        "",
        "var userAddress, userIP, resourceHost;",
        "",
        "if (validateAndInitializeParameters()) {",
        "",
        "    var countryFromUserAddress = getCountryFromUserAddress();",
        "    logger.message("Country retrieved from user's address: " + countryFromUserAddress);",
        "    var countryFromUserIP = getCountryFromUserIP();",
        "    logger.message("Country retrieved from user's IP: " + countryFromUserIP);",
        "    var countryFromResourceURI = getCountryFromResourceURI();",
        "    logger.message("Country retrieved from resource URI: " + countryFromResourceURI);",
        "",
        "    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {",
        "        logger.message("Authorization Succeeded");",
        "        responseAttributes.put("countryOfOrigin", [countryFromUserAddress]);",
        "        authorized = true;",
        "    } else {",
        "        logger.message("Authorization Failed");",
        "        authorized = false;",
        "    }",
        "",
        "} else {",
        "    logger.message("Required parameters not found. Authorization Failed.");",
        "    authorized = false;",
        "}",
        "",
        "/**",
        " * Use the user's address to lookup their country of residence.",
        " *",
        " * @returns {*} The user's country of residence.",
        " */",
        "function getCountryFromUserAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userAddress));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        var j;",
        "        for (j = 0; j < result.address_components.length; i++) {",
        "            if (result.address_components[i].types[0] == "country") {",
        "                return result.address_components[i].long_name;",
        "            }",
        "        }",
        "    }",
        "}",
        "",
        "/**",
        " * Use the user's IP to lookup the country from which the request originated.",
        " *",
        " * @returns {*} The country from which the request originated.",
        " */",
        "function getCountryFromUserIP() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + userIP);",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Use the requested resource's host name to lookup the country where the resource is hosted.",
        " *",
        " * @returns {*} The country in which the resource is hosted.",
        " */",
        "function getCountryFromResourceURI() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + encodeURIComponent(resourceHost));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Retrieve and validate the variables required to make the external HTTP calls.",
        " *",
        " * @returns {boolean} Will be true if validation was successful.",
        " */",
        "function validateAndInitializeParameters() {",
        "    var userAddressSet = identity.getAttribute("postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    userAddress = userAddressSet.iterator().next();",
        "    logger.message("User address: " + userAddress);",
        "",
        "    if (!environment) {",
        "        logger.warning("No environment parameters specified in the evaluation request.");",
        "        return false;",
        "    }",
        "",
        "    var ipSet = environment.get("IP");",
        "    if (ipSet == null || ipSet.isEmpty()) {",
        "        logger.warning("No IP specified in the evaluation request environment parameters.");",
        "        return false;",
        "    }",
        "    userIP = ipSet.iterator().next();",
        "    logger.message("User IP: " + userIP);",
        "",
        "    if (!resourceURI) {",
        "        logger.warning("No resource URI specified.");",
        "        return false;",
        "    }",
        "    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];",
        "    logger.message("Resource host: " + resourceHost);",
        "",
        "    return true;",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
      ],
    },
    "729ee140-a4e9-43af-b358-d60eeda13cc3": {
      "_id": "729ee140-a4e9-43af-b358-d60eeda13cc3",
      "context": "POLICY_CONDITION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Scripted Sample Policy 2",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Policy 2",
      "script": [
        "/*",
        " * Copyright 2015-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/**",
        " * This is a Policy Condition example script. It demonstrates how to access a user's information,",
        " * use that information in external HTTP calls and make a policy decision based on the outcome.",
        " */",
        "",
        "var userAddress, userIP, resourceHost;",
        "",
        "if (validateAndInitializeParameters()) {",
        "",
        "    var countryFromUserAddress = getCountryFromUserAddress();",
        "    logger.message("Country retrieved from user's address: " + countryFromUserAddress);",
        "    var countryFromUserIP = getCountryFromUserIP();",
        "    logger.message("Country retrieved from user's IP: " + countryFromUserIP);",
        "    var countryFromResourceURI = getCountryFromResourceURI();",
        "    logger.message("Country retrieved from resource URI: " + countryFromResourceURI);",
        "",
        "    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {",
        "        logger.message("Authorization Succeeded");",
        "        responseAttributes.put("countryOfOrigin", [countryFromUserAddress]);",
        "        authorized = true;",
        "    } else {",
        "        logger.message("Authorization Failed");",
        "        authorized = false;",
        "    }",
        "",
        "} else {",
        "    logger.message("Required parameters not found. Authorization Failed.");",
        "    authorized = false;",
        "}",
        "",
        "/**",
        " * Use the user's address to lookup their country of residence.",
        " *",
        " * @returns {*} The user's country of residence.",
        " */",
        "function getCountryFromUserAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userAddress));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        var j;",
        "        for (j = 0; j < result.address_components.length; i++) {",
        "            if (result.address_components[i].types[0] == "country") {",
        "                return result.address_components[i].long_name;",
        "            }",
        "        }",
        "    }",
        "}",
        "",
        "/**",
        " * Use the user's IP to lookup the country from which the request originated.",
        " *",
        " * @returns {*} The country from which the request originated.",
        " */",
        "function getCountryFromUserIP() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + userIP);",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Use the requested resource's host name to lookup the country where the resource is hosted.",
        " *",
        " * @returns {*} The country in which the resource is hosted.",
        " */",
        "function getCountryFromResourceURI() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + encodeURIComponent(resourceHost));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Retrieve and validate the variables required to make the external HTTP calls.",
        " *",
        " * @returns {boolean} Will be true if validation was successful.",
        " */",
        "function validateAndInitializeParameters() {",
        "    var userAddressSet = identity.getAttribute("postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    userAddress = userAddressSet.iterator().next();",
        "    logger.message("User address: " + userAddress);",
        "",
        "    if (!environment) {",
        "        logger.warning("No environment parameters specified in the evaluation request.");",
        "        return false;",
        "    }",
        "",
        "    var ipSet = environment.get("IP");",
        "    if (ipSet == null || ipSet.isEmpty()) {",
        "        logger.warning("No IP specified in the evaluation request environment parameters.");",
        "        return false;",
        "    }",
        "    userIP = ipSet.iterator().next();",
        "    logger.message("User IP: " + userIP);",
        "",
        "    if (!resourceURI) {",
        "        logger.warning("No resource URI specified.");",
        "        return false;",
        "    }",
        "    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];",
        "    logger.message("Resource host: " + resourceHost);",
        "",
        "    return true;",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
      ],
    },
  },
}
`;

exports[`PolicyOps exportPolicy() 1: Export existing policy w/o deps [FrodoTestPolicy9] 1`] = `
{
  "meta": Any<Object>,
  "policy": {
    "FrodoTestPolicy9": {
      "_id": "FrodoTestPolicy9",
      "_rev": "1684702169488",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.488Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.488Z",
      "name": "FrodoTestPolicy9",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
  },
  "policyset": {},
  "resourcetype": {},
  "script": {},
}
`;

exports[`PolicyOps exportPolicy() 2: Export existing policy w/ deps [FrodoTestPolicy9] 1`] = `
{
  "meta": Any<Object>,
  "policy": {
    "FrodoTestPolicy9": {
      "_id": "FrodoTestPolicy9",
      "_rev": "1684702169488",
      "actionValues": {
        "GET": true,
      },
      "active": true,
      "applicationName": "FrodoTestPolicySet1",
      "condition": {
        "conditions": [
          {
            "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
            "type": "Script",
          },
          {
            "authenticateToService": "TxAuthz",
            "type": "AuthenticateToService",
          },
          {
            "conditions": [
              {
                "maxSessionTime": 5,
                "terminateSession": false,
                "type": "Session",
              },
              {
                "requiredScopes": [
                  "openid",
                ],
                "type": "OAuth2Scope",
              },
              {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              {
                "condition": {
                  "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                  "type": "Script",
                },
                "type": "NOT",
              },
            ],
            "type": "OR",
          },
        ],
        "type": "AND",
      },
      "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "creationDate": "2023-05-21T20:49:29.488Z",
      "description": "Frodo Test Policy",
      "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
      "lastModifiedDate": "2023-05-21T20:49:29.488Z",
      "name": "FrodoTestPolicy9",
      "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
      "resources": [
        "*://*:*/forgerock/app2/*",
        "*://*:*/app2/*",
      ],
      "subject": {
        "type": "AuthenticatedUsers",
      },
    },
  },
  "policyset": {},
  "resourcetype": {},
  "script": {
    "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a": {
      "_id": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
      "context": "POLICY_CONDITION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Policy Sample Script",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Policy",
      "script": [
        "/*",
        " * Copyright 2015-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/**",
        " * This is a Policy Condition example script. It demonstrates how to access a user's information,",
        " * use that information in external HTTP calls and make a policy decision based on the outcome.",
        " */",
        "",
        "var userAddress, userIP, resourceHost;",
        "",
        "if (validateAndInitializeParameters()) {",
        "",
        "    var countryFromUserAddress = getCountryFromUserAddress();",
        "    logger.message("Country retrieved from user's address: " + countryFromUserAddress);",
        "    var countryFromUserIP = getCountryFromUserIP();",
        "    logger.message("Country retrieved from user's IP: " + countryFromUserIP);",
        "    var countryFromResourceURI = getCountryFromResourceURI();",
        "    logger.message("Country retrieved from resource URI: " + countryFromResourceURI);",
        "",
        "    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {",
        "        logger.message("Authorization Succeeded");",
        "        responseAttributes.put("countryOfOrigin", [countryFromUserAddress]);",
        "        authorized = true;",
        "    } else {",
        "        logger.message("Authorization Failed");",
        "        authorized = false;",
        "    }",
        "",
        "} else {",
        "    logger.message("Required parameters not found. Authorization Failed.");",
        "    authorized = false;",
        "}",
        "",
        "/**",
        " * Use the user's address to lookup their country of residence.",
        " *",
        " * @returns {*} The user's country of residence.",
        " */",
        "function getCountryFromUserAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userAddress));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        var j;",
        "        for (j = 0; j < result.address_components.length; i++) {",
        "            if (result.address_components[i].types[0] == "country") {",
        "                return result.address_components[i].long_name;",
        "            }",
        "        }",
        "    }",
        "}",
        "",
        "/**",
        " * Use the user's IP to lookup the country from which the request originated.",
        " *",
        " * @returns {*} The country from which the request originated.",
        " */",
        "function getCountryFromUserIP() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + userIP);",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Use the requested resource's host name to lookup the country where the resource is hosted.",
        " *",
        " * @returns {*} The country in which the resource is hosted.",
        " */",
        "function getCountryFromResourceURI() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + encodeURIComponent(resourceHost));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Retrieve and validate the variables required to make the external HTTP calls.",
        " *",
        " * @returns {boolean} Will be true if validation was successful.",
        " */",
        "function validateAndInitializeParameters() {",
        "    var userAddressSet = identity.getAttribute("postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    userAddress = userAddressSet.iterator().next();",
        "    logger.message("User address: " + userAddress);",
        "",
        "    if (!environment) {",
        "        logger.warning("No environment parameters specified in the evaluation request.");",
        "        return false;",
        "    }",
        "",
        "    var ipSet = environment.get("IP");",
        "    if (ipSet == null || ipSet.isEmpty()) {",
        "        logger.warning("No IP specified in the evaluation request environment parameters.");",
        "        return false;",
        "    }",
        "    userIP = ipSet.iterator().next();",
        "    logger.message("User IP: " + userIP);",
        "",
        "    if (!resourceURI) {",
        "        logger.warning("No resource URI specified.");",
        "        return false;",
        "    }",
        "    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];",
        "    logger.message("Resource host: " + resourceHost);",
        "",
        "    return true;",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
      ],
    },
    "729ee140-a4e9-43af-b358-d60eeda13cc3": {
      "_id": "729ee140-a4e9-43af-b358-d60eeda13cc3",
      "context": "POLICY_CONDITION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Scripted Sample Policy 2",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Policy 2",
      "script": [
        "/*",
        " * Copyright 2015-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/**",
        " * This is a Policy Condition example script. It demonstrates how to access a user's information,",
        " * use that information in external HTTP calls and make a policy decision based on the outcome.",
        " */",
        "",
        "var userAddress, userIP, resourceHost;",
        "",
        "if (validateAndInitializeParameters()) {",
        "",
        "    var countryFromUserAddress = getCountryFromUserAddress();",
        "    logger.message("Country retrieved from user's address: " + countryFromUserAddress);",
        "    var countryFromUserIP = getCountryFromUserIP();",
        "    logger.message("Country retrieved from user's IP: " + countryFromUserIP);",
        "    var countryFromResourceURI = getCountryFromResourceURI();",
        "    logger.message("Country retrieved from resource URI: " + countryFromResourceURI);",
        "",
        "    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {",
        "        logger.message("Authorization Succeeded");",
        "        responseAttributes.put("countryOfOrigin", [countryFromUserAddress]);",
        "        authorized = true;",
        "    } else {",
        "        logger.message("Authorization Failed");",
        "        authorized = false;",
        "    }",
        "",
        "} else {",
        "    logger.message("Required parameters not found. Authorization Failed.");",
        "    authorized = false;",
        "}",
        "",
        "/**",
        " * Use the user's address to lookup their country of residence.",
        " *",
        " * @returns {*} The user's country of residence.",
        " */",
        "function getCountryFromUserAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userAddress));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        var j;",
        "        for (j = 0; j < result.address_components.length; i++) {",
        "            if (result.address_components[i].types[0] == "country") {",
        "                return result.address_components[i].long_name;",
        "            }",
        "        }",
        "    }",
        "}",
        "",
        "/**",
        " * Use the user's IP to lookup the country from which the request originated.",
        " *",
        " * @returns {*} The country from which the request originated.",
        " */",
        "function getCountryFromUserIP() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + userIP);",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Use the requested resource's host name to lookup the country where the resource is hosted.",
        " *",
        " * @returns {*} The country in which the resource is hosted.",
        " */",
        "function getCountryFromResourceURI() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + encodeURIComponent(resourceHost));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Retrieve and validate the variables required to make the external HTTP calls.",
        " *",
        " * @returns {boolean} Will be true if validation was successful.",
        " */",
        "function validateAndInitializeParameters() {",
        "    var userAddressSet = identity.getAttribute("postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    userAddress = userAddressSet.iterator().next();",
        "    logger.message("User address: " + userAddress);",
        "",
        "    if (!environment) {",
        "        logger.warning("No environment parameters specified in the evaluation request.");",
        "        return false;",
        "    }",
        "",
        "    var ipSet = environment.get("IP");",
        "    if (ipSet == null || ipSet.isEmpty()) {",
        "        logger.warning("No IP specified in the evaluation request environment parameters.");",
        "        return false;",
        "    }",
        "    userIP = ipSet.iterator().next();",
        "    logger.message("User IP: " + userIP);",
        "",
        "    if (!resourceURI) {",
        "        logger.warning("No resource URI specified.");",
        "        return false;",
        "    }",
        "    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];",
        "    logger.message("Resource host: " + resourceHost);",
        "",
        "    return true;",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
      ],
    },
  },
}
`;

exports[`PolicyOps exportPolicy() 3: Export non-existing policy [DoesNotExist] 1`] = `"Request failed with status code 404"`;

exports[`PolicyOps findScriptUuids() 1: Find script uuids for policy [FrodoTestPolicy5] 1`] = `
[
  "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
  "729ee140-a4e9-43af-b358-d60eeda13cc3",
]
`;

exports[`PolicyOps getPolicies() 1: Get all policies 1`] = `
[
  {
    "_id": "Tomcat - Transactional Auth",
    "_rev": "1684694915707",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "newApps",
    "condition": {
      "authenticationStrategy": "AuthenticateToTreeConditionAdvice",
      "strategySpecifier": "TxAuthZ",
      "type": "Transaction",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T18:38:13.266Z",
    "description": "",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T18:48:35.707Z",
    "name": "Tomcat - Transactional Auth",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/sample/hello.jsp",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "Allow Everything",
    "_rev": "1684694915794",
    "actionValues": {
      "GET": true,
    },
    "active": false,
    "applicationName": "newApps",
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T18:38:13.335Z",
    "description": "",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T18:48:35.794Z",
    "name": "Allow Everything",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/*",
      "*://*:*/*?*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "App2",
    "_rev": "1684694915876",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "newApps",
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T18:38:13.400Z",
    "description": "",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T18:48:35.876Z",
    "name": "App2",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "App3",
    "_rev": "1684694915955",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "newApps",
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T18:38:13.461Z",
    "description": "",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T18:48:35.955Z",
    "name": "App3",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app3/*",
      "*://*:*/app3/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "Pay - Transactional AuthZ",
    "_rev": "1684694916035",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "newApps",
    "condition": {
      "authenticationStrategy": "AuthenticateToTreeConditionAdvice",
      "strategySpecifier": "TxAuthZ",
      "type": "Transaction",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T18:38:13.523Z",
    "description": "",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T18:48:36.35Z",
    "name": "Pay - Transactional AuthZ",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/pay/*",
      "*://*:*/forgerock/pay/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "Zero Trust",
    "_rev": "1684694916118",
    "actionValues": {
      "GET": true,
    },
    "active": false,
    "applicationName": "newApps",
    "condition": {
      "conditions": [
        {
          "maxSessionTime": 60,
          "terminateSession": false,
          "type": "Session",
        },
        {
          "authenticationStrategy": "AuthenticateToTreeConditionAdvice",
          "strategySpecifier": "ZeroTrust",
          "type": "Transaction",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T18:38:13.590Z",
    "description": "",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T18:48:36.118Z",
    "name": "Zero Trust",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/*",
      "*://*:*/*?*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "Bi",
    "_rev": "1684694916200",
    "actionValues": {
      "DELETE": true,
      "GET": true,
      "HEAD": true,
      "OPTIONS": true,
      "PATCH": true,
      "POST": true,
      "PUT": true,
    },
    "active": true,
    "applicationName": "newApps",
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T18:38:13.654Z",
    "description": "",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T18:48:36.200Z",
    "name": "Bi",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://10.1.4.18:*/*",
      "*://bi.scheuber.io:*/*",
      "*://bi.scheuber.io:*/*?*",
      "*://10.1.4.18:*/*?*",
    ],
    "subject": {
      "subjects": [
        {
          "type": "AuthenticatedUsers",
        },
        {
          "subjectValues": [
            "id=BusinessApps,ou=group,o=alpha,ou=services,ou=am-config",
          ],
          "type": "Identity",
        },
      ],
      "type": "AND",
    },
  },
  {
    "_id": "Grafana",
    "_rev": "1684694916292",
    "actionValues": {
      "DELETE": true,
      "GET": true,
      "HEAD": true,
      "OPTIONS": true,
      "PATCH": true,
      "POST": true,
      "PUT": true,
    },
    "active": true,
    "applicationName": "newApps",
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T18:38:13.720Z",
    "description": "",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T18:48:36.292Z",
    "name": "Grafana",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://ig.mytestrun.com:*/grafana",
      "*://ig.mytestrun.com:*/grafana/*?*",
      "*://10.1.4.18:3000/*",
      "*://ig.mytestrun.com:*/grafana/*",
      "*://ig.mytestrun.com:*/grafana?*",
      "*://10.1.4.18:3000/*?*",
    ],
    "subject": {
      "subjects": [
        {
          "type": "AuthenticatedUsers",
        },
        {
          "subjectValues": [
            "id=BusinessApps,ou=group,o=alpha,ou=services,ou=am-config",
          ],
          "type": "Identity",
        },
      ],
      "type": "AND",
    },
  },
  {
    "_id": "pol1",
    "_rev": "1684700691679",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "newApps",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:24:51.679Z",
    "description": "",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:24:51.679Z",
    "name": "pol1",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "FrodoTestPolicy1",
    "_rev": "1684702168885",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:28.885Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:28.885Z",
    "name": "FrodoTestPolicy1",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "FrodoTestPolicy4",
    "_rev": "1684702169066",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:29.66Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:29.66Z",
    "name": "FrodoTestPolicy4",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "FrodoTestPolicy5",
    "_rev": "1684702169188",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:29.188Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:29.188Z",
    "name": "FrodoTestPolicy5",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "FrodoTestPolicy7",
    "_rev": "1684702169360",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:29.360Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:29.360Z",
    "name": "FrodoTestPolicy7",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "FrodoTestPolicy9",
    "_rev": "1684702169488",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:29.488Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:29.488Z",
    "name": "FrodoTestPolicy9",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
]
`;

exports[`PolicyOps getPoliciesByPolicySet() 1: Get all policies in policy set [FrodoTestPolicySet1] 1`] = `
[
  {
    "_id": "FrodoTestPolicy1",
    "_rev": "1684702168885",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:28.885Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:28.885Z",
    "name": "FrodoTestPolicy1",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "FrodoTestPolicy4",
    "_rev": "1684702169066",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:29.66Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:29.66Z",
    "name": "FrodoTestPolicy4",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "FrodoTestPolicy5",
    "_rev": "1684702169188",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:29.188Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:29.188Z",
    "name": "FrodoTestPolicy5",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "FrodoTestPolicy7",
    "_rev": "1684702169360",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:29.360Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:29.360Z",
    "name": "FrodoTestPolicy7",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "FrodoTestPolicy9",
    "_rev": "1684702169488",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:29.488Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:29.488Z",
    "name": "FrodoTestPolicy9",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
]
`;

exports[`PolicyOps getPolicy() 1: Get existing policy [FrodoTestPolicy1] 1`] = `
{
  "_id": "FrodoTestPolicy1",
  "_rev": "1684702168885",
  "actionValues": {
    "GET": true,
  },
  "active": true,
  "applicationName": "FrodoTestPolicySet1",
  "condition": {
    "conditions": [
      {
        "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
        "type": "Script",
      },
      {
        "authenticateToService": "TxAuthz",
        "type": "AuthenticateToService",
      },
      {
        "conditions": [
          {
            "maxSessionTime": 5,
            "terminateSession": false,
            "type": "Session",
          },
          {
            "requiredScopes": [
              "openid",
            ],
            "type": "OAuth2Scope",
          },
          {
            "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
            "type": "Script",
          },
          {
            "condition": {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            "type": "NOT",
          },
        ],
        "type": "OR",
      },
    ],
    "type": "AND",
  },
  "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "creationDate": "2023-05-21T20:49:28.885Z",
  "description": "Frodo Test Policy",
  "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "lastModifiedDate": "2023-05-21T20:49:28.885Z",
  "name": "FrodoTestPolicy1",
  "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
  "resources": [
    "*://*:*/forgerock/app2/*",
    "*://*:*/app2/*",
  ],
  "subject": {
    "type": "AuthenticatedUsers",
  },
}
`;

exports[`PolicyOps getPolicy() 2: Get non-existing policy [DoesNotExist] 1`] = `
{
  "code": 404,
  "message": "Policy DoesNotExist does not exist.",
  "reason": "Not Found",
}
`;

exports[`PolicyOps getScripts() 1: Find scripts for policy [FrodoTestPolicy6] 1`] = `
[
  {
    "_id": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
    "context": "POLICY_CONDITION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Policy Sample Script",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Scripted Policy",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTUtMjAxNyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCi8qKgogKiBUaGlzIGlzIGEgUG9saWN5IENvbmRpdGlvbiBleGFtcGxlIHNjcmlwdC4gSXQgZGVtb25zdHJhdGVzIGhvdyB0byBhY2Nlc3MgYSB1c2VyJ3MgaW5mb3JtYXRpb24sCiAqIHVzZSB0aGF0IGluZm9ybWF0aW9uIGluIGV4dGVybmFsIEhUVFAgY2FsbHMgYW5kIG1ha2UgYSBwb2xpY3kgZGVjaXNpb24gYmFzZWQgb24gdGhlIG91dGNvbWUuCiAqLwoKdmFyIHVzZXJBZGRyZXNzLCB1c2VySVAsIHJlc291cmNlSG9zdDsKCmlmICh2YWxpZGF0ZUFuZEluaXRpYWxpemVQYXJhbWV0ZXJzKCkpIHsKCiAgICB2YXIgY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9IGdldENvdW50cnlGcm9tVXNlckFkZHJlc3MoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJDb3VudHJ5IHJldHJpZXZlZCBmcm9tIHVzZXIncyBhZGRyZXNzOiAiICsgY291bnRyeUZyb21Vc2VyQWRkcmVzcyk7CiAgICB2YXIgY291bnRyeUZyb21Vc2VySVAgPSBnZXRDb3VudHJ5RnJvbVVzZXJJUCgpOwogICAgbG9nZ2VyLm1lc3NhZ2UoIkNvdW50cnkgcmV0cmlldmVkIGZyb20gdXNlcidzIElQOiAiICsgY291bnRyeUZyb21Vc2VySVApOwogICAgdmFyIGNvdW50cnlGcm9tUmVzb3VyY2VVUkkgPSBnZXRDb3VudHJ5RnJvbVJlc291cmNlVVJJKCk7CiAgICBsb2dnZXIubWVzc2FnZSgiQ291bnRyeSByZXRyaWV2ZWQgZnJvbSByZXNvdXJjZSBVUkk6ICIgKyBjb3VudHJ5RnJvbVJlc291cmNlVVJJKTsKCiAgICBpZiAoY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9PT0gY291bnRyeUZyb21Vc2VySVAgJiYgY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9PT0gY291bnRyeUZyb21SZXNvdXJjZVVSSSkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJBdXRob3JpemF0aW9uIFN1Y2NlZWRlZCIpOwogICAgICAgIHJlc3BvbnNlQXR0cmlidXRlcy5wdXQoImNvdW50cnlPZk9yaWdpbiIsIFtjb3VudHJ5RnJvbVVzZXJBZGRyZXNzXSk7CiAgICAgICAgYXV0aG9yaXplZCA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJBdXRob3JpemF0aW9uIEZhaWxlZCIpOwogICAgICAgIGF1dGhvcml6ZWQgPSBmYWxzZTsKICAgIH0KCn0gZWxzZSB7CiAgICBsb2dnZXIubWVzc2FnZSgiUmVxdWlyZWQgcGFyYW1ldGVycyBub3QgZm91bmQuIEF1dGhvcml6YXRpb24gRmFpbGVkLiIpOwogICAgYXV0aG9yaXplZCA9IGZhbHNlOwp9CgovKioKICogVXNlIHRoZSB1c2VyJ3MgYWRkcmVzcyB0byBsb29rdXAgdGhlaXIgY291bnRyeSBvZiByZXNpZGVuY2UuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgdXNlcidzIGNvdW50cnkgb2YgcmVzaWRlbmNlLgogKi8KZnVuY3Rpb24gZ2V0Q291bnRyeUZyb21Vc2VyQWRkcmVzcygpIHsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRVcmkoImh0dHA6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2dlb2NvZGUvanNvbj9hZGRyZXNzPSIgKyBlbmNvZGVVUklDb21wb25lbnQodXNlckFkZHJlc3MpKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKTsKCiAgICB2YXIgZ2VvY29kZSA9IEpTT04ucGFyc2UocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpOwogICAgdmFyIGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgZ2VvY29kZS5yZXN1bHRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IGdlb2NvZGUucmVzdWx0c1tpXTsKICAgICAgICB2YXIgajsKICAgICAgICBmb3IgKGogPSAwOyBqIDwgcmVzdWx0LmFkZHJlc3NfY29tcG9uZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAocmVzdWx0LmFkZHJlc3NfY29tcG9uZW50c1tpXS50eXBlc1swXSA9PSAiY291bnRyeSIpIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuYWRkcmVzc19jb21wb25lbnRzW2ldLmxvbmdfbmFtZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKLyoqCiAqIFVzZSB0aGUgdXNlcidzIElQIHRvIGxvb2t1cCB0aGUgY291bnRyeSBmcm9tIHdoaWNoIHRoZSByZXF1ZXN0IG9yaWdpbmF0ZWQuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgY291bnRyeSBmcm9tIHdoaWNoIHRoZSByZXF1ZXN0IG9yaWdpbmF0ZWQuCiAqLwpmdW5jdGlvbiBnZXRDb3VudHJ5RnJvbVVzZXJJUCgpIHsKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldFVyaSgiaHR0cDovL2lwLWFwaS5jb20vanNvbi8iICsgdXNlcklQKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKTsKCiAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIHJlc3VsdC5jb3VudHJ5OwogICAgfQp9CgovKioKICogVXNlIHRoZSByZXF1ZXN0ZWQgcmVzb3VyY2UncyBob3N0IG5hbWUgdG8gbG9va3VwIHRoZSBjb3VudHJ5IHdoZXJlIHRoZSByZXNvdXJjZSBpcyBob3N0ZWQuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgY291bnRyeSBpbiB3aGljaCB0aGUgcmVzb3VyY2UgaXMgaG9zdGVkLgogKi8KZnVuY3Rpb24gZ2V0Q291bnRyeUZyb21SZXNvdXJjZVVSSSgpIHsKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldFVyaSgiaHR0cDovL2lwLWFwaS5jb20vanNvbi8iICsgZW5jb2RlVVJJQ29tcG9uZW50KHJlc291cmNlSG9zdCkpOwogICAgICByZXF1ZXN0LnNldE1ldGhvZCgiR0VUIik7CgogICAgdmFyIHJlc3BvbnNlID0gaHR0cENsaWVudC5zZW5kKHJlcXVlc3QpLmdldCgpOwogICAgbG9nUmVzcG9uc2UocmVzcG9uc2UpOwoKICAgIHZhciByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKICAgIGlmIChyZXN1bHQpIHsKICAgICAgICByZXR1cm4gcmVzdWx0LmNvdW50cnk7CiAgICB9Cn0KCi8qKgogKiBSZXRyaWV2ZSBhbmQgdmFsaWRhdGUgdGhlIHZhcmlhYmxlcyByZXF1aXJlZCB0byBtYWtlIHRoZSBleHRlcm5hbCBIVFRQIGNhbGxzLgogKgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2lsbCBiZSB0cnVlIGlmIHZhbGlkYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAqLwpmdW5jdGlvbiB2YWxpZGF0ZUFuZEluaXRpYWxpemVQYXJhbWV0ZXJzKCkgewogICAgdmFyIHVzZXJBZGRyZXNzU2V0ID0gaWRlbnRpdHkuZ2V0QXR0cmlidXRlKCJwb3N0YWxBZGRyZXNzIik7CiAgICBpZiAodXNlckFkZHJlc3NTZXQgPT0gbnVsbCB8fCB1c2VyQWRkcmVzc1NldC5pc0VtcHR5KCkpIHsKICAgICAgICBsb2dnZXIud2FybmluZygiTm8gYWRkcmVzcyBzcGVjaWZpZWQgZm9yIHVzZXI6ICIgKyB1c2VybmFtZSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgdXNlckFkZHJlc3MgPSB1c2VyQWRkcmVzc1NldC5pdGVyYXRvcigpLm5leHQoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJVc2VyIGFkZHJlc3M6ICIgKyB1c2VyQWRkcmVzcyk7CgogICAgaWYgKCFlbnZpcm9ubWVudCkgewogICAgICAgIGxvZ2dlci53YXJuaW5nKCJObyBlbnZpcm9ubWVudCBwYXJhbWV0ZXJzIHNwZWNpZmllZCBpbiB0aGUgZXZhbHVhdGlvbiByZXF1ZXN0LiIpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICB2YXIgaXBTZXQgPSBlbnZpcm9ubWVudC5nZXQoIklQIik7CiAgICBpZiAoaXBTZXQgPT0gbnVsbCB8fCBpcFNldC5pc0VtcHR5KCkpIHsKICAgICAgICBsb2dnZXIud2FybmluZygiTm8gSVAgc3BlY2lmaWVkIGluIHRoZSBldmFsdWF0aW9uIHJlcXVlc3QgZW52aXJvbm1lbnQgcGFyYW1ldGVycy4iKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICB1c2VySVAgPSBpcFNldC5pdGVyYXRvcigpLm5leHQoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJVc2VyIElQOiAiICsgdXNlcklQKTsKCiAgICBpZiAoIXJlc291cmNlVVJJKSB7CiAgICAgICAgbG9nZ2VyLndhcm5pbmcoIk5vIHJlc291cmNlIFVSSSBzcGVjaWZpZWQuIik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmVzb3VyY2VIb3N0ID0gcmVzb3VyY2VVUkkubWF0Y2goL14oLio6XC9cLykod3d3XC4pPyhbQS1aYS16MC05XC1cLl0rKSg6WzAtOV0rKT8oLiopJC8pWzNdOwogICAgbG9nZ2VyLm1lc3NhZ2UoIlJlc291cmNlIGhvc3Q6ICIgKyByZXNvdXJjZUhvc3QpOwoKICAgIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBsb2dSZXNwb25zZShyZXNwb25zZSkgewogICAgbG9nZ2VyLm1lc3NhZ2UoIlVzZXIgUkVTVCBDYWxsLiBTdGF0dXM6ICIgKyByZXNwb25zZS5nZXRTdGF0dXMoKSArICIsIEJvZHk6ICIgKyByZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7Cn0=",
  },
  {
    "_id": "729ee140-a4e9-43af-b358-d60eeda13cc3",
    "context": "POLICY_CONDITION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Scripted Sample Policy 2",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Scripted Policy 2",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTUtMjAxNyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCi8qKgogKiBUaGlzIGlzIGEgUG9saWN5IENvbmRpdGlvbiBleGFtcGxlIHNjcmlwdC4gSXQgZGVtb25zdHJhdGVzIGhvdyB0byBhY2Nlc3MgYSB1c2VyJ3MgaW5mb3JtYXRpb24sCiAqIHVzZSB0aGF0IGluZm9ybWF0aW9uIGluIGV4dGVybmFsIEhUVFAgY2FsbHMgYW5kIG1ha2UgYSBwb2xpY3kgZGVjaXNpb24gYmFzZWQgb24gdGhlIG91dGNvbWUuCiAqLwoKdmFyIHVzZXJBZGRyZXNzLCB1c2VySVAsIHJlc291cmNlSG9zdDsKCmlmICh2YWxpZGF0ZUFuZEluaXRpYWxpemVQYXJhbWV0ZXJzKCkpIHsKCiAgICB2YXIgY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9IGdldENvdW50cnlGcm9tVXNlckFkZHJlc3MoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJDb3VudHJ5IHJldHJpZXZlZCBmcm9tIHVzZXIncyBhZGRyZXNzOiAiICsgY291bnRyeUZyb21Vc2VyQWRkcmVzcyk7CiAgICB2YXIgY291bnRyeUZyb21Vc2VySVAgPSBnZXRDb3VudHJ5RnJvbVVzZXJJUCgpOwogICAgbG9nZ2VyLm1lc3NhZ2UoIkNvdW50cnkgcmV0cmlldmVkIGZyb20gdXNlcidzIElQOiAiICsgY291bnRyeUZyb21Vc2VySVApOwogICAgdmFyIGNvdW50cnlGcm9tUmVzb3VyY2VVUkkgPSBnZXRDb3VudHJ5RnJvbVJlc291cmNlVVJJKCk7CiAgICBsb2dnZXIubWVzc2FnZSgiQ291bnRyeSByZXRyaWV2ZWQgZnJvbSByZXNvdXJjZSBVUkk6ICIgKyBjb3VudHJ5RnJvbVJlc291cmNlVVJJKTsKCiAgICBpZiAoY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9PT0gY291bnRyeUZyb21Vc2VySVAgJiYgY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9PT0gY291bnRyeUZyb21SZXNvdXJjZVVSSSkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJBdXRob3JpemF0aW9uIFN1Y2NlZWRlZCIpOwogICAgICAgIHJlc3BvbnNlQXR0cmlidXRlcy5wdXQoImNvdW50cnlPZk9yaWdpbiIsIFtjb3VudHJ5RnJvbVVzZXJBZGRyZXNzXSk7CiAgICAgICAgYXV0aG9yaXplZCA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJBdXRob3JpemF0aW9uIEZhaWxlZCIpOwogICAgICAgIGF1dGhvcml6ZWQgPSBmYWxzZTsKICAgIH0KCn0gZWxzZSB7CiAgICBsb2dnZXIubWVzc2FnZSgiUmVxdWlyZWQgcGFyYW1ldGVycyBub3QgZm91bmQuIEF1dGhvcml6YXRpb24gRmFpbGVkLiIpOwogICAgYXV0aG9yaXplZCA9IGZhbHNlOwp9CgovKioKICogVXNlIHRoZSB1c2VyJ3MgYWRkcmVzcyB0byBsb29rdXAgdGhlaXIgY291bnRyeSBvZiByZXNpZGVuY2UuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgdXNlcidzIGNvdW50cnkgb2YgcmVzaWRlbmNlLgogKi8KZnVuY3Rpb24gZ2V0Q291bnRyeUZyb21Vc2VyQWRkcmVzcygpIHsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRVcmkoImh0dHA6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2dlb2NvZGUvanNvbj9hZGRyZXNzPSIgKyBlbmNvZGVVUklDb21wb25lbnQodXNlckFkZHJlc3MpKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKTsKCiAgICB2YXIgZ2VvY29kZSA9IEpTT04ucGFyc2UocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpOwogICAgdmFyIGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgZ2VvY29kZS5yZXN1bHRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IGdlb2NvZGUucmVzdWx0c1tpXTsKICAgICAgICB2YXIgajsKICAgICAgICBmb3IgKGogPSAwOyBqIDwgcmVzdWx0LmFkZHJlc3NfY29tcG9uZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAocmVzdWx0LmFkZHJlc3NfY29tcG9uZW50c1tpXS50eXBlc1swXSA9PSAiY291bnRyeSIpIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuYWRkcmVzc19jb21wb25lbnRzW2ldLmxvbmdfbmFtZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKLyoqCiAqIFVzZSB0aGUgdXNlcidzIElQIHRvIGxvb2t1cCB0aGUgY291bnRyeSBmcm9tIHdoaWNoIHRoZSByZXF1ZXN0IG9yaWdpbmF0ZWQuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgY291bnRyeSBmcm9tIHdoaWNoIHRoZSByZXF1ZXN0IG9yaWdpbmF0ZWQuCiAqLwpmdW5jdGlvbiBnZXRDb3VudHJ5RnJvbVVzZXJJUCgpIHsKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldFVyaSgiaHR0cDovL2lwLWFwaS5jb20vanNvbi8iICsgdXNlcklQKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKTsKCiAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIHJlc3VsdC5jb3VudHJ5OwogICAgfQp9CgovKioKICogVXNlIHRoZSByZXF1ZXN0ZWQgcmVzb3VyY2UncyBob3N0IG5hbWUgdG8gbG9va3VwIHRoZSBjb3VudHJ5IHdoZXJlIHRoZSByZXNvdXJjZSBpcyBob3N0ZWQuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgY291bnRyeSBpbiB3aGljaCB0aGUgcmVzb3VyY2UgaXMgaG9zdGVkLgogKi8KZnVuY3Rpb24gZ2V0Q291bnRyeUZyb21SZXNvdXJjZVVSSSgpIHsKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldFVyaSgiaHR0cDovL2lwLWFwaS5jb20vanNvbi8iICsgZW5jb2RlVVJJQ29tcG9uZW50KHJlc291cmNlSG9zdCkpOwogICAgICByZXF1ZXN0LnNldE1ldGhvZCgiR0VUIik7CgogICAgdmFyIHJlc3BvbnNlID0gaHR0cENsaWVudC5zZW5kKHJlcXVlc3QpLmdldCgpOwogICAgbG9nUmVzcG9uc2UocmVzcG9uc2UpOwoKICAgIHZhciByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKICAgIGlmIChyZXN1bHQpIHsKICAgICAgICByZXR1cm4gcmVzdWx0LmNvdW50cnk7CiAgICB9Cn0KCi8qKgogKiBSZXRyaWV2ZSBhbmQgdmFsaWRhdGUgdGhlIHZhcmlhYmxlcyByZXF1aXJlZCB0byBtYWtlIHRoZSBleHRlcm5hbCBIVFRQIGNhbGxzLgogKgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2lsbCBiZSB0cnVlIGlmIHZhbGlkYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAqLwpmdW5jdGlvbiB2YWxpZGF0ZUFuZEluaXRpYWxpemVQYXJhbWV0ZXJzKCkgewogICAgdmFyIHVzZXJBZGRyZXNzU2V0ID0gaWRlbnRpdHkuZ2V0QXR0cmlidXRlKCJwb3N0YWxBZGRyZXNzIik7CiAgICBpZiAodXNlckFkZHJlc3NTZXQgPT0gbnVsbCB8fCB1c2VyQWRkcmVzc1NldC5pc0VtcHR5KCkpIHsKICAgICAgICBsb2dnZXIud2FybmluZygiTm8gYWRkcmVzcyBzcGVjaWZpZWQgZm9yIHVzZXI6ICIgKyB1c2VybmFtZSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgdXNlckFkZHJlc3MgPSB1c2VyQWRkcmVzc1NldC5pdGVyYXRvcigpLm5leHQoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJVc2VyIGFkZHJlc3M6ICIgKyB1c2VyQWRkcmVzcyk7CgogICAgaWYgKCFlbnZpcm9ubWVudCkgewogICAgICAgIGxvZ2dlci53YXJuaW5nKCJObyBlbnZpcm9ubWVudCBwYXJhbWV0ZXJzIHNwZWNpZmllZCBpbiB0aGUgZXZhbHVhdGlvbiByZXF1ZXN0LiIpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICB2YXIgaXBTZXQgPSBlbnZpcm9ubWVudC5nZXQoIklQIik7CiAgICBpZiAoaXBTZXQgPT0gbnVsbCB8fCBpcFNldC5pc0VtcHR5KCkpIHsKICAgICAgICBsb2dnZXIud2FybmluZygiTm8gSVAgc3BlY2lmaWVkIGluIHRoZSBldmFsdWF0aW9uIHJlcXVlc3QgZW52aXJvbm1lbnQgcGFyYW1ldGVycy4iKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICB1c2VySVAgPSBpcFNldC5pdGVyYXRvcigpLm5leHQoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJVc2VyIElQOiAiICsgdXNlcklQKTsKCiAgICBpZiAoIXJlc291cmNlVVJJKSB7CiAgICAgICAgbG9nZ2VyLndhcm5pbmcoIk5vIHJlc291cmNlIFVSSSBzcGVjaWZpZWQuIik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmVzb3VyY2VIb3N0ID0gcmVzb3VyY2VVUkkubWF0Y2goL14oLio6XC9cLykod3d3XC4pPyhbQS1aYS16MC05XC1cLl0rKSg6WzAtOV0rKT8oLiopJC8pWzNdOwogICAgbG9nZ2VyLm1lc3NhZ2UoIlJlc291cmNlIGhvc3Q6ICIgKyByZXNvdXJjZUhvc3QpOwoKICAgIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBsb2dSZXNwb25zZShyZXNwb25zZSkgewogICAgbG9nZ2VyLm1lc3NhZ2UoIlVzZXIgUkVTVCBDYWxsLiBTdGF0dXM6ICIgKyByZXNwb25zZS5nZXRTdGF0dXMoKSArICIsIEJvZHk6ICIgKyByZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7Cn0=",
  },
]
`;

exports[`PolicyOps importFirstPolicy() 1: Import first policy w/o deps 1`] = `
{
  "_id": "FrodoTestPolicy13",
  "_rev": "1684702173231",
  "actionValues": {
    "GET": true,
  },
  "active": true,
  "applicationName": "FrodoTestPolicySet1",
  "condition": {
    "conditions": [
      {
        "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
        "type": "Script",
      },
      {
        "authenticateToService": "TxAuthz",
        "type": "AuthenticateToService",
      },
      {
        "conditions": [
          {
            "maxSessionTime": 5,
            "terminateSession": false,
            "type": "Session",
          },
          {
            "requiredScopes": [
              "openid",
            ],
            "type": "OAuth2Scope",
          },
          {
            "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
            "type": "Script",
          },
          {
            "condition": {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            "type": "NOT",
          },
        ],
        "type": "OR",
      },
    ],
    "type": "AND",
  },
  "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "creationDate": "2023-05-21T20:49:33.231Z",
  "description": "Frodo Test Policy",
  "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "lastModifiedDate": "2023-05-21T20:49:33.231Z",
  "name": "FrodoTestPolicy13",
  "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
  "resources": [
    "*://*:*/forgerock/app2/*",
    "*://*:*/app2/*",
  ],
  "subject": {
    "type": "AuthenticatedUsers",
  },
}
`;

exports[`PolicyOps importFirstPolicy() 2: Import first policy w/ deps 1`] = `
{
  "_id": "FrodoTestPolicy15",
  "_rev": "1684702173301",
  "actionValues": {
    "GET": true,
  },
  "active": true,
  "applicationName": "FrodoTestPolicySet1",
  "condition": {
    "conditions": [
      {
        "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
        "type": "Script",
      },
      {
        "authenticateToService": "TxAuthz",
        "type": "AuthenticateToService",
      },
      {
        "conditions": [
          {
            "maxSessionTime": 5,
            "terminateSession": false,
            "type": "Session",
          },
          {
            "requiredScopes": [
              "openid",
            ],
            "type": "OAuth2Scope",
          },
          {
            "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
            "type": "Script",
          },
          {
            "condition": {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            "type": "NOT",
          },
        ],
        "type": "OR",
      },
    ],
    "type": "AND",
  },
  "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "creationDate": "2023-05-21T20:49:33.301Z",
  "description": "Frodo Test Policy",
  "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "lastModifiedDate": "2023-05-21T20:49:33.301Z",
  "name": "FrodoTestPolicy15",
  "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
  "resources": [
    "*://*:*/forgerock/app2/*",
    "*://*:*/app2/*",
  ],
  "subject": {
    "type": "AuthenticatedUsers",
  },
}
`;

exports[`PolicyOps importPolicies() 1: Import all policies w/o deps 1`] = `
[
  {
    "_id": "FrodoTestPolicy17",
    "_rev": "1684702173630",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:33.630Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:33.630Z",
    "name": "FrodoTestPolicy17",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "FrodoTestPolicy18",
    "_rev": "1684702173693",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:33.693Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:33.693Z",
    "name": "FrodoTestPolicy18",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
]
`;

exports[`PolicyOps importPolicies() 2: Import all policies w/ deps 1`] = `
[
  {
    "_id": "FrodoTestPolicy19",
    "_rev": "1684702173756",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:33.756Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:33.756Z",
    "name": "FrodoTestPolicy19",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
  {
    "_id": "FrodoTestPolicy20",
    "_rev": "1684702173966",
    "actionValues": {
      "GET": true,
    },
    "active": true,
    "applicationName": "FrodoTestPolicySet1",
    "condition": {
      "conditions": [
        {
          "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
          "type": "Script",
        },
        {
          "authenticateToService": "TxAuthz",
          "type": "AuthenticateToService",
        },
        {
          "conditions": [
            {
              "maxSessionTime": 5,
              "terminateSession": false,
              "type": "Session",
            },
            {
              "requiredScopes": [
                "openid",
              ],
              "type": "OAuth2Scope",
            },
            {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            {
              "condition": {
                "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
                "type": "Script",
              },
              "type": "NOT",
            },
          ],
          "type": "OR",
        },
      ],
      "type": "AND",
    },
    "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "creationDate": "2023-05-21T20:49:33.966Z",
    "description": "Frodo Test Policy",
    "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
    "lastModifiedDate": "2023-05-21T20:49:33.966Z",
    "name": "FrodoTestPolicy20",
    "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
    "resources": [
      "*://*:*/forgerock/app2/*",
      "*://*:*/app2/*",
    ],
    "subject": {
      "type": "AuthenticatedUsers",
    },
  },
]
`;

exports[`PolicyOps importPolicy() 1: Import policy [FrodoTestPolicy11] w/o deps 1`] = `
{
  "_id": "FrodoTestPolicy11",
  "_rev": "1684702172917",
  "actionValues": {
    "GET": true,
  },
  "active": true,
  "applicationName": "FrodoTestPolicySet1",
  "condition": {
    "conditions": [
      {
        "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
        "type": "Script",
      },
      {
        "authenticateToService": "TxAuthz",
        "type": "AuthenticateToService",
      },
      {
        "conditions": [
          {
            "maxSessionTime": 5,
            "terminateSession": false,
            "type": "Session",
          },
          {
            "requiredScopes": [
              "openid",
            ],
            "type": "OAuth2Scope",
          },
          {
            "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
            "type": "Script",
          },
          {
            "condition": {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            "type": "NOT",
          },
        ],
        "type": "OR",
      },
    ],
    "type": "AND",
  },
  "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "creationDate": "2023-05-21T20:49:32.917Z",
  "description": "Frodo Test Policy",
  "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "lastModifiedDate": "2023-05-21T20:49:32.917Z",
  "name": "FrodoTestPolicy11",
  "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
  "resources": [
    "*://*:*/forgerock/app2/*",
    "*://*:*/app2/*",
  ],
  "subject": {
    "type": "AuthenticatedUsers",
  },
}
`;

exports[`PolicyOps importPolicy() 2: Import policy [FrodoTestPolicy12] w/ deps 1`] = `
{
  "_id": "FrodoTestPolicy12",
  "_rev": "1684702172987",
  "actionValues": {
    "GET": true,
  },
  "active": true,
  "applicationName": "FrodoTestPolicySet1",
  "condition": {
    "conditions": [
      {
        "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
        "type": "Script",
      },
      {
        "authenticateToService": "TxAuthz",
        "type": "AuthenticateToService",
      },
      {
        "conditions": [
          {
            "maxSessionTime": 5,
            "terminateSession": false,
            "type": "Session",
          },
          {
            "requiredScopes": [
              "openid",
            ],
            "type": "OAuth2Scope",
          },
          {
            "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
            "type": "Script",
          },
          {
            "condition": {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            "type": "NOT",
          },
        ],
        "type": "OR",
      },
    ],
    "type": "AND",
  },
  "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "creationDate": "2023-05-21T20:49:32.987Z",
  "description": "Frodo Test Policy",
  "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "lastModifiedDate": "2023-05-21T20:49:32.987Z",
  "name": "FrodoTestPolicy12",
  "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
  "resources": [
    "*://*:*/forgerock/app2/*",
    "*://*:*/app2/*",
  ],
  "subject": {
    "type": "AuthenticatedUsers",
  },
}
`;

exports[`PolicyOps importPolicy() 3: Import non-existing policy [DoesNotExist] 1`] = `
"Import error:
DoesNotExist not found in import data!"
`;

exports[`PolicyOps putPolicy() 1: Create non-existing policy [FrodoTestPolicy3] 1`] = `
{
  "_id": "FrodoTestPolicy3",
  "_rev": "1684702170512",
  "actionValues": {
    "GET": true,
  },
  "active": true,
  "applicationName": "FrodoTestPolicySet1",
  "condition": {
    "conditions": [
      {
        "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
        "type": "Script",
      },
      {
        "authenticateToService": "TxAuthz",
        "type": "AuthenticateToService",
      },
      {
        "conditions": [
          {
            "maxSessionTime": 5,
            "terminateSession": false,
            "type": "Session",
          },
          {
            "requiredScopes": [
              "openid",
            ],
            "type": "OAuth2Scope",
          },
          {
            "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
            "type": "Script",
          },
          {
            "condition": {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            "type": "NOT",
          },
        ],
        "type": "OR",
      },
    ],
    "type": "AND",
  },
  "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "creationDate": "2023-05-21T20:49:30.512Z",
  "description": "Frodo Test Policy",
  "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "lastModifiedDate": "2023-05-21T20:49:30.512Z",
  "name": "FrodoTestPolicy3",
  "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
  "resources": [
    "*://*:*/forgerock/app2/*",
    "*://*:*/app2/*",
  ],
  "subject": {
    "type": "AuthenticatedUsers",
  },
}
`;

exports[`PolicyOps putPolicy() 2: Update existing policy [FrodoTestPolicy4] 1`] = `
{
  "_id": "FrodoTestPolicy4",
  "_rev": "1684702170596",
  "actionValues": {
    "GET": true,
  },
  "active": true,
  "applicationName": "FrodoTestPolicySet1",
  "condition": {
    "conditions": [
      {
        "scriptId": "62f18ede-e5e7-4a7b-8b73-1b02fcbd241a",
        "type": "Script",
      },
      {
        "authenticateToService": "TxAuthz",
        "type": "AuthenticateToService",
      },
      {
        "conditions": [
          {
            "maxSessionTime": 5,
            "terminateSession": false,
            "type": "Session",
          },
          {
            "requiredScopes": [
              "openid",
            ],
            "type": "OAuth2Scope",
          },
          {
            "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
            "type": "Script",
          },
          {
            "condition": {
              "scriptId": "729ee140-a4e9-43af-b358-d60eeda13cc3",
              "type": "Script",
            },
            "type": "NOT",
          },
        ],
        "type": "OR",
      },
    ],
    "type": "AND",
  },
  "createdBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "creationDate": "2023-05-21T20:49:29.66Z",
  "description": "Frodo Test Policy",
  "lastModifiedBy": "id=8d9723a9-a439-4cbf-beb4-30e52811789d,ou=user,ou=am-config",
  "lastModifiedDate": "2023-05-21T20:49:30.596Z",
  "name": "FrodoTestPolicy4",
  "resourceTypeUuid": "76656a38-5f8e-401b-83aa-4ccb74ce88d2",
  "resources": [
    "*://*:*/forgerock/app2/*",
    "*://*:*/app2/*",
  ],
  "subject": {
    "type": "AuthenticatedUsers",
  },
}
`;
