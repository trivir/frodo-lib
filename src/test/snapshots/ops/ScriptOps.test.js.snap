// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ScriptOps createScriptExportTemplate() 1: Create script export template 1`] = `
{
  "meta": Any<Object>,
  "script": {},
}
`;

exports[`ScriptOps exportScript() 1: Export script by id c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d 1`] = `
{
  "meta": Any<Object>,
  "script": {
    "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d": {
      "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript1",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
  },
}
`;

exports[`ScriptOps exportScriptByName() 1: Export script by name FrodoTestScript1 1`] = `
{
  "meta": Any<Object>,
  "script": {
    "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d": {
      "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript1",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
  },
}
`;

exports[`ScriptOps exportScripts() 1: Export all scripts 1`] = `
{
  "meta": Any<Object>,
  "script": {
    "021e434f-89b6-45fb-9d67-5147bc1650c3": {
      "_id": "021e434f-89b6-45fb-9d67-5147bc1650c3",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Show Password Policy",
      "script": [
        "var output = true;",
        "var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "var halign = "left";",
        "var message = "<ul><li>Must be at least 8 characters long</li>".concat(",
        "    "<li>Must be less than 64 characters long</li>").concat(",
        "    "<li>Must not share characters with email, username, first name, last name</li>").concat(",
        "    "<li>Must have at least 1 lowercase letter(s)</li>").concat(",
        "    "<li>Must have at least 1 capital letter(s)</li>").concat(",
        "    "<li>Must have at least 1 number(s)</li>").concat(",
        "    "<li>Must have at least 1 symbol(s)</li></ul>")",
        "var script = "Array.prototype.slice.call(\\n".concat(",
        "  "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "  "function (e) {\\n").concat(",
        "  "  var message = e.firstElementChild;\\n").concat(",
        "  "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "  "    message.className = \\"text-left\\";\\n").concat(",
        "  "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "  "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "  "  }\\n").concat(",
        "  "})")",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "if (message.length && callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            anchor",
        "        ),",
        "        new fr.ScriptTextOutputCallback(script)",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo("true").build();",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "    return format.replace(/[x]/g, function(c) {",
        "        var r = Math.random()*10|0;",
        "        var v = r;",
        "        return v.toString(10);",
        "    });",
        "}",
      ],
    },
    "073a64d4-37c9-486d-8c59-6583494644b9": {
      "_id": "073a64d4-37c9-486d-8c59-6583494644b9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "FRAAS-7955 Transient State Only",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FRAAS-7955 Transient State Only",
      "script": [
        "outcome = "true";",
        "",
        "setTransientObjectAttribute("userName", "FRAAS-7955");",
        "setTransientObjectAttribute("givenName", "First-transient");",
        "setTransientObjectAttribute("sn", "Last-transient");",
        "setTransientObjectAttribute("mail", "first.last-transient@company.com");",
        "",
        "/*",
        " * Store attributes in transient state for use with the Create/Patch Object nodes.",
        " */",
        "function setTransientObjectAttribute(name, value) {",
        "    var transientStorage = transientState.get("objectAttributes");",
        "    if (transientStorage && value) {",
        "          if (transientStorage.put) {",
        "            transientStorage.put(name, value);",
        "        }",
        "          else {",
        "            transientStorage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "    transientState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "0ab1dd57-eafd-4063-8e60-65bfac8108b7": {
      "_id": "0ab1dd57-eafd-4063-8e60-65bfac8108b7",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check existing session and set username",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Check Existing Session",
      "script": [
        "if (typeof existingSession !== 'undefined')",
        "{",
        "  outcome = "hasSession";",
        "  sharedState.put("username", existingSession.get("UserId"));",
        "  sharedState.put("_id", existingSession.get("UserId"));",
        "  if (sharedState.get("objectAttributes")) {",
        "    sharedState.get("objectAttributes").put("userName", existingSession.get("UserId"));",
        "  }",
        "  else {",
        "    sharedState.put("objectAttributes", {userName: existingSession.get("UserId")});",
        "  }",
        "}",
        "else",
        "{",
        "  outcome = "noSession";",
        "}",
      ],
    },
    "0d471aff-81f3-41ce-8bf9-35c27cdc0a26": {
      "_id": "0d471aff-81f3-41ce-8bf9-35c27cdc0a26",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_CanBeInvited",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "(function() {",
        "  var fr = new JavaImporter(",
        "    org.forgerock.openam.auth.nodes,",
        "    org.forgerock.guice.core",
        "  );",
        "",
        "  with (fr) {",
        "    try {",
        "",
        "      outcome = 'False';",
        "",
        "      var realm = sharedState.get('realm');",
        "      var uuid = sharedState.get('username');",
        "      var identityProvider = InjectorHolder.getInstance(IdentityProvider);",
        "      var identity = identityProvider.getIdentity(uuid, realm);",
        "      var attrs = identity.getAttributes();",
        "",
        "      if (!attrs.containsKey('fr-idm-inviteDate')) {",
        "        logger.message('Admin cannot be invited: no invite date');",
        "        return;",
        "      }",
        "",
        "      if (attrs.containsKey('fr-idm-onboardDate')) {",
        "        logger.message('Admin cannot be invited: already onboarded');",
        "        return;",
        "      }",
        "",
        "      var email = attrs.get('mail').iterator().next();",
        "      var objAttrs = {",
        "        mail: email,",
        "        userName: email,",
        "      };",
        "      sharedState.put('objectAttributes', objAttrs);",
        "",
        "      logger.message('Admin can be invited');",
        "      outcome = 'True';",
        "",
        "    } catch (e) {",
        "",
        "      logger.error('Failed to determine if admin can be invited: {}', e);",
        "",
        "    }",
        "  }",
        "}());",
      ],
    },
    "10643e95-873a-4ec0-b713-a7f56760d179": {
      "_id": "10643e95-873a-4ec0-b713-a7f56760d179",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript4",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "123725a9-2119-4efd-a6b0-456f3ccd34b7": {
      "_id": "123725a9-2119-4efd-a6b0-456f3ccd34b7",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "deviceprofile_to_attribute",
      "script": [
        "var objectAttributes = sharedState.get("objectAttributes");",
        "var deviceHash = sharedState.get("deviceHash");",
        "",
        "sharedState.put("frIndexedString1" , deviceHash );",
        "",
        "",
        "",
        "if(objectAttributes === null || objectAttributes === undefined)",
        "{",
        "",
        "",
        " objectAttributes = {",
        "                        "userName" : "anon-".concat(deviceHash),",
        "                     "givenName" : " ",",
        "                     "sn" : " ",",
        "                     "mail" : "anon-".concat(deviceHash).concat("@mytestrun.com"),",
        "                     "frIndexedString1" : deviceHash",
        "                    }",
        "}",
        "else",
        "{",
        "",
        "    objectAttributes.put("userName",  "anon-".concat(deviceHash));",
        "    objectAttributes.put("givenName", " ");",
        "    objectAttributes.put("sn", " ");",
        "    objectAttributes.put("mail", "anon-".concat(deviceHash).concat("@mytestrun.com"));",
        "    objectAttributes.put("frIndexedString1", deviceHash);",
        "   ",
        "}",
        "",
        "",
        "sharedState.put("objectAttributes",objectAttributes);",
        "    ",
        "outcome = "true";",
      ],
    },
    "13b6a418-4ccc-41b6-86ce-0a13f352da22": {
      "_id": "13b6a418-4ccc-41b6-86ce-0a13f352da22",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_HasOnboarded",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "(function() {",
        "  var fr = new JavaImporter(",
        "    org.forgerock.openam.auth.nodes,",
        "    org.forgerock.guice.core",
        "  );",
        "",
        "  with (fr) {",
        "    try {",
        "",
        "      outcome = 'False';",
        "",
        "      var realm = sharedState.get('realm');",
        "      var uuid = sharedState.get('_id');",
        "      var identityProvider = InjectorHolder.getInstance(IdentityProvider);",
        "      var identity = identityProvider.getIdentity(uuid, realm);",
        "      var attrs = identity.getAttributes();",
        "",
        "      if (attrs.containsKey('fr-idm-onboardDate')) {",
        "        logger.message('Admin has onboard date');",
        "        outcome = 'True';",
        "      }",
        "",
        "    } catch (e) {",
        "",
        "      logger.error('Failed to determine if admin has onboarded: {}', e);",
        "      outcome = 'Error';",
        "",
        "    }",
        "  }",
        "}());",
      ],
    },
    "13cd3c60-a04b-4455-b028-fbfd01ed88b1": {
      "_id": "13cd3c60-a04b-4455-b028-fbfd01ed88b1",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Azure AD pass through authentication using Resource Owner Password Credential flow",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "AAD Passthru ROPC",
      "script": [
        "/* AAD Passthru ROPC",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Azure AD pass through authentication using Resource Owner Password Credential flow",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Platform Username and Platform Password collector nodes",
        " * before it can operate.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - Valid",
        " * - Invalid",
        " * - Expired",
        " * - Disabled",
        " * - Error",
        " */",
        "logger.message("AAD Passthru ROPC: start");",
        "",
        "if (sharedState.get("username") && transientState.get("password")) {",
        "      /*",
        "     * BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN AZURE AD SETTINGS",
        "     *",
        "     * AAD_TENANT_ID is your tenant ID: https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant",
        "     * AAD_CLIENT_ID is your registered app ID: https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app",
        "     */",
        "    var AAD_TENANT_ID = "711ffa9c-5972-4713-ace3-688c9732614a";",
        "    var AAD_CLIENT_ID = "51f130ec-d29d-4419-a492-0011d09c1a16";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "      ",
        "    // Azure AD ROPC Configuration",
        "    var AAD_SCOPE = "profile";",
        "      var AAD_RESOURCE = "https://graph.microsoft.com/"",
        "    var AAD_OAUTH2_TOKEN_URI = "https://login.windows.net/".concat(AAD_TENANT_ID).concat("/oauth2/token");",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('POST');",
        "    request.setUri(AAD_OAUTH2_TOKEN_URI);",
        "    request.getHeaders().add("Content-Type", "application/x-www-form-urlencoded");",
        "    var params = request.getForm();",
        "    params.add("resource", AAD_RESOURCE);",
        "    params.add("client_id", AAD_CLIENT_ID);",
        "    params.add("grant_type", "password");",
        "    params.add("scope", AAD_SCOPE);",
        "    params.add("username", sharedState.get("username"));",
        "    params.add("password", transientState.get("password"));",
        "    request.getEntity().setString(params.toString());",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    //logger.message("AAD Passthru ROPC: JSON result: " + JSON.stringify(result));",
        "",
        "      if (response.getStatus().getCode() === 200) {",
        "          outcome = "Valid"",
        "        transientState.put("aadAccessToken", result.access_token);",
        "    } else {",
        "        /* Outcomes:",
        "         * - Valid",
        "         * - Invalid",
        "         * - Expired",
        "         * - Disabled",
        "         * - Error",
        "         *",
        "         * Expected Error Codes:",
        "         * 50126 - Error validating credentials due to invalid username or password.",
        "         * 50055 - The password is expired.",
        "         * 50057 - The user account is disabled.",
        "         * 50196 - The server terminated an operation because it encountered a client request loop. Please contact your app vendor.",
        "         */",
        "        if (result.error_codes.includes(50126)) {",
        "            outcome = "Invalid";",
        "        } else if (result.error_codes.includes(50055)) {",
        "            outcome = "Expired";",
        "        } else if (result.error_codes.includes(50057)) {",
        "            outcome = "Disabled";",
        "        } else {",
        "            outcome = "Error";",
        "        }",
        "        logger.message("AAD Passthru ROPC: error = ".concat(result.error));",
        "        logger.message("AAD Passthru ROPC: error_description = ".concat(result.error_description));",
        "        logger.message("AAD Passthru ROPC: error_codes = ".concat(result.error_codes));",
        "    }",
        "} else {",
        "      outcome = "Error";",
        "      logger.message("AAD Passthru ROPC: No user or password found in shared state! Use username and password collector nodes before this script to populate shared and transient states!'");",
        "}",
        "logger.message("AAD Passthru ROPC: End (outcome=".concat(outcome).concat(")"));",
      ],
    },
    "14f14ad3-f35f-455b-a7ba-d7cd939c6921": {
      "_id": "14f14ad3-f35f-455b-a7ba-d7cd939c6921",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Dropdown selector",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Choice inner1, inner2",
      "script": [
        "/* Choice inner1, inner2",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Render a dropdown selector",
        " * ",
        " * This script must be parametrized. It will not work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "  outcome = "true";",
        "  var choices = ["inner1", "inner2"];",
        "  ",
        "  var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.ChoiceCallback",
        "  )",
        "",
        "  if (callbacks.isEmpty()) {",
        "    action = fr.Action.send([",
        "      new fr.ChoiceCallback("Select a journey", choices, 0, false)",
        "    ]).build();",
        "  } else {",
        "    var choice = parseInt(callbacks.get(0).getSelectedIndexes()[0]);",
        "    nodeState.putShared("nodeConfig", {tree: choices[choice]});",
        "    action = fr.Action.goTo(outcome).build();",
        "  }",
        "}());",
      ],
    },
    "158e500b-8180-4641-ad48-23577fe9d976": {
      "_id": "158e500b-8180-4641-ad48-23577fe9d976",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_MfaOptIn",
      "script": [
        "/*",
        "This creates the following callbacks:",
        "- TextOutputCallback: Display the step title and description",
        "- ConfirmationCallback: Display a list of buttons for choices",
        "- HiddenValueCallback: Captures the "skip" option, if selected",
        "- ScriptTextOutputCallback: Creates a "Skip for now" link button and positions it below the buttons ",
        "*/",
        "",
        "var token = generateNumericToken('xxx');",
        "var loadingMessage = 'Loading...';",
        "var linkButton = "<button id='skip-link-".concat(token).concat("' class='btn btn-block btn-link' type=submit>Skip for now</button>");",
        "var message = "<h2 class=h2>Set up 2-step verification</h2><div style='margin-bottom:1em'>Protect your account by adding a second step after entering your password to verify it's you signing in.</div>";",
        "var choices = ['Set up'];",
        "var defaultChoice = 0;",
        "var skipValue = 'Skip';",
        "",
        "// This will run recursively in the browser until references can be obtained to key DOM elements, at which point.",
        "// it will customize the DOM.  This is to avoid race conditions with the UI rendering callbacks.",
        "var setupPageScript =",
        "  'var setupPage = function() {'.concat(",
        "  '  var skipInputElem = document.getElementById("skip-input-').concat(token).concat('");').concat(",
        "  '  var messageElem;').concat(",
        "  '  document.getElementsByClassName("callback-component").forEach(').concat(",
        "  '    function (e) {').concat(",
        "  '      var m = e.firstElementChild;').concat(",
        "  '      if (m.firstChild && m.firstChild.nodeName == "#text" && m.firstChild.nodeValue.trim() == "').concat(loadingMessage).concat('") {').concat(",
        "  '        messageElem = m;').concat(",
        "  '      }').concat(",
        "  '    }').concat(",
        "  '  );').concat(",
        "  '  if (!skipInputElem || !messageElem) {').concat(",
        "  '    return setTimeout(setupPage, 50);').concat(",
        "  '  }').concat(",
        "  '  var skipContainer = document.createElement("div");').concat(",
        "  '  skipContainer.style = "width:100%";').concat(",
        "  '  skipContainer.innerHTML = "').concat(linkButton).concat('";').concat(",
        "  '  skipInputElem.parentNode.append(skipContainer);').concat(",
        "  '  messageElem.align = "center";').concat(",
        "  '  messageElem.innerHTML = "').concat(message).concat('";').concat(",
        "  '  var bindSkipLink = function() {').concat(",
        "  '    document.getElementById("skip-link-').concat(token).concat('").onclick = function() {').concat(",
        "  '      skipInputElem.value = "').concat(skipValue).concat('";').concat(",
        "  '      document.getElementById("loginButton_0").click();').concat(",
        "  '      return false;').concat(",
        "  '    };').concat(",
        "  '  };').concat(",
        "  '  setTimeout(bindSkipLink, 100);').concat(",
        "  '};').concat(",
        "  'setupPage();');",
        "",
        "var fr = JavaImporter(",
        "  org.forgerock.openam.auth.node.api.Action,",
        "  javax.security.auth.callback.ConfirmationCallback,",
        "  javax.security.auth.callback.TextOutputCallback,",
        "  com.sun.identity.authentication.callbacks.HiddenValueCallback,",
        "  com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "",
        "with (fr) {",
        "  if (callbacks.isEmpty()) {",
        "    action = Action.send(",
        "      new TextOutputCallback(",
        "          TextOutputCallback.INFORMATION,",
        "          loadingMessage",
        "      ),",
        "      new ConfirmationCallback(",
        "          ConfirmationCallback.INFORMATION,",
        "          choices,",
        "          defaultChoice",
        "      ),",
        "      new HiddenValueCallback('skip-input-'.concat(token), 'false'),",
        "      new ScriptTextOutputCallback(setupPageScript)",
        "    ).build()",
        "  } else {",
        "    if (callbacks.get(2).getValue() == skipValue) {",
        "      action = Action.goTo(skipValue).build();",
        "    } else {",
        "      action = Action.goTo(choices[callbacks.get(1).getSelectedIndex()]).build();",
        "    }",
        "  }",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "  return format.replace(/[x]/g, function(c) {",
        "    var r = Math.random()*10|0;",
        "    var v = r;",
        "    return v.toString(10);",
        "  });",
        "}",
      ],
    },
    "164fe425-01e7-4b0b-9f60-fb41f6bf362b": {
      "_id": "164fe425-01e7-4b0b-9f60-fb41f6bf362b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "FRAAS-7955 Display sharedState and transientState.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FRAAS-7955 Display States",
      "script": [
        "/* debug",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Display sharedState and transientState.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "var output = true;",
        "",
        "var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "var halign = "left";",
        "var message = "<h4>Current State Values</h4>".concat(",
        "    "<p><b>Shared State</b>:<br/>").concat(",
        "      sharedState.toString()).concat("</p>").concat(",
        "    "<p><b>Transient State</b>:<br/>").concat(",
        "      transientState.toString()).concat("</p>")",
        "var script = "Array.prototype.slice.call(\\n".concat(",
        "  "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "  "function (e) {\\n").concat(",
        "  "  var message = e.firstElementChild;\\n").concat(",
        "  "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "  "    message.className = \\"\\";\\n").concat(",
        "  "    message.style = \\"text-align: left; inline-size: 430px; overflow-wrap: break-word;\\";\\n").concat(",
        "  "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "  "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "  "  }\\n").concat(",
        "  "})")",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "if (message.length && callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            anchor",
        "        ),",
        "        new fr.ScriptTextOutputCallback(script)",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo("true").build();",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "    return format.replace(/[x]/g, function(c) {",
        "        var r = Math.random()*10|0;",
        "        var v = r;",
        "        return v.toString(10);",
        "    });",
        "}",
      ],
    },
    "169150da-0bd1-4866-8095-eae0bbc269e4": {
      "_id": "169150da-0bd1-4866-8095-eae0bbc269e4",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Collect all the configuration items required for the Message Node to function properly.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect Message Node Config",
      "script": [
        "/* Collect Message Node Config",
        " * ",
        " * Collect all the configuration items required for the Message Node to function properly.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "      var config = {",
        "        "message": {"en": "I believe I can fly!"},",
        "        "messageYes": {"en": "Glorious!"},",
        "        "messageNo": {"en": "Inconceivable!"}",
        "    };",
        "      var script = "";",
        "    script += "Array.prototype.slice.call(";",
        "    script += "    document.getElementsByTagName('input')";",
        "    script += ").forEach(";",
        "    script += "    function (input,i) {";",
        "    script += "        console.log('input '+i);"",
        "    script += "        var config = JSON.parse('"+JSON.stringify(config)+"');";",
        "    script += "        var keys = Object.keys(config);";",
        "    script += "        if (input.type === 'text') {";",
        "    script += "            input.setAttribute('value', config[keys[i]].en);";",
        "    script += "            input.dispatchEvent(new KeyboardEvent( 'input' , {'key':'Enter'} ));";",
        "    script += "        }";",
        "    script += "    }";",
        "    script += ");";",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          javax.security.auth.callback.NameCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.NameCallback("message", config.message.en),",
        "            new fr.NameCallback("messageYes", config.messageYes.en),",
        "            new fr.NameCallback("messageNo", config.messageNo.en),",
        "              new fr.ScriptTextOutputCallback(script)",
        "        ).build();",
        "    }",
        "    else {",
        "          config[callbacks.get(0).getPrompt()].en = callbacks.get(0).getName();",
        "          config[callbacks.get(1).getPrompt()].en = callbacks.get(1).getName();",
        "          config[callbacks.get(2).getPrompt()].en = callbacks.get(2).getName();",
        "          nodeState.putShared("nodeConfig", config);",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "199405e4-050e-4f2a-87d1-d9125f74a8df": {
      "_id": "199405e4-050e-4f2a-87d1-d9125f74a8df",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Reset theme to what's preserved in shared state variable "theme-id" or to default theme.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Reset Theme",
      "script": [
        "/* Reset Theme",
        " * ",
        " * Reset theme to what's preserved in shared state variable "themeId" or to default theme.",
        " * ",
        " * This script needs to be parametrized!",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      /* Begin Script Configuration */",
        "      var defaultTheme = "Expanse";",
        "      /* End Script Configuration */",
        "      ",
        "      outcome = "true";",
        "      ",
        "      var theme = defaultTheme;",
        "      if (sharedState.get("themeId") && ""+sharedState.get("themeId") !== "") {",
        "          theme = sharedState.get("themeId");",
        "    }",
        "",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        org.forgerock.openam.authentication.callbacks.PollingWaitCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        var stage = "themeId="+theme;",
        "        action = fr.Action.send(",
        "              new fr.PollingWaitCallback("100", "Please wait ...")",
        "        ).withStage(stage).build();",
        "    } else {",
        "          action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "1acc5535-13e2-4ed8-83e1-f4fefd86d243": {
      "_id": "1acc5535-13e2-4ed8-83e1-f4fefd86d243",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Readiness probe response",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Ready Response",
      "script": [
        "/* Ready Response",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Return READY in a TextOutputCallback indicating that the journey layer is operational.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "outcome = "true";",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback",
        ")",
        "if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            "READY"",
        "        )",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo(outcome).build();",
        "}",
      ],
    },
    "1b52a7e0-4019-40fa-958a-15a49870e901": {
      "_id": "1b52a7e0-4019-40fa-958a-15a49870e901",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "set the same shared state variable",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "shared",
      "script": [
        "(function () {",
        "  outcome = 'true';",
        "  var level = nodeState.get('level').asInteger();",
        "  sharedState.put('sharedValue', 'Level ' + level + ': This is a longer string value shared across all nested journeys. It contains an indicator in which level it was last set.');",
        "}());",
      ],
    },
    "1c0c73e8-2be1-41ce-b042-3c39694346b5": {
      "_id": "1c0c73e8-2be1-41ce-b042-3c39694346b5",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Verify unknown caller by account number",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Verify Unknown Caller",
      "script": [
        "/* Twilio IVR: Verify Unknown Caller",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "logger.warning("Twilio IVR: Verify Unknown Caller: start");",
        "outcome = "true";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// Build out the verification prompt",
        "var prompt = "To lookup your account, please enter or say your account number.";",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextInputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var input = new TextInputCallback(prompt);",
        "        action = Action.send(input).build();",
        "      } ",
        "      else {",
        "          var answer = new String(callbacks.get(0).getText()).replace(/[^0-9]/g, "");",
        "        logger.warning("Twilio IVR: Verify Unknown Caller: callbacks received: answer=".concat(answer));",
        "          setSharedObjectAttribute("frIndexedInteger5", answer);",
        "        logger.warning("Twilio IVR: Verify Unknown Caller: finish [outcome=".concat(outcome).concat("]"));",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "       var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "1e8175a2-6114-415f-9b72-9fe15bdf3661": {
      "_id": "1e8175a2-6114-415f-9b72-9fe15bdf3661",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_IsFederationEnforcedForUser",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "var fr = new JavaImporter(",
        "  org.forgerock.openam.auth.nodes,",
        "  org.forgerock.guice.core",
        ");",
        "",
        "with (fr) {",
        "  var enforcement = 'none';",
        "",
        "  function isSuperAdmin() {",
        "    var uuid = sharedState.get('_id');",
        "    var realm = sharedState.get('realm');",
        "    var identityProvider = InjectorHolder.getInstance(IdentityProvider);",
        "    var identity = identityProvider.getIdentity(uuid, realm);",
        "    var groups = identity.getAttribute('fr-attr-group').toArray();",
        "    for (var i = 0; i < groups.length; i++) {",
        "      if (groups[i] == 'super-admins') {",
        "        return true;",
        "      }",
        "    }",
        "    return false;",
        "  }",
        "",
        "  try {",
        "    switch (enforcement) {",
        "      case 'none':",
        "        outcome = 'False';",
        "        break;",
        "      case 'all':",
        "        outcome = 'True';",
        "        break;",
        "      default:",
        "        outcome = isSuperAdmin() ? 'False' : 'True';",
        "        break;",
        "    }",
        "  } catch (e) {",
        "    logger.error('Failed to determine if federation is enforced for user: {}', e);",
        "    outcome = 'Error';",
        "  }",
        "}",
      ],
    },
    "22ab12ac-d1d9-414b-ab51-cfae30de8c0a": {
      "_id": "22ab12ac-d1d9-414b-ab51-cfae30de8c0a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Create a configuration object for the Email Template Node.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Configure Email Template Node",
      "script": [
        "/* Configure Email Template Node",
        " * ",
        " * Create a configuration object for the Email Template Node.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - error",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "  try {",
        "  outcome = 'true';",
        "  var config = {",
        "    emailAttribute: 'mail',",
        "    emailTemplateName: 'welcome',",
        "    identityAttribute: 'userName'",
        "  };",
        "  nodeState.putShared('nodeConfig', config);",
        "  } catch (error) {",
        "      outcome = 'error';",
        "    nodeState.putShared('error', error.message);",
        "  }",
        "}());",
      ],
    },
    "23143919-6b78-40c3-b25e-beca19b229e0": {
      "_id": "23143919-6b78-40c3-b25e-beca19b229e0",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "GitHub Profile Normalization (VS)",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("GitHub rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "27f1b5a3-9446-4e5c-b965-f195a99fa666": {
      "_id": "27f1b5a3-9446-4e5c-b965-f195a99fa666",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_PasswordFixEnd",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        "This restores sharedState.objectAttributes temporarily overwritten to fix an issue with password policy.",
        "*/",
        "",
        "//var password = '';",
        "//var objAttrs = sharedState.get('objectAttributes');",
        "//if (objAttrs && objAttrs.containsKey('password')) {",
        "//  password = objAttrs.get('password');",
        "//}",
        "",
        "// Restore original object attributes",
        "var origObjAttrs = sharedState.get('originalObjectAttributes');",
        "if (origObjAttrs) {",
        "//  if (password) {",
        "//    origObjAttrs.put('password', password);",
        "//  }",
        "  sharedState.put('objectAttributes', origObjAttrs);",
        "}",
        "",
        "outcome = 'True';",
        "",
      ],
    },
    "2997bd4d-14be-4dc6-8701-27f08d10b8b7": {
      "_id": "2997bd4d-14be-4dc6-8701-27f08d10b8b7",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Profile Normalization Script for idddataweb",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "iddataweb Profile Normalization",
      "script": [
        "/*/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS. Not for Production use. ",
        " * Modified by Stephen Payne",
        " */",
        "/* Social Identity Provider Profile Transformation script for ID DataWeb */",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.error("iddataweb_Social Identity Provider Profile Transformation script: Start");",
        "userName = sharedState.get("objectAttributes").get("mail");",
        "logger.error("iddataweb_Social Identity Provider Profile Transformation script: userName" + userName );",
        "username = userName;",
        "sharedState.put("userName", userName);",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.acquiredAttributes_AcquiredFullName_fname.asString() + " " + rawProfile.acquiredAttributes_AcquiredFullName_lname.asString().toLowerCase().capitalize() ),",
        "        field("givenName", rawProfile.acquiredAttributes_AcquiredFullName_fname.asString().toLowerCase().capitalize() ),",
        "        field("familyName", rawProfile.acquiredAttributes_AcquiredFullName_lname.asString().toLowerCase().capitalize() ),",
        "        field("postalAddress", rawProfile.acquiredAttributes_AcquiredAddress_address),",
        "        field("addressLocality", rawProfile.acquiredAttributes_AcquiredAddress_locality),",
        "        field("addressRegion", rawProfile.acquiredAttributes_AcquiredAddress_administrative_area_level_1),",
        "        field("postalCode", rawProfile.acquiredAttributes_AcquiredAddress_postal_code),",
        "        field("country", rawProfile.acquiredAttributes_AcquiredAddress_country),",
        "        field("driversLicense", rawProfile.acquiredAttributes_AcquiredDriversLicenseNumber_acquiredDriversLicenseNumber),",
        "        field("driversLicenseIssuer", rawProfile.acquiredAttributes_DriversLicenseIssuerCode_DriversLicenseIssuerCode),",
        "          field("DOB", rawProfile.acquiredAttributes_AcquiredDOB_month.asString() + "/" + rawProfile.acquiredAttributes_AcquiredDOB_day.asString() + "/" + rawProfile.acquiredAttributes_AcquiredDOB_year.asString() ),",
        "",
        "        field("IDWScore", rawProfile.acquiredAttributes_IDWScore),",
        "        field("policyDecision", rawProfile.policyDecision_conclusion),",
        "        field("phone", rawProfile.userAttributes_InternationalTelephone_dialCode.asString() + rawProfile.userAttributes_InternationalTelephone_telephone.asString()),",
        "        field("username", userName )",
        "       //field("username", rawProfile.acquiredAttributes_AcquiredFullName_fname.asString() + "." + rawProfile.acquiredAttributes_AcquiredFullName_lname.asString() )",
        "",
        "   )",
        ")",
        "",
      ],
    },
    "2a076e9e-75a9-46b5-b971-10ffafbdf652": {
      "_id": "2a076e9e-75a9-46b5-b971-10ffafbdf652",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Return true if a goto param has been specified, false otherwise.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Goto Specified Decision",
      "script": [
        "/* Goto Specified Decision",
        " * ",
        " * Return true if a goto param has been specified, false otherwise.",
        " * ",
        " * This script does not require configuration. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    logger.message("Goto Specified Decision: start");",
        "      outcome = "false";",
        "      var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "      if (referer.searchParam.goto) {",
        "          outcome = "true";",
        "    }",
        "    logger.message("Goto Specified Decision: end [outcome={}]", outcome);",
        "",
        "    /*",
        "     * Parse a URL into its components and make them easily accessible by name",
        "     *",
        "     * Use in a Scripte Decision Node Script as follows:",
        "     * var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "     * var origin = referer.origin;",
        "     * ",
        "     * e.g.: https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "     * {",
        "     *     hash: '#/',",
        "     *     host: 'openam-volker-dev.forgeblocks.com',",
        "     *     hostname: 'openam-volker-dev.forgeblocks.com',",
        "     *     href: 'https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/',",
        "     *     origin: 'https://openam-volker-dev.forgeblocks.com',",
        "     *     pathname: '/am/XUI/',",
        "     *     port: '',",
        "     *     protocol: 'https',",
        "     *     search: '?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim',",
        "     *     username: '',",
        "     *     password: '',",
        "     *     searchParam: {",
        "     *         realm: '/bravo',",
        "     *         authIndexType: 'service',",
        "     *         authIndexValue: 'InitiateOwnerClaim'",
        "     *     }",
        "     * }",
        "     */",
        "    function parseUrl(href) {",
        "        var m = href.match(/^(([^:\\/?#]+):?(?:\\/\\/((?:([^\\/?#:]*):([^\\/?#:]*)@)?([^\\/?#:]*)(?::([^\\/?#:]*))?)))?([^?#]*)(\\?[^#]*)?(#.*)?$/),",
        "        r = {",
        "            hash: m[10] || "",                      // #/",
        "            host: m[3] || "",                       // openam-volker-dev.forgeblocks.com",
        "            hostname: m[6] || "",                   // openam-volker-dev.forgeblocks.com",
        "            href: m[0] || "",                       // https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "            origin: m[1] || "",                     // https://openam-volker-dev.forgeblocks.com",
        "            pathname: m[8] || (m[1] ? "/" : ""),    // /am/XUI/",
        "            port: m[7] || "",                       // ",
        "            protocol: m[2] || "",                   // https",
        "            search: m[9] || "",                     // ?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim",
        "            username: m[4] || "",                   // ",
        "            password: m[5] || "",                   // ",
        "            searchParam: {}                         // { realm: '/bravo',",
        "                                                    //   authIndexType: 'service',",
        "                                                    //   authIndexValue: 'InitiateOwnerClaim' }",
        "        };",
        "        if (r.protocol.length == 2) {",
        "            r.protocol = "file:///" + r.protocol.toUpperCase();",
        "            r.origin = r.protocol + "//" + r.host;",
        "        }",
        "        if (r.search.length > 2) {",
        "            var query = (r.search.indexOf('?') === 0) ? r.search.substr(1) : r.search;",
        "            var vars = query.split('&');",
        "            for (var i = 0; i < vars.length; i++) {",
        "            var pair = vars[i].split('=');",
        "            r.searchParam[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);",
        "            }",
        "        }",
        "        r.href = r.origin + r.pathname + r.search + r.hash;",
        "        return r;",
        "    };",
        "}());",
      ],
    },
    "2aaa8076-5d0b-4433-9660-fec1ba51b608": {
      "_id": "2aaa8076-5d0b-4433-9660-fec1ba51b608",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "temp",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "outcome = "false";",
        "if(sharedState.get("userName"))",
        "{",
        "var username = sharedState.get("userName")",
        "var id = sharedState.get("_id")",
        "var persona = existingSession.get('persona')",
        "",
        "sharedState.put("debug",username);",
        "sharedState.put("debug_id",id);",
        "sharedState.put("persona",persona);",
        "",
        "if(username!=='')",
        "{",
        "  outcome = "true";",
        "}}",
        "",
      ],
    },
    "2ada53cd-5d37-4592-9c7f-5711271229c2": {
      "_id": "2ada53cd-5d37-4592-9c7f-5711271229c2",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Has Profile Changed",
      "script": [
        "logger.error("Has Profile Changed: start");",
        "outcome = "unchanged";",
        "if (getObjectAttribute("old_givenName") ||",
        "    getObjectAttribute("old_sn") ||",
        "    getObjectAttribute("frUnindexedString5") ||",
        "    getObjectAttribute("old_telephoneNumber")) {",
        "  outcome = "changed";",
        "}",
        "logger.error("Has Profile Changed: end [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Get objectAttribute value",
        " */",
        "function getObjectAttribute(name) {",
        "    if (sharedState.get("objectAttributes") && sharedState.get("objectAttributes").get(name)) {",
        "        return sharedState.get("objectAttributes").get(name).toString();",
        "    }",
        "    else {",
        "        return null;",
        "    }",
        "}",
      ],
    },
    "2eb48a0c-24e0-4dac-acaf-02085c142ec5": {
      "_id": "2eb48a0c-24e0-4dac-acaf-02085c142ec5",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Integration to Okta Authentication API okta_url/api/v1/authn",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Okta API AuthN",
      "script": [
        "/* Okta Passthru Authentication",
        " *",
        " * Authors: chico.demettroff@forgerock.com, volker.scheuber@forgerock.com",
        " * ",
        " * Okta pass through authentication using Okta Authentication API.",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Platform Username and Platform Password collector nodes",
        " * before it can operate.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - Success",
        " * - Failure",
        " * - Timeout",
        " * - Error",
        " */",
        "logger.message("Okta Passthru Authentication: start");",
        "",
        "if (sharedState.get("username") && transientState.get("password")) {",
        "      /*",
        "     * BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN OKTA TENANT SETTINGS",
        "     *",
        "     */",
        "    var OKTA_API_URI = "https://dev-18030933.okta.com/api/v1/authn/";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('POST');",
        "    request.setUri(OKTA_API_URI);",
        "    request.getHeaders().add("Content-Type", "application/json");",
        "      //var body =     "{\\"username\\":".concat(sharedState.get("username")).concat(",\\"password\\":").concat(transientState.get("password")).concat(",\\"options\\":{\\"multiOptionalFactorEnroll\\":true,\\"warnBeforePasswordExpired\\":true}}");",
        "    var body = {",
        "        "username": sharedState.get("username"),",
        "        "password": transientState.get("password"),",
        "        "options": {",
        "            "multiOptionalFactorEnroll": true,",
        "            "warnBeforePasswordExpired": true",
        "        }",
        "    }",
        "      request.getEntity().setJson(body);",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    logger.message("Okta Passthru Authentication: JSON result: " + JSON.stringify(result));",
        "",
        "      if (response.getStatus().getCode() === 200 && result.status === "SUCCESS") {",
        "          outcome = "Success"",
        "        transientState.put("oktaProfile", result._embedded.user.profile);",
        "    } else {",
        "        /* Outcomes:",
        "         * - Success",
        "         * - Failure",
        "         * - Timeout",
        "         * - Error",
        "         *",
        "         * Expected/known Error Codes:",
        "         * E0000004 - Authentication failed.",
        "         * E0000003 - The request body was not well-formed",
        "         */",
        "      ",
        "    /*",
        "{",
        "    "expiresAt": "2021-10-14T22:15:04.000Z",",
        "    "status": "SUCCESS",",
        "    "sessionToken": "20111FNVseT3WyCzBHFBi3dYtx980FHen46QKlWXRNTe1kRef3GQu1W",",
        "    "_embedded": {",
        "        "user": {",
        "            "id": "00u1xqw851dEqM1Y15d7",",
        "            "passwordChanged": "2021-09-21T18:26:25.000Z",",
        "            "profile": {",
        "                "login": "chico@crossfithighvoltage.com",",
        "                "firstName": "chico",",
        "                "lastName": "deme",",
        "                "locale": "en",",
        "                "timeZone": "America/Los_Angeles"",
        "            }",
        "        }",
        "    },",
        "    "_links": {",
        "        "cancel": {",
        "            "href": "https://dev-18030933.okta.com/api/v1/authn/cancel",",
        "            "hints": {",
        "                "allow": [",
        "                    "POST"",
        "                ]",
        "            }",
        "        }",
        "    }",
        "}",
        "*/",
        "",
        "  /*",
        "  FAILED",
        "  {",
        "    "errorCode": "E0000004",",
        "    "errorSummary": "Authentication failed",",
        "    "errorLink": "E0000004",",
        "    "errorId": "oae1Y3Kk_WvRAOBSDeG9qeyHQ",",
        "    "errorCauses": []",
        "}",
        "*/",
        "        transientState.put("oktaResult", result);",
        "        if (result.timed_out) {",
        "            outcome = "Timeout";",
        "        } else if (result.errorCode === "E0000004") {",
        "            outcome = "Failure";",
        "        } else {",
        "            outcome = "Error";",
        "        }",
        "        logger.message("Okta Passthru Authentication: errorCode = ".concat(result.errorCode));",
        "        logger.message("Okta Passthru Authentication: errorSummary = ".concat(result.errorSummary));",
        "        logger.message("Okta Passthru Authentication: errorId = ".concat(result.errorId));",
        "    }",
        "} else {",
        "      outcome = "Error";",
        "      logger.message("Okta Passthru Authentication: No user or password found in shared state! Use username and password collector nodes before this script to populate shared and transient states!'");",
        "}",
        "logger.message("Okta Passthru Authentication: End (outcome=".concat(outcome).concat(")"));",
      ],
    },
    "3156d7e9-1589-4ffb-a659-37a1647ee03d": {
      "_id": "3156d7e9-1589-4ffb-a659-37a1647ee03d",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Converts a normalized social profile coming from ADFS into a managed user",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Normalized ADFS Profile to Managed User",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "import org.forgerock.json.JsonValue",
        "",
        "JsonValue managedUser = json(object(",
        "        field("givenName", normalizedProfile.givenName),",
        "        field("sn", normalizedProfile.familyName),",
        "        field("mail", normalizedProfile.email),",
        "        field("userName", normalizedProfile.username)))",
        "",
        "if (normalizedProfile.postalAddress.isNotNull()) managedUser.put("postalAddress", normalizedProfile.postalAddress)",
        "if (normalizedProfile.addressLocality.isNotNull()) managedUser.put("city", normalizedProfile.addressLocality)",
        "if (normalizedProfile.addressRegion.isNotNull()) managedUser.put("stateProvince", normalizedProfile.addressRegion)",
        "if (normalizedProfile.postalCode.isNotNull()) managedUser.put("postalCode", normalizedProfile.postalCode)",
        "if (normalizedProfile.country.isNotNull()) managedUser.put("country", normalizedProfile.country)",
        "if (normalizedProfile.phone.isNotNull()) managedUser.put("telephoneNumber", normalizedProfile.phone)",
        "managedUser.put("accountStatus", (normalizedProfile.roles.asString() == "fidc-volker-dev-admins") ? 'Active' : 'Inactive')",
        "",
        "// if the givenName and familyName is null or empty",
        "// then add a boolean flag to the shared state to indicate names are not present",
        "// this could be used elsewhere",
        "// for eg. this could be used in a scripted decision node to by-pass patching",
        "// the user object with blank values when givenName  and familyName is not present",
        "boolean noGivenName = normalizedProfile.givenName.isNull() || (!normalizedProfile.givenName.asString()?.trim())",
        "boolean noFamilyName = normalizedProfile.familyName.isNull() || (!normalizedProfile.familyName.asString()?.trim())",
        "sharedState.put("nameEmptyOrNull", noGivenName && noFamilyName)",
        "",
        "return managedUser",
        "",
      ],
    },
    "3369037a-7a49-4aed-a1dc-7aab7608812b": {
      "_id": "3369037a-7a49-4aed-a1dc-7aab7608812b",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Service Account - Token Modification",
      "script": [
        "(function () {",
        "  var fr = JavaImporter(",
        "    java.lang.String,",
        "    java.security.MessageDigest,",
        "    java.util.Arrays,",
        "    javax.crypto.Cipher,",
        "    javax.crypto.spec.SecretKeySpec,",
        "    org.forgerock.http.protocol.Request,",
        "    org.forgerock.http.protocol.Response,",
        "    org.forgerock.util.encode.Base64",
        "  );",
        "  ",
        "  var secret = 'FuwwVKpPER9tPSMYUiIkY7IaPzv85aGU';",
        "  ",
        "  function encrypt(str) {",
        "    try {",
        "      var key = new fr.String(secret).getBytes('UTF-8');",
        "      var sha = fr.MessageDigest.getInstance('SHA-256');",
        "      key = sha.digest(key);",
        "      key = fr.Arrays.copyOf(key, 32);",
        "      var secretKey = new fr.SecretKeySpec(key, 'AES');",
        "      var cipher = fr.Cipher.getInstance('AES/ECB/PKCS5Padding');",
        "      cipher.init(fr.Cipher.ENCRYPT_MODE, secretKey);",
        "      var finalBytes = cipher.doFinal(new fr.String(str).getBytes('UTF-8'));",
        "      return fr.Base64.encode(finalBytes);",
        "    } catch (e) {",
        "      logger.error('{}: failed to encrypt: {}', scriptName, e);",
        "      throw e;",
        "    }",
        "  }",
        "",
        "  function hasAmScope(scope) {",
        "    if (!scope) return false;",
        "    for (var i = 0; i < scope.length; i++) {",
        "      if (scope[i].indexOf('fr:am:') > -1) return true;",
        "    }",
        "    return false;",
        "  }",
        "",
        "  try {",
        "    var uri = 'http://am.fr-platform:80/am/json/authenticate?authIndexType=service&authIndexValue=FRServiceAccountInternal';",
        "    var requestParams = requestProperties.get('requestParams');",
        "",
        "    var scope = requestParams.get('scope');",
        "    if (!hasAmScope(scope)) {",
        "      logger.message('AM scope not requested');",
        "      return null;",
        "    }",
        "",
        "    var jwts = requestParams.get('assertion');",
        "    if (!jwts || jwts.isEmpty()) {",
        "      logger.message('No jwt assertion');",
        "      return null;",
        "    }",
        "",
        "    var jwt = jwts[0];",
        "    var uuid = identity.getAttribute('_id').iterator().next();",
        "",
        "    var request = new fr.Request();",
        "    request.getHeaders().add('authorization', 'svcacct ' + uuid + ' ' + jwt);",
        "    request.getHeaders().add('content-type', 'application/json');",
        "    request",
        "      .setUri(uri)",
        "      .setMethod('POST')",
        "      .setEntity('{}');",
        "",
        "    var response = httpClient.send(request).getOrThrow();",
        "    if (response.getStatus() === org.forgerock.http.protocol.Status.OK) {",
        "      var result = JSON.parse(response.getEntity().getString());",
        "      var encryptedTokenId = encrypt(result.tokenId);",
        "      accessToken.setField('sessionToken', encryptedTokenId);",
        "    } else {",
        "      logger.message('Failed to get session from service account tree (status: ' + response.getStatus() + ')');",
        "    }",
        "  } catch (e) {",
        "    throw ('Failed to modify service account token: ' + e);",
        "  }",
        "}());",
        "",
      ],
    },
    "355a8b7c-9e3c-40c1-a873-68127e483adf": {
      "_id": "355a8b7c-9e3c-40c1-a873-68127e483adf",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Extract Username from request.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "KerberosLogin: Extract Username",
      "script": [
        "/* KerberosLogin: Extract Username",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " */",
        "",
        "logger.warning("KerberosLogin: Extract Username: start");",
        "outcome = "false";",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " */",
        "var USERNAME_HEADER_NAME = "X-OpenAM-Username";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "var username = getHeader(USERNAME_HEADER_NAME);",
        "if (username) {",
        "    ",
        "      outcome = "true";",
        "    sharedState.put("username", username);",
        "    setSharedObjectAttribute("userName", username);",
        "}",
        "",
        "logger.warning("KerberosLogin: Extract Username: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Returns the value of the requested header",
        " */",
        "function getHeader(headerName) {",
        "      if (requestHeaders.get(headerName) && requestHeaders.get(headerName).get(0)) {",
        "        return requestHeaders.get(headerName).get(0).toString();",
        "    }",
        "      return null;",
        "}",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "       var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "37bf200a-158f-4a45-8ee5-81516e4593f8": {
      "_id": "37bf200a-158f-4a45-8ee5-81516e4593f8",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display session info.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Display Session Info",
      "script": [
        "/* Display Session Info",
        " * ",
        " * Display Session Info.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "",
        "    var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "    var halign = "left";",
        "",
        "    var choices = [];",
        "      var defaultChoice = 0;",
        "  ",
        "      var include = ["org","idp","saas","profileType","givenName","sn","mail","roles","userName","UserId","Locale","authInstant","AuthLevel","Host","Service"];",
        "    var message = "";",
        "    if (typeof existingSession !== "undefined") {",
        "          message = "<h4>Session Info</h4><p style=\\"font-family:courier;\\">";",
        "          include.forEach(function (key) {",
        "              message += "<b>" + key + "</b>: " + existingSession.get(key) + "<br/>";",
        "        });",
        "         message += "</p><p style=\\"font-size:70%;font-family:courier;\\">"",
        "          var entries = existingSession.keySet().toArray();",
        "        entries.forEach(function (key) {",
        "              if (include.indexOf(""+key)===-1) {",
        "                message += "<b>" + key + "</b>: " + existingSession.get(key) + "<br/>";",
        "            }",
        "        });",
        "         message += "</p>"",
        "          choices.push("Goto SAML App");",
        "          choices.push("Goto OIDC App");",
        "          if (""+existingSession.get("profileType") === "persistent") {",
        "              choices.push("Goto Profile Page");",
        "        }",
        "          choices.push("Logout");",
        "    } else {",
        "          message = "<h4>No Session!</h4><p>"",
        "          choices.push("Login");",
        "    }",
        "    var script = "Array.prototype.slice.call(\\n".concat(",
        "      "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "      "function (e) {\\n").concat(",
        "      "  var message = e.firstElementChild;\\n").concat(",
        "      "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "      "    message.className = \\"\\";\\n").concat(",
        "      "    message.style = \\"text-align: left; inline-size: 430px; overflow-wrap: break-word;\\";\\n").concat(",
        "      "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "      "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "      "  }\\n").concat(",
        "      "})")",
        "  ",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback,",
        "        javax.security.auth.callback.ConfirmationCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                anchor",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script),",
        "            new fr.ConfirmationCallback(",
        "                fr.ConfirmationCallback.INFORMATION,",
        "                choices,",
        "                defaultChoice",
        "            )",
        "        ).build()",
        "    }",
        "    else {",
        "      outcome = choices[callbacks.get(2).getSelectedIndex()];",
        "      action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "     /*",
        "      * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "      * ",
        "      * Example:",
        "      * 'xxxxx' produces '28535'",
        "      * 'xxx-xxx' produces '432-521'",
        "      */",
        "    function generateNumericToken(format) {",
        "        return format.replace(/[x]/g, function(c) {",
        "            var r = Math.random()*10|0;",
        "            var v = r;",
        "            return v.toString(10);",
        "        });",
        "    }",
        "}());",
        "",
        "/*",
        "Locale: en_US",
        "authInstant: 2021-09-25T17:28:38Z",
        "Organization: o=alpha,ou=services,ou=am-config",
        "mail: volker@scheuber.name",
        "Principals: volker@scheuber.name",
        "UserProfile: Ignore",
        "CharSet: UTF-8",
        "FullLoginURL: /am/UI/Login?code=4%2F0AX4XfWjiEfbrfIstsFUKoaibPCQmTbuPonLfuhpYhjfj-N5QEe9u2P5Os9wNadGaPsQVBA&scope=email+profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+openid&realm=%2Falpha&state=fykprtfmeclrgwszmomvqxnlirrehcs&hd=scheuber.name&prompt=none&authuser=2",
        "clientType: genericHTML",
        "goto: /am/XUI/?realm=/alpha&authIndexType=service&authIndexValue=SessionInfo&ForceAuth=true#/",
        "AMCtxId: d3188938-d07e-4134-95db-f1cc97fc6c40-503275",
        "loginURL: /am/UI/Login",
        "sn: Scheuber",
        "amlbcookie: 01",
        "HostName: 99.72.28.182",
        "UserToken: volker@scheuber.name",
        "givenName: Volker",
        "successURL: /am/XUI/?realm=/alpha&authIndexType=service&authIndexValue=SessionInfo&ForceAuth=true#/",
        "Service: Router",
        "Host: 99.72.28.182",
        "AuthLevel: 0",
        "idp: google",
        "UserId: volker@scheuber.name",
        "sun.am.UniversalIdentifier: id=volker@scheuber.name,ou=user,o=alpha,ou=services,ou=am-config",
        "OidcSid: ACuTQIObj0tajPYhLOjMlWc2urM",
        "Principal: id=volker@scheuber.name,ou=user,o=alpha,ou=services,ou=am-config",
        " */",
      ],
    },
    "3814d347-a2f2-4be9-a810-ab41a1e374bd": {
      "_id": "3814d347-a2f2-4be9-a810-ab41a1e374bd",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Hide buttons on the journey page.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Remove Button - imported (1)",
      "script": [
        "/* Remove Button",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Hide buttons on the journey page.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "    var script = "Array.prototype.slice.call(document.getElementsByTagName('button')).forEach(function (e) {e.style.display = 'none'})"",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    var message = " "",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                message",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "}());",
      ],
    },
    "38f698de-fe11-43d2-8480-44e1312d121d": {
      "_id": "38f698de-fe11-43d2-8480-44e1312d121d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "FRAAS-7955 Both States",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FRAAS-7955 Both States",
      "script": [
        "outcome = "true";",
        "",
        "setSharedObjectAttribute("userName", "FRAAS-7955");",
        "setSharedObjectAttribute("givenName", "First-shared");",
        "setSharedObjectAttribute("sn", "Last-shared");",
        "setSharedObjectAttribute("mail", "first.last-shared@company.com");",
        "",
        "setTransientObjectAttribute("userName", "FRAAS-7955");",
        "setTransientObjectAttribute("givenName", "First-transient");",
        "setTransientObjectAttribute("sn", "Last-transient");",
        "setTransientObjectAttribute("mail", "first.last-transient@company.com");",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "       var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
        "",
        "/*",
        " * Store attributes in transient state for use with the Create/Patch Object nodes.",
        " */",
        "function setTransientObjectAttribute(name, value) {",
        "    var transientStorage = transientState.get("objectAttributes");",
        "    if (transientStorage && value) {",
        "          if (transientStorage.put) {",
        "            transientStorage.put(name, value);",
        "        }",
        "          else {",
        "            transientStorage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "    transientState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "39c08084-1238-43e8-857f-2e11005eac49": {
      "_id": "39c08084-1238-43e8-857f-2e11005eac49",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Default alpha realm script for OAuth2 Access Token Modification",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha OAuth2 Access Token Modification Script",
      "script": [
        "/*",
        " * Copyright 2019-2021 ForgeRock AS. All Rights Reserved.",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script lets you modify information associated with an OAuth2 access token",
        " * with methods provided by the AccessToken (1) interface.",
        " * The changes made to OAuth2 access tokens will directly impact the size of the CTS tokens,",
        " * and, similarly, the size of the JWTs if client-based OAuth2 tokens are utilized.",
        " * When adding/updating fields make sure that the token size remains within client/user-agent limits.",
        " *",
        " * Defined variables:",
        " * accessToken - AccessToken (1).",
        " *               The access token to be updated.",
        " *               Mutable object, all changes to the access token will be reflected.",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *",
        " * Return - no value is expected, changes shall be made to the accessToken parameter directly.",
        " *",
        " * Class reference:",
        " * (1) AccessToken - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/AccessToken.html.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " */",
        "",
        "/* EXAMPLE",
        "(function () {",
        "    var frJava = JavaImporter(",
        "        org.forgerock.http.protocol.Request,",
        "        org.forgerock.http.protocol.Response",
        "    );",
        "",
        "    // Always includes this field in the token.",
        "    accessToken.setField('key1', 'value1');",
        "",
        "    // Receives and adds to the access token additional values by performing a REST call to an external service.",
        "    // WARNING: Below, you will find a reference to a third-party site, which is provided only as an example.",
        "    var uri = 'https://jsonplaceholder.typicode.com/posts';",
        "",
        "    try {",
        "        var request = new frJava.Request();",
        "",
        "        // You can chain methods that return the request object.",
        "        request.setUri(uri)",
        "            .setMethod('POST')",
        "            .setEntity(JSON.stringify({",
        "                updatedFields: {",
        "                    key2: 'value2',",
        "                    key3: 'value3'",
        "                }",
        "            }));",
        "",
        "        // You can call a method when chaining is not possible.",
        "        request.getHeaders().add('Content-Type', 'application/json; charset=UTF-8');",
        "",
        "        // Sends the request and receives the response.",
        "        var response = httpClient.send(request).getOrThrow();",
        "",
        "        // Checks if the response status is as expected.",
        "        if (response.getStatus() === org.forgerock.http.protocol.Status.CREATED) {",
        "            var result = JSON.parse(response.getEntity().getString());",
        "",
        "            // Set multiple token fields at once.",
        "            accessToken.setFields(result.updatedFields);",
        "        } else {",
        "            logger.error('Unable to obtain access token modifications. Status: ' + response.getStatus() + '. Content: ' + response.getEntity().getString());",
        "        }",
        "    } catch (e) {",
        "        logger.error('The request processing was interrupted. ' + e);",
        "",
        "        // The access token request fails with the HTTP 500 error in this case.",
        "        throw ('Unable to obtain response from: ' + uri);",
        "    }",
        "",
        "    // Adds new fields containing identity attribute values to the access token.",
        "    accessToken.setField('mail', identity.getAttribute('mail'));",
        "    accessToken.setField('phone', identity.getAttribute('telephoneNumber').toArray()[0]);",
        "",
        "    // Adds new fields containing the session property values.",
        "    // NOTE: session may not be available for non-interactive authorization grants.",
        "    if (session) {",
        "        try {",
        "            accessToken.setField('ipAddress', session.getProperty('Host'));",
        "        } catch (e) {",
        "            logger.error('Unable to retrieve session property value. ' + e);",
        "        }",
        "    }",
        "",
        "    // Removes a native field from the token entry, that was set by AM.",
        "    // WARNING: removing native fields from the token may result in loss of functionality.",
        "    // accessToken.removeTokenName()",
        "",
        "    // No return value is expected. Let it be undefined.",
        "}());",
        "*/",
      ],
    },
    "3b2f6836-184c-4ee9-8a1d-557cb01837a5": {
      "_id": "3b2f6836-184c-4ee9-8a1d-557cb01837a5",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript3",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "3cb43516-ae69-433a-8787-501d45db14e9": {
      "_id": "3cb43516-ae69-433a-8787-501d45db14e9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display sharedState, transientState, and headers.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "debug",
      "script": [
        "/* debug",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Display sharedState, transientState, and headers.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "var halign = "left";",
        "var message = "<p><b>Shared State</b>:<br/>".concat(",
        "      sharedState.toString()).concat("</p>").concat(",
        "    "<p><b>Transient State</b>:<br/>").concat(",
        "      transientState.toString()).concat("</p>").concat(",
        "    "<p><b>Request Headers</b>:<br/>").concat(",
        "      requestHeaders.toString()).concat("</p>")",
        "var script = "Array.prototype.slice.call(\\n".concat(",
        "  "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "  "function (e) {\\n").concat(",
        "  "  var message = e.firstElementChild;\\n").concat(",
        "  "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "  "    message.className = \\"text-left\\";\\n").concat(",
        "  "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "  "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "  "  }\\n").concat(",
        "  "})")",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "if (message.length && callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            anchor",
        "        ),",
        "        new fr.ScriptTextOutputCallback(script)",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo("true").build();",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "    return format.replace(/[x]/g, function(c) {",
        "        var r = Math.random()*10|0;",
        "        var v = r;",
        "        return v.toString(10);",
        "    });",
        "}",
      ],
    },
    "41c24257-d7fc-4654-8b46-c2666dc5b56d": {
      "_id": "41c24257-d7fc-4654-8b46-c2666dc5b56d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "set per level shared state variable",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "level",
      "script": [
        "(function () {",
        "  outcome = 'true';",
        "  var level = nodeState.get('level').asInteger();",
        "  sharedState.put('level' + level + 'Value', 'Level ' + level + ': This is a longer string value set at each level of the nested journeys. It contains an indicator in which level it was set.');",
        "}());",
      ],
    },
    "452d73ee-c6f3-4f4e-9dae-e75bb3886cbd": {
      "_id": "452d73ee-c6f3-4f4e-9dae-e75bb3886cbd",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Copy sharedState to transientState",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Copy to transientState",
      "script": [
        "outcome = "true";",
        "if (sharedState.get("objectAttributes")) {",
        "    transientState.put("objectAttributes", sharedState.get("objectAttributes"))",
        "}",
        "if (sharedState.get("username")) {",
        "    transientState.put("username", sharedState.get("username"))",
        "}",
        "if (sharedState.get("_id")) {",
        "    transientState.put("_id", sharedState.get("_id"))",
        "}",
      ],
    },
    "4855aac0-1efd-49c0-a153-3b9aadc911a6": {
      "_id": "4855aac0-1efd-49c0-a153-3b9aadc911a6",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Populate Username From Email",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Populate Username From Email",
      "script": [
        "outcome = "true";",
        "",
        "sharedState.put("username", getSharedObjectAttribute("mail"))",
        "setSharedObjectAttribute("userName", getSharedObjectAttribute("mail"))",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "       var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
        "",
        "/*",
        " * Read attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function getSharedObjectAttribute(name) {",
        "    var storage = sharedState.get("objectAttributes");",
        "    if (storage) {",
        "          if (storage.get) {",
        "            return sharedState.get("objectAttributes").get(name);",
        "        }",
        "          else {",
        "              return storage.name;",
        "        }",
        "    }",
        "    return null;",
        "}",
      ],
    },
    "48f17202-039f-4d40-b7fc-4ce380f1b929": {
      "_id": "48f17202-039f-4d40-b7fc-4ce380f1b929",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Collect all the configuration items required for the SAML2 Node to function properly.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect SAML2 Node Config",
      "script": [
        "/* Collect SAML2 Node Config",
        " * ",
        " * Collect all the configuration items required for the SAML2 Node to function properly.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "      var config = {",
        "        "metaAlias": "/iSPAzure",",
        "        "allowCreate": false,",
        "        "sloEnabled": false,",
        "        "authnContextClassRef": [],",
        "        "authnContextDeclRef": [],",
        "        "authComparison": "EXACT",",
        "        "nameIdFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",",
        "        "requestBinding": "HTTP_REDIRECT",",
        "        "binding": "HTTP_POST",",
        "        "forceAuthn": false,",
        "        "idpEntityId": "https://sts.windows.net/711ffa9c-5972-4713-ace3-688c9732614a/",",
        "        "isPassive": false,",
        "        "sloRelayState": """,
        "    };",
        "      var script = "";",
        "    script += "Array.prototype.slice.call(";",
        "    script += "    document.getElementsByTagName('input')";",
        "    script += ").forEach(";",
        "    script += "    function (input,i) {";",
        "    script += "        console.log('input '+i);"",
        "    script += "        var config = JSON.parse('"+JSON.stringify(config)+"');";",
        "    script += "        var keys = Object.keys(config);";",
        "    script += "        if (input.type === 'text') {";",
        "    script += "            input.setAttribute('value', config[keys[i]]);";",
        "    script += "            input.dispatchEvent(new KeyboardEvent( 'input' , {'key':'Enter'} ));";",
        "    script += "        }";",
        "    script += "    }";",
        "    script += ");";",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          javax.security.auth.callback.NameCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.NameCallback("metaAlias"),",
        "            new fr.NameCallback("allowCreate"),",
        "            new fr.NameCallback("sloEnabled"),",
        "            new fr.NameCallback("authnContextClassRef"),",
        "            new fr.NameCallback("authnContextDeclRef"),",
        "            new fr.NameCallback("authComparison"),",
        "            new fr.NameCallback("nameIdFormat"),",
        "            new fr.NameCallback("requestBinding"),",
        "            new fr.NameCallback("binding"),",
        "            new fr.NameCallback("forceAuthn"),",
        "            new fr.NameCallback("idpEntityId"),",
        "            new fr.NameCallback("isPassive"),",
        "            new fr.NameCallback("sloRelayState"),",
        "              new fr.ScriptTextOutputCallback(script)",
        "        ).build();",
        "    }",
        "    else {",
        "          config[callbacks.get(0).getPrompt()] = callbacks.get(0).getName();",
        "          config[callbacks.get(1).getPrompt()] = (callbacks.get(1).getName() === 'true');",
        "          config[callbacks.get(2).getPrompt()] = (callbacks.get(2).getName() === 'true');",
        "          config[callbacks.get(3).getPrompt()] = [callbacks.get(3).getName()];",
        "          config[callbacks.get(4).getPrompt()] = [callbacks.get(4).getName()];",
        "          config[callbacks.get(5).getPrompt()] = callbacks.get(5).getName();",
        "          config[callbacks.get(6).getPrompt()] = callbacks.get(6).getName();",
        "          config[callbacks.get(7).getPrompt()] = callbacks.get(7).getName();",
        "          config[callbacks.get(8).getPrompt()] = callbacks.get(8).getName();",
        "          config[callbacks.get(9).getPrompt()] = (callbacks.get(9).getName() === 'true');",
        "          config[callbacks.get(10).getPrompt()] = callbacks.get(10).getName();",
        "          config[callbacks.get(11).getPrompt()] = (callbacks.get(11).getName() === 'true');",
        "          config[callbacks.get(12).getPrompt()] = callbacks.get(12).getName();",
        "          nodeState.putShared("nodeConfig", config);",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "4a9aefc4-be0e-4625-95c3-ee8f354bce35": {
      "_id": "4a9aefc4-be0e-4625-95c3-ee8f354bce35",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_ClearCurrentYear",
      "script": [
        "if (sharedState.containsKey('objectAttributes')) {",
        "  sharedState.get('objectAttributes').remove('currentYear');",
        "}",
        "",
        "outcome = 'True';",
        "",
      ],
    },
    "4accb4d0-56ec-4a28-a769-5275dbac3147": {
      "_id": "4accb4d0-56ec-4a28-a769-5275dbac3147",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_PasswordFixStart",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        "This is a workaround that fixes an issue with password policy.",
        "",
        "The Platform Password node attempts to validate a password by calling IDM's validateProperty action, and it uses",
        "sharedState.objectAttributes as the \`object\` property of that request payload.  If the request is missing required properties",
        "or contains properties not in the object's schema, DS will error and IDM will swallow that error, returning an empty ",
        "list of failed policies instead.",
        "",
        "This workaround provides fake values for required properties. It also ensures first/last name is in objectAttributes so the",
        ""can't contain" policy can be evaluated. This workaround is cleaned up by Admin_PasswordFixEnd.js.",
        "*/",
        "",
        "// Capture existing object attributes so we can restore them later",
        "if (sharedState.containsKey('objectAttributes')) {",
        "  sharedState.put('originalObjectAttributes', sharedState.get('objectAttributes'));",
        "}",
        "",
        "// Define the object to use for policy evaluation",
        "var policyObject = {",
        "  givenName: '',",
        "  sn: '',",
        "  groups: ['fake'],",
        "  inviteDate: 'fake'",
        "};",
        "",
        "// If we've loaded the admin object, add first/last name to support",
        "// evaluation of the full policy",
        "if (sharedState.containsKey('adminObject')) {",
        "  var adminObject = sharedState.get('adminObject');",
        "  policyObject.givenName = adminObject.get('givenName');",
        "  policyObject.sn = adminObject.get('sn');",
        "}",
        "",
        "// Replace objectAttributes with our policy object",
        "sharedState.put('objectAttributes', policyObject);",
        "",
        "outcome = 'True';",
        "",
      ],
    },
    "4c7bb7bb-c5d6-47ac-92dc-256fb8121fa9": {
      "_id": "4c7bb7bb-c5d6-47ac-92dc-256fb8121fa9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_MfaRequiredCheck",
      "script": [
        "if ("false" == "true") {",
        "  outcome = "Required";",
        "} else {",
        "  outcome = "Optional";",
        "}",
      ],
    },
    "4ee5b182-1b09-45cc-97a9-0e609f0a2915": {
      "_id": "4ee5b182-1b09-45cc-97a9-0e609f0a2915",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Resend OTP Option",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Resend OTP Option",
      "script": [
        "/* CResend OTP Option",
        " *",
        " * Author: jon.knight@forgerock.com, volker.scheuber@forgerock.com",
        " * ",
        " * Collect OTP and validate the collected OTP. Also offer a resend option.",
        " * Return "true" if collected OTP is valid, "false" if collected OTP is invalid, ",
        " * and resend if the user selected the resend button.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " * - resend",
        " */",
        "(function () {",
        "  // how long until the "resend" button becomes enabled.",
        "  DELAY=20;",
        "  ",
        "  // how long (in seconds) should the OTP be accepted as valid",
        "  OTP_TTL = 30;",
        "",
        "  var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api.Action,",
        "      javax.security.auth.callback.NameCallback,",
        "      com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "  )",
        "",
        "  function createScript() {",
        "      return String(" \\n\\",
        "          var COUNT = " + DELAY + "; \\n\\",
        "          function go(obs) { \\n\\",
        "              const p = document.querySelectorAll('input[data-vv-as=\\"One Time Passcode\\"]')[0]; \\n\\",
        "              if (p) { \\n\\",
        "                  var b = document.createElement('button'); \\n\\",
        "                  b.id = 'resendButton'; \\n\\",
        "                  b.classList.add(\\"btn\\", \\"mt-3\\", \\"btn-secondary\\", \\"btn-sm\\"); \\n\\",
        "                  b.onclick = function() { p.value='___RESEND___'; p.dispatchEvent(new Event('input')); }; \\n\\",
        "                  b.innerHTML = 'Resend Code ... ' + COUNT + 's'; \\n\\",
        "                  b.disabled = true; \\n\\",
        "                  p.parentNode.insertBefore(b, p.nextSibling); \\n\\",
        "                  var t = setInterval(function() { \\n\\",
        "                      if (COUNT == 1) { \\n\\",
        "                          clearInterval(t); \\n\\",
        "                          b.disabled = false; \\n\\",
        "                          b.innerHTML = 'Resend Code'; \\n\\",
        "                      } else { \\n\\",
        "                          COUNT--; \\n\\",
        "                          b.innerHTML = 'Resend Code ... ' + COUNT + 's'; \\n\\",
        "                      } \\n\\",
        "                  }, 1000 ); \\n\\",
        "                  if (obs) obs.disconnect(); \\n\\",
        "                  return; \\n\\",
        "              } \\n\\",
        "          } \\n\\",
        "          if (document.querySelectorAll('input[data-vv-as=\\"One Time Passcode\\"]')[0]) go(); \\n\\",
        "          else { \\n\\",
        "              const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\n\\",
        "              observer.observe(document, { childList: true, subtree: true }); \\n\\",
        "          } \\n\\",
        "      ");",
        "  }",
        "",
        "  if (callbacks.isEmpty()) {",
        "      action = fr.Action.send(",
        "          new fr.ScriptTextOutputCallback(createScript()),",
        "          new fr.NameCallback("One Time Passcode")",
        "      ).build()",
        "  } else {",
        "      var otpTimestamp = Math.floor(new java.util.Date().getTime() / 1000);",
        "      var otp = callbacks.get(1).getName();",
        "      if (otp === "___RESEND___") {",
        "          action = fr.Action.goTo("resend").build();",
        "      } else {",
        "          var sentOtp = sharedState.get("oneTimePassword");",
        "          var sentOtpTimestamp = sharedState.get("oneTimePasswordTimestamp");",
        "          if (sentOtp == otp && otpTimestamp - OTP_TTL >= sentOtpTimestamp) {",
        "              action = fr.Action.goTo("true").build();",
        "            }",
        "          else {",
        "            action = fr.Action.goTo("false").build();",
        "          }",
        "      }",
        "  }",
        "}());",
      ],
    },
    "4f1273be-9c52-4879-bbe9-9a47068aeed9": {
      "_id": "4f1273be-9c52-4879-bbe9-9a47068aeed9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Unverified caller message",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Unverified Caller Message",
      "script": [
        "/* Twilio IVR: Unverified Caller Message",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "outcome = "true";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// Build out the full message",
        "var message = "That doesn't match our records. Let us try this another way.";",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextOutputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var output = new TextOutputCallback(TextOutputCallback.INFORMATION, message);",
        "        action = Action.send(output).build();",
        "      } ",
        "      else {",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
      ],
    },
    "50cde102-d4b6-44c4-9ba7-8564af05ae08": {
      "_id": "50cde102-d4b6-44c4-9ba7-8564af05ae08",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Select and apply theme from query param in the request URL.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Select Theme from URL",
      "script": [
        "/* Select Theme from URL",
        " * ",
        " * Select and apply theme from query param in the request URL.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      outcome = "true";",
        "      var theme = "";",
        "      if (requestParameters.get("themeId")) {",
        "          theme = requestParameters.get("themeId").get(0);",
        "    }",
        "",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        org.forgerock.openam.authentication.callbacks.PollingWaitCallback",
        "    )",
        "    if (theme && callbacks.isEmpty()) {",
        "        var stage = "themeId="+theme;",
        "        action = fr.Action.send(",
        "              new fr.PollingWaitCallback("100", "Please wait ...")",
        "        ).withStage(stage).build();",
        "    } else {",
        "          action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "53c50dbd-5331-4739-bea1-4c5e9bf553f2": {
      "_id": "53c50dbd-5331-4739-bea1-4c5e9bf553f2",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Welcome message",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Welcome Message",
      "script": [
        "/* Twilio IVR: Welcome Message",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "logger.warning("Twilio IVR: Welcome Message: start");",
        "outcome = "true";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// Build out the full message",
        "var message = "Thank you for calling ForgeRock Identity Cloud!";",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextOutputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var output = new TextOutputCallback(TextOutputCallback.INFORMATION, message);",
        "        action = Action.send(output).build();",
        "      } ",
        "      else {",
        "        logger.warning("Twilio IVR: Welcome Message: finish [outcome=".concat(outcome).concat("]"));",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
      ],
    },
    "5561a45f-bf00-4ec5-bab4-f069bac9a38b": {
      "_id": "5561a45f-bf00-4ec5-bab4-f069bac9a38b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Copy an OTP generated by the "HOTP Generator" node to the IDM profile shared state so it can be patched to the user profile.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "CopyOTPToObjectAttributes",
      "script": [
        "/* CopyOTPToObjectAttributes",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Copy an OTP generated by the "HOTP Generator" node to the IDM profile ",
        " * shared state so it can be patched to the user profile.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "if (sharedState.get("objectAttributes")) {",
        "    sharedState.get("objectAttributes").put("description", sharedState.get("oneTimePassword"))",
        "}",
        "else {",
        "    sharedState.put("objectAttributes", {description: sharedState.get("oneTimePassword")});",
        "}",
        "outcome = "true";",
      ],
    },
    "57807349-630f-496a-bccb-ea1011b8e945": {
      "_id": "57807349-630f-496a-bccb-ea1011b8e945",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Extract username, password, and OTP from request headers and put them in shared state for validation.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "MobileOTP: Extract Username, Password, OTP",
      "script": [
        "logger.warning("MobileOTP: Extract Username, Password, OTP: start");",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " */",
        "var USERNAME_HEADER_NAME = "X-OpenAM-Username";",
        "var PASSWORD_HEADER_NAME = "X-OpenAM-Password";",
        "var OTP_HEADER_NAME = "X-OpenAM-MobileOTP";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "outcome = "false";",
        "",
        "var username = getHeader(USERNAME_HEADER_NAME) || null;",
        "var password = getHeader(PASSWORD_HEADER_NAME) || null;",
        "var mobileOTP = getHeader(OTP_HEADER_NAME) || null;",
        "",
        "if (username && password && mobileOTP) {",
        "      sharedState.put("username", username);",
        "      transientState.put("password", password);",
        "      transientState.put("mobileOTP", mobileOTP);",
        "    outcome = "true";",
        "}",
        "",
        "logger.warning("MobileOTP: Extract Username, Password, OTP: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Returns the value of the requested header",
        " */",
        "function getHeader(headerName) {",
        "      if (requestHeaders.get(headerName) && requestHeaders.get(headerName).get(0)) {",
        "        return requestHeaders.get(headerName).get(0).toString();",
        "    }",
        "      return null;",
        "}",
      ],
    },
    "58258c2d-46f3-4811-85c4-ea1476dd9cf4": {
      "_id": "58258c2d-46f3-4811-85c4-ea1476dd9cf4",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Service Account - Cluster Internal Requests Only",
      "script": [
        "",
        "try {",
        "  var clientIpAddresses = requestHeaders.get(new java.lang.String('x-forwarded-for'));",
        "  if (!clientIpAddresses) {",
        "    logger.message('No forwarded header; internal cluster request');",
        "    outcome = 'True'",
        "  } else {",
        "    logger.message('Forwarded header {}', clientIpAddresses);",
        "    outcome = 'False';",
        "  }",
        "} catch (e) {",
        "  logger.error('Service Account - Cluster Internal Requests Only - failed deducing header');",
        "  logger.error(e);",
        "  outcome = 'Error';",
        "}",
      ],
    },
    "5b29c5b7-b161-4a42-a41f-d6c85316b951": {
      "_id": "5b29c5b7-b161-4a42-a41f-d6c85316b951",
      "context": "SAML2_IDP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Adapter Script",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOn",
        " *      - preAuthentication",
        " *      - preSendResponse",
        " *      - preSignResponse",
        " *      - preSendFailureResponse",
        " *",
        " * Please see the javadoc for the interface definition and more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)",
        " *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * request - HttpServletRequest (2)",
        " *     Servlet request object",
        " * response - HttpServletResponse (3)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (4)",
        " *     The original authentication request sent from SP",
        " * reqId - String",
        " *     The id to use for continuation of processing if the adapter redirects",
        " * res - Response (5)",
        " *     The SAML Response",
        " * session - SSOToken (6)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * relayState - String",
        " *     The relayState that will be used in the redirect",
        " * faultCode - String",
        " *     the fault code that will be returned in the SAML response",
        " * faultDetail - String",
        " *     the fault detail that will be returned in the SAML response",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (7):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.",
        " * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/Response.html.",
        " * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 IDP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOn:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preSingleSignOn () {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for preAuthentication:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preAuthentication () {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for preSendResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection happened after processing, false otherwise. Default to false.",
        " */",
        "function preSendResponse () {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for preSignResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     session",
        " *     relayState",
        " *     res",
        " *     logger",
        " */",
        "function preSignResponse () {",
        "}",
        "",
        "/*",
        " * Available variables for preSendFailureResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     response",
        " *     faultCode",
        " *     faultDetail",
        " *     logger",
        " */",
        "function preSendFailureResponse () {",
        "}",
      ],
    },
    "5b3b2c47-0248-46f4-8a1c-8a495d249037": {
      "_id": "5b3b2c47-0248-46f4-8a1c-8a495d249037",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Save/restore perpetrator",
      "script": [
        "outcome = "true";",
        "if (sharedState.get("perpetrator"))",
        "{",
        "  sharedState.put("username", sharedState.get("perpetrator"));",
        "//  if (sharedState.get("objectAttributes")) {",
        "//    sharedState.remove("objectAttributes");",
        "//  }",
        "  sharedState.put("objectAttributes", {});",
        "}",
        "else",
        "{",
        "  sharedState.put("perpetrator", sharedState.get("username"));",
        "  if (sharedState.get("objectAttributes") && ",
        "      sharedState.get("objectAttributes").get("userName")) {",
        "    sharedState.get("objectAttributes").remove("userName");",
        "  }",
        "}",
      ],
    },
    "5b553f58-16bd-42b7-a782-4a981a66dbd4": {
      "_id": "5b553f58-16bd-42b7-a782-4a981a66dbd4",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Branch based on the IDP setting.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Routed IDP Persist Decision",
      "script": [
        "/* Routed IDP Persist Decision",
        " * ",
        " * Branch based on the IDP setting.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      logger.message("Routed IDP Persist Decision: Start");",
        "      outcome = "false";",
        "      var routedIDP = sharedState.get("routedIDPs").get(0);",
        "      if (routedIDP) {",
        "        outcome = "".concat(routedIDP.get("idpPersist"));",
        "    }",
        "      logger.message("Routed IDP Persist Decision: Done [outcome={}]", outcome);",
        "}());",
      ],
    },
    "5bbdaeff-ddee-44b9-b608-8d413d7d65a6": {
      "_id": "5bbdaeff-ddee-44b9-b608-8d413d7d65a6",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if mode has already been set.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "mode",
      "script": [
        "/* mode",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Collect mode if not already set and set outcome to mode.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - 'shared and level'",
        " * - 'shared only'",
        " * - 'level only'",
        " * - 'none'",
        " */",
        "(function () {",
        "  var mode = nodeState.get('mode');",
        "  if (mode) {",
        "    outcome = mode.asString();",
        "    var level = nodeState.get('level').asInteger() + 1;",
        "    logger.error('mode: mode=' + mode.asString() + ', level=' + level);",
        "    sharedState.put('level', level);",
        "  }",
        "  else {",
        "    var choices = ['shared and level', 'shared only', 'level only', 'none'];",
        "  ",
        "    var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api.Action,",
        "      javax.security.auth.callback.ChoiceCallback",
        "    )",
        "",
        "    if (callbacks.isEmpty()) {",
        "      action = fr.Action.send([",
        "        new fr.ChoiceCallback('Choose test mode', choices, 0, false)",
        "      ]).build();",
        "    } else {",
        "      var choice = parseInt(callbacks.get(0).getSelectedIndexes()[0]);",
        "      nodeState.putShared('mode', choices[choice]);",
        "      nodeState.putShared('level', 0);",
        "      action = fr.Action.goTo(choices[choice]).build();",
        "    }",
        "  }",
        "}());",
      ],
    },
    "5dbd53c6-67ff-4a43-84c3-90c5cf5da35a": {
      "_id": "5dbd53c6-67ff-4a43-84c3-90c5cf5da35a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Return TextOutputCallback indicating the provided OTP was valid.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OTP Valid",
      "script": [
        "/* OTP Valid",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Return TextOutputCallback indicating the provided OTP was valid.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "outcome = "true";",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback",
        ")",
        "if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            "VALID"",
        "        )",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo(outcome).build();",
        "}",
      ],
    },
    "5e68fee3-047d-4fff-8e99-89fb5908f068": {
      "_id": "5e68fee3-047d-4fff-8e99-89fb5908f068",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_ForgotUsernameMailCheck",
      "script": [
        "var fr = new JavaImporter(",
        "  org.forgerock.openam.auth.nodes,",
        "  org.forgerock.guice.core,",
        "  java.util.HashMap",
        ");",
        "",
        "// This confirms the Identify Existing User node was able to find the",
        "// admin, otherwise we remove the mail attribute so no email can be sent",
        "with (fr) {",
        "  try {",
        "",
        "    var objAttrs = sharedState.get('objectAttributes') || new HashMap();",
        "    var username = objAttrs.get('userName');",
        "    outcome = username ? 'Valid' : 'Invalid';",
        "    if (username) {",
        "      outcome = 'Valid';",
        "    } else {",
        "      objAttrs.remove('mail');",
        "      sharedState.put('objectAttributes', objAttrs);",
        "      outcome = 'Invalid';",
        "    }",
        "",
        "    logger.message('Admin_ForgotUsernameMailCheck: ' + outcome);",
        "",
        "  } catch (e) {",
        "",
        "    logger.error('Admin_ForgotUsernameMailCheck: Failed to determine mail validity');",
        "    logger.error(e);",
        "    outcome = 'Error';",
        "",
        "  }",
        "}",
      ],
    },
    "5e854779-6ec1-4c39-aeba-0477e0986646": {
      "_id": "5e854779-6ec1-4c39-aeba-0477e0986646",
      "context": "CONFIG_PROVIDER_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Default global script for Config Provider",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Config Provider",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/**",
        " * The following script is a simplified template for understanding how to build",
        " * up a config Map object with custom values. The Config Provider Node will then",
        " * provide this config Map to the desired node type. It is important that the Map",
        " * you build here is named 'config'.",
        " *",
        " * Defined variables:",
        " *",
        " * nodeState - Node State (1)",
        " *           Always present, this represents the current values stored in the node state.",
        " *",
        " * idRepository - Profile Data (2)",
        " *           Always present, a repository to retrieve user information.",
        " *",
        " * secrets - Credentials and Secrets (3)",
        " *           Always present, an interface to access the Secrets API from a scripting context.",
        " *",
        " * requestHeaders (4) - Map (5)",
        " *           Always present, an object that provides methods for accessing headers in the login request.",
        " *",
        " * logger - Debug Logging (6)",
        " *          Always present, the debug logger instance.",
        " *",
        " * httpClient - HTTP Client (7)",
        " *          Always present, the HTTP client that can be used to make external HTTP requests.",
        " *",
        " * realm - String (primitive).",
        " *          Always present, the name of the realm the user is authenticating to.",
        " *",
        " * existingSession - Map<String, String> (5)",
        " *          Present if the request contains the session cookie, the user's session object. The returned map from",
        " *          SSOToken.getProperties() (8)",
        " *",
        " * requestParameters - Map (5)",
        " *          Always present, the object that contains the authentication request parameters.",
        " *",
        " *",
        " * Outputs:",
        " *",
        " * config - Map (5)",
        " *           Define and fill a Map object named 'config' with custom values, this will define the configuration for the",
        " *           associated node selected in the ConfigProviderNode.",
        " *",
        " * Reference:",
        " * (1) Node State - https://backstage.forgerock.com/docs/idcloud-am/latest/authentication-guide/scripting-api-node.html#scripting-api-node-nodeState",
        " * (2) Profile Data - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-node-id-repo",
        " * (3) Credentials and Secrets - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-authn-secrets",
        " * (4) Request Headers - https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html",
        " * (6) Debug Logging - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " * (7) HTTP Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " * (8) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " */",
        "",
        "config = nodeState.get('nodeConfig').asMap();",
      ],
    },
    "6325cf19-a49b-471e-8d26-7e4df76df0e2": {
      "_id": "6325cf19-a49b-471e-8d26-7e4df76df0e2",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Okta Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("Okta rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.preferred_username)))",
      ],
    },
    "638c865e-d393-4503-a517-535b9c74e010": {
      "_id": "638c865e-d393-4503-a517-535b9c74e010",
      "context": "CONFIG_PROVIDER_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "CP-InnerTreeEvaluator-static-inner1",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "CP-ITE-static-inner1",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/**",
        " * The following script is a simplified template for understanding how to build",
        " * up a config Map object with custom values. The Config Provider Node will then",
        " * provide this config Map to the desired node type. It is important that the Map",
        " * you build here is named 'config'.",
        " *",
        " * Defined variables:",
        " *",
        " * nodeState - Node State (1)",
        " *           Always present, this represents the current values stored in the node state.",
        " *",
        " * idRepository - Profile Data (2)",
        " *           Always present, a repository to retrieve user information.",
        " *",
        " * secrets - Credentials and Secrets (3)",
        " *           Always present, an interface to access the Secrets API from a scripting context.",
        " *",
        " * requestHeaders (4) - Map (5)",
        " *           Always present, an object that provides methods for accessing headers in the login request.",
        " *",
        " * logger - Debug Logging (6)",
        " *          Always present, the debug logger instance.",
        " *",
        " * httpClient - HTTP Client (7)",
        " *          Always present, the HTTP client that can be used to make external HTTP requests.",
        " *",
        " * realm - String (primitive).",
        " *          Always present, the name of the realm the user is authenticating to.",
        " *",
        " * existingSession - Map<String, String> (5)",
        " *          Present if the request contains the session cookie, the user's session object. The returned map from",
        " *          SSOToken.getProperties() (8)",
        " *",
        " * requestParameters - Map (5)",
        " *          Always present, the object that contains the authentication request parameters.",
        " *",
        " *",
        " * Outputs:",
        " *",
        " * config - Map (5)",
        " *           Define and fill a Map object named 'config' with custom values, this will define the configuration for the",
        " *           associated node selected in the ConfigProviderNode.",
        " *",
        " * Reference:",
        " * (1) Node State - https://backstage.forgerock.com/docs/idcloud-am/latest/authentication-guide/scripting-api-node.html#scripting-api-node-nodeState",
        " * (2) Profile Data - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-node-id-repo",
        " * (3) Credentials and Secrets - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-authn-secrets",
        " * (4) Request Headers - https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html",
        " * (6) Debug Logging - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " * (7) HTTP Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " * (8) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " */",
        "",
        "config = {",
        "  tree: 'inner1'",
        "};",
      ],
    },
    "653b70b0-a23d-403a-933b-911371cf84c0": {
      "_id": "653b70b0-a23d-403a-933b-911371cf84c0",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Returns privacy policy collection",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_PrivacyPolicy",
      "script": [
        "var jurisdictions = [",
        "  {",
        "    name: 'Australia',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a92472578'",
        "  },",
        "  {",
        "    name: 'Brazil',",
        "    url: 'https://www.forgerock.com/privacy-policy'",
        "  },",
        "  {",
        "    name: 'California',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a67552843'",
        "  },",
        "  {",
        "    name: 'Canada',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a92472578'",
        "  },",
        "  {",
        "    name: 'European Union',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a28580828'",
        "  },",
        "  {",
        "    name: 'Hong Kong',",
        "    url: 'https://www.forgerock.com/resources/view/109827462/overview/identity-cloud-privacy.pdf'",
        "  },",
        "  {",
        "    name: 'Indonesia',",
        "    url: 'https://www.forgerock.com/resources/view/109827462/overview/identity-cloud-privacy.pdf'",
        "  },",
        "  {",
        "    name: 'New Zealand',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a92472578'",
        "  },",
        "  {",
        "    name: 'Singapore',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a92472578'",
        "  },",
        "  {",
        "    name: 'United Kingdom',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a28580828'",
        "  },",
        "  {",
        "    name: 'United States',",
        "    url: 'https://www.forgerock.com/privacy-policy'",
        "  },",
        "  {",
        "    name: 'Rest of the World',",
        "    url: 'https://www.forgerock.com/privacy-policy'",
        "  }",
        "];",
        "",
        "var token = generateNumericToken('xxx');",
        "var inputId = 'jurisdiction-input-'.concat(token);",
        "var selectId = 'jurisdiction-select-'.concat(token);",
        "",
        "// Build the header and instructions",
        "var message = "<h2 class='h2'>Accept Privacy Policy</h2><div style='margin-bottom:1em'>Select your region of residence to review the applicable privacy policy.</div>";",
        "",
        "// Build the jurisdiction dropdown",
        "var dropdown = "<select id='".concat(selectId).concat("' class='custom-select' onchange='document._onJurisdictionChange()'><option value=''>Region of residence</option>");",
        "for (var i = 0; i < jurisdictions.length; i++) {",
        "  var j = jurisdictions[i];",
        "  dropdown = dropdown.concat("<option value='").concat(j.name).concat("' data-url='").concat(j.url).concat("'>").concat(j.name).concat("</option>");",
        "}",
        "dropdown = dropdown.concat("</select>");",
        "",
        "// Build the confirmation checkbox with policy link",
        "var confirm = "<div id='confirm-wrapper' class='custom-control custom-checkbox' style='padding:1rem;visibility:hidden'>".concat(",
        "  "<input id='confirm-check' type='checkbox' class='custom-control-input' onchange='document._setNextButton()'>").concat(",
        "  "<label class='custom-control-label' for='confirm-check'>").concat(",
        "  "I agree to ForgeRock's <a id='policy-link' target=_blank href='" + jurisdictions[0].url + "'>Privacy Policy</a>").concat(",
        "  "</label>").concat(",
        ""</div>");",
        "",
        "var html = message + dropdown + confirm;",
        "",
        "var script =",
        "  'document._onJurisdictionChange = function() {'.concat(",
        "  '  var jurisdiction = getJurisdiction();').concat(",
        "  '  console.log(jurisdiction);').concat(",
        "  '  if (jurisdiction) {').concat(",
        "  '    setPolicyLink(jurisdiction.url);').concat(",
        "  '    setJurisdiction(jurisdiction.name);').concat(",
        "  '    setConfirmVisibility(true);').concat(",
        "  '  } else {').concat(",
        "  '    setJurisdiction("");').concat(",
        "  '    setConfirmVisibility(false);').concat(",
        "  '  }').concat(",
        "  '  document._setNextButton();').concat(",
        "  '};').concat(",
        "    ",
        "  'document._setNextButton = function() {').concat(",
        "  '  var jurisdiction = getJurisdiction();').concat(",
        "  '  var cb = getCheckbox();').concat(",
        "  '  loginHelpers.disableNextButton(!jurisdiction || !cb.checked);').concat(",
        "  '};').concat(",
        "    ",
        "  'var getJurisdiction = function() {').concat(",
        "  '  var sel = document.getElementById("').concat(selectId).concat('");').concat(",
        "  '  var opt = sel.options[sel.selectedIndex];').concat(",
        "  '  return opt.value ? { name: opt.value, url: opt.getAttribute("data-url") } : null;').concat(",
        "  '};').concat(",
        "    ",
        "  'var getCheckbox = function() {').concat(",
        "  '  return document.getElementById("confirm-check");').concat(",
        "  '};').concat(",
        "    ",
        "  'var setConfirmVisibility = function(show) {').concat(",
        "  '  var el = document.getElementById("confirm-wrapper");').concat(",
        "  '  el.style.visibility = show ? "visible" : "hidden";').concat(",
        "  '};').concat(",
        "    ",
        "  'var setPolicyLink = function(url) {').concat(",
        "  '  document.getElementById("policy-link").setAttribute("href", url);').concat(",
        "  '};').concat(",
        "",
        "  'var setJurisdiction = function(name) {').concat(",
        "  '  loginHelpers.setHiddenCallback("').concat(inputId).concat('", name);').concat(",
        "  '};').concat(",
        "    ",
        "  'var isPageReady = function() {').concat(",
        "  '  return document.getElementById("callback_0") != null;').concat(",
        "  '};').concat(",
        "    ",
        "  'var setupPage = function() {').concat(",
        "  '  if (!isPageReady()) {').concat(",
        "  '    return setTimeout(setupPage, 100);').concat(",
        "  '  }').concat(",
        "  '  loginHelpers.disableNextButton(true);').concat(",
        "  '  var container = document.getElementById("callback_0");').concat(",
        "  '  container.insertAdjacentHTML("beforeend", "').concat(html).concat('");').concat(",
        "  '};').concat(",
        "    ",
        "  'setupPage();');",
        "",
        "function isValidJurisdiction(name) {",
        "  for (var i = 0; i < jurisdictions.length; i++) {",
        "    if (jurisdictions[i].name == name) {",
        "      return true;",
        "    }",
        "  }",
        "  return false;",
        "}",
        "",
        "var fr = JavaImporter(",
        "  org.forgerock.openam.auth.node.api.Action,",
        "  com.sun.identity.authentication.callbacks.HiddenValueCallback,",
        "  com.sun.identity.authentication.callbacks.ScriptTextOutputCallback,",
        "  java.util.HashMap",
        ")",
        "",
        "with (fr) {",
        "  if (callbacks.isEmpty() || !isValidJurisdiction(callbacks.get(0).getValue())) {",
        "    action = Action.send(",
        "      new HiddenValueCallback(inputId, ''),",
        "      new ScriptTextOutputCallback(script)",
        "    ).build();",
        "  } else {",
        "    var OBJ_ATTRS = 'objectAttributes';",
        "    var attrs = sharedState.containsKey(OBJ_ATTRS) ? sharedState.get(OBJ_ATTRS) : new HashMap();",
        "    attrs.put('jurisdiction', callbacks.get(0).getValue());",
        "    sharedState.put(OBJ_ATTRS, attrs);",
        "    action = Action.goTo('True').build();",
        "  }",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "  return format.replace(/[x]/g, function(c) {",
        "    var r = Math.random()*10|0;",
        "    var v = r;",
        "    return v.toString(10);",
        "  });",
        "}",
      ],
    },
    "68d5a8e7-fcc9-4215-9e63-a01afe8fa849": {
      "_id": "68d5a8e7-fcc9-4215-9e63-a01afe8fa849",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Perform IDP lookup based on email domain. Set users' external IDP in shared state or continue to local authentication.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "IDP Lookup",
      "script": [
        "/* IDP Lookup",
        " * ",
        " * Perform IDP lookup based on email domain. Set users' external IDP in shared state or continue to local authentication.",
        " * ",
        " * This script requires parametrization. Make sure you carefully review the configuration parameters.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - one",
        " * - multiple",
        " * - none",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    logger.message("IDP Lookup: start");",
        "      outcome = "none";",
        "      var username = sharedState.get("username");",
        "      var domain = username.substr(username.lastIndexOf("@")+1);",
        "      var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "",
        "      /* Begin Configuration */",
        "  ",
        "    // long-lived token",
        "    var IDM_API_TOKEN = systemEnv.getProperty("esv.admin.token");",
        "  ",
        "    // IDM API Configuration",
        "    var IDM_API_URI = referer.origin + "/openidm/managed/alpha_organization?_queryFilter=idpDomains+co+'" + domain + "'&_fields=name,description,idpName,idpType,idpDomains,idpJourney,idpTheme,idpPersist,samlConfig";",
        "",
        "      /* End Configuration */",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('GET');",
        "    request.setUri(IDM_API_URI);",
        "    request.getHeaders().add("Content-Type", "application/json; charset=UTF-8");",
        "    request.getHeaders().add("Authorization", "Bearer " + IDM_API_TOKEN);",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    logger.message("IDP Lookup: JSON result: " + JSON.stringify(result));",
        "    ",
        "      var routedIDPs = result.result.length ? result.result : [{}];",
        "      // stringify the samlConfig property",
        "      routedIDPs.forEach(function (routedIDP, index) {",
        "          routedIDPs[index].samlConfig = JSON.stringify(routedIDP.samlConfig);",
        "    });",
        "      sharedState.put("routedIDPs", routedIDPs);",
        "    if (result.resultCount === 1) {",
        "        logger.message("IDP Lookup: Found exactly 1 IDP");",
        "        outcome = "one";",
        "    }",
        "      else if (result.resultCount > 1) {",
        "        logger.message("IDP Lookup: Found {} IDPs", result.resultCount);",
        "        outcome = "multiple";",
        "    }",
        "      else {",
        "        logger.message("IDP Lookup: Found no IDPs");",
        "    }",
        "    logger.message("IDP Lookup: end [outcome={}]", outcome);",
        "",
        "    /*",
        "     * Parse a URL into its components and make them easily accessible by name",
        "     *",
        "     * Use in a Scripte Decision Node Script as follows:",
        "     * var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "     * var origin = referer.origin;",
        "     * ",
        "     * e.g.: https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "     * {",
        "     *     hash: '#/',",
        "     *     host: 'openam-volker-dev.forgeblocks.com',",
        "     *     hostname: 'openam-volker-dev.forgeblocks.com',",
        "     *     href: 'https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/',",
        "     *     origin: 'https://openam-volker-dev.forgeblocks.com',",
        "     *     pathname: '/am/XUI/',",
        "     *     port: '',",
        "     *     protocol: 'https',",
        "     *     search: '?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim',",
        "     *     username: '',",
        "     *     password: '',",
        "     *     searchParam: {",
        "     *         realm: '/bravo',",
        "     *         authIndexType: 'service',",
        "     *         authIndexValue: 'InitiateOwnerClaim'",
        "     *     }",
        "     * }",
        "     */",
        "    function parseUrl(href) {",
        "        var m = href.match(/^(([^:\\/?#]+):?(?:\\/\\/((?:([^\\/?#:]*):([^\\/?#:]*)@)?([^\\/?#:]*)(?::([^\\/?#:]*))?)))?([^?#]*)(\\?[^#]*)?(#.*)?$/),",
        "        r = {",
        "            hash: m[10] || "",                      // #/",
        "            host: m[3] || "",                       // openam-volker-dev.forgeblocks.com",
        "            hostname: m[6] || "",                   // openam-volker-dev.forgeblocks.com",
        "            href: m[0] || "",                       // https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "            origin: m[1] || "",                     // https://openam-volker-dev.forgeblocks.com",
        "            pathname: m[8] || (m[1] ? "/" : ""),    // /am/XUI/",
        "            port: m[7] || "",                       // ",
        "            protocol: m[2] || "",                   // https",
        "            search: m[9] || "",                     // ?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim",
        "            username: m[4] || "",                   // ",
        "            password: m[5] || "",                   // ",
        "            searchParam: {}                         // { realm: '/bravo',",
        "                                                    //   authIndexType: 'service',",
        "                                                    //   authIndexValue: 'InitiateOwnerClaim' }",
        "        };",
        "        if (r.protocol.length == 2) {",
        "            r.protocol = "file:///" + r.protocol.toUpperCase();",
        "            r.origin = r.protocol + "//" + r.host;",
        "        }",
        "        if (r.search.length > 2) {",
        "            var query = (r.search.indexOf('?') === 0) ? r.search.substr(1) : r.search;",
        "            var vars = query.split('&');",
        "            for (var i = 0; i < vars.length; i++) {",
        "            var pair = vars[i].split('=');",
        "            r.searchParam[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);",
        "            }",
        "        }",
        "        r.href = r.origin + r.pathname + r.search + r.hash;",
        "        return r;",
        "    };",
        "}());",
      ],
    },
    "6963d84e-e2f0-4db1-a746-116604189602": {
      "_id": "6963d84e-e2f0-4db1-a746-116604189602",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_SetCurrentYear",
      "script": [
        "var currentYear = new Date().getFullYear().toString();",
        "",
        "var objAttrs = sharedState.get('objectAttributes') || new java.util.HashMap();",
        "objAttrs.put('currentYear', currentYear);",
        "sharedState.put('objectAttributes', objAttrs);",
        "",
        "outcome = 'True';",
        "",
      ],
    },
    "6ad22934-5d12-43a6-96a7-a2fba8d999bf": {
      "_id": "6ad22934-5d12-43a6-96a7-a2fba8d999bf",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Call out to University of Phoenix Course Registration System and get current course.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "UOP Get Course ID",
      "script": [
        "/* UOP Get Course ID",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Call out to University of Phoenix Course Registration System and get current class.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is. ",
        " * It requires the Identify Existing User node before it is being called.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - has classes",
        " * - no classes",
        " * - error",
        " */",
        "logger.warning("UOP Get Course ID: start now");",
        "",
        "outcome = "error";",
        "",
        "if (sharedState.get("_id") && idRepository.getAttribute(sharedState.get("_id"), "mail").iterator().hasNext()) {",
        "",
        "       /* BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN API SETTINGS",
        "     */",
        "      var email = idRepository.getAttribute(sharedState.get("_id"), "mail").iterator().next();",
        "    var UOP_CLASS_API_URI = "https://dy4rpew5va.execute-api.us-east-1.amazonaws.com/forgerock/course?courseId=CES422";",
        "      //var UOP_CLASS_API_URI = "https://dy4rpew5va.execute-api.us-east-1.amazonaws.com/forgerock/course?emailId=".concat(email);",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('GET');",
        "    request.setUri(UOP_CLASS_API_URI);",
        "",
        "    var response = httpClient.send(request).get();",
        "    var UOPClassID = response.getEntity().getString();",
        "    logger.warning("UOP Get Course ID: API call result: Course ID=".concat(UOPClassID));",
        "",
        "    /* Sample API response",
        "    CES421",
        "    */",
        "",
        "    if (UOPClassID) {",
        "        outcome = "has classes";",
        "",
        "        // preserve result in shared state",
        "        sharedState.put("uopCurrentClassID", UOPClassID);",
        "    } ",
        "    else if (UOPClassID === "") {",
        "        outcome = "no classes";",
        "    }",
        "    else {",
        "        outcome = "error";",
        "    }",
        "",
        "} else {",
        "    logger.error("UOP Get Course ID: no classes!");",
        "}",
        "",
        "logger.warning("UOP Get Course ID: End (outcome=".concat(outcome).concat(")"));",
      ],
    },
    "6d6c2202-725b-4196-9436-92ec11a0b385": {
      "_id": "6d6c2202-725b-4196-9436-92ec11a0b385",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display sharedState and transientState.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Display States - imported (2)",
      "script": [
        "/* Display States",
        " * ",
        " * Display sharedState and transientState.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "",
        "    var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "    var halign = "left";",
        "    var message = "<h4>Current State Values</h4>".concat(",
        "        "<p><b>Shared State</b>:<br/>").concat(",
        "        sharedState.toString()).concat("</p>").concat(",
        "        "<p><b>Transient State</b>:<br/>").concat(",
        "        transientState.toString()).concat("</p>")",
        "    var script = "Array.prototype.slice.call(\\n".concat(",
        "      "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "      "function (e) {\\n").concat(",
        "      "  var message = e.firstElementChild;\\n").concat(",
        "      "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "      "    message.className = \\"\\";\\n").concat(",
        "      "    message.style = \\"text-align: left; inline-size: 430px; overflow-wrap: break-word;\\";\\n").concat(",
        "      "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "      "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "      "  }\\n").concat(",
        "      "})")",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (message.length && callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                anchor",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "    else {",
        "      action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "     /*",
        "      * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "      * ",
        "      * Example:",
        "      * 'xxxxx' produces '28535'",
        "      * 'xxx-xxx' produces '432-521'",
        "      */",
        "    function generateNumericToken(format) {",
        "        return format.replace(/[x]/g, function(c) {",
        "            var r = Math.random()*10|0;",
        "            var v = r;",
        "            return v.toString(10);",
        "        });",
        "    }",
        "}());",
      ],
    },
    "6dfc6de4-64cb-4d47-8269-6c5ced44344d": {
      "_id": "6dfc6de4-64cb-4d47-8269-6c5ced44344d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_IsInvited",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "if (sharedState.get('invited') == true) {",
        "  outcome = 'True';",
        "} else {",
        "  outcome = 'False';",
        "}",
      ],
    },
    "71545db5-ce01-46b1-b79f-d41af36bd548": {
      "_id": "71545db5-ce01-46b1-b79f-d41af36bd548",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Capture Evidence",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Onfido-CaptureEvidence",
      "script": [
        "logger.error("Onfido-CaptureEvidence: Start");",
        "/*",
        " * !!! Extend your authentication session time so your identity proofing flows don't time out !!!",
        " *",
        " * Authentication > Settings > Trees > Max Duration (Minutes)",
        " *",
        " * Set to 15 minutes.",
        " *",
        " */",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " */",
        "var onfido_auth_token = String(sharedState.get("onfidoAuthToken"));",
        "var onfido_dialog_title = "Join the Expanse family!";",
        "var onfido_dialog_msg1 = "To open an Expanse account, we will need to verify your identity.";",
        "var onfido_dialog_msg2 = "It will only take a couple of minutes.";",
        "var onfido_country_code = "US";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "var mobile = idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber");",
        "var smsNumber = "";",
        "if (mobile && mobile.iterator().hasNext()) {",
        "    smsNumber = String(mobile.iterator().next().toString());",
        "}",
        "",
        "// Inject Onfido SDK into login page",
        "onfidoScript = String("var body=document.body;\\n" +",
        "    "var script = document.createElement('script');\\n" +",
        "    "document.getElementById('callbacksPanel').style.display = 'none';\\n" +",
        "    "var onfido_div = document.createElement(\\"div\\");\\n" +",
        "    "onfido_div.id=\\"onfido-mount\\";\\n" +",
        "    "script.src = 'https://assets.onfido.com/web-sdk-releases/5.2.1/onfido.min.js';\\n" +",
        "    "var head = document.head; \\n " +",
        "    "var link = document.createElement(\\"link\\");  \\n" +",
        "    "     link.type = \\"text/css\\"; \\n " +",
        "    "     link.rel = \\"stylesheet\\"; \\n " +",
        "    "     link.href = 'https://assets.onfido.com/web-sdk-releases/5.2.1/style.css'; \\n " +",
        "    "    head.appendChild(link); \\n " +",
        "    ";\\n" +",
        "    "var onfido = {};\\n" +",
        "    "script.onload=function() {\\n" +",
        "    "    onfido=Onfido.init({\\n" +",
        "    "       token: '" + onfido_auth_token + "', \\n" +",
        "    "       useModal: true, \\n" +",
        "    "       isModalOpen: true, \\n" +",
        "    "       smsNumberCountryCode: '" + onfido_country_code + "', \\n" +",
        "    "       userDetails: { \\n" +",
        "    "           smsNumber: '" + smsNumber + "' \\n" +",
        "    "       }, \\n" +",
        "    "       steps: [\\n" +",
        "    "           {\\n" +",
        "    "               type:'welcome',\\n" +",
        "    "               options:{\\n" +",
        "    "                   title:'" + onfido_dialog_title + "',\\n" +",
        "    "                   descriptions:[\\n" +",
        "    "                       '" + onfido_dialog_msg1 + "',\\n" +",
        "    "                       '" + onfido_dialog_msg2 + "',\\n" +",
        "    "                   ]\\n" +",
        "    "               }\\n" +",
        "    "          },\\n" +",
        "    "          'document',\\n" +",
        "    "          'face',\\n" +",
        "    "          'complete',\\n" +",
        "    "       ],\\n" +",
        "    "       onComplete: function(data){ console.log('DONE'); onfido.setOptions({ isModalOpen:false }); document.getElementById('loginButton_0').click(); } \\n" +",
        "    "    })\\n" +",
        "    "};\\n" +",
        "    "document.body.appendChild(script);\\n");",
        "",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api,",
        "    javax.security.auth.callback.NameCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ");",
        "",
        "with (fr) {",
        "    if (callbacks.isEmpty()) {",
        "        logger.error("Onfido-CaptureEvidence: Sending callbacks");",
        "        action = Action.send(new ScriptTextOutputCallback(onfidoScript)).build();",
        "    } else {",
        "        logger.error("Onfido-CaptureEvidence: End (outcome=true)");",
        "        action = Action.goTo("true").build();",
        "    }",
        "}",
      ],
    },
    "71b3c70b-920c-464b-a918-4c86eaaddccd": {
      "_id": "71b3c70b-920c-464b-a918-4c86eaaddccd",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Render a dropdown",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Dropdown",
      "script": [
        "/* Dropdown",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Render a dropdown selector",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "  outcome = "true";",
        "  var choices = [" ", "Red pill", "Blue pill", "Steak", "Rabbit hole"];",
        "  ",
        "  var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.ChoiceCallback",
        "  )",
        "",
        "  if (callbacks.isEmpty()) {",
        "    action = fr.Action.send([",
        "      new fr.ChoiceCallback("Make your choice", choices, 0, false)",
        "    ]).build();",
        "  } else {",
        "    var choice = parseInt(callbacks.get(0).getSelectedIndexes()[0]);",
        "    nodeState.putShared("choice", choices[choice]);",
        "    action = fr.Action.goTo(outcome).build();",
        "  }",
        "}());",
      ],
    },
    "71e3b4ae-52c1-49d6-98fd-c279f43ea3ce": {
      "_id": "71e3b4ae-52c1-49d6-98fd-c279f43ea3ce",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "AAcustomLogic",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "outcome = "false";",
        "var predictionResult = sharedState.get("predictionResult");",
        "var predictionResultString = predictionResult.toString();",
        "",
        "var is_impossible_travel = 0;",
        "var is_credential_stuffing = 0;",
        "var is_automated_user_agent = 0;",
        "var is_brute_force = 0;",
        "var is_suspicious_ip = 0;",
        "",
        "var signal_count = 0;",
        "var position = 0;",
        "",
        "position = predictionResultString.search("is_impossible_travel=false");",
        "if(position<0)",
        "{",
        "  signal_count++;",
        "  is_impossible_travel=1;",
        "}",
        "position = predictionResultString.search("is_credential_stuffing=false");",
        "if(position<0)",
        "{",
        "  signal_count++;",
        "  is_credential_stuffing=1;",
        "}",
        "position = predictionResultString.search("is_automated_user_agent=false");",
        "if(position<0)",
        "{",
        "  signal_count++;",
        "  is_automated_user_agent=1;",
        "}",
        "position = predictionResultString.search("is_brute_force=false");",
        "if(position<0)",
        "{",
        "  signal_count++;",
        "  is_brute_force=1;",
        "}",
        "position = predictionResultString.search("is_suspicious_ip=false");",
        "if(position<0)",
        "{",
        "  signal_count++;",
        "  is_suspicious_ip=1;",
        "}",
        "",
        "sharedState.put("debug-signal-count",signal_count);",
        "if(signal_count>1)",
        "{",
        "     outcome="true"; ",
        "}",
        "",
        "",
        "",
      ],
    },
    "739bdc48-fd24-4c52-b353-88706d75558a": {
      "_id": "739bdc48-fd24-4c52-b353-88706d75558a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Check Username",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "740cf6fa-a173-4e9d-b17c-44758e9b19ec": {
      "_id": "740cf6fa-a173-4e9d-b17c-44758e9b19ec",
      "context": "CONFIG_PROVIDER_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "CP-InnerTreeEvaluator-static-inner2",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "CP-ITE-static-inner2",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/**",
        " * The following script is a simplified template for understanding how to build",
        " * up a config Map object with custom values. The Config Provider Node will then",
        " * provide this config Map to the desired node type. It is important that the Map",
        " * you build here is named 'config'.",
        " *",
        " * Defined variables:",
        " *",
        " * nodeState - Node State (1)",
        " *           Always present, this represents the current values stored in the node state.",
        " *",
        " * idRepository - Profile Data (2)",
        " *           Always present, a repository to retrieve user information.",
        " *",
        " * secrets - Credentials and Secrets (3)",
        " *           Always present, an interface to access the Secrets API from a scripting context.",
        " *",
        " * requestHeaders (4) - Map (5)",
        " *           Always present, an object that provides methods for accessing headers in the login request.",
        " *",
        " * logger - Debug Logging (6)",
        " *          Always present, the debug logger instance.",
        " *",
        " * httpClient - HTTP Client (7)",
        " *          Always present, the HTTP client that can be used to make external HTTP requests.",
        " *",
        " * realm - String (primitive).",
        " *          Always present, the name of the realm the user is authenticating to.",
        " *",
        " * existingSession - Map<String, String> (5)",
        " *          Present if the request contains the session cookie, the user's session object. The returned map from",
        " *          SSOToken.getProperties() (8)",
        " *",
        " * requestParameters - Map (5)",
        " *          Always present, the object that contains the authentication request parameters.",
        " *",
        " *",
        " * Outputs:",
        " *",
        " * config - Map (5)",
        " *           Define and fill a Map object named 'config' with custom values, this will define the configuration for the",
        " *           associated node selected in the ConfigProviderNode.",
        " *",
        " * Reference:",
        " * (1) Node State - https://backstage.forgerock.com/docs/idcloud-am/latest/authentication-guide/scripting-api-node.html#scripting-api-node-nodeState",
        " * (2) Profile Data - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-node-id-repo",
        " * (3) Credentials and Secrets - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-authn-secrets",
        " * (4) Request Headers - https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html",
        " * (6) Debug Logging - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " * (7) HTTP Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " * (8) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " */",
        "",
        "config = {",
        "  tree: 'inner2'",
        "};",
      ],
    },
    "743351b3-001a-4ec8-b3ac-a674ddb8de22": {
      "_id": "743351b3-001a-4ec8-b3ac-a674ddb8de22",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Enrich user session with UOP class ID.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "UOP Enrich Session",
      "script": [
        "/* UOP Enrich Session",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Add current class ID to user session.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is. ",
        " * It requires the Identify Existing User node before it is being called.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " */",
        "logger.warning("UOP Enrich Session: start");",
        "outcome = "false";",
        "",
        "if (sharedState.get("uopCurrentClassID")) {",
        "    outcome = "true";",
        "    logger.warning("UOP Enrich Session: going to enrich session with class id: ".concat(sharedState.get("uopCurrentClassID")));",
        "  ",
        "    var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api",
        "    );",
        "",
        "    with (fr) {",
        "        logger.warning("UOP Enrich Session: End (outcome=".concat(outcome).concat(")"));",
        "        action = Action.goTo(outcome).putSessionProperty("UOPClassID", sharedState.get("uopCurrentClassID")).build();",
        "    }",
        "  ",
        "} else {",
        "    logger.error("UOP Enrich Session: no classes!");",
        "    logger.warning("UOP Enrich Session: End (outcome=".concat(outcome).concat(")"));",
        "}",
      ],
    },
    "76421cb0-0550-43e7-89f8-51ad1d95d306": {
      "_id": "76421cb0-0550-43e7-89f8-51ad1d95d306",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Detect and preserve currently active theme before setting the new theme.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Set Theme",
      "script": [
        "/* Set Theme",
        " * ",
        " * Detect and preserve currently active theme before setting the new theme.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      outcome = "true";",
        "      ",
        "      var theme = "Expanse_MFA";",
        "",
        "    // do not change, must be a random identifier",
        "    var anchor = generateNumericToken('xxx');",
        "  ",
        "      var script = "";",
        "    script += "document.getElementById(\\"theme-id-"+anchor+"\\").value = localStorage.getItem('theme-id');";",
        "    script += "console.log('theme-id='+document.getElementById(\\"theme-id-"+anchor+"\\").value);";",
        "      script += "document.getElementById(\\"loginButton_0\\").click();";",
        "",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          org.forgerock.openam.authentication.callbacks.PollingWaitCallback,",
        "        com.sun.identity.authentication.callbacks.HiddenValueCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    // discover active theme from UI",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.HiddenValueCallback("theme-id-"+anchor, "false"),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build();",
        "    }",
        "      // get active theme from callback and set new theme",
        "      else if (callbacks.size() === 2) {",
        "        // did we get the id of the currently active theme?",
        "        if (callbacks.get(0).getValue() !== "theme-id-"+anchor) {",
        "              sharedState.put("themeId", callbacks.get(0).getValue());",
        "        }",
        "        // set new theme",
        "        var stage = "themeId="+theme;",
        "        action = fr.Action.send(",
        "              new fr.PollingWaitCallback("100", "Please wait ...")",
        "        ).withStage(stage).build();",
        "    }",
        "      else {",
        "        // continue",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "     /*",
        "      * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "      * ",
        "      * Example:",
        "      * 'xxxxx' produces '28535'",
        "      * 'xxx-xxx' produces '432-521'",
        "      */",
        "    function generateNumericToken(format) {",
        "        return format.replace(/[x]/g, function(c) {",
        "            var r = Math.random()*10|0;",
        "            var v = r;",
        "            return v.toString(10);",
        "        });",
        "    }",
        "}());",
      ],
    },
    "766ed2a6-29dd-4bd7-a60d-9eabbd63545c": {
      "_id": "766ed2a6-29dd-4bd7-a60d-9eabbd63545c",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Service Account - Verify JWT",
      "script": [
        "var fr = JavaImporter(",
        "  org.forgerock.util.Options,",
        "  org.forgerock.json.jose.jwk.JWKSet,",
        "  org.forgerock.json.jose.jws.SigningManager,",
        "  org.forgerock.json.jose.builders.JwtBuilderFactory,",
        "  org.forgerock.json.jose.jws.SignedJwt",
        ");",
        "",
        "var sm = new fr.SigningManager();",
        "",
        "function getJWKs(svcAcctId) {",
        "  var svcAcct = idRepository.getIdentity(svcAcctId);",
        "  if (svcAcct == null) {",
        "    logger.message('No service account found for {}', svcAcctId);",
        "    return null;",
        "  }",
        "  var jwksAttrs = svcAcct.getAttributeValues('fr-attr-jwks');",
        "  if (!jwksAttrs || jwksAttrs.length === 0) {",
        "    logger.message('No jwks attributes in issuer');",
        "    return null;",
        "  }",
        "  var jwkSet = jwksAttrs[0];",
        "  if (!jwkSet) {",
        "    logger.message('No jwk set in jwks attribute in issuer');",
        "    return null;",
        "  }",
        "  return fr.JWKSet.parse(jwkSet).getJWKsAsList();",
        "}",
        "",
        "outcome = (function () {",
        "  var authz = requestHeaders.get('authorization');",
        "  if (authz === null || authz.length === 0 || authz[0].indexOf('svcacct') !== 0) {",
        "    logger.message('No authorization header');",
        "    return 'False';",
        "  }",
        "",
        "  authz = authz[0].split(' ');",
        "  if (authz.length !== 3) {",
        "    logger.message('Bad authorization header length {}', authz.length);",
        "    return 'False';",
        "  }",
        "  var svcAcctId = authz[1];",
        "  var jwt = authz[2];",
        "  var signedJwt = new fr.JwtBuilderFactory().reconstruct(jwt, fr.SignedJwt);",
        "",
        "  var jwks = getJWKs(svcAcctId);",
        "  for (var i = 0; i < jwks.size(); i++) {",
        "    var verifier = sm.newVerificationHandler(jwks.get(i))",
        "    if (signedJwt.verify(verifier)) {",
        "      nodeState.putShared("username", svcAcctId);",
        "      return 'True';",
        "    }",
        "  }",
        "",
        "  logger.message('Could not verify jwt');",
        "  return 'False';",
        "})();",
      ],
    },
    "779bb956-676d-4e44-b828-b9efa3c866d4": {
      "_id": "779bb956-676d-4e44-b828-b9efa3c866d4",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ForgeRockVpnOnly",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "",
        "var validIpAddresses = [",
        "  "37.71.148.92", // FR Grenoble",
        "  "84.214.156.50", // FR Oslo",
        "  "180.255.64.26", // FR Singapore",
        "  "128.106.105.136", // FR Singapore Sales",
        "  "188.39.235.130", // FR Bristol",
        "  "78.33.22.162", // FR Bristol Marsh Street",
        "  "65.113.98.10", // FR San Francisco",
        "  "24.155.146.18" // FR Austin",
        "];",
        "",
        "try {",
        "  outcome = function() {",
        "    logger.message(requestHeaders);",
        "    var vpnBypassSecret = systemEnv.getProperty('esv.amadmin.vpn.bypass.secret', '') + '';",
        "    var bypassHeader = requestHeaders.get(new java.lang.String('x-forgerock-tests-bearer'));",
        "    logger.message("checking for VPN bypass - header {} to match secret {}", bypassHeader, vpnBypassSecret);",
        "    if (vpnBypassSecret && bypassHeader && bypassHeader.size() === 1) {",
        "      logger.message("bypass header is present");",
        "      if (bypassHeader.get(0) + '' === vpnBypassSecret + '') {",
        "        logger.warning("bypassing VPN check - request from tests authorized");",
        "        return 'True';",
        "      }",
        "    }",
        "    var clientIpAddresses = requestHeaders.get(new java.lang.String('x-forwarded-for'));",
        "    logger.message(clientIpAddresses);",
        "    if (!clientIpAddresses) {",
        "      logger.message("No forwarded header - internal cluster request");",
        "      return 'True';",
        "    }",
        "    for (var i = 0; i < clientIpAddresses.size(); i++) {",
        "      var clientIpHeader = clientIpAddresses.get(i);",
        "      var ipAddresses = clientIpHeader.split(',');",
        "      for (var j = 0; j < ipAddresses.length; j++) {",
        "        var clientIp = ipAddresses[j].trim();",
        "        logger.message('Checking client IP ' + clientIp);",
        "        for (var k = 0; k < validIpAddresses.length; k++) {",
        "          if (clientIp + '' === validIpAddresses[k]) {",
        "            logger.warning("request from ForgeRock VPN authorized");",
        "            return 'True';",
        "          }",
        "        }",
        "      }",
        "    }",
        "    logger.warning("request from outside the cluster and not from ForgeRock VPN rejected");",
        "    return 'False';",
        "  }();",
        "",
        "} catch (e) {",
        "",
        "  logger.error('ForgeRockVpnOnly failed to check IP');",
        "  logger.error(e);",
        "  outcome = 'Error';",
        "",
        "}",
        "",
      ],
    },
    "790045fa-a325-4e3e-96f8-d4a91b32e9de": {
      "_id": "790045fa-a325-4e3e-96f8-d4a91b32e9de",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Use Have I Been Pwned Password to check if password has been breached.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "HIBP Password Breach Analysis",
      "script": [
        "/* HIBP Password Breach Analysis",
        " *",
        " * Authors: jon.knight@forgerock.com, volker.scheuber@forgerock.com",
        " * ",
        " * Use Have I Been Pwned Password to check if password has been breached.",
        " * Calls HIBP API to retrieve the count of matching passwords in breached ",
        " * password database",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Password or Platform Password collector nodes before",
        " * it can operate.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - clear",
        " *   The number of breaches for password was either zero or less than the ",
        " *   value of THRESHOLD",
        " * - breached ",
        " *   The number of incidents of the password in the breached password ",
        " *   database exceeds THRESHOLD",
        " * - failed",
        " *   The API call was rejected.",
        " */",
        "(function () {",
        "    var USER_AGENT="ForgeRock";",
        "    var HIBP_API_KEY=systemEnv.getProperty("esv.hibp.api.key");",
        "    var THRESHOLD=0;",
        "",
        "    function toHexString(byteArray) {",
        "        var s = '';",
        "        byteArray.forEach(function(byte) {",
        "            s += ('0' + (byte & 0xFF).toString(16)).slice(-2);",
        "        });",
        "        return s;",
        "    }",
        "",
        "    outcome = "failed";",
        "",
        "    var md = java.security.MessageDigest.getInstance('SHA-1');",
        "      var password = nodeState.get("password").asString();",
        "//      var password = new java.lang.String("");",
        "//      if (nodeState.get("password")) {",
        "//      password = nodeState.get("password").asString();",
        "//    }",
        "    var byteArray = password.getBytes("UTF-8");",
        "    md.update(byteArray);",
        "    var digest = md.digest();",
        "    var hex = String(toHexString(digest)).toUpperCase();",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('GET');",
        "    request.setUri('https://api.pwnedpasswords.com/range/' + hex.substring(0,5));",
        "    request.getHeaders().add("Accept","*/*");",
        "    request.getHeaders().add("Content-Type","application/json");",
        "    request.getHeaders().add("User-Agent", USER_AGENT);",
        "    request.getHeaders().add("hibp-api-key", HIBP_API_KEY);",
        "",
        "    var response = httpClient.send(request).get();",
        "",
        "    if (response.getStatus().getCode() === 200) {",
        "        var max = 0;",
        "        outcome = "clear";",
        "        var result = response.getEntity().getString();",
        "        var lines = result.split('\\n');",
        "        for (i=0; i<lines.length; i++) {",
        "            var prefix = lines[i].split(':')[0];",
        "            if (String(hex.substring(0,5) + prefix) == hex) {",
        "                var count = lines[i].split(':')[1];",
        "                if (count > max) max = count;",
        "            }",
        "        }",
        "        if (max > THRESHOLD) outcome = "breached";",
        "        sharedState.put("hibp_password_count", max);",
        "    }",
        "}());",
      ],
    },
    "7dce8f07-d9fe-4752-94b9-ff99dfd0433b": {
      "_id": "7dce8f07-d9fe-4752-94b9-ff99dfd0433b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Parse parameters of the incoming call.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Parse Call Parameters",
      "script": [
        "/* Twilio IVR Integration",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "",
        "logger.warning("Twilio IVR: Parse Call Parameters: start");",
        "outcome = "false";",
        "",
        "/* Begin Twilio IVR Configuration Parameters",
        " *",
        " * These are used to protect this journey so it is only being executed by your Twilio account.",
        " */",
        "var TWILIO_ACCOUNT_SID = "AC750415e3163a2e57b7aeea7eed82d944";",
        "var TWILIO_PHONE_NUMBER = "+13176443107";",
        "",
        "// keep the params to a minimum to minimize authentication session size",
        "var callParams = {",
        "  //"CallSid" : decodeURIComponent(requestParameters.get("CallSid").get(0)),",
        "  "AccountSid" : decodeURIComponent(requestParameters.get("AccountSid").get(0)),",
        "  "From" : decodeURIComponent(requestParameters.get("From").get(0)),",
        "  "To" : decodeURIComponent(requestParameters.get("To").get(0)),",
        "  //"CallStatus" : decodeURIComponent(requestParameters.get("CallStatus").get(0)),",
        "  //"ApiVersion" : decodeURIComponent(requestParameters.get("ApiVersion").get(0)),",
        "  //"Direction" : decodeURIComponent(requestParameters.get("Direction").get(0)),",
        "  //"ForwardedFrom" : decodeURIComponent(requestParameters.get("ForwardedFrom").get(0)),",
        "  //"CallerName" : decodeURIComponent(requestParameters.get("CallerNameCallerName").get(0)),",
        "  //"ParentCallSid" : decodeURIComponent(requestParameters.get("ParentCallSid").get(0)),",
        "  //"FromCity" : decodeURIComponent(requestParameters.get("FromCity").get(0)),",
        "  //"FromState" : decodeURIComponent(requestParameters.get("FromState").get(0)),",
        "  //"FromZip" : decodeURIComponent(requestParameters.get("FromZip").get(0)),",
        "  //"FromCountry" : decodeURIComponent(requestParameters.get("FromCountry").get(0)),",
        "  //"ToCity" : decodeURIComponent(requestParameters.get("ToCity").get(0)),",
        "  //"ToState" : decodeURIComponent(requestParameters.get("ToState").get(0)),",
        "  //"ToZip" : decodeURIComponent(requestParameters.get("ToZip").get(0)),",
        "  //"ToCountry" : decodeURIComponent(requestParameters.get("ToCountry").get(0)),",
        "};",
        "",
        "/* End Twilio IVR Configuration Parameters ",
        " */",
        "",
        "if (callParams.AccountSid == TWILIO_ACCOUNT_SID &&",
        "    callParams.To == TWILIO_PHONE_NUMBER) ",
        "{",
        "      outcome = "true";",
        "    sharedState.put("TwilioIVRCallParams", callParams);",
        "    setSharedObjectAttribute("telephoneNumber", callParams.From);",
        "}",
        "",
        "logger.warning("Twilio IVR: Parse Call Parameters: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "       var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "7dd80834-e7b2-4737-85a7-40434bb19dde": {
      "_id": "7dd80834-e7b2-4737-85a7-40434bb19dde",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Store the impersontor and impersonatee profile information in session properties.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Impersonate: Update Session Properties",
      "script": [
        "/* Impersonate: Update Session Properties",
        " * ",
        " * Store the impersontor and impersonatee profile information in session properties.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: jake.feasel@forgerock.com, volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      logger.message("Impersonate: Update Session Properties: start");",
        "      outcome = "true";",
        "  ",
        "    var goTo = org.forgerock.openam.auth.node.api.Action.goTo;",
        "    myGoto = goTo(outcome);",
        "    myGoto.putSessionProperty("userName", sharedState.get("username"));",
        "    myGoto.putSessionProperty("impersonator", sharedState.get("impersonator"));",
        "",
        "      logger.message("Impersonate: Update Session Properties: done [outcome={}]", outcome);",
        "    action = myGoto.build();",
        "}());",
      ],
    },
    "7fb962a5-9f20-41d3-a077-b424a29c1198": {
      "_id": "7fb962a5-9f20-41d3-a077-b424a29c1198",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Evaluate IPv4 CIDR access rules from "esv-ipv4-cidr-access-rules".",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "IPv4 CIDR Rules Engine",
      "script": [
        "/* IPv4 CIDR Rules Engine",
        " *",
        " * Author: volker.scheuber@forgerock.com, justin.chin@forgerock.com",
        " * ",
        " * Evaluate IPv4 CIDR access rules from "esv-ipv4-cidr-access-rules". ",
        " * Access rules must have the following format:",
        " * {",
        " *   "allow": [",
        " *     "140.118.0.0/16",",
        " *     "110.35.0.0/16",",
        " *     "131.26.0.0/16",",
        " *     "92.61.21.153/32"",
        " *   ]",
        " * }",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - allow",
        " * - deny",
        " */",
        "(function () {",
        "  outcome = "deny";",
        "  ",
        "  var rules = JSON.parse(systemEnv.getProperty("esv.ipv4.cidr.access.rules"));",
        "  var allow = rules['allow'];",
        "",
        "  /*",
        "   * Returns the value of the requested header",
        "   */",
        "  function getHeader(headerName) {",
        "    return requestHeaders.get(headerName).get(0);",
        "  }",
        "",
        "  /*",
        "   * Returns the client's IP address",
        "   */",
        "  function getClientIPAddress() {",
        "    return getHeader("x-forwarded-for").split(',')[0];",
        "  }",
        "",
        "  function IPnumber(IPaddress) {",
        "    var ip = IPaddress.match(/^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/);",
        "    if (ip) {",
        "      return (+ip[1] << 24) + (+ip[2] << 16) + (+ip[3] << 8) + +ip[4];",
        "    }",
        "    // else ... ?",
        "    return null;",
        "  }",
        "",
        "  function IPmask(maskSize) {",
        "    return -1 << (32 - maskSize);",
        "  }",
        "",
        "  function isAllowed(ip) {",
        "    var allowed = false;",
        "    allow.forEach((cidr) => {",
        "      if (",
        "        (IPnumber(ip) & IPmask(cidr.split('/')[1])) ==",
        "        IPnumber(cidr.split('/')[0])",
        "      ) {",
        "        allowed = true;",
        "      }",
        "    });",
        "    return allowed;",
        "  }",
        "  ",
        "  if (isAllowed(getClientIPAddress())) {",
        "    outcome = "allow";",
        "  }",
        "}());",
      ],
    },
    "809330cf-874c-4d57-a8f1-5882c6dd855b": {
      "_id": "809330cf-874c-4d57-a8f1-5882c6dd855b",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Converts a normalized social profile for iddataweb into a Managed user",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Normalized idddataweb Profile to Managed User",
      "script": [
        "/* Normalized idddataweb Profile to Managed User",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS. Not for production use.",
        " * Modified by Stephen Payne, 2021-Mar-30",
        " */",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "import org.forgerock.json.JsonValue",
        "logger.error("Normalized_Profile_IDDataWeb: Start " + normalizedProfile);",
        "",
        "JsonValue managedUser = json(object(",
        "        field("givenName", normalizedProfile.givenName),",
        "        field("sn", normalizedProfile.familyName),",
        "        field("userName", normalizedProfile.username)))",
        "if (normalizedProfile.postalAddress.isNotNull()) managedUser.put("postalAddress", normalizedProfile.postalAddress)",
        "if (normalizedProfile.addressLocality.isNotNull()) managedUser.put("city", normalizedProfile.addressLocality)",
        "if (normalizedProfile.addressRegion.isNotNull()) managedUser.put("stateProvince", normalizedProfile.addressRegion)",
        "if (normalizedProfile.postalCode.isNotNull()) managedUser.put("postalCode", normalizedProfile.postalCode)",
        "if (normalizedProfile.country.isNotNull()) managedUser.put("country", normalizedProfile.country)",
        "if (normalizedProfile.phone.isNotNull()) managedUser.put("telephoneNumber", normalizedProfile.phone)",
        "if (normalizedProfile.DOB.isNotNull()) managedUser.put("frIndexedString2", normalizedProfile.DOB)",
        "",
        "return managedUser",
        "",
      ],
    },
    "80c3e733-ae51-4851-a01d-1cbf193c80e9": {
      "_id": "80c3e733-ae51-4851-a01d-1cbf193c80e9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Activates the admin's account",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_SetOnboardingAttributes",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "function utcNow() {",
        "  return new Date().toISOString();",
        "}",
        "",
        "try {",
        "  ",
        "  var OBJECT_ATTRS = 'objectAttributes';",
        "",
        "  // Start by getting object attributes from shared state",
        "  var sharedObjAttrs = sharedState.get(OBJECT_ATTRS);",
        "  sharedObjAttrs.put('accountStatus', 'Active');",
        "  sharedObjAttrs.put('onboardDate', utcNow());",
        "  ",
        "  // Copy attributes from transient state",
        "  var transientObjAttrs = nodeState.get(OBJECT_ATTRS);",
        "  var attrs = ['aliasList', 'givenName', 'password', 'sn'];",
        "  for (var i = 0; i < attrs.length; i++) {",
        "    var val = transientObjAttrs.get(attrs[i]);",
        "    if (val.isNotNull()) {",
        "      sharedObjAttrs.put(attrs[i], val);",
        "    }",
        "  }",
        "  ",
        "  // Ensure object attributes match in both shared and transient state",
        "  nodeState.putTransient(OBJECT_ATTRS, sharedObjAttrs);",
        "  sharedState.put(OBJECT_ATTRS, sharedObjAttrs);",
        "  outcome = 'Success';",
        "",
        "} catch (e) {",
        "",
        "  logger.error('Failed to set attributes to complete onboarding: {}', e);",
        "  outcome = 'Error';",
        "",
        "}",
        "",
      ],
    },
    "847aab1b-c739-4d64-b26c-180f96cba02b": {
      "_id": "847aab1b-c739-4d64-b26c-180f96cba02b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Select and apply theme from based on the browser language in the request.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Select Theme by Browser Language",
      "script": [
        "/* Select Theme by Browser Language",
        " * ",
        " * Select and apply theme from based on the browser language in the request.",
        " * ",
        " * This script needs to be parametrized!",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    /******************************/",
        "    /* Begin Script Configuration */",
        "",
        "    // the script expects the themes to be named <baseTheme>_<language>, e.g. "Zardoz_en"",
        "    var baseTheme = "Zardoz";",
        "",
        "    // add all the language codes you want to support",
        "    var supportedLanguages = ["de", "en", "fr"];",
        "",
        "    // specify the default language to fall back on if the browser language is not a supported language",
        "    var defaultLanguage = "en";",
        "",
        "    /* End Script Configuration   */",
        "    /******************************/",
        "",
        "    outcome = "true";",
        "    var theme = getThemeByLanguage(baseTheme);",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        org.forgerock.openam.authentication.callbacks.PollingWaitCallback",
        "    )",
        "    if (theme && callbacks.isEmpty()) {",
        "        var stage = "themeId=" + theme;",
        "        action = fr.Action.send(",
        "            new fr.PollingWaitCallback("100", "Please wait ...")",
        "        ).withStage(stage).build();",
        "    } else {",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "    /*",
        "     * Returns the name of the theme to select based on browser language",
        "     */",
        "    function getThemeByLanguage(theme) {",
        "        var languageHeader = getHeader("accept-language");",
        "        var language = languageHeader.split(';')[0].split(',')[0].split('-')[0];",
        "        if (supportedLanguages.indexOf(language) < 0) {",
        "            language = defaultLanguage;",
        "        }",
        "        return theme + "_" + language;",
        "    }",
        "",
        "    /*",
        "     * Returns the value of the requested header",
        "     */",
        "    function getHeader(headerName) {",
        "        return requestHeaders.get(headerName).get(0) + "";",
        "    }",
        "}());",
      ],
    },
    "849ef5f3-7481-4607-a668-f0b5bf47db4c": {
      "_id": "849ef5f3-7481-4607-a668-f0b5bf47db4c",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Goodbye Message",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Goodbye Message",
      "script": [
        "/* Twilio IVR: Goodbye Message",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "logger.warning("Twilio IVR: Goodbye Message: start");",
        "outcome = "true";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// Build out the full message",
        "var message = "Thank you for calling ForgeRock Identity Cloud. Goodbye!";",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextOutputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var output = new TextOutputCallback(TextOutputCallback.INFORMATION, message);",
        "        action = Action.send(output).build();",
        "      } ",
        "      else {",
        "        logger.warning("Twilio IVR: Goodbye Message: finish [outcome=".concat(outcome).concat("]"));",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
      ],
    },
    "8508a00e-ad45-4310-b3c7-c6871b6a41a9": {
      "_id": "8508a00e-ad45-4310-b3c7-c6871b6a41a9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Browser Language Decision",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Browser Language Decision",
      "script": [
        "/* Browser Language Decision",
        " * ",
        " * Detect the browser language in the request and branch out to its named exit (e.g.: "de" or "en" or "fr") ",
        " * if it is part of the supportedLanguages array, otherwise take the "other" exit.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - other",
        " * - <all of the items in the supportedLanguages array>",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      /******************************/",
        "      /* Begin Script Configuration */",
        "      ",
        "      // add all the language codes you want to support",
        "      var supportedLanguages = ["de","en","fr"];",
        "      ",
        "      /* End Script Configuration   */",
        "      /******************************/",
        "  ",
        "      outcome = getBrowserLanguage();",
        "      ",
        "    /*",
        "     * Returns the supported browser language or "other"",
        "     */",
        "    function getBrowserLanguage() {",
        "          var languageHeader = getHeader("accept-language");",
        "          var language = languageHeader.split(';')[0].split(',')[0].split('-')[0];",
        "          if (supportedLanguages.indexOf(language) < 0) {",
        "              return "other";",
        "        }",
        "        return language;",
        "    }",
        "",
        "    /*",
        "     * Returns the value of the requested header",
        "     */",
        "    function getHeader(headerName) {",
        "        return requestHeaders.get(headerName).get(0)+"";",
        "    }",
        "}());",
      ],
    },
    "85523e71-2d77-4577-b078-6f9674cc54e2": {
      "_id": "85523e71-2d77-4577-b078-6f9674cc54e2",
      "context": "SAML2_IDP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Always redirect browser pre-auth",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Adapter Always Auth",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOn",
        " *      - preAuthentication",
        " *      - preSendResponse",
        " *      - preSignResponse",
        " *      - preSendFailureResponse",
        " *",
        " * Please see the javadoc for the interface definition and more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)",
        " *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * request - HttpServletRequest (2)",
        " *     Servlet request object",
        " * response - HttpServletResponse (3)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (4)",
        " *     The original authentication request sent from SP",
        " * reqId - String",
        " *     The id to use for continuation of processing if the adapter redirects",
        " * res - Response (5)",
        " *     The SAML Response",
        " * session - SSOToken (6)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * relayState - String",
        " *     The relayState that will be used in the redirect",
        " * faultCode - String",
        " *     the fault code that will be returned in the SAML response",
        " * faultDetail - String",
        " *     the fault detail that will be returned in the SAML response",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (7):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.",
        " * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/Response.html.",
        " * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 IDP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOn:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preSingleSignOn () {",
        "      logger.error("Chicago: preSingleSignOn");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preAuthentication:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preAuthentication () {",
        "      logger.error("Chicago: preAuthentication");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSendResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection happened after processing, false otherwise. Default to false.",
        " */",
        "function preSendResponse () {",
        "      logger.error("Chicago: preSendResponse");",
        "      logger.error("Chicago: authnRequest: "+authnRequest);",
        "      response.sendRedirect("https://idc.scheuber.io/am/XUI/?realm=alpha&authIndexType=service&authIndexValue=Dispatcher&ForceAuth=true&goto="+relayState);",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSignResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     session",
        " *     relayState",
        " *     res",
        " *     logger",
        " */",
        "function preSignResponse () {",
        "      logger.error("Chicago: preSignResponse");",
        "}",
        "",
        "/*",
        " * Available variables for preSendFailureResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     response",
        " *     faultCode",
        " *     faultDetail",
        " *     logger",
        " */",
        "function preSendFailureResponse () {",
        "      logger.error("Chicago: preSendFailureResponse");",
        "}",
      ],
    },
    "87497360-d89c-412a-a99e-c8a9bec465cc": {
      "_id": "87497360-d89c-412a-a99e-c8a9bec465cc",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ipstack",
      "script": [
        "logger.warning("ipstack: start");",
        "",
        "outcome = "unknown";",
        "",
        "var ip = getClientIPAddress();",
        "logger.warning("ipstack: ip=".concat(ip));",
        "",
        "if (ip) {",
        "",
        "      // ipstack API Configuration",
        "    var IPSTACK_ACCESS_KEY = "efc2f8d9796b9feff5f03359d6fbccc9";",
        "    var IPSTACK_API_URI = "http://api.ipstack.com/".concat(ip).concat("?access_key=").concat(IPSTACK_ACCESS_KEY);    ",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('GET');",
        "    request.setUri(IPSTACK_API_URI);",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    logger.warning("ipstack: JSON result: " + JSON.stringify(result));",
        "",
        "      /*",
        "    {",
        "        "ip": "99.72.28.182",",
        "        "type": "ipv4",",
        "        "continent_code": "NA",",
        "        "continent_name": "North America",",
        "        "country_code": "US",",
        "        "country_name": "United States",",
        "        "region_code": "TX",",
        "        "region_name": "Texas",",
        "        "city": "Georgetown",",
        "        "zip": "78626",",
        "        "latitude": 30.592500686645508,",
        "        "longitude": -97.66710662841797,",
        "        "location": {",
        "            "geoname_id": 4693342,",
        "            "capital": "Washington D.C.",",
        "            "languages": [",
        "                {",
        "                    "code": "en",",
        "                    "name": "English",",
        "                    "native": "English"",
        "                }",
        "            ],",
        "            "country_flag": "http://assets.ipstack.com/flags/us.svg",",
        "            "country_flag_emoji": "🇺🇸",",
        "            "country_flag_emoji_unicode": "U+1F1FA U+1F1F8",",
        "            "calling_code": "1",",
        "            "is_eu": false",
        "        }",
        "    }",
        "    */",
        "  ",
        "      // preserve result in transient state",
        "      transientState.put("ipstack", JSON.stringify(result));",
        "",
        "    switch(result.country_code) {",
        "      case "CA":",
        "        outcome = result.country_code;",
        "        break;",
        "      case "UK":",
        "        outcome = result.country_code;",
        "        break;",
        "      case "US":",
        "        outcome = result.country_code;",
        "        break;",
        "      default:",
        "        outcome = "other";",
        "    }",
        "",
        "} else {",
        "      logger.error("ipstack: no client ip!");",
        "}",
        "",
        "logger.warning("ipstack: finish");",
        "",
        " /*",
        "  * !!! ASSUMES ID CLOUD !!!",
        "  *",
        "  * Returns the client's IP address",
        "  */",
        " function getClientIPAddress() {",
        "    return requestHeaders.get("x-forwarded-for").get(0).split(',')[0];",
        " }",
      ],
    },
    "878816b3-2bb4-4b43-8001-10f926ddefff": {
      "_id": "878816b3-2bb4-4b43-8001-10f926ddefff",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Switch Actors And Become Impersonatee.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Impersonate: Switch Actors And Become Impersonatee",
      "script": [
        "/* Impersonate: Switch Actors And Become Impersonatee",
        " *",
        " * Switch Actors And Become Impersonatee.",
        " *",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " */",
        "",
        "(function () {",
        "    logger.warning("Impersonate: Switch Actors: start");",
        "    outcome = "false";",
        "",
        "    var impersonatee = sharedState.get("impersonatee");",
        "    var impersonator = sharedState.get("impersonator");",
        "    if (impersonatee && impersonator) {",
        "        outcome = "true";",
        "        sharedState.put("username", impersonatee);",
        "        setSharedObjectAttribute("userName", impersonatee);",
        "    }",
        "",
        "    logger.warning("Impersonate: Switch Actors: finish [outcome=".concat(outcome).concat("]"));",
        "  ",
        "    /*",
        "     * Store attributes in shared state for use with the Create/Patch Object nodes.",
        "     */",
        "    function setSharedObjectAttribute(name, value) {",
        "         var storage = sharedState.get("objectAttributes");",
        "        if (storage && value) {",
        "            if (storage.put) {",
        "                  storage.put(name, value);",
        "            }",
        "            else {",
        "                storage[name] = value;",
        "            }",
        "        }",
        "        else if (value) {",
        "            sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "        }",
        "    }",
        "}());",
      ],
    },
    "89eff37a-2e1e-47c2-8d62-5f7417fbb6b4": {
      "_id": "89eff37a-2e1e-47c2-8d62-5f7417fbb6b4",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Return TextOutputCallback indicating the provided OTP was invalid.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OTP Invalid",
      "script": [
        "/* OTP Invalid",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Return TextOutputCallback indicating the provided OTP was invalid.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "outcome = "true";",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback",
        ")",
        "if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            "INVALID"",
        "        )",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo(outcome).build();",
        "}",
      ],
    },
    "8a768bb3-01cd-46b8-881c-b77f5a26c283": {
      "_id": "8a768bb3-01cd-46b8-881c-b77f5a26c283",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Write Onfido HTML Meta Tags",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Onfido-Meta-Tags",
      "script": [
        "/* Write HTML Meta Tags",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * This script writes meta tags to the header.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "  var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api.Action,",
        "      com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "  )",
        "",
        "  function createScript() {",
        "    return String("\\n\\",
        "    Array.prototype.slice.call(\\n\\",
        "      document.getElementsByTagName('head')\\n\\",
        "    ).forEach(\\n\\",
        "      function (e) {\\n\\",
        "        var meta = document.createElement('meta'); \\n\\",
        "        meta.name = \\"author\\"; \\n\\",
        "        meta.content = \\"John Doe\\"; \\n\\",
        "        document.getElementsByTagName('head')[0].appendChild(meta); \\n\\",
        "      }\\n\\",
        "    )");",
        "  }",
        "",
        "  if (callbacks.isEmpty()) {",
        "      action = fr.Action.send(",
        "          new fr.ScriptTextOutputCallback(createScript())",
        "      ).build()",
        "  } else {",
        "      action = fr.Action.goTo("true").build();",
        "  }",
        "}());",
      ],
    },
    "8bccfdd0-5556-4562-a1ca-6d725a449556": {
      "_id": "8bccfdd0-5556-4562-a1ca-6d725a449556",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "display country",
      "script": [
        "var fr = JavaImporter(",
        "  org.forgerock.openam.auth.node.api,",
        "  javax.security.auth.callback.TextOutputCallback",
        ");",
        "  ",
        "outcome = "true";",
        "",
        "var country = "unknown";",
        "if (transientState.get("ipstack")) {",
        "    country = JSON.parse(transientState.get("ipstack")).country_code;",
        "}",
        "  ",
        "with (fr) {",
        "  if (callbacks.isEmpty()) {",
        "    var callback = new TextOutputCallback(TextOutputCallback.INFORMATION, "Country: ".concat(country));",
        "    action = Action.send(callback).build();",
        "  } else {",
        "    action = Action.goTo("true").build();",
        "  }",
        "}",
      ],
    },
    "8e03eb43-ed5d-4c12-9e15-2051cc9be578": {
      "_id": "8e03eb43-ed5d-4c12-9e15-2051cc9be578",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Copy SAML Data To ObjectAttributes",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "CopySAMLDataToObjectAttributes",
      "script": [
        "/* CopySAMLDataToObjectAttributes",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Copy SAML Data To ObjectAttributes.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "outcome = "true";",
        "if (sharedState.get("userInfo")) {",
        "    if (sharedState.get("objectAttributes")) {",
        "          sharedState.remove("objectAttributes");",
        "    }",
        "    var userName=null,givenName=null,sn=null,mail=null,telephoneNumber=null,roles=null;",
        "",
        "    try { userName=sharedState.get("userInfo").get("userNames").get("uid").get(0).toString(); } catch (e) {}",
        "    try { givenName=sharedState.get("userInfo").get("attributes").get("givenName").get(0).toString(); } catch (e) {}",
        "    try { sn=sharedState.get("userInfo").get("attributes").get("sn").get(0).toString(); } catch (e) {}",
        "    try { mail=sharedState.get("userInfo").get("attributes").get("mail").get(0).toString(); } catch (e) {}",
        "    try { telephoneNumber=sharedState.get("userInfo").get("attributes").get("telephoneNumber").get(0).toString(); } catch (e) {}",
        "    //try { roles=sharedState.get("userInfo").get("attributes").get("roles").get(0).toString(); } catch (e) {}",
        "    try { roles=sharedState.get("userInfo").get("attributes").get("roles").toArray().join("|"); } catch (e) {}",
        "",
        "    sharedState.put("objectAttributes", {"userName":userName,"givenName":givenName,"sn":sn,"mail":mail,"telephoneNumber":telephoneNumber,"roles":roles});",
        "}",
      ],
    },
    "90c4eca5-05f0-42f5-b9bf-88b693eabbbd": {
      "_id": "90c4eca5-05f0-42f5-b9bf-88b693eabbbd",
      "context": "SAML2_IDP_ATTRIBUTE_MAPPER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Attribute Mapper Script",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script returns a list of SAML Attribute objects for the IDP framework to insert into the generated Assertion.",
        " *",
        " * Defined variables:",
        " * session - SSOToken (1)",
        " *           The single sign-on session.",
        " * hostedEntityId - String (primitive).",
        " *                  The hosted entity ID.",
        " * remoteEntityId - String (primitive).",
        " *                  The remote entity ID.",
        " * realm - String (primitive).",
        " *         The name of the realm the user is authenticating to.",
        " * logger - Always present, the debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.SAML2_IDP_ATTRIBUTE_MAPPER",
        " * idpAttributeMapperScriptHelper - IdpAttributeMapperScriptHelper (2)",
        " *                                - An IdpAttributeMapperScriptHelper instance containing methods used for IDP attribute mapping.",
        " *",
        " * Throws SAML2Exception:",
        " *      - on failing to map the IDP attributes.",
        " *",
        " * Return - a list of SAML Attribute (3) objects.",
        " *",
        " * Class reference:",
        " * (1) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (2) IdpAttributeMapperScriptHelper - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAttributeMapperScriptHelper.html.",
        " * (3) Attribute - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/saml2/assertion/Attribute.html.",
        " */",
        "",
        "/**",
        " * Default SAML2 IDP Attribute Mapper.",
        " */",
        "function getAttributes() {",
        "    var frJava = JavaImporter(",
        "        com.sun.identity.saml2.common.SAML2Exception",
        "    );",
        "",
        "    const debugMethod = "ScriptedIDPAttributeMapper.getAttributes:: ";",
        "",
        "    try {",
        "",
        "        if (!idpAttributeMapperScriptHelper.isSessionValid(session)) {",
        "            logger.error(debugMethod + "Invalid session.");",
        "            return null;",
        "        }",
        "",
        "        var configMap = idpAttributeMapperScriptHelper.getRemoteSPConfigAttributeMap(realm, remoteEntityId);",
        "        logger.message(debugMethod + "Remote SP attribute map = {}", configMap);",
        "        if (configMap == null || configMap.isEmpty()) {",
        "            configMap = idpAttributeMapperScriptHelper.getHostedIDPConfigAttributeMap(realm, hostedEntityId);",
        "            if (configMap == null || configMap.isEmpty()) {",
        "                logger.message(debugMethod + "Configuration map is not defined.");",
        "                return null;",
        "            }",
        "            logger.message(debugMethod + "Hosted IDP attribute map = {}", configMap);",
        "        }",
        "",
        "        var attributes = new java.util.ArrayList();",
        "        var stringValueMap = new java.util.HashSet();",
        "        var binaryValueMap;",
        "        var localAttribute;",
        "",
        "        // Don't try to read the attributes from the datastore if the ignored profile is enabled in this realm.",
        "        if (!idpAttributeMapperScriptHelper.isIgnoredProfile(session, realm)) {",
        "            try {",
        "                // Resolve attributes to be read from the datastore.",
        "                var stringAttributes = new java.util.HashSet();",
        "                var binaryAttributes = new java.util.HashSet();",
        "                var keyIter = configMap.keySet().iterator();",
        "                while (keyIter.hasNext()) {",
        "                    var key = keyIter.next();",
        "                    localAttribute = configMap.get(key);",
        "                    if (!idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {",
        "                        if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {",
        "                            // add it to the list of attributes to treat as being binary",
        "                            binaryAttributes.add(idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute));",
        "                        } else {",
        "                            stringAttributes.add(localAttribute);",
        "                        }",
        "                    }",
        "                }",
        "",
        "                if (!stringAttributes.isEmpty()) {",
        "                    stringValueMap = idpAttributeMapperScriptHelper.getAttributes(session, stringAttributes);",
        "                }",
        "                if (!binaryAttributes.isEmpty()) {",
        "                    binaryValueMap = idpAttributeMapperScriptHelper.getBinaryAttributes(session, binaryAttributes);",
        "                }",
        "            } catch (error) {",
        "                logger.error(debugMethod + "Error accessing the datastore. " + error);",
        "                //continue to check in ssotoken.",
        "            }",
        "        }",
        "",
        "        var keyIter = configMap.keySet().iterator();",
        "        while (keyIter.hasNext()) {",
        "            var key = keyIter.next()",
        "            var nameFormat = null;",
        "            var samlAttribute = key;",
        "            localAttribute = configMap.get(key);",
        "            // check if samlAttribute has format nameFormat|samlAttribute",
        "            var samlAttributes = String(new java.lang.String(samlAttribute));",
        "            var tokens = samlAttributes.split('|');",
        "",
        "            if (tokens.length > 1) {",
        "                nameFormat = tokens[0];",
        "                samlAttribute = tokens[1];",
        "            }",
        "",
        "            var attributeValues = new java.util.HashSet();",
        "            if (idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {",
        "                // Remove the static flag before using it as the static value",
        "                localAttribute = idpAttributeMapperScriptHelper.removeStaticAttributeFlag(localAttribute);",
        "                attributeValues = new java.util.HashSet([localAttribute]);",
        "                logger.message(debugMethod + "Adding static value {} for attribute named {}", localAttribute, samlAttribute);",
        "            } else {",
        "                if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {",
        "                    // Remove the flag as not used for lookup",
        "                    localAttribute = idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute);",
        "                    attributeValues = idpAttributeMapperScriptHelper.getBinaryAttributeValues(samlAttribute, localAttribute,",
        "                        binaryValueMap);",
        "                } else {",
        "                    if (stringValueMap != null && !stringValueMap.isEmpty()) {",
        "                        attributeValues = stringValueMap.get(localAttribute);",
        "                    } else {",
        "                        logger.message(debugMethod + "{} string value map was empty or null.", localAttribute);",
        "                    }",
        "                }",
        "",
        "                // If all else fails, try to get the value from the users ssoToken",
        "                if (attributeValues == null || attributeValues.isEmpty()) {",
        "                    logger.message(debugMethod + "User profile does not have value for {}, checking SSOToken.", localAttribute);",
        "                    attributeValues = new java.util.HashSet(idpAttributeMapperScriptHelper.getPropertySet(session, localAttribute));",
        "                }",
        "            }",
        "",
        "            if (attributeValues == null || attributeValues.isEmpty()) {",
        "                logger.message(debugMethod + "{} not found in user profile or SSOToken.", localAttribute);",
        "            } else {",
        "                attributes.add(idpAttributeMapperScriptHelper.createSAMLAttribute(samlAttribute, nameFormat, attributeValues));",
        "            }",
        "        }",
        "",
        "        return attributes;",
        "",
        "    } catch (error) {",
        "        logger.error(debugMethod + "Error mapping IDP attributes. " + error);",
        "        throw new frJava.SAML2Exception(error);",
        "    }",
        "}",
        "",
        "getAttributes();",
      ],
    },
    "91554b10-79a5-4aa8-aca1-59481a734c19": {
      "_id": "91554b10-79a5-4aa8-aca1-59481a734c19",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Twilio SMS OTP Sender",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio SMS OTP Sender",
      "script": [
        "/* Twilio SMS OTP Sender",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * This script will send an SMS containing the OTP to the phone number in the user's profile.",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Identify Existing User node and HOTP Generator node before it is being called.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - sent",
        " * - failed",
        " */",
        "logger.warning("Twilio SMS OTP Sender: start");",
        "",
        "if (sharedState.get("_id") && idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().hasNext()) {",
        "    var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(input){var output="";var chr1,chr2,chr3,enc1,enc2,enc3,enc4;var i=0;input=Base64._utf8_encode(input);while(i<input.length){chr1=input.charCodeAt(i++);chr2=input.charCodeAt(i++);chr3=input.charCodeAt(i++);enc1=chr1>>2;enc2=(chr1&3)<<4|chr2>>4;enc3=(chr2&15)<<2|chr3>>6;enc4=chr3&63;if(isNaN(chr2)){enc3=enc4=64}else if(isNaN(chr3)){enc4=64}output=output+this._keyStr.charAt(enc1)+this._keyStr.charAt(enc2)+this._keyStr.charAt(enc3)+this._keyStr.charAt(enc4)}return output},decode:function(input){var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\\+\\/\\=]/g,"");while(i<input.length){enc1=this._keyStr.indexOf(input.charAt(i++));enc2=this._keyStr.indexOf(input.charAt(i++));enc3=this._keyStr.indexOf(input.charAt(i++));enc4=this._keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!=64){output=output+String.fromCharCode(chr2)}if(enc4!=64){output=output+String.fromCharCode(chr3)}}output=Base64._utf8_decode(output);return output},_utf8_encode:function(string){string=string.replace(/\\r\\n/g,"\\n");var utftext="";for(var n=0;n<string.length;n++){var c=string.charCodeAt(n);if(c<128){utftext+=String.fromCharCode(c)}else if(c>127&&c<2048){utftext+=String.fromCharCode(c>>6|192);utftext+=String.fromCharCode(c&63|128)}else{utftext+=String.fromCharCode(c>>12|224);utftext+=String.fromCharCode(c>>6&63|128);utftext+=String.fromCharCode(c&63|128)}}return utftext},_utf8_decode:function(utftext){var string="";var i=0;var c=c1=c2=0;while(i<utftext.length){c=utftext.charCodeAt(i);if(c<128){string+=String.fromCharCode(c);i++}else if(c>191&&c<224){c2=utftext.charCodeAt(i+1);string+=String.fromCharCode((c&31)<<6|c2&63);i+=2}else{c2=utftext.charCodeAt(i+1);c3=utftext.charCodeAt(i+2);string+=String.fromCharCode((c&15)<<12|(c2&63)<<6|c3&63);i+=3}}return string}};",
        "",
        "       /* BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN AZURE AD SETTINGS",
        "     */",
        "    var TWILIO_API_SID = "AC750415e3163a2e57b7aeea7eed82d944";",
        "    var TWILIO_API_TOKEN = "d36a719c94b4be08592d69ec4f80a5bb";",
        "    var TWILIO_API_FROM = "+13176443107";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "  ",
        "    // Twilio SMS Message API Configuration",
        "    var TWILIO_API_URI = "https://api.twilio.com/2010-04-01/Accounts/".concat(TWILIO_API_SID).concat("/Messages.json");    ",
        "    var TWILIO_API_TO = idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().next();",
        "    var TWILIO_API_BODY = "OTP for account ".concat(sharedState.get("username")).concat(": ").concat(sharedState.get("oneTimePassword"));",
        "    //logger.warning("Twilio SMS OTP Sender: To: ".concat(TWILIO_API_TO));",
        "    //logger.warning("Twilio SMS OTP Sender: Message: ".concat(TWILIO_API_BODY));",
        "",
        "    var AUTHZ = "Basic ".concat(Base64.encode(TWILIO_API_SID.concat(':').concat(TWILIO_API_TOKEN)));",
        "    //logger.warning("Twilio SMS OTP Sender: AUTHZ - ".concat(AUTHZ));",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('POST');",
        "    request.setUri(TWILIO_API_URI);",
        "    request.getHeaders().add("Content-Type", "application/x-www-form-urlencoded");",
        "    request.getHeaders().add("Authorization", AUTHZ);",
        "    var params = request.getForm();",
        "    params.add("From", TWILIO_API_FROM);",
        "    params.add("Body", TWILIO_API_BODY);",
        "    params.add("To", TWILIO_API_TO);",
        "    request.getEntity().setString(params.toString());",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    //logger.warning("Twilio SMS OTP Sender: JSON result: " + JSON.stringify(result));",
        "",
        "    if (result["error_code"]) {",
        "        outcome = "failed";",
        "        logger.error("Twilio SMS OTP Sender: error_code = ".concat(result["error_code"]));",
        "        logger.error("Twilio SMS OTP Sender: error_message = ".concat(result["error_message"]));",
        "        logger.error("Twilio SMS OTP Sender: outcome = failed");",
        "    } else if (result["code"]) {",
        "        outcome = "failed";",
        "        logger.error("Twilio SMS OTP Sender: code = ".concat(result["code"]));",
        "        logger.error("Twilio SMS OTP Sender: message = ".concat(result["message"]));",
        "    } else {",
        "        outcome = "sent";",
        "        logger.warning("Twilio SMS OTP Sender: outcome = sent");",
        "    }",
        "} else {",
        "      outcome = "failed";",
        "      logger.error("Twilio SMS OTP Sender: No user or phone number found! Use 'Identify Existing User node before this script to populate the user's _id in shared state!'");",
        "      logger.error("Twilio SMS OTP Sender: outcome = failed");",
        "}",
      ],
    },
    "92edf2c7-0bab-412c-a0da-82ad4f04505b": {
      "_id": "92edf2c7-0bab-412c-a0da-82ad4f04505b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect Extra Fields",
      "script": [
        "/* Collect Extra Fields",
        " * ",
        " * Collect extra fields not part of the user profile.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = 'true';",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          javax.security.auth.callback.NameCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.NameCallback('modality'),",
        "            new fr.NameCallback('jwtToken')",
        "        ).build();",
        "    }",
        "    else {",
        "          var modality = callbacks.get(0).getName();",
        "          var jwtToken = callbacks.get(1).getName();",
        "          nodeState.putShared('modality', modality);",
        "          nodeState.putShared('jwtToken', jwtToken);",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "9399ac8b-3a6e-423b-95a2-6e0fd07262b1": {
      "_id": "9399ac8b-3a6e-423b-95a2-6e0fd07262b1",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "APIProtection: Get Key And Secret",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "APIProtection: Get Key And Secret",
      "script": [
        "logger.warning("APIProtection: Get Key And Secret: start");",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " */",
        "var KEY_HEADER_NAME = "x-api-key";",
        "var SECRET_HEADER_NAME = "x-api-secret";",
        "var USERNAME_HEADER_NAME = "X-OpenAM-Username";",
        "var PASSWORD_HEADER_NAME = "X-OpenAM-Password";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "outcome = "false";",
        "",
        "var key = getHeader(KEY_HEADER_NAME) || readValue(KEY_HEADER_NAME) || null;",
        "var secret = getHeader(SECRET_HEADER_NAME) || readTransientValue(SECRET_HEADER_NAME) || null;",
        "",
        "var username = sharedState.get("username") || null;",
        "var password = transientState.get("password") || null;",
        "",
        "if (key && secret) {",
        "    logger.warning("APIProtection: Get Key And Secret: key=".concat(key));",
        "  ",
        "      storeValue(KEY_HEADER_NAME, key);",
        "      storeValue("username", username);",
        "      sharedState.put("username", key);",
        "      ",
        "      storeTransientValue(SECRET_HEADER_NAME, secret);",
        "      storeTransientValue("password", password);",
        "      transientState.put("password", secret);",
        "  ",
        "    outcome = "true";",
        "}",
        "",
        "logger.warning("APIProtection: Get Key And Secret: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Returns the value of the requested header",
        " */",
        "function getHeader(headerName) {",
        "      if (requestHeaders.get(headerName) && requestHeaders.get(headerName).get(0)) {",
        "        return requestHeaders.get(headerName).get(0).toString();",
        "    }",
        "      return null;",
        "}",
        "",
        "/*",
        " * Store value for APIProtection script use",
        " */",
        "function storeValue(name, value) {",
        "      var storage = sharedState.get("APIProtection");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "            storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("APIProtection", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
        "",
        "/*",
        " * Read value from storage for APIProtection script use",
        " */",
        "function readValue(name) {",
        "      var storage = sharedState.get("APIProtection");",
        "    if (storage) {",
        "          if (storage.get) {",
        "            return sharedState.get("APIProtection").get(name);",
        "        }",
        "          else {",
        "              return storage.name;",
        "        }",
        "    }",
        "      return null;",
        "}",
        "",
        "/*",
        " * Store transient value for APIProtection script use",
        " */",
        "function storeTransientValue(name, value) {",
        "    var transientStorage = transientState.get("APIProtection");",
        "    if (transientStorage && value) {",
        "          if (transientStorage.put) {",
        "            transientStorage.put(name, value);",
        "        }",
        "          else {",
        "              transientStorage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        transientState.put("APIProtection", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
        "",
        "/*",
        " * Read transient value from storage for APIProtection script use",
        " */",
        "function readTransientValue(name) {",
        "      var transientStorage = transientState.get("APIProtection");",
        "    if (transientStorage) {",
        "          if (transientStorage.get) {",
        "            return transientState.get("APIProtection").get(name);",
        "        }",
        "          else {",
        "              return transientStorage.name;",
        "        }",
        "    }",
        "      return null;",
        "}",
      ],
    },
    "9535446c-0ff6-4a76-8576-616599119d64": {
      "_id": "9535446c-0ff6-4a76-8576-616599119d64",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Remove button from page.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Remove Button",
      "script": [
        "/* Remove Button",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Hide buttons on the journey page.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "    var script = "Array.prototype.slice.call(document.getElementsByTagName('button')).forEach(function (e) {e.style.display = 'none'})"",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    var message = " "",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                message",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "}());",
      ],
    },
    "988c10fa-98da-4bf7-8ac9-a558d2fef1fd": {
      "_id": "988c10fa-98da-4bf7-8ac9-a558d2fef1fd",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Protection from malicious IDPs. Only allow white-listed email domains (usernames are email addresses).",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "IDP Integrity Check",
      "script": [
        "/* IDP Integrity Check",
        " * ",
        " * Protection from malicious IDPs. Only allow white-listed email domains (usernames are email addresses).",
        " * ",
        " * This script does not require cofiguration. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "false";",
        "      var routedIDP = sharedState.get("routedIDPs").get(0);",
        "      var validDomains = [];",
        "      if (routedIDP) {",
        "          validDomains = routedIDP.get("idpDomains");",
        "    }",
        "      ",
        "      var username = sharedState.get("username");",
        "      var domain = username.substr(username.lastIndexOf("@")+1);",
        "      if (validDomains.indexOf(domain) > -1) {",
        "          outcome = "true";",
        "    }",
        "}());",
      ],
    },
    "9e9c6c4d-5d9d-4990-9f05-d8b2b25ad52b": {
      "_id": "9e9c6c4d-5d9d-4990-9f05-d8b2b25ad52b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Custom risk policy engine combining Autonomous Access signals with external signals.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "AA Custom Policy Engine",
      "script": [
        "/* AA Custom Policy Engine",
        " *",
        " * Author: marcin.zimny@forgerock.com",
        " * Adaptations: volker.scheuber@forgerock.com",
        " * ",
        " * Custom policy engine combining the Autonomous Access risk engine output with external systems and custom policy output:",
        " * ",
        " * - use multiple risk scoring policies (currently it's part of risk config file and used across all evaluations)",
        " * - deliver custom logic of delivering outcome (we can sum the signals instead of returning the highest)",
        " * - use custom signals as part of the (single) risk node (for example anonymisation detection)",
        " * - exceptions/overrides (i.e. if we have to allow a flow with high risk for whatever reason) ",
        " * ",
        " * This script needs to be parametrized. It will NOT work properly as is!",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - low",
        " * - medium",
        " * - high",
        " * - failed",
        " */",
        "(function () {",
        "  /* ",
        "   * MUST CONFIGURE THIS SECTION",
        "   * Custom signals parameters",
        "   */",
        "  ",
        "  // IPQualityScore API",
        "  var USER_AGENT = "ForgeRock"",
        "  var API_KEY = systemEnv.getProperty("esv.ipqs.api.key");",
        "  ",
        "  /*",
        "   * END MANDATORY CONFIGURATION",
        "   */",
        "  ",
        "  outcome = "failed"; //default outcome",
        "  /*",
        "    Risk Policy - Signal Scores",
        "  */",
        "  var aa_impossible_travel_score = 21;",
        "  var aa_credential_stuffing_score = 100;",
        "  var aa_automated_user_agent_score = 25;",
        "  var aa_brute_force_score = 100;",
        "  var aa_suspicious_ip_score = 35;",
        "  /*",
        "    Risk Policy - Custom Signals",
        "  */",
        "  var aa_use_anonymizer_detection = 1;",
        "  var custom_aa_tor_detected_score = 50;",
        "  var custom_aa_vpn_detected_score = 20;",
        "  var custom_aa_proxy_detected_score = 20;",
        "  /*",
        "    Risk Policy - Thresholds And Extra Features",
        "  */",
        "  var aa_medium_risk_threshold = 30;",
        "  var aa_high_risk_threshold = 75;",
        "  var aa_max_signal_count_high_risk_override = 99;",
        "  /*",
        "    Risk Policy - Method",
        "      0 - highest score out of all triggered signals",
        "      1 - summary of all triggered signals",
        "  */",
        "  var aa_risk_method=1;",
        "  /*",
        "    Risk Policy - UEBA method",
        "      0 - highest score out of 3 models",
        "      1 - average score out of 3 models",
        "  */",
        "  var aa_ueba_method=0;",
        "  /*",
        "    Risk Policy - Overrides",
        "",
        "    Whitelist - false positive control",
        "    Blacklist - preventative block",
        "    Example - ip_whitelist or ip_blacklist = ["62.21.63.30-62.21.63.30","82.21.168.1-82.21.168.255"];",
        "  */",
        "  var ip_whitelist = [];",
        "  var ip_blacklist = [];",
        "  ",
        "  /********************************************************",
        "    The engine *",
        "  */",
        "  //Define variables",
        "  var signal_count = 0;",
        "  var pos = 0;",
        "  var arr_scores = [];",
        "  var arr_scores_models = [];",
        "  var score = 0;",
        "  var predictionResultChopped;",
        "  var predictionResultChoppedVal;",
        "  //Define signal variables and assign defaults (negative)",
        "  var is_impossible_travel = 0;",
        "  var is_credential_stuffing = 0;",
        "  var is_automated_user_agent = 0;",
        "  var is_brute_force = 0;",
        "  var is_suspicious_ip = 0;",
        "  var model1_score = 0;",
        "  var model2_score = 0;",
        "  var model3_score = 0;",
        "  var isAnonymizedResult;",
        "  //Get risk data",
        "  var predictionResultRaw = sharedState.get("predictionResult");",
        "  var predictionResultString = predictionResultRaw.toString();",
        "",
        "  var result;",
        "",
        "  function inet_aton (ip)",
        "  {",
        "      return ip.split(".").reduce((int, v) => int * 256 + +v);",
        "  }",
        "",
        "",
        "  function isAnonymized()",
        "  {",
        "    var payload = sharedState.get("IPQualityScore")",
        "",
        "    if (payload)",
        "    {",
        "      var jsonResult = JSON.parse(payload);",
        "    }",
        "    else",
        "    {",
        "      var ipaddress = requestHeaders.get("X-FORWARDED-FOR").get(0).split(",")[0].trim();",
        "",
        "      var request = new org.forgerock.http.protocol.Request();",
        "      request.setMethod("GET");",
        "      request.setUri("https://ipqualityscore.com/api/json/ip/" + API_KEY + "/" + ipaddress + "?strictness=0&allow_public_access_points=false&fast=false&lighter_penalties=false&mobile=false");",
        "      request.getHeaders().add("Accept","application/json");",
        "      request.getHeaders().add("User-Agent", USER_AGENT);",
        "",
        "      var response = httpClient.send(request).get();",
        "      if (response.getStatus().getCode() === 200) {",
        "        var payload = response.getEntity().getString();",
        "        var jsonResult = JSON.parse(payload)",
        "          if (jsonResult.success === true) {",
        "          sharedState.put("Debug-IPQualityScore", payload);",
        "        }",
        "      }",
        "    }",
        "",
        "    if (jsonResult) {",
        "      if (jsonResult.tor === true) {",
        "        isAnonymizedResult = "tor";",
        "      } else if (jsonResult.vpn === true) {",
        "        isAnonymizedResult= "vpn";",
        "      } else if (jsonResult.proxy === true) {",
        "        isAnonymizedResult = "proxy";",
        "      } else {",
        "        isAnonymizedResult = "not_detected";",
        "      }",
        "    }",
        "  }",
        "",
        "",
        "  if(aa_use_anonymizer_detection==1)",
        "  {",
        "    isAnonymized();",
        "    sharedState.put("custom_aa_isAnonymized",isAnonymizedResult);",
        "    if(isAnonymizedResult=="vpn")",
        "    {",
        "      arr_scores.push(custom_aa_vpn_detected_score);",
        "    }",
        "    else if(isAnonymizedResult=="proxy")",
        "    {",
        "      arr_scores.push(custom_aa_proxy_detected_score);",
        "    }",
        "    else if(isAnonymizedResult=="tor")",
        "    {",
        "      arr_scores.push(custom_aa_tor_detected_score);",
        "    }",
        "    else",
        "    {",
        "      arr_scores.push(0);",
        "    }",
        "  }",
        "",
        "  if(predictionResultString.search("risk_score_data")>=0)",
        "  {",
        "    outcome = "low"; //default if there's data from risk API",
        "  }",
        "",
        "  //Check if we're assessing impossible travel and assign result",
        "  pos = predictionResultString.search("impossibleTravellerCheck=true");",
        "  if(pos>0)",
        "  {",
        "    pos = predictionResultString.search("is_impossible_travel=false");",
        "    if(pos<0)",
        "    {",
        "      signal_count++;",
        "      is_impossible_travel=1;",
        "      arr_scores.push(aa_impossible_travel_score);",
        "    }",
        "  }",
        "  //Check if we're assessing credential stuffing and assign result",
        "  pos = predictionResultString.search("credentialStuffing=true");",
        "  if(pos>0)",
        "  {",
        "    pos = predictionResultString.search("is_credential_stuffing=false");",
        "    if(pos<0)",
        "    {",
        "      signal_count++;",
        "      is_credential_stuffing=1;",
        "      arr_scores.push(aa_credential_stuffing_score);",
        "    }",
        "  }",
        "  //Check if we're assessing automated user angent (antibot) and assign result",
        "  pos = predictionResultString.search("automatedUserAgentsFilter=true");",
        "  if(pos>0)",
        "  {",
        "    pos = predictionResultString.search("is_automated_user_agent=false");",
        "    if(pos<0)",
        "    {",
        "      signal_count++;",
        "      is_automated_user_agent=1;",
        "      arr_scores.push(aa_automated_user_agent_score);",
        "    }",
        "  }",
        "  //Check if we're assessing brute-force and assign result",
        "  pos = predictionResultString.search("bruteForcePreventionCheck=true");",
        "  if(pos>0)",
        "  {",
        "    pos = predictionResultString.search("is_brute_force=false");",
        "    if(pos<0)",
        "    {",
        "      signal_count++;",
        "      is_brute_force=1;",
        "      arr_scores.push(aa_brute_force_score);",
        "    }",
        "  }",
        "  //Check if we're assessing suspicious IP and assign result",
        "  pos = predictionResultString.search("suspiciousIPCheck=true");",
        "  if(pos>0)",
        "  {",
        "    pos = predictionResultString.search("is_suspicious_ip=false");",
        "    if(pos<0)",
        "    {",
        "      signal_count++;",
        "      is_suspicious_ip=1;",
        "      arr_scores.push(aa_suspicious_ip_score);",
        "    }",
        "  }",
        "  //Check if we're assessing UEBA and assign result",
        "  pos = predictionResultString.search("anomalyDetection=true");",
        "  if(pos>0)",
        "  {",
        "    pos = predictionResultString.search("clustering_result=");",
        "    if(pos>0)",
        "    {",
        "        predictionResultChopped=predictionResultString.substring(pos);",
        "        predictionResultChopped=predictionResultChopped.substring(predictionResultChopped.search("risk_score="));",
        "        predictionResultChoppedVal=predictionResultChopped.substring(11,predictionResultChopped.search(","));",
        "        predictionResultChopped=predictionResultChopped.substring(11);",
        "        model1score=parseInt(predictionResultChoppedVal,10);",
        "",
        "        predictionResultChopped=predictionResultChopped.substring(predictionResultChopped.search("risk_score="));",
        "        predictionResultChoppedVal=predictionResultChopped.substring(11,predictionResultChopped.search(","));",
        "        predictionResultChopped=predictionResultChopped.substring(11);",
        "        model2score=parseInt(predictionResultChoppedVal,10);",
        "",
        "        predictionResultChopped=predictionResultChopped.substring(predictionResultChopped.search("risk_score="));",
        "        predictionResultChoppedVal=predictionResultChopped.substring(11,predictionResultChopped.search(","));",
        "        predictionResultChopped=predictionResultChopped.substring(11);",
        "        model3score=parseInt(predictionResultChoppedVal,10);",
        "",
        "        arr_scores_models.push(model1score,model2score,model3score);",
        "    }",
        "  }",
        "",
        "  //Deliver risk score",
        "  if(aa_ueba_method==0)",
        "  {",
        "    score = Math.max.apply(null, arr_scores_models);",
        "  }",
        "  else if(aa_ueba_method==1)",
        "  {",
        "    score = arr_scores_models.reduce((a, b) => a + b, 0)/arr_scores_models.length;",
        "  }",
        "  arr_scores.push(score);",
        "",
        "",
        "  if(aa_risk_method==0)",
        "  {",
        "    score = Math.max.apply(null, arr_scores);",
        "  }",
        "  else if (aa_risk_method===1)",
        "  {",
        "    score = arr_scores.reduce((a, b) => a + b, 0);",
        "  }",
        "  //Deliver risk outcome",
        "  if(score>aa_medium_risk_threshold)",
        "  {",
        "    outcome="medium";",
        "  }",
        "  if(score>aa_high_risk_threshold)",
        "  {",
        "    outcome="high";",
        "  }",
        "  if(signal_count>=aa_max_signal_count_high_risk_override && outcome=="medium")",
        "  {",
        "    outcome="high";",
        "    sharedState.put("debug-signal-count-override","true");",
        "  }",
        "",
        "  //process the blacklist and whitelist",
        "  var src_ipaddress;",
        "  var src_ipaddress_dec;",
        "  var list_first_ipaddress_dec;",
        "  var list_last_ipaddress_dec;",
        "  var list_entry;",
        "  var logmessage;",
        "  src_ipaddress = requestHeaders.get("X-FORWARDED-FOR").get(0).split(",")[0].trim();",
        "  src_ipaddress_dec = inet_aton(src_ipaddress);",
        "",
        "  if(ip_blacklist.length>0)",
        "  {",
        "    for (var i = 0; i < ip_blacklist.length; i++)",
        "    {",
        "      list_entry = ip_blacklist[i].split("-");",
        "      list_first_ipaddress_dec=inet_aton(list_entry[0]);",
        "      list_last_ipaddress_dec=inet_aton(list_entry[1]);",
        "",
        "      if(src_ipaddress_dec>=list_first_ipaddress_dec && src_ipaddress_dec<=list_last_ipaddress_dec)",
        "      {",
        "          sharedState.put("debug-blacklist","condition met for: " + src_ipaddress + ", " + outcome + "->high");",
        "           outcome="high";",
        "      }",
        "    }",
        "  }",
        "  if(ip_whitelist.length>0)",
        "  {",
        "    for (var i = 0; i < ip_whitelist.length; i++)",
        "    {",
        "      //list_entry = ip_whitelist[i].split("-");",
        "      list_entry = ip_whitelist[i].split("-");",
        "      list_first_ipaddress_dec=inet_aton(list_entry[0]);",
        "      list_last_ipaddress_dec=inet_aton(list_entry[1]);",
        "      if(src_ipaddress_dec>=list_first_ipaddress_dec && src_ipaddress_dec<=list_last_ipaddress_dec)",
        "      {",
        "        sharedState.put("debug-whitelist","condition met for: " + src_ipaddress + ", " + outcome + "->low");",
        "        outcome = "low";",
        "      }",
        "    }",
        "  }",
        "",
        "",
        "",
        "  sharedState.put('debug-score',score.toString());",
        "  sharedState.put('debug-signal-count',signal_count.toString());",
        "  sharedState.put('debug-outcome',outcome);",
        "}());",
      ],
    },
    "a064f7b7-29c5-480b-ac09-d3d122829278": {
      "_id": "a064f7b7-29c5-480b-ac09-d3d122829278",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Sanitize objectAttributes",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Sanitize objectAttributes",
      "script": [
        "/*",
        "{",
        "    "userName": "sholmes",",
        "    "givenName": "Sherlock",",
        "    "sn": "Holmes",",
        "    "mail": "info918@06152alerts.security.org",",
        "    "telephoneNumber": ,",
        "    "postalAddress": "221B Baker Street",",
        "    "city": "London",",
        "    "stateProvince": ,",
        "    "postalCode": "NW1",",
        "    "country": "United States",",
        "    "preferences": {",
        "        "marketing": false,",
        "        "updates": true",
        "    }",
        "}",
        "*/",
        "logger.error("Sanitize objectAttributes: start");",
        "outcome = "true";",
        "var attrs = sharedState.get("objectAttributes");",
        "if (attrs) {",
        "  var keys = [",
        "    "userName",",
        "    "givenName",",
        "    "sn",",
        "    "mail",",
        "    "telephoneNumber",",
        "    "postalAddress",",
        "    "city",",
        "    "stateProvince",",
        "    "postalCode",",
        "    "country",",
        "    "frIndexedString2"",
        "  ]",
        "  keys.forEach(function (key) {",
        "    if (attrs.get(key) && attrs.get(key).toString() == "") {",
        "      logger.error("Sanitize objectAttributes: remove ".concat(key));",
        "      attrs.remove(key);",
        "    }",
        "  })",
        "}",
        "if (transientState.get("objectAttributes") && transientState.get("objectAttributes").get("password").toString() !== "") {",
        "  logger.error("Sanitize objectAttributes: preserve password in shared state");",
        "  setSharedObjectAttribute("password", transientState.get("objectAttributes").get("password").toString());",
        "}",
        "logger.error("Sanitize objectAttributes: end");",
        "",
        "/*",
        " * Properly set attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "    if (sharedState.get("objectAttributes")) {",
        "        sharedState.get("objectAttributes").put(name, value);",
        "    }",
        "    else {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":"+value+"}"));",
        "    }",
        "}",
      ],
    },
    "a316aedd-8b3b-4f68-b6e8-65859f1e87be": {
      "_id": "a316aedd-8b3b-4f68-b6e8-65859f1e87be",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_LocalRegistrationPrep",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        "When an admin managed object is created at the time of invitation, the email address",
        "is used to populate the required first/last names.  This script clears those attributes",
        "(if set to the email address) so the UI doesn't display the email address in the first/last",
        "name input fields.",
        "",
        "It also populates other required attributes with fake values to ensure password policy",
        "validation works correctly when AM calls IDM.",
        "*/",
        "",
        "var objAttrs = sharedState.get('objectAttributes') || new java.util.HashMap();",
        "objAttrs.put('givenName', '');",
        "objAttrs.put('sn', '');",
        "objAttrs.put('groups', ['fake']);",
        "objAttrs.put('inviteDate', 'fake');",
        "sharedState.put('objectAttributes', objAttrs);",
        "",
        "outcome = 'True';",
        "",
      ],
    },
    "a31a1796-8410-46b8-82ca-eb0c6e901775": {
      "_id": "a31a1796-8410-46b8-82ca-eb0c6e901775",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Collect all the configuration items required for the Set Custom Cookie node to function properly.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect Set Custom Cookie Node Config",
      "script": [
        "/* Collect Set Custom Cookie Node Config",
        " * ",
        " * Collect all the configuration items required for the Set Custom Cookie node to function properly.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "      var config = {",
        "        "name": "oreo",",
        "        "value": "original",",
        "        "domain": ".scheuber.io",",
        "        "path": "/",",
        "        "maxAge": 3600,",
        "        "useHttpOnlyCookie": true,",
        "        "useSecureCookie": true,",
        "        "sameSite": "NONE"",
        "    };",
        "  ",
        "      var script = "";",
        "    script += "Array.prototype.slice.call(";",
        "    script += "    document.getElementsByTagName('input')";",
        "    script += ").forEach(";",
        "    script += "    function (input,i) {";",
        "    script += "        console.log('input '+i);"",
        "    script += "        var config = JSON.parse('"+JSON.stringify(config)+"');";",
        "    script += "        var keys = Object.keys(config);";",
        "    script += "        if (input.type === 'text') {";",
        "    script += "            input.setAttribute('value', config[keys[i]]);";",
        "    script += "            input.dispatchEvent(new KeyboardEvent( 'input' , {'key':'Enter'} ));";",
        "    script += "        }";",
        "    script += "    }";",
        "    script += ");";",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          javax.security.auth.callback.NameCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.NameCallback("name"),",
        "            new fr.NameCallback("value"),",
        "            new fr.NameCallback("domain"),",
        "            new fr.NameCallback("path"),",
        "            new fr.NameCallback("maxAge"),",
        "            new fr.NameCallback("useHttpOnlyCookie"),",
        "            new fr.NameCallback("useSecureCookie"),",
        "            new fr.NameCallback("sameSite"),",
        "              new fr.ScriptTextOutputCallback(script)",
        "        ).build();",
        "    }",
        "    else {",
        "          config[callbacks.get(0).getPrompt()] = callbacks.get(0).getName();",
        "          config[callbacks.get(1).getPrompt()] = callbacks.get(1).getName();",
        "          config[callbacks.get(2).getPrompt()] = callbacks.get(2).getName();",
        "          config[callbacks.get(3).getPrompt()] = callbacks.get(3).getName();",
        "          config[callbacks.get(4).getPrompt()] = parseInt(callbacks.get(4).getName(), 10).toFixed();",
        "          config[callbacks.get(5).getPrompt()] = (""+callbacks.get(5).getName() === 'true');",
        "          config[callbacks.get(6).getPrompt()] = (""+callbacks.get(6).getName() === 'true');",
        "          config[callbacks.get(7).getPrompt()] = callbacks.get(7).getName();",
        "          nodeState.putShared("nodeConfig", config);",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "a873fcd8-8f17-4675-9dd6-54ab1c11e2df": {
      "_id": "a873fcd8-8f17-4675-9dd6-54ab1c11e2df",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Record that MFA has been performed for this journey and no longer needs to be performed. This allows journeys and inner journeys to check that flag before performing MFA multiple times.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Record MFA",
      "script": [
        "/* MFA Status",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Record that MFA has been performed for this journey and no longer needs ",
        " * to be performed. This allows journeys and inner journeys to check that ",
        " * flag before performing MFA multiple times.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "outcome = "true";",
        "sharedState.put("mfaPerformed", "true");",
      ],
    },
    "a8f10e93-3f6c-4d6c-b6a3-a8453e3d6b3a": {
      "_id": "a8f10e93-3f6c-4d6c-b6a3-a8453e3d6b3a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Reset the attributes holding replay credentials for the IG replay use case.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ResetPasswordReplayCredentials",
      "script": [
        "/* ResetPasswordReplayCredentials",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Reset the attributes holding replay credentials for the IG replay use case.",
        " * ",
        " * This script needs to be parametrized for your env.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "  outcome = "true";",
        "  var REPLAY_USERNAME_IDM_ATTR = "frUnindexedString1";",
        "  var REPLAY_PASSWORD_IDM_ATTR = "frUnindexedString2";",
        "  ",
        "  sharedState.get("objectAttributes").put(REPLAY_USERNAME_IDM_ATTR, null);",
        "  sharedState.get("objectAttributes").put(REPLAY_PASSWORD_IDM_ATTR, null);",
        "}());",
      ],
    },
    "aa2dabff-f5c4-4dc5-b4ac-5909e88a3a8f": {
      "_id": "aa2dabff-f5c4-4dc5-b4ac-5909e88a3a8f",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Verify known caller by first name",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Verify Known Caller",
      "script": [
        "/* Twilio IVR: Verify Known Caller",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "logger.warning("Twilio IVR: Verify Known Caller: start");",
        "outcome = "false";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// For ID Cloud use "_id", for classic deployments use "username"",
        "var userid = sharedState.get("_id")",
        "",
        "// Retrieve the known caller's first name",
        "var firstName = idRepository.getAttribute(userid, "givenName").iterator().next().replaceAll("[^a-zA-Z ]", "").toLowerCase();",
        "",
        "// Build out the full message",
        "var message = "I see we have a profile associated with your phone number!";",
        "",
        "// Build out the verification prompt",
        "var prompt = "To verify I have the right account, please say your first name.";",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextOutputCallback,",
        "      javax.security.auth.callback.TextInputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var output = new TextOutputCallback(TextOutputCallback.INFORMATION, message);",
        "        var input = new TextInputCallback(prompt);",
        "        action = Action.send(output, input).build();",
        "      } ",
        "      else {",
        "          var answer = callbacks.get(1).getText().replaceAll("[^a-zA-Z ]", "").toLowerCase();",
        "        logger.warning("Twilio IVR: Verify Known Caller: callbacks received: answer=".concat(answer).concat(" [firstName=").concat(firstName).concat("]"));",
        "        if (answer == firstName) {",
        "              outcome = "true";",
        "        }",
        "          else if (answer.length == 0) {",
        "              outcome = "no input";",
        "        }",
        "        logger.warning("Twilio IVR: Verify Known Caller: finish [outcome=".concat(outcome).concat("]"));",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
      ],
    },
    "ab78dcb5-85cb-41a6-813e-e07a77761376": {
      "_id": "ab78dcb5-85cb-41a6-813e-e07a77761376",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_ProfileToManagedObject",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "function setIfValidString(managedData, managedKey, profileKey) {",
        "  var normalizedValue = normalizedProfile.get(profileKey);",
        "  if (normalizedValue && !normalizedValue.isNull() && normalizedValue.asString() != '') {",
        "    managedData.put(managedKey, normalizedValue);",
        "  }",
        "}",
        "",
        "(function () {",
        "  var frJava = JavaImporter(",
        "    org.forgerock.json.JsonValue,",
        "    java.util.HashMap",
        "  );",
        "",
        "  var OBJ_ATTR = 'objectAttributes';",
        "",
        "  // We should have objectAttributes during onboarding because the user is established earlier in",
        "  // the journey.  We won't have objectAttributes during login, though.",
        "  var objAttrs = sharedState.containsKey(OBJ_ATTR) ? sharedState.get(OBJ_ATTR) : new frJava.HashMap();",
        "",
        "  // If this flow requires email matching, confirm the IdP user email address matches the FR email address",
        "  if (sharedState.checkEmailClaim == true) {",
        "    var idpEmail = normalizedProfile.get('email').asString();",
        "    var frEmail = objAttrs.get('mail');",
        "    if (idpEmail != frEmail) {",
        "      throw 'Email claim from IDP does not match identity mail attribute';",
        "    }",
        "  }",
        "",
        "  // Update user with first/last name from IDP, if available",
        "  var managedUserData = frJava.JsonValue.json(frJava.JsonValue.object());",
        "  setIfValidString(managedUserData, 'givenName', 'givenName');",
        "  setIfValidString(managedUserData, 'sn', 'familyName');",
        "  ",
        "  // For login: Ensure the mail attribute is set in case we have to look up the admin using",
        "  // their email.  This will occur when an existing admin is federating for the first time.",
        "  if (!objAttrs.containsKey('mail')) {",
        "    managedUserData.put('mail', normalizedProfile.get('email').asString());",
        "  }",
        "",
        "  if (!normalizedProfile.get('groups').isNull()) {",
        "    managedUserData.put('groups', normalizedProfile.get('groups').asList());",
        "  }",
        "  ",
        "  // Merge anything we've put into \`managedUserData\` into sharedState.objectAttributes because",
        "  // \`managedUserData\` goes into transient state, which isn't used by our downstream nodes",
        "  var keys = managedUserData.keys().toArray();",
        "  for (var i = 0; i < keys.length; i++) {",
        "    objAttrs.put(keys[i], managedUserData.get(keys[i]));",
        "  }",
        "  sharedState.put(OBJ_ATTR, objAttrs);",
        "",
        "  return managedUserData;",
        "}());",
      ],
    },
    "ab917dad-6fdb-46c2-8c8c-42f094ebeea1": {
      "_id": "ab917dad-6fdb-46c2-8c8c-42f094ebeea1",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Perform IDP re-lookup based on the Organization ID from the initial lookup. Set users' external IDP in shared state for further processing.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "IDP Re-Lookup",
      "script": [
        "/* IDP Re-Lookup",
        " * ",
        " * Perform IDP re-lookup based on the Organization ID from the initial lookup. ",
        " * Set users' external IDP in shared state for further processing.",
        " * ",
        " * This script requires parametrization. Make sure you carefully review the configuration parameters.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    logger.message("IDP Re-Lookup: start");",
        "      outcome = "false";",
        "      var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "      var orgId = referer.searchParam.o;",
        "      sharedState.put("username", referer.searchParam.u);",
        "",
        "      /* Begin Configuration */",
        "  ",
        "    // long-lived token, expires: Friday, January 16, 2032 9:45:14 PM GMT-06:00",
        "    var IDM_API_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlMWE1YzU5OC04MGUyLTRhZGMtYjM0NS0zMWQwMmUyOThjNGIiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiNGYzMDkxYTktZjU0Ni00MDdiLTkzNjMtM2RiZGJiZjYzMDc0LTM1NzcwOSIsInN1Ym5hbWUiOiJlMWE1YzU5OC04MGUyLTRhZGMtYjM0NS0zMWQwMmUyOThjNGIiLCJpc3MiOiJodHRwczovL29wZW5hbS12b2xrZXItZGV2LmZvcmdlYmxvY2tzLmNvbTo0NDMvYW0vb2F1dGgyL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoiLUIxQlRUM3FqNi04Zkd3a2d6bzgzNzlSRjVJLjA4NkNJdTFyOUNCNlROcEIwV3Q5OFEyNTJYcyIsImF1ZCI6IjY5ZDA1YzExLWU4ZmUtNGFlNS1hN2M5LTIyNTJhNGQ4NWRmNCIsIm5iZiI6MTY0MjU2MzkxNCwiZ3JhbnRfdHlwZSI6InBhc3N3b3JkIiwic2NvcGUiOlsiZnI6aWRtOioiXSwiYXV0aF90aW1lIjoxNjQyNTYzOTE0LCJyZWFsbSI6Ii9hbHBoYSIsImV4cCI6MTk1NzkyMzkxNCwiaWF0IjoxNjQyNTYzOTE0LCJleHBpcmVzX2luIjozMTUzNjAwMDAsImp0aSI6Ii1CMUJUVDNxajYtOGZHd2tnem84Mzc5UkY1SS5CSHFZNVp3c0lGNVpMbEtvcGNvUlVGVHNLUjAiLCJtYXlfYWN0Ijp7ImNsaWVudF9pZCI6WyI2OWQwNWMxMS1lOGZlLTRhZTUtYTdjOS0yMjUyYTRkODVkZjQiXX19.f2NmwHVtekH93jO7-jM6mkFRcuvEN3WzcKsH-RAPnlc";",
        "",
        "    // IDM API Configuration",
        "    var IDM_API_URI = referer.origin + "/openidm/managed/alpha_organization/"+ orgId + "?_fields=name,description,idpName,idpType,idpDomains,idpJourney,idpTheme,idpPersist";",
        "",
        "      /* End Configuration */",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('GET');",
        "    request.setUri(IDM_API_URI);",
        "    request.getHeaders().add("Content-Type", "application/json; charset=UTF-8");",
        "    request.getHeaders().add("Authorization", "Bearer " + IDM_API_TOKEN);",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    logger.message("IDP Re-Lookup: JSON result: " + JSON.stringify(result));",
        "    ",
        "      if (result) {",
        "          outcome = "true";",
        "        var routedIDPs = [result];",
        "        sharedState.put("routedIDPs", routedIDPs);",
        "        logger.message("IDP Re-Lookup: Found IDP");",
        "    }",
        "    logger.message("IDP Re-Lookup: end [outcome={}]", outcome);",
        "",
        "    /*",
        "     * Parse a URL into its components and make them easily accessible by name",
        "     *",
        "     * Use in a Scripte Decision Node Script as follows:",
        "     * var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "     * var origin = referer.origin;",
        "     * ",
        "     * e.g.: https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "     * {",
        "     *     hash: '#/',",
        "     *     host: 'openam-volker-dev.forgeblocks.com',",
        "     *     hostname: 'openam-volker-dev.forgeblocks.com',",
        "     *     href: 'https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/',",
        "     *     origin: 'https://openam-volker-dev.forgeblocks.com',",
        "     *     pathname: '/am/XUI/',",
        "     *     port: '',",
        "     *     protocol: 'https',",
        "     *     search: '?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim',",
        "     *     username: '',",
        "     *     password: '',",
        "     *     searchParam: {",
        "     *         realm: '/bravo',",
        "     *         authIndexType: 'service',",
        "     *         authIndexValue: 'InitiateOwnerClaim'",
        "     *     }",
        "     * }",
        "     */",
        "    function parseUrl(href) {",
        "        var m = href.match(/^(([^:\\/?#]+):?(?:\\/\\/((?:([^\\/?#:]*):([^\\/?#:]*)@)?([^\\/?#:]*)(?::([^\\/?#:]*))?)))?([^?#]*)(\\?[^#]*)?(#.*)?$/),",
        "        r = {",
        "            hash: m[10] || "",                      // #/",
        "            host: m[3] || "",                       // openam-volker-dev.forgeblocks.com",
        "            hostname: m[6] || "",                   // openam-volker-dev.forgeblocks.com",
        "            href: m[0] || "",                       // https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "            origin: m[1] || "",                     // https://openam-volker-dev.forgeblocks.com",
        "            pathname: m[8] || (m[1] ? "/" : ""),    // /am/XUI/",
        "            port: m[7] || "",                       // ",
        "            protocol: m[2] || "",                   // https",
        "            search: m[9] || "",                     // ?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim",
        "            username: m[4] || "",                   // ",
        "            password: m[5] || "",                   // ",
        "            searchParam: {}                         // { realm: '/bravo',",
        "                                                    //   authIndexType: 'service',",
        "                                                    //   authIndexValue: 'InitiateOwnerClaim' }",
        "        };",
        "        if (r.protocol.length == 2) {",
        "            r.protocol = "file:///" + r.protocol.toUpperCase();",
        "            r.origin = r.protocol + "//" + r.host;",
        "        }",
        "        if (r.search.length > 2) {",
        "            var query = (r.search.indexOf('?') === 0) ? r.search.substr(1) : r.search;",
        "            var vars = query.split('&');",
        "            for (var i = 0; i < vars.length; i++) {",
        "            var pair = vars[i].split('=');",
        "            r.searchParam[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);",
        "            }",
        "        }",
        "        r.href = r.origin + r.pathname + r.search + r.hash;",
        "        return r;",
        "    };",
        "}());",
      ],
    },
    "ac9fc25e-3ad9-4f80-a796-2d9093795439": {
      "_id": "ac9fc25e-3ad9-4f80-a796-2d9093795439",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if MFA has already been performed for this journey. This allows journeys and inner journeys not to perform MFA multiple times.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "MFA Status",
      "script": [
        "/* MFA Status",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if MFA has already been performed for this journey. ",
        " * This allows journeys and inner journeys not to perform MFA multiple times.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " */",
        "outcome = "false";",
        "if (sharedState.get("mfaPerformed")=="true") {",
        "      outcome = "true";",
        "}",
      ],
    },
    "aef262d0-7a42-4a34-9826-e7dbc2ea6eb9": {
      "_id": "aef262d0-7a42-4a34-9826-e7dbc2ea6eb9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Route users to their organization's IDP of type saml, oidc, local, or custom and apply the organization's theme, if specified",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "IDP Router",
      "script": [
        "/* IDP Router",
        " * ",
        " * Route users to their organization's IDP of type saml, oidc, local, ",
        " * or custom and apply the organization's theme, if specified.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - saml",
        " * - oidc",
        " * - local",
        " * - custom",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      logger.message("IDP Router: Start");",
        "    outcome = "local";",
        "      var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "      var routedIDP = sharedState.get("routedIDPs").get(0);",
        "      if (routedIDP) {",
        "        outcome = routedIDP.get("idpType");",
        "        logger.message("IDP Router: Routed IDP: " + routedIDP);",
        "          sharedState.put("selectedIdp", routedIDP.get("idpName"));",
        "        var nodeConfig = {};",
        "          // load samlConfig",
        "          if (routedIDP.get("samlConfig")) {",
        "              nodeConfig = JSON.parse(routedIDP.get("samlConfig"));",
        "        }",
        "          // route to a custom journey",
        "        if (routedIDP.get("idpJourney")) {",
        "            logger.message("IDP Router: Route to custom IDP {}, journey: {}", routedIDP.get("idpName"), routedIDP.get("idpJourney"));",
        "              nodeConfig.tree = routedIDP.get("idpJourney");",
        "              outcome = "custom";",
        "        }",
        "          sharedState.put("nodeConfig", nodeConfig);",
        "          // only send callback if the org/idp requires a custom theme",
        "        if (routedIDP.get("idpTheme") && callbacks.isEmpty()) {",
        "            var stage = "themeId="+routedIDP.get("idpTheme");",
        "            var fr = JavaImporter(",
        "                org.forgerock.openam.auth.node.api.Action,",
        "                org.forgerock.openam.authentication.callbacks.PollingWaitCallback",
        "            )",
        "              action = fr.Action.send(",
        "                  new fr.PollingWaitCallback("0", "Please wait ...")",
        "            ).withStage(stage).build();",
        "          }",
        "    }",
        "      logger.message("IDP Router: Done [outcome={}]", outcome);",
        "",
        "    /*",
        "     * Parse a URL into its components and make them easily accessible by name",
        "     *",
        "     * Use in a Scripte Decision Node Script as follows:",
        "     * var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "     * var origin = referer.origin;",
        "     * ",
        "     * e.g.: https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "     * {",
        "     *     hash: '#/',",
        "     *     host: 'openam-volker-dev.forgeblocks.com',",
        "     *     hostname: 'openam-volker-dev.forgeblocks.com',",
        "     *     href: 'https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/',",
        "     *     origin: 'https://openam-volker-dev.forgeblocks.com',",
        "     *     pathname: '/am/XUI/',",
        "     *     port: '',",
        "     *     protocol: 'https',",
        "     *     search: '?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim',",
        "     *     username: '',",
        "     *     password: '',",
        "     *     searchParam: {",
        "     *         realm: '/bravo',",
        "     *         authIndexType: 'service',",
        "     *         authIndexValue: 'InitiateOwnerClaim'",
        "     *     }",
        "     * }",
        "     */",
        "    function parseUrl(href) {",
        "        var m = href.match(/^(([^:\\/?#]+):?(?:\\/\\/((?:([^\\/?#:]*):([^\\/?#:]*)@)?([^\\/?#:]*)(?::([^\\/?#:]*))?)))?([^?#]*)(\\?[^#]*)?(#.*)?$/),",
        "        r = {",
        "            hash: m[10] || "",                      // #/",
        "            host: m[3] || "",                       // openam-volker-dev.forgeblocks.com",
        "            hostname: m[6] || "",                   // openam-volker-dev.forgeblocks.com",
        "            href: m[0] || "",                       // https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "            origin: m[1] || "",                     // https://openam-volker-dev.forgeblocks.com",
        "            pathname: m[8] || (m[1] ? "/" : ""),    // /am/XUI/",
        "            port: m[7] || "",                       // ",
        "            protocol: m[2] || "",                   // https",
        "            search: m[9] || "",                     // ?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim",
        "            username: m[4] || "",                   // ",
        "            password: m[5] || "",                   // ",
        "            searchParam: {}                         // { realm: '/bravo',",
        "                                                    //   authIndexType: 'service',",
        "                                                    //   authIndexValue: 'InitiateOwnerClaim' }",
        "        };",
        "        if (r.protocol.length == 2) {",
        "            r.protocol = "file:///" + r.protocol.toUpperCase();",
        "            r.origin = r.protocol + "//" + r.host;",
        "        }",
        "        if (r.search.length > 2) {",
        "            var query = (r.search.indexOf('?') === 0) ? r.search.substr(1) : r.search;",
        "            var vars = query.split('&');",
        "            for (var i = 0; i < vars.length; i++) {",
        "            var pair = vars[i].split('=');",
        "            r.searchParam[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);",
        "            }",
        "        }",
        "        r.href = r.origin + r.pathname + r.search + r.hash;",
        "        return r;",
        "    };",
        "}());",
      ],
    },
    "b3824c66-2dff-4613-9e54-4a7577fdb765": {
      "_id": "b3824c66-2dff-4613-9e54-4a7577fdb765",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Places a timestamp in the frIndexedMultivalued1 attribute",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "TimeStamp_Login",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "",
        "",
        "//var timestamps = sharedState.get("objectAttributes").get("frIndexedMultivalued1");",
        "",
        "",
        "var lastLogin = new Date();",
        "/*",
        "var datetime = ""+ currentdate.getDate() + "/"",
        "                + (currentdate.getMonth()+1)  + "/" ",
        "                + currentdate.getFullYear() + " @ "  ",
        "                + currentdate.getHours() + ":"  ",
        "                + currentdate.getMinutes() + ":" ",
        "                + currentdate.getSeconds();",
        "*/",
        "",
        "var objectAttributes = sharedState.get("objectAttributes");",
        "",
        "",
        "sharedState.put("last Login",lastLogin.toString());",
        "",
        "",
        "",
        "",
        "",
        "objectAttributes.put("frUnindexedString1",lastLogin.toString());",
        "",
        "",
        "sharedState.put("objectAttributes",objectAttributes);",
        "",
        "",
        "outcome = "true";",
      ],
    },
    "b63981d8-cb73-4e47-8749-e58654dcaa31": {
      "_id": "b63981d8-cb73-4e47-8749-e58654dcaa31",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "This script uses phonevalidator.com to determine the type of phone number stored in the user profile.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Phone Validator - Line Type",
      "script": [
        "/* Phone Validator - Line Type",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * This script uses phonevalidator.com to determine the type of phone number stored in the user profile.",
        " * Get your own API Key at https://www.phonevalidator.com",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Identify Existing User node before it is being called.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - CELL PHONE",
        " * - LANDLINE",
        " * - VOIP",
        " * - TOLL-FREE",
        " * - UNKNOWN",
        " * - failed",
        " */",
        "logger.warning("Phone Validator - Line Type: start");",
        "",
        "if (getSharedObjectAttribute("telephoneNumber") || (sharedState.get("_id") && idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().hasNext())) {",
        "",
        "    /* BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN AZURE AD SETTINGS",
        "     *",
        "       * Phone Validator - Line Type API Configuration",
        "       * Get your own API Key at https://www.phonevalidator.com",
        "     */",
        "    var PV_API_KEY = "849d564a-594d-4bde-b691-afe5ddadd547";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "",
        "      var PV_API_TYPE = "basic";",
        "    var PV_API_PHONE = getSharedObjectAttribute("telephoneNumber") || idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().next();",
        "    var PV_API_URI = "https://www.phonevalidator.com/api/v2/phonesearch?apikey=".concat(PV_API_KEY).concat("&phone=").concat(PV_API_PHONE).concat("&type=").concat(PV_API_TYPE);    ",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('GET');",
        "    request.setUri(PV_API_URI);",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "",
        "    if (result["StatusCode"]=="200") {",
        "        outcome = result["PhoneBasic"]["LineType"];",
        "    } else {",
        "        outcome = "failed";",
        "    }",
        "    logger.error("Phone Validator - Line Type: StatusCode = ".concat(result["StatusCode"]));",
        "    logger.error("Phone Validator - Line Type: StatusMessage = ".concat(result["StatusMessage"]));",
        "    logger.error("Phone Validator - Line Type: outcome = ".concat(outcome));",
        "} else {",
        "      outcome = "failed";",
        "      logger.error("Phone Validator - Line Type: No user or phone number found! Use 'Identify Existing User node before this script to populate the user's _id in shared state or put a valid cell phone number into sharedState.objectAttributes.telephoneNumber!'");",
        "    logger.error("Phone Validator - Line Type: outcome = ".concat(outcome));",
        "}",
        "",
        "/*",
        " * Read attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function getSharedObjectAttribute(name) {",
        "    var storage = sharedState.get("objectAttributes");",
        "    if (storage) {",
        "          if (storage.get) {",
        "            return sharedState.get("objectAttributes").get(name);",
        "        }",
        "          else {",
        "            return storage.name;",
        "        }",
        "    }",
        "    return null;",
        "}",
      ],
    },
    "b6fce769-cf21-4963-a8dc-7c5370a4d15b": {
      "_id": "b6fce769-cf21-4963-a8dc-7c5370a4d15b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "shared State Printer",
      "script": [
        "var fr = JavaImporter(",
        "  org.forgerock.openam.auth.node.api,",
        "  javax.security.auth.callback.TextOutputCallback",
        ");",
        "outcome = "true";",
        "with (fr) {",
        "  if (callbacks.isEmpty()) {",
        "    var callback = new TextOutputCallback(TextOutputCallback.INFORMATION, "sharedState: ".concat(sharedState.toString()));",
        "    action = Action.send(callback).build();",
        "  } else {",
        "    action = Action.goTo("true").build();",
        "  }",
        "}",
      ],
    },
    "b703581a-e112-42b9-bc24-6db8bced5a13": {
      "_id": "b703581a-e112-42b9-bc24-6db8bced5a13",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display sharedState and transientState.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Display States",
      "script": [
        "/* Display States",
        " * ",
        " * Display sharedState and transientState.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "",
        "    var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "    var halign = "left";",
        "    var message = "<h4>Current State Values</h4>".concat(",
        "        "<p><b>Shared State</b>:<br/>").concat(",
        "        sharedState.toString()).concat("</p>").concat(",
        "        "<p><b>Transient State</b>:<br/>").concat(",
        "        transientState.toString()).concat("</p>").concat(",
        "        "<p><b>Request Headers</b>:<br/>").concat(",
        "        requestHeaders.toString()).concat("</p>")",
        "    var script = "Array.prototype.slice.call(\\n".concat(",
        "      "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "      "function (e) {\\n").concat(",
        "      "  var message = e.firstElementChild;\\n").concat(",
        "      "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "      "    message.className = \\"\\";\\n").concat(",
        "      "    message.style = \\"text-align: left; inline-size: 430px; overflow-wrap: break-word;\\";\\n").concat(",
        "      "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "      "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "      "  }\\n").concat(",
        "      "})")",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (message.length && callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                anchor",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "    else {",
        "      action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "     /*",
        "      * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "      * ",
        "      * Example:",
        "      * 'xxxxx' produces '28535'",
        "      * 'xxx-xxx' produces '432-521'",
        "      */",
        "    function generateNumericToken(format) {",
        "        return format.replace(/[x]/g, function(c) {",
        "            var r = Math.random()*10|0;",
        "            var v = r;",
        "            return v.toString(10);",
        "        });",
        "    }",
        "}());",
      ],
    },
    "b7259916-71ed-4675-8c5a-de86a80e4aed": {
      "_id": "b7259916-71ed-4675-8c5a-de86a80e4aed",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript2",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "b7ce17a1-e41d-42b0-bedc-f88a4d5e1c3a": {
      "_id": "b7ce17a1-e41d-42b0-bedc-f88a4d5e1c3a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Prepares onboarding check if not amadmin",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_AmadminCheck",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "var fr = new JavaImporter(",
        "  java.util.HashMap",
        ");",
        "",
        "with (fr) {",
        "  try {",
        "    ",
        "    if (sharedState.get('username').toLowerCase() == 'amadmin') {",
        "      outcome = 'True';",
        "    } else {",
        "      outcome = 'False';",
        "    }",
        "    ",
        "  } catch (e) {",
        "",
        "    logger.error('Failed to determine if user is amadmin: {}', e);",
        "    outcome = 'Error';",
        "",
        "  }",
        "}",
      ],
    },
    "b88ce1fe-2480-4fd5-8062-2bd1f4659e2e": {
      "_id": "b88ce1fe-2480-4fd5-8062-2bd1f4659e2e",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_LoadObjectByID",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This is a utility script to simplify access to admin identity properties. It",
        " * requires that \`sharedState._id\` be populated, which can be loaded using an",
        " * Identify Existing User node.",
        " */",
        "",
        "function val(attrs, name) {",
        "  if (attrs.containsKey(name)) {",
        "    return attrs.get(name).iterator().next();",
        "  }",
        "  return '';",
        "}",
        "",
        "(function() {",
        "  var fr = new JavaImporter(",
        "    org.forgerock.openam.auth.nodes,",
        "    org.forgerock.guice.core",
        "  );",
        "",
        "  with (fr) {",
        "    try {",
        "",
        "      outcome = 'False';",
        "",
        "      if (!sharedState.containsKey('_id')) {",
        "        throw 'Required sharedState property _id is missing';",
        "      }      ",
        "      ",
        "      var realm = sharedState.get('realm');",
        "      var uuid = sharedState.get('_id');",
        "      ",
        "      var identityProvider = InjectorHolder.getInstance(IdentityProvider);",
        "      var identity = identityProvider.getIdentity(uuid, realm);",
        "      var attrs = identity.getAttributes();",
        "      ",
        "      sharedState.put('adminObject', {",
        "        givenName: val(attrs, 'givenName'),        ",
        "        sn: val(attrs, 'sn'),",
        "        mail: val(attrs, 'mail'),",
        "        inviteDate: val(attrs, 'fr-idm-inviteDate'),",
        "        onboardDate: val(attrs, 'fr-idm-onboardDate')        ",
        "      });",
        "",
        "      logger.message('Loaded admin object for id: {}', uuid);",
        "",
        "      outcome = 'True';",
        "",
        "    } catch (e) {",
        "      logger.error('Failed to load admin object: {}', e);",
        "    }",
        "  }",
        "}());",
      ],
    },
    "be6f1f2c-30ee-41fb-9e1e-8da72267fad3": {
      "_id": "be6f1f2c-30ee-41fb-9e1e-8da72267fad3",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Greet verified caller",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Greet Verified Caller",
      "script": [
        "/* Twilio IVR: Greet Verified Caller",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "outcome = "true";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// For ID Cloud use "_id", for classic deployments use "username"",
        "var userid = sharedState.get("_id")",
        "",
        "// Configure how you would like to address the verified caller. The default is the full name.",
        "var name = [idRepository.getAttribute(userid, "givenName").iterator().next(), idRepository.getAttribute(userid, "sn").iterator().next()].join(" ");",
        "",
        "// Build out the full message",
        "var message = ["Hello", name, "! How can I help you today?"].join(" ");",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextOutputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var output = new TextOutputCallback(TextOutputCallback.INFORMATION, message);",
        "        action = Action.send(output).build();",
        "      } ",
        "      else {",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
      ],
    },
    "c253a7ac-ebc9-4268-9e62-89f38f98e4ab": {
      "_id": "c253a7ac-ebc9-4268-9e62-89f38f98e4ab",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "CopyIDToObjectAttributes",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "",
        "sharedState.get("objectAttributes").put("_id", sharedState.get("_id"));",
        "",
        "outcome = "true";",
      ],
    },
    "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d": {
      "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript1",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "c9fa3899-c3ce-4833-af83-64d709202600": {
      "_id": "c9fa3899-c3ce-4833-af83-64d709202600",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Verify security PIN",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Verify Security PIN",
      "script": [
        "/* Twilio IVR: Verify Security PIN",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "logger.warning("Twilio IVR: Verify Security PIN: start");",
        "outcome = "false";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// For ID Cloud use "_id", for classic deployments use "username"",
        "var userid = sharedState.get("_id")",
        "",
        "// Retrieve the identified caller's PIN (in IDM: frUnindexedInteger5, in AM: fr-attr-int5)",
        "var securityPIN = idRepository.getAttribute(userid, "fr-attr-int5").iterator().next();",
        "",
        "// Build out the verification prompt",
        "var prompt = "To verify I have the right account, please enter your 4-digit security PIN.";",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextInputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var input = new TextInputCallback(prompt);",
        "        action = Action.send(input).build();",
        "      } ",
        "      else {",
        "          var answer = new String(callbacks.get(0).getText()).replace(/[^0-9]/g, "");",
        "        logger.warning("Twilio IVR: Verify Security PIN: callbacks received");",
        "        if (answer == securityPIN) {",
        "              outcome = "true";",
        "        }",
        "        logger.warning("Twilio IVR: Verify Security PIN: finish [outcome=".concat(outcome).concat("]"));",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
      ],
    },
    "cdea92a1-d2bf-4364-a525-fde8b7a95792": {
      "_id": "cdea92a1-d2bf-4364-a525-fde8b7a95792",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Get Lockout Status",
      "script": [
        "outcome = "true";",
        "",
        "var username = sharedState.get("_id")",
        "var lockoutDataAttr = "sunAMAuthInvalidAttemptsData"",
        "var accountStatusAttr = "inetUserStatus"",
        "",
        "var lockoutData = idRepository.getAttribute(username, lockoutDataAttr)",
        "var accountStatus = idRepository.getAttribute(username, accountStatusAttr)",
        "",
        "transientState.put("lockoutData", lockoutData)",
        "transientState.put("accountStatus", accountStatus)",
        "",
        "logger.error(lockoutData.toString())",
      ],
    },
    "ce6fbbcf-5d9a-471b-bcc1-448758a6374a": {
      "_id": "ce6fbbcf-5d9a-471b-bcc1-448758a6374a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Validate OTP in profile attribute",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "MobileOTP: Validate OTP In Profile Attribute",
      "script": [
        "/*",
        " * Validate OTP in user profile attribute against OTP in shared state",
        " */",
        "outcome = "false";",
        "var OTP_LENGTH = 8;",
        "",
        "if (sharedState.get("mobileOTP")) {",
        "      var profileOTP = idRepository.getAttribute(username, "fr-attr-int5");",
        "}",
        "",
        "function checkPassword(profileOTP, password) {",
        "    var oneTimePassword = profileOTP.substring(0,7);",
        "    var passwordTimestamp = Number(profileOTP.substring(8));",
        "",
        "    var passwordMatches = oneTimePassword",
        "        && (oneTimePassword == password)",
        "        && passwordTimestamp != null",
        "        && isWithinExpiryTime(passwordTimestamp);",
        "    return passwordMatches;",
        "}",
        "",
        "function isWithinExpiryTime(passwordTimestamp) {",
        "        Instant previous = Instant.ofEpochSecond(passwordTimestamp);",
        "        Duration passwordExpiry = Duration.ofMinutes(config.passwordExpiryTime());",
        "        Instant now = Time.getClock().instant();",
        "        logger.debug("previous {} \\n passwordExpiry {} \\n now {}", previous, passwordExpiry, now);",
        "        boolean withinExpiryTime = Duration.between(previous.plus(passwordExpiry), now).isNegative();",
        "        logger.debug("withinExpiryTime {}", withinExpiryTime);",
        "        return withinExpiryTime;",
        "}",
        "",
        "/*",
        "    private Action checkPassword(TreeContext context, String password) {",
        "        JsonValue oneTimePassword = context.getState(ONE_TIME_PASSWORD);",
        "        JsonValue passwordTimestamp = context.getState(ONE_TIME_PASSWORD_TIMESTAMP);",
        "",
        "        boolean passwordMatches = oneTimePassword != null && oneTimePassword.isString()",
        "                && oneTimePassword.asString().equals(password)",
        "                && passwordTimestamp != null && passwordTimestamp.isNumber()",
        "                && isWithinExpiryTime(passwordTimestamp.asLong());",
        "        logger.debug("passwordMatches {}", passwordMatches);",
        "        return goTo(passwordMatches).build();",
        "    }",
        "",
        "    private boolean isWithinExpiryTime(long passwordTimestamp) {",
        "        Instant previous = Instant.ofEpochSecond(passwordTimestamp);",
        "        Duration passwordExpiry = Duration.ofMinutes(config.passwordExpiryTime());",
        "        Instant now = Time.getClock().instant();",
        "        logger.debug("previous {} \\n passwordExpiry {} \\n now {}", previous, passwordExpiry, now);",
        "        boolean withinExpiryTime = Duration.between(previous.plus(passwordExpiry), now).isNegative();",
        "        logger.debug("withinExpiryTime {}", withinExpiryTime);",
        "        return withinExpiryTime;",
        "    }",
        "    */",
      ],
    },
    "cf3515f0-8278-4ee3-a530-1bad7424c416": {
      "_id": "cf3515f0-8278-4ee3-a530-1bad7424c416",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Default alpha realm script for OIDC claims",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
      ],
    },
    "cfb208d8-241c-4953-b87b-bf59d1ab3d05": {
      "_id": "cfb208d8-241c-4953-b87b-bf59d1ab3d05",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_EnableEmailClaimCheck",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "nodeState.putShared('checkEmailClaim', true);",
        "",
        "outcome = 'True';",
      ],
    },
    "d25a1315-8beb-4a0c-84bf-534214fed087": {
      "_id": "d25a1315-8beb-4a0c-84bf-534214fed087",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Prepare Reset Of OTP Profile Attribute",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "MobileOTP: Prepare Reset Of OTP Profile Attribute",
      "script": [
        "/*",
        " * Reset OTP profile attribute in ObjectAttributes so it can be patched to the user profile.",
        " */",
        "outcome = "true";",
        "",
        "setSharedObjectAttribute("fr-attr-int5", "0");",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "      var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "d2a41d85-d33a-42d9-a7dd-50dfbc9fa7c0": {
      "_id": "d2a41d85-d33a-42d9-a7dd-50dfbc9fa7c0",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check Applicant",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Onfido-CheckApplicant",
      "script": [
        "logger.error("Onfido-CheckApplicant: Start");",
        "",
        "/*",
        " * !!! Extend your authentication session time so your identity proofing flows don't time out !!!",
        " *",
        " * Authentication > Settings > Trees > Max Duration (Minutes)",
        " *",
        " * Set to 15 minutes.",
        " *",
        " */",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " *",
        " * REPLACE WITH YOUR OWN ONFIDO API TOKEN",
        " */",
        "//var ONFIDO_API_TOKEN = "api_live.StUdfxdiCFb.YrzbadxB_R2-qG5lFUc3lWg6JAc3Cnq-"",
        "var ONFIDO_API_TOKEN = "api_live.H5ysRusAomY.nbbkimoWc91cDZAWJZkJt0Tkqdjm1Rjr";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "var requestBodyJson = {",
        "    "applicant_id": String(sharedState.get("onfidoApplicantID")),",
        "    "report_names": ["document", "facial_similarity_photo"]",
        "}",
        "// var requestBodyJson = {",
        "//     "applicant_id": String(sharedState.get("onfidoApplicantID")),",
        "//     "report_names": ["document"]",
        "// }",
        "",
        "var failure = true",
        "",
        "var fr = JavaImporter(",
        "    org.forgerock.http.protocol.Request",
        ")",
        "",
        "var request = new fr.Request()",
        "request.setUri("https://api.onfido.com/v3/checks")",
        "request.setMethod("POST")",
        "request.getHeaders().add("Content-Type", "application/json; charset=UTF-8")",
        "request.getHeaders().add("Authorization", "Token token=" + ONFIDO_API_TOKEN)",
        "request.getEntity().setString(JSON.stringify(requestBodyJson))",
        "",
        "var response = httpClient.send(request).get()",
        "logger.error("Onfido-CheckApplicant: Initiate checks response: ".concat(response.getEntity().getString()));",
        "",
        "if (response.getStatus().getCode() === 200) {",
        "    var id = JSON.parse(response.getEntity().getString()).id",
        "    failure = !id",
        "    if (!failure) sharedState.put("onfidoAuthToken", id);",
        "} else {",
        "    failure = true",
        "}",
        "",
        "outcome = failure ? "false" : "true";",
        "logger.error("Onfido-CheckApplicant: End (outcome=".concat(outcome).concat(")"));",
      ],
    },
    "d2cf4f18-651a-4a3c-9b04-ee4fc896d0c3": {
      "_id": "d2cf4f18-651a-4a3c-9b04-ee4fc896d0c3",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Social Identity Provider Profile Transformation for ForgeRock OIDC Providers",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ST_healthcare-idc-social-transformation",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock. Not for production use.",
        " * Modified by Stephen Payne",
        " */",
        "/* Social Identity Provider Profile Transformation script for Healthcare ID Cloud */",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.error("ST_healthcare-idc-social-transformation Healthcare ID Cloud Identity Provider Profile Transformation script: Start");",
        "",
        "logger.error("ST_healthcare-idc-social-transformation Profile Transformation script: Start");",
        "logger.error("ST_healthcare-idc-social-transformationy: givenName " + rawProfile.givenName);",
        "logger.error("ST_healthcare-idc-social-transformation: sn: " +rawProfile.familyName);",
        "logger.error("ST_healthcare-idc-social-transformation: id: " +rawProfile.id);",
        "logger.error("ST_healthcare-idc-social-transformation: mail: " + rawProfile.email);",
        "logger.error("ST_healthcare-idc-social-transformation: cn: " + rawProfile.displayName);",
        "logger.error("ST_healthcare-idc-social-transformation: userName: " + rawProfile.username);",
        "logger.error("ST_healthcare-idc-social-transformation: id: " + rawProfile.id.asString());",
        "//logger.error("ST_healthcare-idc-social-transformation: iplanet-am-user-alias-list: " + selectedIdp + '-' + rawProfile.id.asString() );",
        "//logger.error("ST_healthcare-idc-social-transformation: selectedIdp: " + selectedIdp);",
        "if (rawProfile.fhirUser.isNotNull()) logger.error("ST_healthcare-idc-social-transformation: fhirUser: " + rawProfile.fhirUser);",
        "if (rawProfile.IAL.isNotNull()) logger.error("ST_healthcare-idc-social-transformatio: IAL: " + rawProfile.IAL);",
        "",
        "",
        "",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email),",
        "        field("IAL", rawProfile.IAL),  ",
        "        field("telephoneNumber", rawProfile.phone_number),",
        "        field("fhirUser", rawProfile.fhirUser),",
        "        field("userType", rawProfile.userType),",
        "        )",
        ")",
      ],
    },
    "d3405f9c-d338-4dc2-b00d-7aacf77b731d": {
      "_id": "d3405f9c-d338-4dc2-b00d-7aacf77b731d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Return the generated OTP using a TextOutputCallback",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Return OTP",
      "script": [
        "/* Return OTP",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Return the generated OTP using a TextOutputCallback.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "outcome = "true";",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback",
        ")",
        "if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            nodeState.get("oneTimePassword").asString()",
        "        )",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo(outcome).build();",
        "}",
      ],
    },
    "d6469639-249f-4df1-9e03-335cd3e37b3d": {
      "_id": "d6469639-249f-4df1-9e03-335cd3e37b3d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Get Email",
      "script": [
        "logger.error("Get Email: start");",
        "outcome = "true";",
        "if (getProfileAttribute("mail")) {",
        "  setSharedObjectAttribute("mail", getProfileAttribute("mail"));",
        "}",
        "logger.error("Get Email: end");",
        "",
        "/*",
        " * Get profile attribute",
        " */",
        "function getProfileAttribute(name) {",
        "    return idRepository.getAttribute(sharedState.get("_id"), name).iterator().next();",
        "}",
        "",
        "/*",
        " * Properly set attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "    if (sharedState.get("objectAttributes")) {",
        "        sharedState.get("objectAttributes").put(name, value);",
        "    }",
        "    else {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":"+value+"}"));",
        "    }",
        "}",
      ],
    },
    "d6f3befb-c73a-437e-b02a-66d9b4c93f8b": {
      "_id": "d6f3befb-c73a-437e-b02a-66d9b4c93f8b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Extract impersonatee and impersonator from headers and become impersonator.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Impersonate: Extract Actors And Become Impersonator",
      "script": [
        "/* Impersonate: Extract Actors And Become Impersonator",
        " *",
        " * Extract impersonatee and impersonator from headers and become impersonatee.",
        " *",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " */",
        "",
        "(function () {",
        "    logger.warning("Impersonate: Extract Actors: start");",
        "    outcome = "false";",
        "",
        "    /*",
        "     * BEGIN SCRIPT CONFIGURATION",
        "     */",
        "    var IMPERSONATEE_HEADER_NAME = "X-Impersonatee";",
        "    var IMPERSONATOR_HEADER_NAME = "X-Impersonator";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "",
        "    var impersonatee = getHeader(IMPERSONATEE_HEADER_NAME);",
        "    var impersonator = getHeader(IMPERSONATOR_HEADER_NAME);",
        "    if (impersonatee && impersonator) {",
        "        outcome = "true";",
        "        sharedState.put("impersonatee", impersonatee);",
        "        sharedState.put("impersonator", impersonator);",
        "        sharedState.put("username", impersonator);",
        "        setSharedObjectAttribute("userName", impersonator);",
        "    }",
        "",
        "    logger.warning("Impersonate: Extract Actors: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "    /*",
        "     * Returns the value of the requested header",
        "     */",
        "    function getHeader(headerName) {",
        "        if (requestHeaders.get(headerName) && requestHeaders.get(headerName).get(0)) {",
        "            return requestHeaders.get(headerName).get(0).toString();",
        "        }",
        "        return null;",
        "    }",
        "",
        "    /*",
        "     * Store attributes in shared state for use with the Create/Patch Object nodes.",
        "     */",
        "    function setSharedObjectAttribute(name, value) {",
        "         var storage = sharedState.get("objectAttributes");",
        "        if (storage && value) {",
        "            if (storage.put) {",
        "                  storage.put(name, value);",
        "            }",
        "            else {",
        "                storage[name] = value;",
        "            }",
        "        }",
        "        else if (value) {",
        "            sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "        }",
        "    }",
        "}());",
      ],
    },
    "d70df7a8-6390-409d-b821-166272a9a9c8": {
      "_id": "d70df7a8-6390-409d-b821-166272a9a9c8",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Collect all the configuration items required for the Inner Tree Evaluator to function properly.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect Inner Tree Evaluator Config",
      "script": [
        "/* Collect Inner Tree Evaluator Config",
        " * ",
        " * Collect all the configuration items required for the Inner Tree Evaluator to function properly.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "      var config = {",
        "        "tree": "Login",",
        "    };",
        "      var script = "";",
        "    script += "Array.prototype.slice.call(";",
        "    script += "    document.getElementsByTagName('input')";",
        "    script += ").forEach(";",
        "    script += "    function (input,i) {";",
        "    script += "        console.log('input '+i);"",
        "    script += "        var config = JSON.parse('"+JSON.stringify(config)+"');";",
        "    script += "        var keys = Object.keys(config);";",
        "    script += "        if (input.type === 'text') {";",
        "    script += "            input.setAttribute('value', config[keys[i]]);";",
        "    script += "            input.dispatchEvent(new KeyboardEvent( 'input' , {'key':'Enter'} ));";",
        "    script += "        }";",
        "    script += "    }";",
        "    script += ");";",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          javax.security.auth.callback.NameCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.NameCallback("tree", config.tree),",
        "              new fr.ScriptTextOutputCallback(script)",
        "        ).build();",
        "    }",
        "    else {",
        "          config[callbacks.get(0).getPrompt()] = callbacks.get(0).getName();",
        "          nodeState.putShared("nodeConfig", config);",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "d82a4ad6-cd8a-437b-af55-7373e50d685b": {
      "_id": "d82a4ad6-cd8a-437b-af55-7373e50d685b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Collect Replay Password (frUnindexedString2).",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect Replay Password (frUnindexedString2)",
      "script": [
        "/* Collect And Encrypt Custom Password",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * ",
        " * See copyright notices, conditions, and disclaimers at the bottom of this script.",
        " * ",
        " * volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    "use strict";var sjcl={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(message){this.toString=function(){return"CORRUPT: "+this.message};this.message=message},invalid:function(message){this.toString=function(){return"INVALID: "+this.message};this.message=message},bug:function(message){this.toString=function(){return"BUG: "+this.message};this.message=message},notReady:function(message){this.toString=function(){return"NOT READY: "+this.message};this.message=message}}};sjcl.cipher.aes=function(key){if(!this._tables[0][0][0]){this._precompute()}var i,j,tmp,encKey,decKey,sbox=this._tables[0][4],decTable=this._tables[1],keyLen=key.length,rcon=1;if(keyLen!==4&&keyLen!==6&&keyLen!==8){throw new sjcl.exception.invalid("invalid aes key size")}this._key=[encKey=key.slice(0),decKey=[]];for(i=keyLen;i<4*keyLen+28;i++){tmp=encKey[i-1];if(i%keyLen===0||keyLen===8&&i%keyLen===4){tmp=sbox[tmp>>>24]<<24^sbox[tmp>>16&255]<<16^sbox[tmp>>8&255]<<8^sbox[tmp&255];if(i%keyLen===0){tmp=tmp<<8^tmp>>>24^rcon<<24;rcon=rcon<<1^(rcon>>7)*283}}encKey[i]=encKey[i-keyLen]^tmp}for(j=0;i;j++,i--){tmp=encKey[j&3?i:i-4];if(i<=4||j<4){decKey[j]=tmp}else{decKey[j]=decTable[0][sbox[tmp>>>24]]^decTable[1][sbox[tmp>>16&255]]^decTable[2][sbox[tmp>>8&255]]^decTable[3][sbox[tmp&255]]}}};sjcl.cipher.aes.prototype={encrypt:function(data){return this._crypt(data,0)},decrypt:function(data){return this._crypt(data,1)},_tables:[[[],[],[],[],[]],[[],[],[],[],[]]],_precompute:function(){var encTable=this._tables[0],decTable=this._tables[1],sbox=encTable[4],sboxInv=decTable[4],i,x,xInv,d=[],th=[],x2,x4,x8,s,tEnc,tDec;for(i=0;i<256;i++){th[(d[i]=i<<1^(i>>7)*283)^i]=i}for(x=xInv=0;!sbox[x];x^=x2||1,xInv=th[xInv]||1){s=xInv^xInv<<1^xInv<<2^xInv<<3^xInv<<4;s=s>>8^s&255^99;sbox[x]=s;sboxInv[s]=x;x8=d[x4=d[x2=d[x]]];tDec=x8*16843009^x4*65537^x2*257^x*16843008;tEnc=d[s]*257^s*16843008;for(i=0;i<4;i++){encTable[i][x]=tEnc=tEnc<<24^tEnc>>>8;decTable[i][s]=tDec=tDec<<24^tDec>>>8}}for(i=0;i<5;i++){encTable[i]=encTable[i].slice(0);decTable[i]=decTable[i].slice(0)}},_crypt:function(input,dir){if(input.length!==4){throw new sjcl.exception.invalid("invalid aes block size")}var key=this._key[dir],a=input[0]^key[0],b=input[dir?3:1]^key[1],c=input[2]^key[2],d=input[dir?1:3]^key[3],a2,b2,c2,nInnerRounds=key.length/4-2,i,kIndex=4,out=[0,0,0,0],table=this._tables[dir],t0=table[0],t1=table[1],t2=table[2],t3=table[3],sbox=table[4];for(i=0;i<nInnerRounds;i++){a2=t0[a>>>24]^t1[b>>16&255]^t2[c>>8&255]^t3[d&255]^key[kIndex];b2=t0[b>>>24]^t1[c>>16&255]^t2[d>>8&255]^t3[a&255]^key[kIndex+1];c2=t0[c>>>24]^t1[d>>16&255]^t2[a>>8&255]^t3[b&255]^key[kIndex+2];d=t0[d>>>24]^t1[a>>16&255]^t2[b>>8&255]^t3[c&255]^key[kIndex+3];kIndex+=4;a=a2;b=b2;c=c2}for(i=0;i<4;i++){out[dir?3&-i:i]=sbox[a>>>24]<<24^sbox[b>>16&255]<<16^sbox[c>>8&255]<<8^sbox[d&255]^key[kIndex++];a2=a;a=b;b=c;c=d;d=a2}return out}};sjcl.bitArray={bitSlice:function(a,bstart,bend){a=sjcl.bitArray._shiftRight(a.slice(bstart/32),32-(bstart&31)).slice(1);return bend===undefined?a:sjcl.bitArray.clamp(a,bend-bstart)},extract:function(a,bstart,blength){var x,sh=Math.floor(-bstart-blength&31);if((bstart+blength-1^bstart)&-32){x=a[bstart/32|0]<<32-sh^a[bstart/32+1|0]>>>sh}else{x=a[bstart/32|0]>>>sh}return x&(1<<blength)-1},concat:function(a1,a2){if(a1.length===0||a2.length===0){return a1.concat(a2)}var last=a1[a1.length-1],shift=sjcl.bitArray.getPartial(last);if(shift===32){return a1.concat(a2)}else{return sjcl.bitArray._shiftRight(a2,shift,last|0,a1.slice(0,a1.length-1))}},bitLength:function(a){var l=a.length,x;if(l===0){return 0}x=a[l-1];return(l-1)*32+sjcl.bitArray.getPartial(x)},clamp:function(a,len){if(a.length*32<len){return a}a=a.slice(0,Math.ceil(len/32));var l=a.length;len=len&31;if(l>0&&len){a[l-1]=sjcl.bitArray.partial(len,a[l-1]&2147483648>>len-1,1)}return a},partial:function(len,x,_end){if(len===32){return x}return(_end?x|0:x<<32-len)+len*1099511627776},getPartial:function(x){return Math.round(x/1099511627776)||32},equal:function(a,b){if(sjcl.bitArray.bitLength(a)!==sjcl.bitArray.bitLength(b)){return false}var x=0,i;for(i=0;i<a.length;i++){x|=a[i]^b[i]}return x===0},_shiftRight:function(a,shift,carry,out){var i,last2=0,shift2;if(out===undefined){out=[]}for(;shift>=32;shift-=32){out.push(carry);carry=0}if(shift===0){return out.concat(a)}for(i=0;i<a.length;i++){out.push(carry|a[i]>>>shift);carry=a[i]<<32-shift}last2=a.length?a[a.length-1]:0;shift2=sjcl.bitArray.getPartial(last2);out.push(sjcl.bitArray.partial(shift+shift2&31,shift+shift2>32?carry:out.pop(),1));return out},_xor4:function(x,y){return[x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]]},byteswapM:function(a){var i,v,m=65280;for(i=0;i<a.length;++i){v=a[i];a[i]=v>>>24|v>>>8&m|(v&m)<<8|v<<24}return a}};sjcl.codec.utf8String={fromBits:function(arr){var out="",bl=sjcl.bitArray.bitLength(arr),i,tmp;for(i=0;i<bl/8;i++){if((i&3)===0){tmp=arr[i/4]}out+=String.fromCharCode(tmp>>>8>>>8>>>8);tmp<<=8}return decodeURIComponent(escape(out))},toBits:function(str){str=unescape(encodeURIComponent(str));var out=[],i,tmp=0;for(i=0;i<str.length;i++){tmp=tmp<<8|str.charCodeAt(i);if((i&3)===3){out.push(tmp);tmp=0}}if(i&3){out.push(sjcl.bitArray.partial(8*(i&3),tmp))}return out}};sjcl.codec.base64={_chars:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",fromBits:function(arr,_noEquals,_url){var out="",i,bits=0,c=sjcl.codec.base64._chars,ta=0,bl=sjcl.bitArray.bitLength(arr);if(_url){c=c.substr(0,62)+"-_"}for(i=0;out.length*6<bl;){out+=c.charAt((ta^arr[i]>>>bits)>>>26);if(bits<6){ta=arr[i]<<6-bits;bits+=26;i++}else{ta<<=6;bits-=6}}while(out.length&3&&!_noEquals){out+="="}return out},toBits:function(str,_url){str=str.replace(/\\s|=/g,"");var out=[],i,bits=0,c=sjcl.codec.base64._chars,ta=0,x;if(_url){c=c.substr(0,62)+"-_"}for(i=0;i<str.length;i++){x=c.indexOf(str.charAt(i));if(x<0){throw new sjcl.exception.invalid("this isn't base64!")}if(bits>26){bits-=26;out.push(ta^x>>>bits);ta=x<<32-bits}else{bits+=6;ta^=x<<32-bits}}if(bits&56){out.push(sjcl.bitArray.partial(bits&56,ta,1))}return out}};sjcl.codec.base64url={fromBits:function(arr){return sjcl.codec.base64.fromBits(arr,1,1)},toBits:function(str){return sjcl.codec.base64.toBits(str,1)}};sjcl.hash.sha256=function(hash){if(!this._key[0]){this._precompute()}if(hash){this._h=hash._h.slice(0);this._buffer=hash._buffer.slice(0);this._length=hash._length}else{this.reset()}};sjcl.hash.sha256.hash=function(data){return(new sjcl.hash.sha256).update(data).finalize()};sjcl.hash.sha256.prototype={blockSize:512,reset:function(){this._h=this._init.slice(0);this._buffer=[];this._length=0;return this},update:function(data){if(typeof data==="string"){data=sjcl.codec.utf8String.toBits(data)}var i,b=this._buffer=sjcl.bitArray.concat(this._buffer,data),ol=this._length,nl=this._length=ol+sjcl.bitArray.bitLength(data);if(nl>9007199254740991){throw new sjcl.exception.invalid("Cannot hash more than 2^53 - 1 bits")}if(typeof Uint32Array!=="undefined"){var c=new Uint32Array(b);var j=0;for(i=512+ol-(512+ol&511);i<=nl;i+=512){this._block(c.subarray(16*j,16*(j+1)));j+=1}b.splice(0,16*j)}else{for(i=512+ol-(512+ol&511);i<=nl;i+=512){this._block(b.splice(0,16))}}return this},finalize:function(){var i,b=this._buffer,h=this._h;b=sjcl.bitArray.concat(b,[sjcl.bitArray.partial(1,1)]);for(i=b.length+2;i&15;i++){b.push(0)}b.push(Math.floor(this._length/4294967296));b.push(this._length|0);while(b.length){this._block(b.splice(0,16))}this.reset();return h},_init:[],_key:[],_precompute:function(){var i=0,prime=2,factor,isPrime;function frac(x){return(x-Math.floor(x))*4294967296|0}for(;i<64;prime++){isPrime=true;for(factor=2;factor*factor<=prime;factor++){if(prime%factor===0){isPrime=false;break}}if(isPrime){if(i<8){this._init[i]=frac(Math.pow(prime,1/2))}this._key[i]=frac(Math.pow(prime,1/3));i++}}},_block:function(w){var i,tmp,a,b,h=this._h,k=this._key,h0=h[0],h1=h[1],h2=h[2],h3=h[3],h4=h[4],h5=h[5],h6=h[6],h7=h[7];for(i=0;i<64;i++){if(i<16){tmp=w[i]}else{a=w[i+1&15];b=w[i+14&15];tmp=w[i&15]=(a>>>7^a>>>18^a>>>3^a<<25^a<<14)+(b>>>17^b>>>19^b>>>10^b<<15^b<<13)+w[i&15]+w[i+9&15]|0}tmp=tmp+h7+(h4>>>6^h4>>>11^h4>>>25^h4<<26^h4<<21^h4<<7)+(h6^h4&(h5^h6))+k[i];h7=h6;h6=h5;h5=h4;h4=h3+tmp|0;h3=h2;h2=h1;h1=h0;h0=tmp+(h1&h2^h3&(h1^h2))+(h1>>>2^h1>>>13^h1>>>22^h1<<30^h1<<19^h1<<10)|0}h[0]=h[0]+h0|0;h[1]=h[1]+h1|0;h[2]=h[2]+h2|0;h[3]=h[3]+h3|0;h[4]=h[4]+h4|0;h[5]=h[5]+h5|0;h[6]=h[6]+h6|0;h[7]=h[7]+h7|0}};sjcl.mode.ccm={name:"ccm",_progressListeners:[],listenProgress:function(cb){sjcl.mode.ccm._progressListeners.push(cb)},unListenProgress:function(cb){var index=sjcl.mode.ccm._progressListeners.indexOf(cb);if(index>-1){sjcl.mode.ccm._progressListeners.splice(index,1)}},_callProgressListener:function(val){var p=sjcl.mode.ccm._progressListeners.slice(),i;for(i=0;i<p.length;i+=1){p[i](val)}},encrypt:function(prf,plaintext,iv,adata,tlen){var L,out=plaintext.slice(0),tag,w=sjcl.bitArray,ivl=w.bitLength(iv)/8,ol=w.bitLength(out)/8;tlen=tlen||64;adata=adata||[];if(ivl<7){throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes")}for(L=2;L<4&&ol>>>8*L;L++){}if(L<15-ivl){L=15-ivl}iv=w.clamp(iv,8*(15-L));tag=sjcl.mode.ccm._computeTag(prf,plaintext,iv,adata,tlen,L);out=sjcl.mode.ccm._ctrMode(prf,out,iv,tag,tlen,L);return w.concat(out.data,out.tag)},decrypt:function(prf,ciphertext,iv,adata,tlen){tlen=tlen||64;adata=adata||[];var L,w=sjcl.bitArray,ivl=w.bitLength(iv)/8,ol=w.bitLength(ciphertext),out=w.clamp(ciphertext,ol-tlen),tag=w.bitSlice(ciphertext,ol-tlen),tag2;ol=(ol-tlen)/8;if(ivl<7){throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes")}for(L=2;L<4&&ol>>>8*L;L++){}if(L<15-ivl){L=15-ivl}iv=w.clamp(iv,8*(15-L));out=sjcl.mode.ccm._ctrMode(prf,out,iv,tag,tlen,L);tag2=sjcl.mode.ccm._computeTag(prf,out.data,iv,adata,tlen,L);if(!w.equal(out.tag,tag2)){throw new sjcl.exception.corrupt("ccm: tag doesn't match")}return out.data},_macAdditionalData:function(prf,adata,iv,tlen,ol,L){var mac,tmp,i,macData=[],w=sjcl.bitArray,xor=w._xor4;mac=[w.partial(8,(adata.length?1<<6:0)|tlen-2<<2|L-1)];mac=w.concat(mac,iv);mac[3]|=ol;mac=prf.encrypt(mac);if(adata.length){tmp=w.bitLength(adata)/8;if(tmp<=65279){macData=[w.partial(16,tmp)]}else if(tmp<=4294967295){macData=w.concat([w.partial(16,65534)],[tmp])}macData=w.concat(macData,adata);for(i=0;i<macData.length;i+=4){mac=prf.encrypt(xor(mac,macData.slice(i,i+4).concat([0,0,0])))}}return mac},_computeTag:function(prf,plaintext,iv,adata,tlen,L){var mac,i,w=sjcl.bitArray,xor=w._xor4;tlen/=8;if(tlen%2||tlen<4||tlen>16){throw new sjcl.exception.invalid("ccm: invalid tag length")}if(adata.length>4294967295||plaintext.length>4294967295){throw new sjcl.exception.bug("ccm: can't deal with 4GiB or more data")}mac=sjcl.mode.ccm._macAdditionalData(prf,adata,iv,tlen,w.bitLength(plaintext)/8,L);for(i=0;i<plaintext.length;i+=4){mac=prf.encrypt(xor(mac,plaintext.slice(i,i+4).concat([0,0,0])))}return w.clamp(mac,tlen*8)},_ctrMode:function(prf,data,iv,tag,tlen,L){var enc,i,w=sjcl.bitArray,xor=w._xor4,ctr,l=data.length,bl=w.bitLength(data),n=l/50,p=n;ctr=w.concat([w.partial(8,L-1)],iv).concat([0,0,0]).slice(0,4);tag=w.bitSlice(xor(tag,prf.encrypt(ctr)),0,tlen);if(!l){return{tag:tag,data:[]}}for(i=0;i<l;i+=4){if(i>n){sjcl.mode.ccm._callProgressListener(i/l);n+=p}ctr[3]++;enc=prf.encrypt(ctr);data[i]^=enc[0];data[i+1]^=enc[1];data[i+2]^=enc[2];data[i+3]^=enc[3]}return{tag:tag,data:w.clamp(data,bl)}}};sjcl.misc.hmac=function(key,Hash){this._hash=Hash=Hash||sjcl.hash.sha256;var exKey=[[],[]],i,bs=Hash.prototype.blockSize/32;this._baseHash=[new Hash,new Hash];if(key.length>bs){key=Hash.hash(key)}for(i=0;i<bs;i++){exKey[0][i]=key[i]^909522486;exKey[1][i]=key[i]^1549556828}this._baseHash[0].update(exKey[0]);this._baseHash[1].update(exKey[1]);this._resultHash=new Hash(this._baseHash[0])};sjcl.misc.hmac.prototype.encrypt=sjcl.misc.hmac.prototype.mac=function(data){if(!this._updated){this.update(data);return this.digest(data)}else{throw new sjcl.exception.invalid("encrypt on already updated hmac called!")}};sjcl.misc.hmac.prototype.reset=function(){this._resultHash=new this._hash(this._baseHash[0]);this._updated=false};sjcl.misc.hmac.prototype.update=function(data){this._updated=true;this._resultHash.update(data)};sjcl.misc.hmac.prototype.digest=function(){var w=this._resultHash.finalize(),result=new this._hash(this._baseHash[1]).update(w).finalize();this.reset();return result};sjcl.misc.pbkdf2=function(password,salt,count,length,Prff){count=count||1e4;if(length<0||count<0){throw new sjcl.exception.invalid("invalid params to pbkdf2")}if(typeof password==="string"){password=sjcl.codec.utf8String.toBits(password)}if(typeof salt==="string"){salt=sjcl.codec.utf8String.toBits(salt)}Prff=Prff||sjcl.misc.hmac;var prf=new Prff(password),u,ui,i,j,k,out=[],b=sjcl.bitArray;for(k=1;32*out.length<(length||1);k++){u=ui=prf.encrypt(b.concat(salt,[k]));for(i=1;i<count;i++){ui=prf.encrypt(ui);for(j=0;j<ui.length;j++){u[j]^=ui[j]}}out=out.concat(u)}if(length){out=b.clamp(out,length)}return out};sjcl.prng=function(defaultParanoia){this._pools=[new sjcl.hash.sha256];this._poolEntropy=[0];this._reseedCount=0;this._robins={};this._eventId=0;this._collectorIds={};this._collectorIdNext=0;this._strength=0;this._poolStrength=0;this._nextReseed=0;this._key=[0,0,0,0,0,0,0,0];this._counter=[0,0,0,0];this._cipher=undefined;this._defaultParanoia=defaultParanoia;this._collectorsStarted=false;this._callbacks={progress:{},seeded:{}};this._callbackI=0;this._NOT_READY=0;this._READY=1;this._REQUIRES_RESEED=2;this._MAX_WORDS_PER_BURST=65536;this._PARANOIA_LEVELS=[0,48,64,96,128,192,256,384,512,768,1024];this._MILLISECONDS_PER_RESEED=3e4;this._BITS_PER_RESEED=80};sjcl.prng.prototype={randomWords:function(nwords,paranoia){var out=[],i,readiness=this.isReady(paranoia),g;if(readiness===this._NOT_READY){throw new sjcl.exception.notReady("generator isn't seeded")}else if(readiness&this._REQUIRES_RESEED){this._reseedFromPools(!(readiness&this._READY))}for(i=0;i<nwords;i+=4){if((i+1)%this._MAX_WORDS_PER_BURST===0){this._gate()}g=this._gen4words();out.push(g[0],g[1],g[2],g[3])}this._gate();return out.slice(0,nwords)},setDefaultParanoia:function(paranoia,allowZeroParanoia){if(paranoia===0&&allowZeroParanoia!=="Setting paranoia=0 will ruin your security; use it only for testing"){throw new sjcl.exception.invalid("Setting paranoia=0 will ruin your security; use it only for testing")}this._defaultParanoia=paranoia},addEntropy:function(data,estimatedEntropy,source){source=source||"user";var id,i,tmp,t=(new Date).valueOf(),robin=this._robins[source],oldReady=this.isReady(),err=0,objName;id=this._collectorIds[source];if(id===undefined){id=this._collectorIds[source]=this._collectorIdNext++}if(robin===undefined){robin=this._robins[source]=0}this._robins[source]=(this._robins[source]+1)%this._pools.length;switch(typeof data){case"number":if(estimatedEntropy===undefined){estimatedEntropy=1}this._pools[robin].update([id,this._eventId++,1,estimatedEntropy,t,1,data|0]);break;case"object":objName=Object.prototype.toString.call(data);if(objName==="[object Uint32Array]"){tmp=[];for(i=0;i<data.length;i++){tmp.push(data[i])}data=tmp}else{if(objName!=="[object Array]"){err=1}for(i=0;i<data.length&&!err;i++){if(typeof data[i]!=="number"){err=1}}}if(!err){if(estimatedEntropy===undefined){estimatedEntropy=0;for(i=0;i<data.length;i++){tmp=data[i];while(tmp>0){estimatedEntropy++;tmp=tmp>>>1}}}this._pools[robin].update([id,this._eventId++,2,estimatedEntropy,t,data.length].concat(data))}break;case"string":if(estimatedEntropy===undefined){estimatedEntropy=data.length}this._pools[robin].update([id,this._eventId++,3,estimatedEntropy,t,data.length]);this._pools[robin].update(data);break;default:err=1}if(err){throw new sjcl.exception.bug("random: addEntropy only supports number, array of numbers or string")}this._poolEntropy[robin]+=estimatedEntropy;this._poolStrength+=estimatedEntropy;if(oldReady===this._NOT_READY){if(this.isReady()!==this._NOT_READY){this._fireEvent("seeded",Math.max(this._strength,this._poolStrength))}this._fireEvent("progress",this.getProgress())}},isReady:function(paranoia){var entropyRequired=this._PARANOIA_LEVELS[paranoia!==undefined?paranoia:this._defaultParanoia];if(this._strength&&this._strength>=entropyRequired){return this._poolEntropy[0]>this._BITS_PER_RESEED&&(new Date).valueOf()>this._nextReseed?this._REQUIRES_RESEED|this._READY:this._READY}else{return this._poolStrength>=entropyRequired?this._REQUIRES_RESEED|this._NOT_READY:this._NOT_READY}},getProgress:function(paranoia){var entropyRequired=this._PARANOIA_LEVELS[paranoia?paranoia:this._defaultParanoia];if(this._strength>=entropyRequired){return 1}else{return this._poolStrength>entropyRequired?1:this._poolStrength/entropyRequired}},startCollectors:function(){if(this._collectorsStarted){return}this._eventListener={loadTimeCollector:this._bind(this._loadTimeCollector),mouseCollector:this._bind(this._mouseCollector),keyboardCollector:this._bind(this._keyboardCollector),accelerometerCollector:this._bind(this._accelerometerCollector),touchCollector:this._bind(this._touchCollector)};if(window.addEventListener){window.addEventListener("load",this._eventListener.loadTimeCollector,false);window.addEventListener("mousemove",this._eventListener.mouseCollector,false);window.addEventListener("keypress",this._eventListener.keyboardCollector,false);window.addEventListener("devicemotion",this._eventListener.accelerometerCollector,false);window.addEventListener("touchmove",this._eventListener.touchCollector,false)}else if(document.attachEvent){document.attachEvent("onload",this._eventListener.loadTimeCollector);document.attachEvent("onmousemove",this._eventListener.mouseCollector);document.attachEvent("keypress",this._eventListener.keyboardCollector)}else{throw new sjcl.exception.bug("can't attach event")}this._collectorsStarted=true},stopCollectors:function(){if(!this._collectorsStarted){return}if(window.removeEventListener){window.removeEventListener("load",this._eventListener.loadTimeCollector,false);window.removeEventListener("mousemove",this._eventListener.mouseCollector,false);window.removeEventListener("keypress",this._eventListener.keyboardCollector,false);window.removeEventListener("devicemotion",this._eventListener.accelerometerCollector,false);window.removeEventListener("touchmove",this._eventListener.touchCollector,false)}else if(document.detachEvent){document.detachEvent("onload",this._eventListener.loadTimeCollector);document.detachEvent("onmousemove",this._eventListener.mouseCollector);document.detachEvent("keypress",this._eventListener.keyboardCollector)}this._collectorsStarted=false},addEventListener:function(name,callback){this._callbacks[name][this._callbackI++]=callback},removeEventListener:function(name,cb){var i,j,cbs=this._callbacks[name],jsTemp=[];for(j in cbs){if(cbs.hasOwnProperty(j)&&cbs[j]===cb){jsTemp.push(j)}}for(i=0;i<jsTemp.length;i++){j=jsTemp[i];delete cbs[j]}},_bind:function(func){var that=this;return function(){func.apply(that,arguments)}},_gen4words:function(){for(var i=0;i<4;i++){this._counter[i]=this._counter[i]+1|0;if(this._counter[i]){break}}return this._cipher.encrypt(this._counter)},_gate:function(){this._key=this._gen4words().concat(this._gen4words());this._cipher=new sjcl.cipher.aes(this._key)},_reseed:function(seedWords){this._key=sjcl.hash.sha256.hash(this._key.concat(seedWords));this._cipher=new sjcl.cipher.aes(this._key);for(var i=0;i<4;i++){this._counter[i]=this._counter[i]+1|0;if(this._counter[i]){break}}},_reseedFromPools:function(full){var reseedData=[],strength=0,i;this._nextReseed=reseedData[0]=(new Date).valueOf()+this._MILLISECONDS_PER_RESEED;for(i=0;i<16;i++){reseedData.push(Math.random()*4294967296|0)}for(i=0;i<this._pools.length;i++){reseedData=reseedData.concat(this._pools[i].finalize());strength+=this._poolEntropy[i];this._poolEntropy[i]=0;if(!full&&this._reseedCount&1<<i){break}}if(this._reseedCount>=1<<this._pools.length){this._pools.push(new sjcl.hash.sha256);this._poolEntropy.push(0)}this._poolStrength-=strength;if(strength>this._strength){this._strength=strength}this._reseedCount++;this._reseed(reseedData)},_keyboardCollector:function(){this._addCurrentTimeToEntropy(1)},_mouseCollector:function(ev){var x,y;try{x=ev.x||ev.clientX||ev.offsetX||0;y=ev.y||ev.clientY||ev.offsetY||0}catch(err){x=0;y=0}if(x!=0&&y!=0){this.addEntropy([x,y],2,"mouse")}this._addCurrentTimeToEntropy(0)},_touchCollector:function(ev){var touch=ev.touches[0]||ev.changedTouches[0];var x=touch.pageX||touch.clientX,y=touch.pageY||touch.clientY;this.addEntropy([x,y],1,"touch");this._addCurrentTimeToEntropy(0)},_loadTimeCollector:function(){this._addCurrentTimeToEntropy(2)},_addCurrentTimeToEntropy:function(estimatedEntropy){if(typeof window!=="undefined"&&window.performance&&typeof window.performance.now==="function"){this.addEntropy(window.performance.now(),estimatedEntropy,"loadtime")}else{this.addEntropy((new Date).valueOf(),estimatedEntropy,"loadtime")}},_accelerometerCollector:function(ev){var ac=ev.accelerationIncludingGravity.x||ev.accelerationIncludingGravity.y||ev.accelerationIncludingGravity.z;if(window.orientation){var or=window.orientation;if(typeof or==="number"){this.addEntropy(or,1,"accelerometer")}}if(ac){this.addEntropy(ac,2,"accelerometer")}this._addCurrentTimeToEntropy(0)},_fireEvent:function(name,arg){var j,cbs=sjcl.random._callbacks[name],cbsTemp=[];for(j in cbs){if(cbs.hasOwnProperty(j)){cbsTemp.push(cbs[j])}}for(j=0;j<cbsTemp.length;j++){cbsTemp[j](arg)}}};sjcl.random=new sjcl.prng(6);(function(){function getCryptoModule(){try{return require("crypto")}catch(e){return null}}try{var buf,crypt,ab;if(typeof module!=="undefined"&&module.exports&&(crypt=getCryptoModule())&&crypt.randomBytes){buf=crypt.randomBytes(1024/8);buf=new Uint32Array(new Uint8Array(buf).buffer);sjcl.random.addEntropy(buf,1024,"crypto.randomBytes")}else if(typeof window!=="undefined"&&typeof Uint32Array!=="undefined"){ab=new Uint32Array(32);if(window.crypto&&window.crypto.getRandomValues){window.crypto.getRandomValues(ab)}else if(window.msCrypto&&window.msCrypto.getRandomValues){window.msCrypto.getRandomValues(ab)}else{return}sjcl.random.addEntropy(ab,1024,"crypto.getRandomValues")}else{}}catch(e){if(typeof window!=="undefined"&&window.console){console.log("There was an error collecting entropy from the browser:");console.log(e)}}})();sjcl.json={defaults:{v:1,iter:1e4,ks:128,ts:64,mode:"ccm",adata:"",cipher:"aes"},_encrypt:function(password,plaintext,params,rp){params=params||{};rp=rp||{};var j=sjcl.json,p=j._add({iv:sjcl.random.randomWords(4,0)},j.defaults),tmp,prp,adata;j._add(p,params);adata=p.adata;if(typeof p.salt==="string"){p.salt=sjcl.codec.base64.toBits(p.salt)}if(typeof p.iv==="string"){p.iv=sjcl.codec.base64.toBits(p.iv)}if(!sjcl.mode[p.mode]||!sjcl.cipher[p.cipher]||typeof password==="string"&&p.iter<=100||p.ts!==64&&p.ts!==96&&p.ts!==128||p.ks!==128&&p.ks!==192&&p.ks!==256||(p.iv.length<2||p.iv.length>4)){throw new sjcl.exception.invalid("json encrypt: invalid parameters")}if(typeof password==="string"){tmp=sjcl.misc.cachedPbkdf2(password,p);password=tmp.key.slice(0,p.ks/32);p.salt=tmp.salt}else if(sjcl.ecc&&password instanceof sjcl.ecc.elGamal.publicKey){tmp=password.kem();p.kemtag=tmp.tag;password=tmp.key.slice(0,p.ks/32)}if(typeof plaintext==="string"){plaintext=sjcl.codec.utf8String.toBits(plaintext)}if(typeof adata==="string"){p.adata=adata=sjcl.codec.utf8String.toBits(adata)}prp=new sjcl.cipher[p.cipher](password);j._add(rp,p);rp.key=password;if(p.mode==="ccm"&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&plaintext instanceof ArrayBuffer){p.ct=sjcl.arrayBuffer.ccm.encrypt(prp,plaintext,p.iv,adata,p.ts)}else{p.ct=sjcl.mode[p.mode].encrypt(prp,plaintext,p.iv,adata,p.ts)}return p},encrypt:function(password,plaintext,params,rp){var j=sjcl.json,p=j._encrypt.apply(j,arguments);return j.encode(p)},_decrypt:function(password,ciphertext,params,rp){params=params||{};rp=rp||{};var j=sjcl.json,p=j._add(j._add(j._add({},j.defaults),ciphertext),params,true),ct,tmp,prp,adata=p.adata;if(typeof p.salt==="string"){p.salt=sjcl.codec.base64.toBits(p.salt)}if(typeof p.iv==="string"){p.iv=sjcl.codec.base64.toBits(p.iv)}if(!sjcl.mode[p.mode]||!sjcl.cipher[p.cipher]||typeof password==="string"&&p.iter<=100||p.ts!==64&&p.ts!==96&&p.ts!==128||p.ks!==128&&p.ks!==192&&p.ks!==256||!p.iv||(p.iv.length<2||p.iv.length>4)){throw new sjcl.exception.invalid("json decrypt: invalid parameters")}if(typeof password==="string"){tmp=sjcl.misc.cachedPbkdf2(password,p);password=tmp.key.slice(0,p.ks/32);p.salt=tmp.salt}else if(sjcl.ecc&&password instanceof sjcl.ecc.elGamal.secretKey){password=password.unkem(sjcl.codec.base64.toBits(p.kemtag)).slice(0,p.ks/32)}if(typeof adata==="string"){adata=sjcl.codec.utf8String.toBits(adata)}prp=new sjcl.cipher[p.cipher](password);if(p.mode==="ccm"&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&p.ct instanceof ArrayBuffer){ct=sjcl.arrayBuffer.ccm.decrypt(prp,p.ct,p.iv,p.tag,adata,p.ts)}else{ct=sjcl.mode[p.mode].decrypt(prp,p.ct,p.iv,adata,p.ts)}j._add(rp,p);rp.key=password;if(params.raw===1){return ct}else{return sjcl.codec.utf8String.fromBits(ct)}},decrypt:function(password,ciphertext,params,rp){var j=sjcl.json;return j._decrypt(password,j.decode(ciphertext),params,rp)},encode:function(obj){var i,out="{",comma="";for(i in obj){if(obj.hasOwnProperty(i)){if(!i.match(/^[a-z0-9]+$/i)){throw new sjcl.exception.invalid("json encode: invalid property name")}out+=comma+'"'+i+'":';comma=",";switch(typeof obj[i]){case"number":case"boolean":out+=obj[i];break;case"string":out+='"'+escape(obj[i])+'"';break;case"object":out+='"'+sjcl.codec.base64.fromBits(obj[i],0)+'"';break;default:throw new sjcl.exception.bug("json encode: unsupported type")}}}return out+"}"},decode:function(str){str=str.replace(/\\s/g,"");if(!str.match(/^\\{.*}$/)){throw new sjcl.exception.invalid("json decode: this isn't json!")}var a=str.replace(/^\\{|}$/g,"").split(/,/),out={},i,m;for(i=0;i<a.length;i++){if(!(m=a[i].match(/^\\s*(?:(["']?)([a-z][a-z0-9]*)\\1)\\s*:\\s*(?:(-?\\d+)|"([a-z0-9+\\/%*_.@=\\-]*)"|(true|false))$/i))){throw new sjcl.exception.invalid("json decode: this isn't json!")}if(m[3]!=null){out[m[2]]=parseInt(m[3],10)}else if(m[4]!=null){out[m[2]]=m[2].match(/^(ct|adata|salt|iv)$/)?sjcl.codec.base64.toBits(m[4]):unescape(m[4])}else if(m[5]!=null){out[m[2]]=m[5]==="true"}}return out},_add:function(target,src,requireSame){if(target===undefined){target={}}if(src===undefined){return target}var i;for(i in src){if(src.hasOwnProperty(i)){if(requireSame&&target[i]!==undefined&&target[i]!==src[i]){throw new sjcl.exception.invalid("required parameter overridden")}target[i]=src[i]}}return target},_subtract:function(plus,minus){var out={},i;for(i in plus){if(plus.hasOwnProperty(i)&&plus[i]!==minus[i]){out[i]=plus[i]}}return out},_filter:function(src,filter){var out={},i;for(i=0;i<filter.length;i++){if(src[filter[i]]!==undefined){out[filter[i]]=src[filter[i]]}}return out}};sjcl.encrypt=sjcl.json.encrypt;sjcl.decrypt=sjcl.json.decrypt;sjcl.misc._pbkdf2Cache={};sjcl.misc.cachedPbkdf2=function(password,obj){var cache=sjcl.misc._pbkdf2Cache,c,cp,str,salt,iter;obj=obj||{};iter=obj.iter||1e3;cp=cache[password]=cache[password]||{};c=cp[iter]=cp[iter]||{firstSalt:obj.salt&&obj.salt.length?obj.salt.slice(0):sjcl.random.randomWords(2,0)};salt=obj.salt===undefined?c.firstSalt:obj.salt;c[salt]=c[salt]||sjcl.misc.pbkdf2(password,salt,obj.iter);return{key:c[salt].slice(0),salt:salt.slice(0)}};if(typeof module!=="undefined"&&module.exports){module.exports=sjcl}if(typeof define==="function"){define([],function(){return sjcl})}",
        "    var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(input){var output="";var chr1,chr2,chr3,enc1,enc2,enc3,enc4;var i=0;input=Base64._utf8_encode(input);while(i<input.length){chr1=input.charCodeAt(i++);chr2=input.charCodeAt(i++);chr3=input.charCodeAt(i++);enc1=chr1>>2;enc2=(chr1&3)<<4|chr2>>4;enc3=(chr2&15)<<2|chr3>>6;enc4=chr3&63;if(isNaN(chr2)){enc3=enc4=64}else if(isNaN(chr3)){enc4=64}output=output+this._keyStr.charAt(enc1)+this._keyStr.charAt(enc2)+this._keyStr.charAt(enc3)+this._keyStr.charAt(enc4)}return output},decode:function(input){var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\\+\\/\\=]/g,"");while(i<input.length){enc1=this._keyStr.indexOf(input.charAt(i++));enc2=this._keyStr.indexOf(input.charAt(i++));enc3=this._keyStr.indexOf(input.charAt(i++));enc4=this._keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!=64){output=output+String.fromCharCode(chr2)}if(enc4!=64){output=output+String.fromCharCode(chr3)}}output=Base64._utf8_decode(output);return output},_utf8_encode:function(string){string=string.replace(/\\r\\n/g,"\\n");var utftext="";for(var n=0;n<string.length;n++){var c=string.charCodeAt(n);if(c<128){utftext+=String.fromCharCode(c)}else if(c>127&&c<2048){utftext+=String.fromCharCode(c>>6|192);utftext+=String.fromCharCode(c&63|128)}else{utftext+=String.fromCharCode(c>>12|224);utftext+=String.fromCharCode(c>>6&63|128);utftext+=String.fromCharCode(c&63|128)}}return utftext},_utf8_decode:function(utftext){var string="";var i=0;var c=c1=c2=0;while(i<utftext.length){c=utftext.charCodeAt(i);if(c<128){string+=String.fromCharCode(c);i++}else if(c>191&&c<224){c2=utftext.charCodeAt(i+1);string+=String.fromCharCode((c&31)<<6|c2&63);i+=2}else{c2=utftext.charCodeAt(i+1);c3=utftext.charCodeAt(i+2);string+=String.fromCharCode((c&15)<<12|(c2&63)<<6|c3&63);i+=3}}return string}};",
        "",
        "      logger.message("Collect And Encrypt Custom Password: start");",
        "    outcome = "true";",
        "  ",
        "    /* Begin Configuration */",
        "      ",
        "      // Attribute name",
        "      var idmAttrName = "frUnindexedString2"; // AM: "fr-attr-str2"",
        "      ",
        "      // Pick a shared secret to use for encryption and decryption",
        "    var sharedSecret = "RainbowPoniesHaveNoStripes";",
        "",
        "      // Fine-tune encryption settings. Default iterations are 10k, to speed up the process, it's reduced to 1k here.",
        "      var encryptionParameters = { "iter" : 1000 };",
        "      ",
        "    // Build out the password prompt",
        "    var prompt = "Replay Password";",
        "",
        "    /* End Configuration */",
        "  ",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.PasswordCallback,",
        "          java.lang.String",
        "    )",
        "    ",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "          new fr.PasswordCallback(prompt, false)",
        "        ).build();",
        "    } ",
        "    else {",
        "          // PasswordCallback returns the password as a char[], which is not the same as a JS char array. It must be converted to a proper string using the java.lang.Sting.valueOf(char[]) method.",
        "        var password = new String(fr.String.valueOf(callbacks.get(0).getPassword()));",
        "        logger.message("Collect And Encrypt Custom Password: callbacks received");",
        "",
        "          /*",
        "        var cipherPasswordJson = sjcl.encrypt(sharedSecret, password, encryptionParameters);",
        "        //setSharedObjectAttribute(idmAttrName, Base64.encode(JSON.stringify(cipherPasswordJson)));",
        "        setSharedObjectAttribute(idmAttrName, JSON.stringify(cipherPasswordJson));",
        "        logger.message("Collect And Encrypt Custom Password: cipherPasswordJson="+JSON.stringify(cipherPasswordJson));",
        "        */",
        "      ",
        "        logger.message("Collect And Encrypt Custom Password: password="+Base64.encode(password));",
        "        setSharedObjectAttribute(idmAttrName, Base64.encode(password));",
        "",
        "        logger.message("Collect And Encrypt Custom Password: finish [outcome=".concat(outcome).concat("]"));",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "    /*",
        "     * Store attributes in shared state for use with the Create/Patch Object nodes.",
        "     */",
        "    function setSharedObjectAttribute(name, value) {",
        "        var storage = sharedState.get("objectAttributes");",
        "        if (storage && value) {",
        "            if (storage.put) {",
        "                  storage.put(name, value);",
        "            }",
        "            else {",
        "                storage[name] = value;",
        "            }",
        "        }",
        "        else if (value) {",
        "              var object = {",
        "                  name: value",
        "            };",
        "            sharedState.put("objectAttributes", object);",
        "            //sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "        }",
        "    }",
        "}());",
        "/* SJCL is open. You can use, modify and redistribute it under a BSD",
        "license or under the GNU GPL, version 2.0.",
        "",
        "---------------------------------------------------------------------",
        "",
        "http://opensource.org/licenses/BSD-2-Clause",
        "",
        "Copyright (c) 2009-2015, Emily Stark, Mike Hamburg and Dan Boneh at",
        "Stanford University. All rights reserved.",
        "",
        "Redistribution and use in source and binary forms, with or without",
        "modification, are permitted provided that the following conditions are",
        "met:",
        "",
        "1. Redistributions of source code must retain the above copyright",
        "notice, this list of conditions and the following disclaimer.",
        "",
        "2. Redistributions in binary form must reproduce the above copyright",
        "notice, this list of conditions and the following disclaimer in the",
        "documentation and/or other materials provided with the distribution.",
        "",
        "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS",
        "IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED",
        "TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A",
        "PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
        "HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
        "SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED",
        "TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR",
        "PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
        "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING",
        "NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS",
        "SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "",
        "---------------------------------------------------------------------",
        "",
        "http://opensource.org/licenses/GPL-2.0",
        "",
        "The Stanford Javascript Crypto Library (hosted here on GitHub) is a",
        "project by the Stanford Computer Security Lab to build a secure,",
        "powerful, fast, small, easy-to-use, cross-browser library for",
        "cryptography in Javascript.",
        "",
        "Copyright (c) 2009-2015, Emily Stark, Mike Hamburg and Dan Boneh at",
        "Stanford University.",
        "",
        "This program is free software; you can redistribute it and/or modify it",
        "under the terms of the GNU General Public License as published by the",
        "Free Software Foundation; either version 2 of the License, or (at your",
        "option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful, but",
        "WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General",
        "Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License along",
        "with this program; if not, write to the Free Software Foundation, Inc.,",
        "59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */",
        "",
        "/*",
        " * Base64 encode / decode",
        " *  http://www.webtoolkit.info/",
        " * ",
        " * Example:",
        " * Base64.encode('some string')",
        " * Base64.decode('some encoded string')",
        " */",
      ],
    },
    "db854830-a069-471f-875a-8dc67d45ea2d": {
      "_id": "db854830-a069-471f-875a-8dc67d45ea2d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_SetInviteMailVars",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "var objAttrs = sharedState.get('objectAttributes') || new HashMap();",
        "objAttrs.put('currentYear', new Date().getFullYear().toString());",
        "sharedState.put('objectAttributes', objAttrs);",
        "",
        "outcome = 'True';",
        "",
      ],
    },
    "dbe0bf9a-72aa-49d5-8483-9db147985a47": {
      "_id": "dbe0bf9a-72aa-49d5-8483-9db147985a47",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from ADFS",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ADFS Profile Normalization (JS)",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script returns the social identity profile information for the authenticating user",
        " * in a standard form expected by the Social Provider Handler Node.",
        " *",
        " * Defined variables:",
        " * rawProfile - The social identity provider profile information for the authenticating user.",
        " *              JsonValue (1).",
        " * logger - The debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " * realm - String (primitive).",
        " *         The name of the realm the user is authenticating to.",
        " * requestHeaders - TreeMap (2).",
        " *                  The object that provides methods for accessing headers in the login request:",
        " *                  https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.",
        " * requestParameters - TreeMap (2).",
        " *                     The object that contains the authentication request parameters.",
        " * selectedIdp - String (primitive).",
        " *               The social identity provider name. For example: google.",
        " * sharedState - LinkedHashMap (3).",
        " *               The object that holds the state of the authentication tree and allows data exchange between the stateless nodes:",
        " *               https://backstage.forgerock.com/docs/am/7/auth-nodes/core-action.html#accessing-tree-state.",
        " * transientState - LinkedHashMap (3).",
        " *                  The object for storing sensitive information that must not leave the server unencrypted,",
        " *                  and that may not need to persist between authentication requests during the authentication session:",
        " *                  https://backstage.forgerock.com/docs/am/7/auth-nodes/core-action.html#accessing-tree-state.",
        " *",
        " * Return - a JsonValue (1).",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *",
        " *          This script's last statement should result in a JsonValue (1) with the following keys:",
        " *          {",
        " *              {"displayName": "corresponding-social-identity-provider-value"},",
        " *              {"email": "corresponding-social-identity-provider-value"},",
        " *              {"familyName": "corresponding-social-identity-provider-value"},",
        " *              {"givenName": "corresponding-social-identity-provider-value"},",
        " *              {"id": "corresponding-social-identity-provider-value"},",
        " *              {"locale": "corresponding-social-identity-provider-value"},",
        " *              {"photoUrl": "corresponding-social-identity-provider-value"},",
        " *              {"username": "corresponding-social-identity-provider-value"}",
        " *          }",
        " *",
        " *          The consumer of this data defines which keys are required and which are optional.",
        " *          For example, the script associated with the Social Provider Handler Node and,",
        " *          ultimately, the managed object created/updated with this data",
        " *          will expect certain keys to be populated.",
        " *          In some common default configurations, the following keys are required to be not empty:",
        " *          username, givenName, familyName, email.",
        " *",
        " *          From RFC4517: A value of the Directory String syntax is a string of one or more",
        " *          arbitrary characters from the Universal Character Set (UCS).",
        " *          A zero-length character string is not permitted.",
        " *",
        " * (1) JsonValue - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/json/JsonValue.html.",
        " * (2) TreeMap - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeMap.html.",
        " * (3) LinkedHashMap - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " */",
        "",
        "(function () {",
        "    var frJava = JavaImporter(",
        "        org.forgerock.json.JsonValue",
        "    );",
        "",
        "    var normalizedProfileData = frJava.JsonValue.json(frJava.JsonValue.object());",
        "  ",
        "      //logger.message('Seguin rawProfile: '+rawProfile);",
        "",
        "    normalizedProfileData.put('id', rawProfile.get('sub').asString());",
        "    normalizedProfileData.put('displayName', rawProfile.get('givenName').asString() + ' ' + rawProfile.get('sn').asString());",
        "    normalizedProfileData.put('email', rawProfile.get('mail').asString());",
        "    normalizedProfileData.put('givenName', rawProfile.get('givenName').asString());",
        "    normalizedProfileData.put('familyName', rawProfile.get('sn').asString());",
        "    normalizedProfileData.put('username', rawProfile.get('upn').asString());",
        "    normalizedProfileData.put('roles', rawProfile.get('roles').asString());",
        "  ",
        "      //logger.message('Seguin normalizedProfileData: '+normalizedProfileData);",
        "",
        "    return normalizedProfileData;",
        "}());",
      ],
    },
    "dc0c9905-4a58-4f61-8562-337514e610a7": {
      "_id": "dc0c9905-4a58-4f61-8562-337514e610a7",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_IdPNormalization",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script maps token claim values to managed object attributes. It uses a "claim map" that defines",
        " * several common claim names for a given attribute so that this same script can be used for all IdPs.",
        " * For example, the attribute \`familyName\` can be populated from claims \`familyName\`, \`family_name\`, or \`sn\`.",
        " * ",
        " * Also, if custom IdP config exists in shared state and defines IdP-to-IDC group membership mappings,",
        " * those will be applied/enforced by this script. ",
        " */",
        "",
        "var SHARED_STATE_KEY = 'idpCustomConfig';",
        "",
        "// Helper to avoid strict comparison of string objects",
        "function containsGroup(jsArray, javaString) {",
        "  for (var i = 0; i < jsArray.length; i++) {",
        "    if (jsArray[i] == javaString) {",
        "      return true;",
        "    }",
        "  }",
        "  return false;",
        "}",
        "",
        "(function () {",
        "  var fr = JavaImporter(",
        "    java.lang.String,",
        "    java.util.ArrayList,",
        "    org.forgerock.json.JsonValue",
        "  );",
        "  ",
        "  var normalizedProfileData = fr.JsonValue.json(fr.JsonValue.object());",
        "  var idpConfig = sharedState.get(SHARED_STATE_KEY);",
        "",
        "  // If we have config that defines a groups claim map for this IdP, ensure the claim value matches one that's in the map",
        "  if (idpConfig && idpConfig.groups) {",
        "",
        "    logger.message('enforcing groups claim config');",
        "",
        "    // Get the groups claim from the IdP profile",
        "    var groupsClaim = rawProfile.get(idpConfig.groups.claim);",
        "    if (groupsClaim.isNull()) {",
        "      logger.error('groups claim map was enabled for "{}", but claim "{}" was not found in the raw profile', selectedIdp, idpConfig.groups.claim);",
        "      throw 'Required groups claim is missing from raw profile';",
        "    }",
        "",
        "    logger.message('received group claim value {}', groupsClaim);",
        "",
        "    // Validate the claim type and convert strings to single-value collection",
        "    var groupsClaimList;",
        "    if (groupsClaim.isCollection()) {",
        "      groupsClaimList = groupsClaim;",
        "    } else if (groupsClaim.isString()) {",
        "      groupsClaimList = new fr.ArrayList();",
        "      groupsClaimList.add(groupsClaim);",
        "    } else {",
        "      throw 'Groups claim was not a string or collection';",
        "    }",
        "    ",
        "    // Assert the claim contains at least one group",
        "    var groupsClaimLen = groupsClaimList.size();",
        "    if (groupsClaimLen < 1) {",
        "      throw 'An empty groups claim was found in raw profile';",
        "    }",
        "",
        "    // Loop through each IDC group name in the map. If the raw profile groups claim contains",
        "    // a value that matches the map for that IDC group, add that IDC group to the list for this admin.",
        "    var groups = [];",
        "    for (var idcGroupName in idpConfig.groups.mappings) {",
        "      for (var i = 0; i < groupsClaimLen; i++) {",
        "        var claimGroupId = groupsClaimList.get(i).asString();",
        "",
        "        logger.message('checking if mapping for IDC group "{}" contains claim value "{}"', idcGroupName, claimGroupId);",
        "",
        "        if (containsGroup(idpConfig.groups.mappings[idcGroupName], claimGroupId)) {",
        "          groups.push(idcGroupName);",
        "        }",
        "      }",
        "    }",
        "",
        "    // Assert at least one group was mapped to the claim",
        "    if (groups.length == 0) {",
        "      logger.error('groups claim map was enabled for "{}", but the value of claim "{}" did not match a group mapping', selectedIdp, idpConfig.groups.claim);",
        "      throw 'Raw profile groups claim value does not match a configured mapping';",
        "    }",
        "",
        "    normalizedProfileData.put('groups', groups);",
        "    sharedState.put('groups', groups);",
        "  } else {",
        "    logger.message('no enabled groups claim config to enforce');",
        "  }",
        "",
        "  // Maps normalized profile keys to the possible raw profile keys that values can come from",
        "  var claimMap = {",
        "    email: ['email', 'mail'],",
        "    familyName: ['familyName', 'family_name', 'sn'],",
        "    givenName: ['givenName', 'given_name']",
        "  };",
        "",
        "  // Try to populate each normalized profile property",
        "  var keys = Object.keys(claimMap);",
        "  for (var i = 0; i < keys.length; i++) {",
        "    var normalizedProp = keys[i];",
        "    // Try each mapped raw profile key until a value is found",
        "    for (var j = 0; j < claimMap[normalizedProp].length; j++) {",
        "      var rawProp = claimMap[normalizedProp][j];",
        "      if (!rawProfile.get(rawProp).isNull()) {",
        "        normalizedProfileData.put(normalizedProp, rawProfile.get(rawProp));",
        "        break;",
        "      }",
        "    }",
        "  }",
        "",
        "  return normalizedProfileData;",
        "}());",
      ],
    },
    "dedbc9f6-7fc9-4332-a330-55f7aeb95e78": {
      "_id": "dedbc9f6-7fc9-4332-a330-55f7aeb95e78",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "FRAAS-7955 Shared State Only",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FRAAS-7955 Shared State Only",
      "script": [
        "outcome = "true";",
        "",
        "setSharedObjectAttribute("userName", "FRAAS-7955");",
        "setSharedObjectAttribute("givenName", "First-shared");",
        "setSharedObjectAttribute("sn", "Last-shared");",
        "setSharedObjectAttribute("mail", "first.last-shared@company.com");",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "       var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "e0666b8b-f625-4047-89d8-e7e91151027f": {
      "_id": "e0666b8b-f625-4047-89d8-e7e91151027f",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Twilio Voice OTP Sender",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio Voice OTP Sender",
      "script": [
        "/* Twilio Voice OTP Sender",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * This script will deliver the OTP via voice to the phone number in the user's profile.",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Identify Existing User node and HOTP Generator node before it is being called.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - sent",
        " * - failed",
        " */",
        "logger.warning("Twilio Voice OTP Sender: start");",
        "",
        "if (sharedState.get("_id") && idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().hasNext()) {",
        "    var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(input){var output="";var chr1,chr2,chr3,enc1,enc2,enc3,enc4;var i=0;input=Base64._utf8_encode(input);while(i<input.length){chr1=input.charCodeAt(i++);chr2=input.charCodeAt(i++);chr3=input.charCodeAt(i++);enc1=chr1>>2;enc2=(chr1&3)<<4|chr2>>4;enc3=(chr2&15)<<2|chr3>>6;enc4=chr3&63;if(isNaN(chr2)){enc3=enc4=64}else if(isNaN(chr3)){enc4=64}output=output+this._keyStr.charAt(enc1)+this._keyStr.charAt(enc2)+this._keyStr.charAt(enc3)+this._keyStr.charAt(enc4)}return output},decode:function(input){var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\\+\\/\\=]/g,"");while(i<input.length){enc1=this._keyStr.indexOf(input.charAt(i++));enc2=this._keyStr.indexOf(input.charAt(i++));enc3=this._keyStr.indexOf(input.charAt(i++));enc4=this._keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!=64){output=output+String.fromCharCode(chr2)}if(enc4!=64){output=output+String.fromCharCode(chr3)}}output=Base64._utf8_decode(output);return output},_utf8_encode:function(string){string=string.replace(/\\r\\n/g,"\\n");var utftext="";for(var n=0;n<string.length;n++){var c=string.charCodeAt(n);if(c<128){utftext+=String.fromCharCode(c)}else if(c>127&&c<2048){utftext+=String.fromCharCode(c>>6|192);utftext+=String.fromCharCode(c&63|128)}else{utftext+=String.fromCharCode(c>>12|224);utftext+=String.fromCharCode(c>>6&63|128);utftext+=String.fromCharCode(c&63|128)}}return utftext},_utf8_decode:function(utftext){var string="";var i=0;var c=c1=c2=0;while(i<utftext.length){c=utftext.charCodeAt(i);if(c<128){string+=String.fromCharCode(c);i++}else if(c>191&&c<224){c2=utftext.charCodeAt(i+1);string+=String.fromCharCode((c&31)<<6|c2&63);i+=2}else{c2=utftext.charCodeAt(i+1);c3=utftext.charCodeAt(i+2);string+=String.fromCharCode((c&15)<<12|(c2&63)<<6|c3&63);i+=3}}return string}};",
        "",
        "    /* BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN AZURE AD SETTINGS",
        "     */",
        "    var TWILIO_API_SID = "AC750415e3163a2e57b7aeea7eed82d944";",
        "    var TWILIO_API_TOKEN = "d36a719c94b4be08592d69ec4f80a5bb";",
        "    var TWILIO_API_FROM = "+13176443107";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "  ",
        "    // Twilio SMS Message API Configuration",
        "    var TWILIO_API_URI = "https://api.twilio.com/2010-04-01/Accounts/".concat(TWILIO_API_SID).concat("/Calls.json");    ",
        "    var TWILIO_API_TO = idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().next();",
        "      var OTP = sharedState.get("oneTimePassword").split("").join("; ");",
        "    var TWILIO_API_TWIML = "<Response><Pause length='1'/><Say voice='alice'>Your one-time password is ".concat(OTP).concat("</Say><Pause length='1'/><Say>Your one-time password is ").concat(OTP).concat("</Say><Pause length='1'/><Say>Goodbye</Say></Response>");",
        "    //logger.warning("Twilio Voice OTP Sender: To: ".concat(TWILIO_API_TO));",
        "    //logger.warning("Twilio Voice OTP Sender: Twiml: ".concat(TWILIO_API_TWIML));",
        "",
        "    var AUTHZ = "Basic ".concat(Base64.encode(TWILIO_API_SID.concat(':').concat(TWILIO_API_TOKEN)));",
        "    //logger.warning("Twilio SMS OTP Sender: AUTHZ - ".concat(AUTHZ));",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('POST');",
        "    request.setUri(TWILIO_API_URI);",
        "    request.getHeaders().add("Content-Type", "application/x-www-form-urlencoded");",
        "    request.getHeaders().add("Authorization", AUTHZ);",
        "    var params = request.getForm();",
        "    params.add("From", TWILIO_API_FROM);",
        "    params.add("Twiml", TWILIO_API_TWIML);",
        "    params.add("To", TWILIO_API_TO);",
        "    request.getEntity().setString(params.toString());",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    //logger.warning("Twilio SMS OTP Sender: JSON result: " + JSON.stringify(result));",
        "",
        "    if (result["status"]=="queued") {",
        "        outcome = result["status"];",
        "        logger.error("Twilio Voice OTP Sender: status = ".concat(result["status"]));",
        "        logger.error("Twilio Voice OTP Sender: subresource_uris = ".concat(result["subresource_uris"]));",
        "        logger.error("Twilio Voice OTP Sender: outcome = ".concat(outcome));",
        "    } else {",
        "        outcome = "failed";",
        "        logger.error("Twilio Voice OTP Sender: status = ".concat(result["status"]));",
        "        logger.error("Twilio Voice OTP Sender: code = ".concat(result["code"]));",
        "        logger.error("Twilio Voice OTP Sender: more_info = ".concat(result["more_info"]));",
        "        logger.error("Twilio Voice OTP Sender: message = ".concat(result["message"]));",
        "        logger.error("Twilio Voice OTP Sender: outcome = ".concat(outcome));",
        "    }",
        "} else {",
        "      outcome = "failed";",
        "      logger.error("Twilio Voice OTP Sender: No user or phone number found! Use 'Identify Existing User node before this script to populate the user's _id in shared state!'");",
        "    logger.error("Twilio Voice OTP Sender: outcome = ".concat(outcome));",
        "}",
      ],
    },
    "e0ba741b-c952-4062-9899-0b1c19237ee4": {
      "_id": "e0ba741b-c952-4062-9899-0b1c19237ee4",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "FRAAS-7955 Workaround: Copy sharedState to transientState",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FRAAS-7955 Workaround",
      "script": [
        "outcome = "true";",
        "var attrs = sharedState.get("objectAttributes");",
        "if (attrs) {",
        "      setTransientObjectAttribute("givenName", attrs.get("givenName").concat("-workaround"));",
        "      setTransientObjectAttribute("sn", attrs.get("sn").concat("-workaround"));",
        "      setTransientObjectAttribute("mail", attrs.get("mail").concat("-workaround"));",
        "}",
        "",
        "/*",
        " * Store attributes in transient state for use with the Create/Patch Object nodes.",
        " */",
        "function setTransientObjectAttribute(name, value) {",
        "    var transientStorage = transientState.get("objectAttributes");",
        "    if (transientStorage && value) {",
        "          if (transientStorage.put) {",
        "            transientStorage.put(name, value);",
        "        }",
        "          else {",
        "            transientStorage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "    transientState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "e15a13ee-9168-40cf-934f-656a5f568a6a": {
      "_id": "e15a13ee-9168-40cf-934f-656a5f568a6a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "hashdeviceProfile",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "",
        "//<script type="text/javascript" src="http://www.myersdaily.org/joseph/javascript/md5.js" />",
        "",
        "function hashCode(r){var e,h=0;for(e=0;e<r.length;e++)h=(h<<5)-h+r.charCodeAt(e),h|=0;return h>>>0}",
        "",
        "",
        "var hashMe = sharedState.get("forgeRock.device.profile");",
        "var hashMe = sharedState.put("forgeRock.device.profile","deleted in script - hashdeviceProfile");",
        "//var hashMeStr = JSON.stringify(hashMe);",
        "//logger.error("HashMeStr: " + hashMeStr);",
        "",
        "sharedState.put("deviceHash",hashCode(escape(hashMe)).toString());",
        "sharedState.put("frIndexedString1",hashCode(escape(hashMe)).toString());",
        "",
        "outcome = "true";",
      ],
    },
    "e1db8a0a-0329-4962-a5bf-ecffaca376ae": {
      "_id": "e1db8a0a-0329-4962-a5bf-ecffaca376ae",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Used by endUserUIClient",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha endUserUIClient OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
      ],
    },
    "e232cff3-2460-47cd-80b2-36c86c0d0f06": {
      "_id": "e232cff3-2460-47cd-80b2-36c86c0d0f06",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Used by endUserUIClient",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha endUserUIClient OAuth2 Access Token Modification Script",
      "script": [
        "(function () {",
        "  if (scopes.contains('fr:autoaccess:*') || scopes.contains('fr:iga:*')) {",
        "    var fr = JavaImporter(",
        "      com.sun.identity.idm.IdType",
        "    );",
        "    var groups = [];",
        "    identity.getMemberships(fr.IdType.GROUP).toArray().forEach(function (group) {",
        "      groups.push(group.getAttribute('cn').toArray()[0]);",
        "    });",
        "    accessToken.setField('groups', groups);",
        "  }",
        "}());",
        "",
      ],
    },
    "e4417108-4dc9-4ffc-9995-3cd490adf2ed": {
      "_id": "e4417108-4dc9-4ffc-9995-3cd490adf2ed",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Collect PIN",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect PIN",
      "script": [
        "/* Collect PIN",
        " * ",
        " * Collect PIN using password callback and store in user profile.",
        " * ",
        " * This script must be parametrized. It may not work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "  ",
        "  /*** BEGIN PARAMETRIZATION ***/",
        "  var pinAttrName = 'frUnindexedString3';",
        "  var pinPrompt = 'New PIN';",
        "  /**** END PARAMETRIZATION ****/",
        "  ",
        "  outcome = 'true';",
        "  var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "      javax.security.auth.callback.PasswordCallback",
        "  )",
        "  if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "      new fr.PasswordCallback(pinPrompt, false)",
        "    ).build();",
        "  }",
        "  else {",
        "      var pin = new java.lang.String(callbacks.get(0).getPassword());",
        "    setTransientObjectAttribute(pinAttrName, pin);",
        "    action = fr.Action.goTo(outcome).build();",
        "  }",
        "",
        "  /*",
        "   * Store attributes in transient state for use with the Create/Patch Object nodes.",
        "   */",
        "  function setTransientObjectAttribute(name, value) {",
        "    var transientStorage = transientState.get("objectAttributes");",
        "    if (transientStorage && value) {",
        "      if (transientStorage.put) {",
        "        transientStorage.put(name, value);",
        "      }",
        "      else {",
        "        transientStorage[name] = value;",
        "      }",
        "    }",
        "    else if (value) {",
        "      transientState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "  }",
        "}());",
      ],
    },
    "e49225eb-e7ad-4699-bf2a-d57689f9cd6e": {
      "_id": "e49225eb-e7ad-4699-bf2a-d57689f9cd6e",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display sharedState and transientState.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Display States - imported (1)",
      "script": [
        "/* Display States",
        " * ",
        " * Display sharedState and transientState.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "",
        "    var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "    var halign = "left";",
        "    var message = "<h4>Current State Values</h4>".concat(",
        "        "<p><b>Shared State</b>:<br/>").concat(",
        "        sharedState.toString()).concat("</p>").concat(",
        "        "<p><b>Transient State</b>:<br/>").concat(",
        "        transientState.toString()).concat("</p>").concat(",
        "        "<p><b>Request Headers</b>:<br/>").concat(",
        "        requestHeaders.toString()).concat("</p>")",
        "    var script = "Array.prototype.slice.call(\\n".concat(",
        "      "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "      "function (e) {\\n").concat(",
        "      "  var message = e.firstElementChild;\\n").concat(",
        "      "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "      "    message.className = \\"\\";\\n").concat(",
        "      "    message.style = \\"text-align: left; inline-size: 430px; overflow-wrap: break-word;\\";\\n").concat(",
        "      "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "      "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "      "  }\\n").concat(",
        "      "})")",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (message.length && callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                anchor",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "    else {",
        "      action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "     /*",
        "      * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "      * ",
        "      * Example:",
        "      * 'xxxxx' produces '28535'",
        "      * 'xxx-xxx' produces '432-521'",
        "      */",
        "    function generateNumericToken(format) {",
        "        return format.replace(/[x]/g, function(c) {",
        "            var r = Math.random()*10|0;",
        "            var v = r;",
        "            return v.toString(10);",
        "        });",
        "    }",
        "}());",
      ],
    },
    "e9c9d940-30d9-4a0c-a834-7de69a0600cf": {
      "_id": "e9c9d940-30d9-4a0c-a834-7de69a0600cf",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_CollectUsernameOrEmail",
      "script": [
        "var fr = JavaImporter(",
        "  org.forgerock.json.JsonValue,",
        "  org.forgerock.openam.auth.node.api.Action,",
        "  javax.security.auth.callback.NameCallback,",
        "  java.util.HashMap",
        ");",
        "",
        "with (fr) {",
        "  try {",
        "    ",
        "    if (callbacks.isEmpty()) {",
        "      ",
        "      action = Action.send(new NameCallback('Username or email address')).build();",
        "      ",
        "    } else {",
        "",
        "      // If a value is provided, store it as username and an object attribute",
        "      var callback = callbacks.iterator().next();",
        "      var name = callback.getName().trim();",
        "      if (name) {",
        "        var objAttrs = sharedState.get('objectAttributes') || new HashMap();",
        "        objAttrs.put('mail', name);",
        "        sharedState.put('username', name);",
        "        sharedState.put('objectAttributes', objAttrs);",
        "",
        "        action = Action.goTo('Collected').build();",
        "      }",
        "      ",
        "    }",
        "    ",
        "  } catch (e) {",
        "    ",
        "    logger.error('Admin_CollectUsernameOrEmail: {}', e);",
        "    action = Action.goTo('Error').build();",
        "    ",
        "  }",
        "}",
      ],
    },
    "ec8b314c-8e11-4364-93b9-a3e82d2a074a": {
      "_id": "ec8b314c-8e11-4364-93b9-a3e82d2a074a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display Password from nodeState",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Display Password",
      "script": [
        "/* Display Password",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Display Password collected via Platform Password node.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "var password = "unable to retrieve!";",
        "if (nodeState.get("password")) {",
        "  password = nodeState.get("password").asString();",
        "}",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback",
        ")",
        "if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            password",
        "        )",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo("true").build();",
        "}",
      ],
    },
    "f1a2764b-d05a-4480-8f5f-78fda7814227": {
      "_id": "f1a2764b-d05a-4480-8f5f-78fda7814227",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "APIProtection: Reset State",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "APIProtection: Reset States",
      "script": [
        "logger.warning("APIProtection: Reset States: start");",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " *",
        " * Outcomes:",
        " * - "true"",
        " */",
        "var KEY_HEADER_NAME = "x-api-key";",
        "var SECRET_HEADER_NAME = "x-api-secret";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "outcome = "true";",
        "",
        "if (sharedState.get("username") == readValue(KEY_HEADER_NAME)) {",
        "    logger.warning("APIProtection: Reset States: resetting username to:".concat(readValue("username")));",
        "      sharedState.put("username", readValue("username"));",
        "}",
        "",
        "if (transientState.get("password") == readTransientValue(SECRET_HEADER_NAME)) {",
        "    logger.warning("APIProtection: Reset States: resetting password");",
        "      transientState.put("password", readTransientValue("password"));",
        "}",
        "",
        "logger.warning("APIProtection: Reset States: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Read value from storage for APIProtection script use",
        " */",
        "function readValue(name) {",
        "      var storage = sharedState.get("APIProtection");",
        "    if (storage) {",
        "          if (storage.get) {",
        "            return sharedState.get("APIProtection").get(name);",
        "        }",
        "          else {",
        "              return storage.name;",
        "        }",
        "    }",
        "      return null;",
        "}",
        "",
        "/*",
        " * Read transient value from storage for APIProtection script use",
        " */",
        "function readTransientValue(name) {",
        "      var transientStorage = transientState.get("APIProtection");",
        "    if (transientStorage) {",
        "          if (transientStorage.get) {",
        "            return transientState.get("APIProtection").get(name);",
        "        }",
        "          else {",
        "              return transientStorage.name;",
        "        }",
        "    }",
        "      return null;",
        "}",
      ],
    },
    "f2107949-22f8-46c4-865d-ae1d1110a9cb": {
      "_id": "f2107949-22f8-46c4-865d-ae1d1110a9cb",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Detect and preserve currently active theme before setting the new theme.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Set OATH Theme",
      "script": [
        "/* Set OATH Theme",
        " * ",
        " * Detect and preserve currently active theme before setting the new theme.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      outcome = "true";",
        "      ",
        "      var theme = "Expanse_OATH";",
        "",
        "    // do not change, must be a random identifier",
        "    var anchor = generateNumericToken('xxx');",
        "  ",
        "      var script = "";",
        "    script += "document.getElementById(\\"theme-id-"+anchor+"\\").value = localStorage.getItem('theme-id');";",
        "    script += "console.log('theme-id='+document.getElementById(\\"theme-id-"+anchor+"\\").value);";",
        "      script += "document.getElementById(\\"loginButton_0\\").click();";",
        "",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          org.forgerock.openam.authentication.callbacks.PollingWaitCallback,",
        "        com.sun.identity.authentication.callbacks.HiddenValueCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    // discover active theme from UI",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.HiddenValueCallback("theme-id-"+anchor, "false"),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build();",
        "    }",
        "      // get active theme from callback and set new theme",
        "      else if (callbacks.size() === 2) {",
        "        // did we get the id of the currently active theme?",
        "        if (callbacks.get(0).getValue() !== "theme-id-"+anchor) {",
        "              sharedState.put("themeId", callbacks.get(0).getValue());",
        "        }",
        "        // set new theme",
        "        var stage = "themeId="+theme;",
        "        action = fr.Action.send(",
        "              new fr.PollingWaitCallback("0", "Please wait ...")",
        "        ).withStage(stage).build();",
        "    }",
        "      else {",
        "        // continue",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "     /*",
        "      * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "      * ",
        "      * Example:",
        "      * 'xxxxx' produces '28535'",
        "      * 'xxx-xxx' produces '432-521'",
        "      */",
        "    function generateNumericToken(format) {",
        "        return format.replace(/[x]/g, function(c) {",
        "            var r = Math.random()*10|0;",
        "            var v = r;",
        "            return v.toString(10);",
        "        });",
        "    }",
        "}());",
      ],
    },
    "f26cc0de-ee31-4114-8a32-27799bb49357": {
      "_id": "f26cc0de-ee31-4114-8a32-27799bb49357",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Setup MFA Choice",
      "script": [
        "/*",
        " * Adapt the configuration values below",
        " */",
        "",
        "// do not change, must be a random identifier",
        "var anchor = generateNumericToken('xxx');",
        "",
        "// specify the horizontal alignment of the message: left, center, right",
        "var halign = "center";",
        "",
        "// specify the style to apply to the button in the message to make it look like a link",
        "var linkButtonStyle = "border: 0; color: #109CF1; text-decoration: none; background-color: transparent;";",
        "",
        "// specify the link button HTML element. only modify the text between the <button> and </button> tags.",
        "var linkButton = "<button id=\\"skip-link-".concat(anchor).concat("\\" type=\\"submit\\" style=\\"").concat(linkButtonStyle).concat("\\">skip for now.</button>");",
        "",
        "// specify the message you want to display and place the linkButton anywhere",
        "var message = "Please select your prefered factor or".concat(linkButton);",
        "",
        "// specify the choices you want to offer the user.",
        "var choices = ["SMS","Fido","Push"];",
        "",
        "// specify the default choice. this setting must be a valid 0-based index of the choices array above.",
        "var defaultChoice = 0;",
        "",
        "/*",
        " * All the configuration values are above this comment.",
        " *",
        " * DO NOT MAKE ANY CHANGES BELOW!",
        " */",
        "",
        "// find the TextOutputCallback with the message_anchor",
        "// and replace the message_anchor with the message",
        "var displayMessageScript = "".concat(",
        "  "Array.prototype.slice.call(\\n").concat(",
        "  "  document.getElementsByClassName('callback-component')\\n").concat(",
        "  ").forEach(\\n").concat(",
        "  "  function (e) {\\n").concat(",
        "  "    var message = e.firstElementChild;\\n").concat(",
        "  "    if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == 'message-").concat(anchor).concat("') {\\n").concat(",
        "  "      message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "  "      message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "  "    }\\n").concat(",
        "  "  }\\n").concat(",
        "  ")")",
        "",
        "// hijack the link button in the message and:",
        "// - find the HiddenValueCallback and set its value to "Skip"",
        "// - then simulate a login button click",
        "var skipOptionScript = "".concat(",
        "  "document.getElementById(\\"skip-link-").concat(anchor).concat("\\").onclick = function(){\\n").concat(",
        "  "  document.getElementById(\\"skip-input-").concat(anchor).concat("\\").value = \\"Skip\\";\\n").concat(",
        "  "  document.getElementById(\\"loginButton_0\\").click();\\n").concat(",
        "  "  return false;\\n").concat(",
        "  "}")",
        "",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.ConfirmationCallback,",
        "    javax.security.auth.callback.TextOutputCallback,",
        "    com.sun.identity.authentication.callbacks.HiddenValueCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "",
        "if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            "message-".concat(anchor)",
        "        ),",
        "        new fr.ConfirmationCallback(",
        "            fr.ConfirmationCallback.INFORMATION,",
        "            choices,",
        "            defaultChoice",
        "        ),",
        "        new fr.HiddenValueCallback("skip-input-".concat(anchor), "false"),",
        "        new fr.ScriptTextOutputCallback(displayMessageScript),",
        "        new fr.ScriptTextOutputCallback(skipOptionScript)",
        "    ).build()",
        "}",
        "else {",
        "  // did the user skip?",
        "  if (callbacks.get(2).getValue() == "Skip") {",
        "    action = fr.Action.goTo("Skip").build();",
        "  }",
        "  // user didn't skip, pick the right outcome",
        "  else {",
        "    action = fr.Action.goTo(choices[callbacks.get(1).getSelectedIndex()]).build();",
        "  }",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "    return format.replace(/[x]/g, function(c) {",
        "        var r = Math.random()*10|0;",
        "        var v = r;",
        "        return v.toString(10);",
        "    });",
        "}",
      ],
    },
    "fbc563cb-eced-4e1b-9cd4-022680347668": {
      "_id": "fbc563cb-eced-4e1b-9cd4-022680347668",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "FRAAS-7955 Show Object Values",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FRAAS-7955 Show Object Values",
      "script": [
        "var outcome = true;",
        "",
        "// Requires Identify Existing User auth node to retrieve real user ID from IDM",
        "var userid = sharedState.get("_id");",
        "",
        "// Retrieve user profile attributes",
        "var userName = idRepository.getAttribute(userid, "uid").iterator().next().toString();",
        "var firstName = idRepository.getAttribute(userid, "givenName").iterator().next().toString();",
        "var lastName = idRepository.getAttribute(userid, "sn").iterator().next().toString();",
        "var email = idRepository.getAttribute(userid, "mail").iterator().next().toString();",
        "",
        "var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "var halign = "left";",
        "var message = "<h4>Object Values</h4>".concat(",
        "    "<p><b>Username</b>: ").concat(userName).concat("</p>").concat(",
        "    "<p><b>First Name</b>: ").concat(firstName).concat("</p>").concat(",
        "    "<p><b>Last Name</b>: ").concat(lastName).concat("</p>").concat(",
        "    "<p><b>Email</b>: ").concat(email).concat("</p>")",
        "var script = "Array.prototype.slice.call(\\n".concat(",
        "  "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "  "function (e) {\\n").concat(",
        "  "  var message = e.firstElementChild;\\n").concat(",
        "  "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "  "    message.className = \\"text-left\\";\\n").concat(",
        "  "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "  "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "  "  }\\n").concat(",
        "  "})")",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "if (message.length && callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            anchor",
        "        ),",
        "        new fr.ScriptTextOutputCallback(script)",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo(outcome).build();",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "    return format.replace(/[x]/g, function(c) {",
        "        var r = Math.random()*10|0;",
        "        var v = r;",
        "        return v.toString(10);",
        "    });",
        "}",
      ],
    },
    "fd536b1f-6ee4-4505-b148-71160414ddcc": {
      "_id": "fd536b1f-6ee4-4505-b148-71160414ddcc",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_AttributeCollectionWorkaroundCleanup",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        "This is the second part of a workaround began in Admin_AttributeCollectionWorkaround.",
        "*/",
        "",
        "var objAttrs = sharedState.get('objectAttributes') || new HashMap();",
        "",
        "if (objAttrs.containsKey('groups')) {",
        "  var groups = objAttrs.get('groups');",
        "  if (groups.length == 1 && groups[0] == 'fake') {",
        "    objAttrs.remove('groups');",
        "  }",
        "}",
        "",
        "if (objAttrs.containsKey('inviteDate') && objAttrs.get('inviteDate') == 'fake') {",
        "   objAttrs.remove('inviteDate');",
        "}",
        "",
        "sharedState.put('objectAttributes', objAttrs);",
        "",
        "outcome = 'True';",
      ],
    },
    "fd560219-00ad-4763-9a29-f65aa9ecf776": {
      "_id": "fd560219-00ad-4763-9a29-f65aa9ecf776",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_GetIdPGroupsClaimConfig",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script is used to retrieve optional custom IdP configuration from IDM as an admin",
        " * completes a login journey. This needs to happen after an IdP has been selected so that",
        " * the \`selectedIdp\` exists in shared state. The result will be stored in a shared state",
        " * key of \`idpCustomConfig\`. The value will be \`null\` if no config was found in IDM.",
        " */",
        "",
        "var AM_INTERNAL_URL = 'http://am.fr-platform:80/am';",
        "var IDM_INTERNAL_URL = 'http://idm.fr-platform:80/openidm';",
        "var RSFILTER_PROVISIONING_CLIENT_ID = 'idm-provisioning';",
        "var RSFILTER_PROVISIONING_SECRET = 'DKNK5K2m5Q98tBTt0yei';",
        "",
        "var SHARED_STATE_KEY = 'idpCustomConfig';",
        "var TXN_ID_HEADER = 'x-forgerock-transactionid';",
        "",
        "// Helper for returning the request transaction ID",
        "function getTransId() {",
        "  var transIds = requestHeaders.get(TXN_ID_HEADER);",
        "  if (transIds) {",
        "    return java.lang.String(transIds.get(0));",
        "  }",
        "  return null;",
        "}",
        "",
        "// Retrieves an access token using a client credentials grant",
        "function getAccessToken(txnId, clientId, clientSecret, scope) {",
        "  var fr = JavaImporter(",
        "    java.lang.String,",
        "    org.forgerock.http.protocol.Request,",
        "    org.forgerock.http.protocol.Response,",
        "    org.forgerock.util.encode.Base64",
        "  );",
        "",
        "  var basicAuthCreds = fr.Base64.encode(new fr.String(clientId + ':' + clientSecret).getBytes('UTF-8'));",
        "",
        "  var request = new fr.Request();",
        "  request.getHeaders().add('authorization', 'Basic ' + basicAuthCreds);",
        "  request.getHeaders().add('content-type', 'application/x-www-form-urlencoded');",
        "  if (txnId) {",
        "    request.getHeaders().add(TXN_ID_HEADER, txnId);",
        "  }",
        "  request",
        "    .setEntity('grant_type=client_credentials&scope=' + scope)",
        "    .setMethod('POST')",
        "    .setUri(AM_INTERNAL_URL + '/oauth2/access_token');",
        "",
        "  var response = httpClient.send(request).getOrThrow();",
        "  if (response.getStatus() === org.forgerock.http.protocol.Status.OK) {",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    logger.message('got access token for client {}', clientId);",
        "    return result.access_token;",
        "  }",
        "  ",
        "  logger.error('failed to get access token for client {}; received status {}', clientId, response.getStatus());",
        "  throw 'failed to get access token';",
        "}",
        "",
        "// Retrieves the IdP custom configuration from IDM",
        "function getConfigFromIDM(txnId, accessToken, idp) {",
        "  var fr = JavaImporter(",
        "    org.forgerock.http.protocol.Request,",
        "    org.forgerock.http.protocol.Response,",
        "    org.forgerock.json.JsonValue,",
        "    org.forgerock.openam.placeholder.substitution.PlaceholderSubstitution,",
        "    org.forgerock.guice.core.InjectorHolder",
        "  );",
        "",
        "  var request = new fr.Request();",
        "  request.getHeaders().add('authorization', 'Bearer ' + accessToken);",
        "  if (txnId) {",
        "    request.getHeaders().add(TXN_ID_HEADER, txnId);",
        "  }",
        "  request",
        "    .setMethod('GET')",
        "    .setUri(IDM_INTERNAL_URL + '/config/fidc/federation-' + idp);",
        "",
        "  var response = httpClient.send(request).getOrThrow();",
        "  if (response.getStatus() === org.forgerock.http.protocol.Status.OK) {",
        "    var rawConfig = JSON.parse(response.getEntity().getString());",
        "    var placeholder = fr.InjectorHolder.getInstance(fr.PlaceholderSubstitution);",
        "    var finalConfig = JSON.parse(placeholder.substitute(fr.JsonValue.json(rawConfig)));",
        "    return finalConfig;",
        "  } else if (response.getStatus() === org.forgerock.http.protocol.Status.NOT_FOUND) {",
        "    return null;",
        "  }",
        "  ",
        "  logger.error('failed to get groups claim config for IdP {}; received status {}', idp, response.getStatus());",
        "  throw 'failed to get groups claim config';",
        "}",
        "",
        "(function () {",
        "  try {",
        "    var idp = nodeState.get('selectedIdp');",
        "    if (!idp.isString()) {",
        "      throw 'selectedIdp not found in shared state';",
        "    }",
        "",
        "    var txnId = getTransId();",
        "    var accessToken = getAccessToken(txnId, RSFILTER_PROVISIONING_CLIENT_ID, RSFILTER_PROVISIONING_SECRET, 'fr:idm:*');",
        "",
        "    var config = getConfigFromIDM(txnId, accessToken, idp.asString())",
        "    if (config) {",
        "      nodeState.putShared(SHARED_STATE_KEY, config);",
        "      logger.message('found groups claim config for IdP {}', idp.asString());",
        "    } else {",
        "      logger.message('no groups claim config found for IdP {}', idp.asString());",
        "    }",
        " ",
        "    outcome = 'Success';",
        "  } catch (e) {",
        "    logger.error('failed to get federation config from IDM: {}', e);",
        "    outcome = 'Error';",
        "  }",
        "}());",
      ],
    },
    "fe35a8fb-31b1-441c-bb9b-27932565061c": {
      "_id": "fe35a8fb-31b1-441c-bb9b-27932565061c",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_MfaGetApp",
      "script": [
        "/*",
        "This creates the following callbacks:",
        "- TextOutputCallback: Display the step title and description",
        "- ConfirmationCallback: Display the "Next" button",
        "- HiddenValueCallback: Captures the "Get app" option, if selected",
        "- ScriptTextOutputCallback: Creates a "Download the app" link button and positions it below the "Next" button",
        "*/",
        "",
        "var token = generateNumericToken('xxx');",
        "var loadingMessage = 'Loading...';",
        "var linkButton = "<button id='getapp-link-".concat(token).concat("' class='btn btn-block btn-link' type='submit'>Download the app</button>");",
        "var message = "<h2 class='h2'>Set up the ForgeRock Authenticator</h2><div style='margin-bottom:1em'>To get started, you need to register your device using the ForgeRock Authenticator app.</div>";",
        "var choices = ['Next'];",
        "var defaultChoice = 0;",
        "var getAppValue = 'Get app';",
        "var getAppInputId = 'getapp-input-'.concat(token);",
        "",
        "var setupPageScript =",
        "  'var setupPage = function() {'.concat(",
        "  '  var getAppInputElem = document.getElementById("').concat(getAppInputId).concat('");').concat(",
        "  '  var messageElem;').concat(",
        "  '  document.getElementsByClassName("callback-component").forEach(').concat(",
        "  '    function (e) {').concat(",
        "  '      var m = e.firstElementChild;').concat(",
        "  '      if (m.firstChild && m.firstChild.nodeName == "#text" && m.firstChild.nodeValue.trim() == "').concat(loadingMessage).concat('") {').concat(",
        "  '        messageElem = m;').concat(",
        "  '      }').concat(",
        "  '    }').concat(",
        "  '  );').concat(",
        "  '  if (!getAppInputElem || !messageElem) {').concat(",
        "  '    return setTimeout(setupPage, 50);').concat(",
        "  '  }').concat(",
        "  '  var skipContainer = document.createElement("div");').concat(",
        "  '  skipContainer.style = "width:100%";').concat(",
        "  '  skipContainer.innerHTML = "').concat(linkButton).concat('";').concat(",
        "  '  getAppInputElem.parentNode.append(skipContainer);').concat(",
        "  '  messageElem.align = "center";').concat(",
        "  '  messageElem.innerHTML = "').concat(message).concat('";').concat(",
        "  '  var bindGetAppLink = function() {').concat(",
        "  '    document.getElementById("getapp-link-').concat(token).concat('").onclick = function() {').concat(",
        "  '      getAppInputElem.value = "').concat(getAppValue).concat('";').concat(",
        "  '      document.getElementById("loginButton_0").click();').concat(",
        "  '      return false;').concat(",
        "  '    };').concat(",
        "  '  };').concat(",
        "  '  setTimeout(bindGetAppLink, 100);').concat(",
        "  '};').concat(",
        "  'setupPage();');",
        "",
        "var fr = JavaImporter(",
        "  org.forgerock.openam.auth.node.api.Action,",
        "  javax.security.auth.callback.ConfirmationCallback,",
        "  javax.security.auth.callback.TextOutputCallback,",
        "  com.sun.identity.authentication.callbacks.HiddenValueCallback,",
        "  com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "",
        "with (fr) {",
        "  if (callbacks.isEmpty()) {",
        "    action = Action.send(",
        "      new TextOutputCallback(",
        "          TextOutputCallback.INFORMATION,",
        "          loadingMessage",
        "      ),",
        "      new ConfirmationCallback(",
        "          ConfirmationCallback.INFORMATION,",
        "          choices,",
        "          defaultChoice",
        "      ),",
        "      new HiddenValueCallback(getAppInputId, 'false'),",
        "      new ScriptTextOutputCallback(setupPageScript)",
        "    ).build()",
        "  } else {",
        "    if (callbacks.get(2).getValue() == getAppValue) {",
        "      action = Action.goTo(getAppValue).build();",
        "    } else {",
        "      action = Action.goTo(choices[callbacks.get(1).getSelectedIndex()]).build();",
        "    }",
        "  }",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "  return format.replace(/[x]/g, function(c) {",
        "    var r = Math.random()*10|0;",
        "    var v = r;",
        "    return v.toString(10);",
        "  });",
        "}",
      ],
    },
    "fe5e303b-9ed7-4853-84fe-0ae43e2254d5": {
      "_id": "fe5e303b-9ed7-4853-84fe-0ae43e2254d5",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display the username in an HTML dialog.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Display Username",
      "script": [
        "/* Display Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Display the username.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "  try {",
        "    var outcome = 'true';",
        "    var username = nodeState.get('username').asString();",
        "",
        "    // Specify the message you want to display. You may use HTML for formatting. Avoid line breaks! Use <br> instead.",
        "    var message = '<h5>'+username+'</h5>';",
        "",
        "    var anchor = 'anchor-'+generateNumericToken('xxx');",
        "    var script = "Array.prototype.slice.call(\\n \\",
        "      document.getElementsByClassName('callback-component')).forEach(\\n \\",
        "      function (e) {\\n \\",
        "        var message = e.firstElementChild;\\n \\",
        "        if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '"+anchor+"') {\\n \\",
        "          message.innerHTML = '"+message+"';\\n \\",
        "        }\\n \\",
        "      })";",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (message.length && callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                anchor",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "    else {",
        "      action = fr.Action.goTo(outcome).build();",
        "    }",
        "  } catch (error) {",
        "    logger.error('Error: ' + error);",
        "    nodeState.putShared('error', error.message);",
        "  }",
        "",
        "   /*",
        "    * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "    * ",
        "    * Example:",
        "    * 'xxxxx' produces '28535'",
        "    * 'xxx-xxx' produces '432-521'",
        "    */",
        "  function generateNumericToken(format) {",
        "      return format.replace(/[x]/g, function(c) {",
        "          var r = Math.random()*10|0;",
        "          var v = r;",
        "          return v.toString(10);",
        "      });",
        "  }",
        "}());",
      ],
    },
    "fff76556-2882-4109-a9a6-c42d546cfe57": {
      "_id": "fff76556-2882-4109-a9a6-c42d546cfe57",
      "context": "OAUTH2_SCRIPTED_JWT_ISSUER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Service Account - JWT Issuers",
      "script": [
        "(function () {",
        "  var frJava = JavaImporter(",
        "    org.forgerock.oauth2.core.TrustedJwtIssuerConfig,",
        "    java.util.HashSet",
        "  );",
        "",
        "  with (frJava) {",
        "    var iss = idRepository.getIdentity(issuer);",
        "    if (iss == null) {",
        "      logger.message('No issuer found for: ' + issuer);",
        "      return null;",
        "    }",
        "    logger.message('Found issuer: ' + iss);",
        "",
        "    var accountStatus = iss.getAttributeValues('inetUserStatus');",
        "    if (!accountStatus || accountStatus.length === 0) {",
        "      logger.message('No inetUserStatus attribute in issuer');",
        "      return null;",
        "    } else if (accountStatus[0].toLowerCase() != 'active') {",
        "      logger.message('Issuer is not active');",
        "      return null;",
        "    }",
        "",
        "    var jwksAttrs = iss.getAttributeValues('fr-attr-jwks');",
        "    if (!jwksAttrs || jwksAttrs.length === 0) {",
        "      logger.message('No jwks attributes in issuer');",
        "      return null;",
        "    }",
        "",
        "    var jwkSet = jwksAttrs[0];",
        "    if (!jwkSet) {",
        "      logger.message('No jwk set in issuer');",
        "      return null;",
        "    }",
        "",
        "    var config = new TrustedJwtIssuerConfig(",
        "      issuer,",
        "      'sub',",
        "      'scope',",
        "      new HashSet([issuer]),",
        "      jwkSet,",
        "      null, null, null",
        "    );",
        "",
        "    return config;",
        "  }",
        "}());",
      ],
    },
  },
}
`;

exports[`ScriptOps exportScripts() 2: Export all scripts including default scripts 1`] = `
{
  "meta": Any<Object>,
  "script": {
    "01e1a3c0-038b-4c16-956a-6c9d89328cff": {
      "_id": "01e1a3c0-038b-4c16-956a-6c9d89328cff",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for a scripted decision node",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Authentication Tree Decision Node Script",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "",
        "outcome = "true";",
      ],
    },
    "021e434f-89b6-45fb-9d67-5147bc1650c3": {
      "_id": "021e434f-89b6-45fb-9d67-5147bc1650c3",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Show Password Policy",
      "script": [
        "var output = true;",
        "var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "var halign = "left";",
        "var message = "<ul><li>Must be at least 8 characters long</li>".concat(",
        "    "<li>Must be less than 64 characters long</li>").concat(",
        "    "<li>Must not share characters with email, username, first name, last name</li>").concat(",
        "    "<li>Must have at least 1 lowercase letter(s)</li>").concat(",
        "    "<li>Must have at least 1 capital letter(s)</li>").concat(",
        "    "<li>Must have at least 1 number(s)</li>").concat(",
        "    "<li>Must have at least 1 symbol(s)</li></ul>")",
        "var script = "Array.prototype.slice.call(\\n".concat(",
        "  "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "  "function (e) {\\n").concat(",
        "  "  var message = e.firstElementChild;\\n").concat(",
        "  "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "  "    message.className = \\"text-left\\";\\n").concat(",
        "  "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "  "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "  "  }\\n").concat(",
        "  "})")",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "if (message.length && callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            anchor",
        "        ),",
        "        new fr.ScriptTextOutputCallback(script)",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo("true").build();",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "    return format.replace(/[x]/g, function(c) {",
        "        var r = Math.random()*10|0;",
        "        var v = r;",
        "        return v.toString(10);",
        "    });",
        "}",
      ],
    },
    "073a64d4-37c9-486d-8c59-6583494644b9": {
      "_id": "073a64d4-37c9-486d-8c59-6583494644b9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "FRAAS-7955 Transient State Only",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FRAAS-7955 Transient State Only",
      "script": [
        "outcome = "true";",
        "",
        "setTransientObjectAttribute("userName", "FRAAS-7955");",
        "setTransientObjectAttribute("givenName", "First-transient");",
        "setTransientObjectAttribute("sn", "Last-transient");",
        "setTransientObjectAttribute("mail", "first.last-transient@company.com");",
        "",
        "/*",
        " * Store attributes in transient state for use with the Create/Patch Object nodes.",
        " */",
        "function setTransientObjectAttribute(name, value) {",
        "    var transientStorage = transientState.get("objectAttributes");",
        "    if (transientStorage && value) {",
        "          if (transientStorage.put) {",
        "            transientStorage.put(name, value);",
        "        }",
        "          else {",
        "            transientStorage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "    transientState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "0ab1dd57-eafd-4063-8e60-65bfac8108b7": {
      "_id": "0ab1dd57-eafd-4063-8e60-65bfac8108b7",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check existing session and set username",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Check Existing Session",
      "script": [
        "if (typeof existingSession !== 'undefined')",
        "{",
        "  outcome = "hasSession";",
        "  sharedState.put("username", existingSession.get("UserId"));",
        "  sharedState.put("_id", existingSession.get("UserId"));",
        "  if (sharedState.get("objectAttributes")) {",
        "    sharedState.get("objectAttributes").put("userName", existingSession.get("UserId"));",
        "  }",
        "  else {",
        "    sharedState.put("objectAttributes", {userName: existingSession.get("UserId")});",
        "  }",
        "}",
        "else",
        "{",
        "  outcome = "noSession";",
        "}",
      ],
    },
    "0d471aff-81f3-41ce-8bf9-35c27cdc0a26": {
      "_id": "0d471aff-81f3-41ce-8bf9-35c27cdc0a26",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_CanBeInvited",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "(function() {",
        "  var fr = new JavaImporter(",
        "    org.forgerock.openam.auth.nodes,",
        "    org.forgerock.guice.core",
        "  );",
        "",
        "  with (fr) {",
        "    try {",
        "",
        "      outcome = 'False';",
        "",
        "      var realm = sharedState.get('realm');",
        "      var uuid = sharedState.get('username');",
        "      var identityProvider = InjectorHolder.getInstance(IdentityProvider);",
        "      var identity = identityProvider.getIdentity(uuid, realm);",
        "      var attrs = identity.getAttributes();",
        "",
        "      if (!attrs.containsKey('fr-idm-inviteDate')) {",
        "        logger.message('Admin cannot be invited: no invite date');",
        "        return;",
        "      }",
        "",
        "      if (attrs.containsKey('fr-idm-onboardDate')) {",
        "        logger.message('Admin cannot be invited: already onboarded');",
        "        return;",
        "      }",
        "",
        "      var email = attrs.get('mail').iterator().next();",
        "      var objAttrs = {",
        "        mail: email,",
        "        userName: email,",
        "      };",
        "      sharedState.put('objectAttributes', objAttrs);",
        "",
        "      logger.message('Admin can be invited');",
        "      outcome = 'True';",
        "",
        "    } catch (e) {",
        "",
        "      logger.error('Failed to determine if admin can be invited: {}', e);",
        "",
        "    }",
        "  }",
        "}());",
      ],
    },
    "10643e95-873a-4ec0-b713-a7f56760d179": {
      "_id": "10643e95-873a-4ec0-b713-a7f56760d179",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript4",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "123725a9-2119-4efd-a6b0-456f3ccd34b7": {
      "_id": "123725a9-2119-4efd-a6b0-456f3ccd34b7",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "deviceprofile_to_attribute",
      "script": [
        "var objectAttributes = sharedState.get("objectAttributes");",
        "var deviceHash = sharedState.get("deviceHash");",
        "",
        "sharedState.put("frIndexedString1" , deviceHash );",
        "",
        "",
        "",
        "if(objectAttributes === null || objectAttributes === undefined)",
        "{",
        "",
        "",
        " objectAttributes = {",
        "                        "userName" : "anon-".concat(deviceHash),",
        "                     "givenName" : " ",",
        "                     "sn" : " ",",
        "                     "mail" : "anon-".concat(deviceHash).concat("@mytestrun.com"),",
        "                     "frIndexedString1" : deviceHash",
        "                    }",
        "}",
        "else",
        "{",
        "",
        "    objectAttributes.put("userName",  "anon-".concat(deviceHash));",
        "    objectAttributes.put("givenName", " ");",
        "    objectAttributes.put("sn", " ");",
        "    objectAttributes.put("mail", "anon-".concat(deviceHash).concat("@mytestrun.com"));",
        "    objectAttributes.put("frIndexedString1", deviceHash);",
        "   ",
        "}",
        "",
        "",
        "sharedState.put("objectAttributes",objectAttributes);",
        "    ",
        "outcome = "true";",
      ],
    },
    "1244e639-4a31-401d-ab61-d75133d8dc9e": {
      "_id": "1244e639-4a31-401d-ab61-d75133d8dc9e",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Instagram",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Instagram Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("username", rawProfile.username)))",
      ],
    },
    "13b6a418-4ccc-41b6-86ce-0a13f352da22": {
      "_id": "13b6a418-4ccc-41b6-86ce-0a13f352da22",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_HasOnboarded",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "(function() {",
        "  var fr = new JavaImporter(",
        "    org.forgerock.openam.auth.nodes,",
        "    org.forgerock.guice.core",
        "  );",
        "",
        "  with (fr) {",
        "    try {",
        "",
        "      outcome = 'False';",
        "",
        "      var realm = sharedState.get('realm');",
        "      var uuid = sharedState.get('_id');",
        "      var identityProvider = InjectorHolder.getInstance(IdentityProvider);",
        "      var identity = identityProvider.getIdentity(uuid, realm);",
        "      var attrs = identity.getAttributes();",
        "",
        "      if (attrs.containsKey('fr-idm-onboardDate')) {",
        "        logger.message('Admin has onboard date');",
        "        outcome = 'True';",
        "      }",
        "",
        "    } catch (e) {",
        "",
        "      logger.error('Failed to determine if admin has onboarded: {}', e);",
        "      outcome = 'Error';",
        "",
        "    }",
        "  }",
        "}());",
      ],
    },
    "13cd3c60-a04b-4455-b028-fbfd01ed88b1": {
      "_id": "13cd3c60-a04b-4455-b028-fbfd01ed88b1",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Azure AD pass through authentication using Resource Owner Password Credential flow",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "AAD Passthru ROPC",
      "script": [
        "/* AAD Passthru ROPC",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Azure AD pass through authentication using Resource Owner Password Credential flow",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Platform Username and Platform Password collector nodes",
        " * before it can operate.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - Valid",
        " * - Invalid",
        " * - Expired",
        " * - Disabled",
        " * - Error",
        " */",
        "logger.message("AAD Passthru ROPC: start");",
        "",
        "if (sharedState.get("username") && transientState.get("password")) {",
        "      /*",
        "     * BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN AZURE AD SETTINGS",
        "     *",
        "     * AAD_TENANT_ID is your tenant ID: https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant",
        "     * AAD_CLIENT_ID is your registered app ID: https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app",
        "     */",
        "    var AAD_TENANT_ID = "711ffa9c-5972-4713-ace3-688c9732614a";",
        "    var AAD_CLIENT_ID = "51f130ec-d29d-4419-a492-0011d09c1a16";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "      ",
        "    // Azure AD ROPC Configuration",
        "    var AAD_SCOPE = "profile";",
        "      var AAD_RESOURCE = "https://graph.microsoft.com/"",
        "    var AAD_OAUTH2_TOKEN_URI = "https://login.windows.net/".concat(AAD_TENANT_ID).concat("/oauth2/token");",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('POST');",
        "    request.setUri(AAD_OAUTH2_TOKEN_URI);",
        "    request.getHeaders().add("Content-Type", "application/x-www-form-urlencoded");",
        "    var params = request.getForm();",
        "    params.add("resource", AAD_RESOURCE);",
        "    params.add("client_id", AAD_CLIENT_ID);",
        "    params.add("grant_type", "password");",
        "    params.add("scope", AAD_SCOPE);",
        "    params.add("username", sharedState.get("username"));",
        "    params.add("password", transientState.get("password"));",
        "    request.getEntity().setString(params.toString());",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    //logger.message("AAD Passthru ROPC: JSON result: " + JSON.stringify(result));",
        "",
        "      if (response.getStatus().getCode() === 200) {",
        "          outcome = "Valid"",
        "        transientState.put("aadAccessToken", result.access_token);",
        "    } else {",
        "        /* Outcomes:",
        "         * - Valid",
        "         * - Invalid",
        "         * - Expired",
        "         * - Disabled",
        "         * - Error",
        "         *",
        "         * Expected Error Codes:",
        "         * 50126 - Error validating credentials due to invalid username or password.",
        "         * 50055 - The password is expired.",
        "         * 50057 - The user account is disabled.",
        "         * 50196 - The server terminated an operation because it encountered a client request loop. Please contact your app vendor.",
        "         */",
        "        if (result.error_codes.includes(50126)) {",
        "            outcome = "Invalid";",
        "        } else if (result.error_codes.includes(50055)) {",
        "            outcome = "Expired";",
        "        } else if (result.error_codes.includes(50057)) {",
        "            outcome = "Disabled";",
        "        } else {",
        "            outcome = "Error";",
        "        }",
        "        logger.message("AAD Passthru ROPC: error = ".concat(result.error));",
        "        logger.message("AAD Passthru ROPC: error_description = ".concat(result.error_description));",
        "        logger.message("AAD Passthru ROPC: error_codes = ".concat(result.error_codes));",
        "    }",
        "} else {",
        "      outcome = "Error";",
        "      logger.message("AAD Passthru ROPC: No user or password found in shared state! Use username and password collector nodes before this script to populate shared and transient states!'");",
        "}",
        "logger.message("AAD Passthru ROPC: End (outcome=".concat(outcome).concat(")"));",
      ],
    },
    "14f14ad3-f35f-455b-a7ba-d7cd939c6921": {
      "_id": "14f14ad3-f35f-455b-a7ba-d7cd939c6921",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Dropdown selector",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Choice inner1, inner2",
      "script": [
        "/* Choice inner1, inner2",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Render a dropdown selector",
        " * ",
        " * This script must be parametrized. It will not work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "  outcome = "true";",
        "  var choices = ["inner1", "inner2"];",
        "  ",
        "  var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.ChoiceCallback",
        "  )",
        "",
        "  if (callbacks.isEmpty()) {",
        "    action = fr.Action.send([",
        "      new fr.ChoiceCallback("Select a journey", choices, 0, false)",
        "    ]).build();",
        "  } else {",
        "    var choice = parseInt(callbacks.get(0).getSelectedIndexes()[0]);",
        "    nodeState.putShared("nodeConfig", {tree: choices[choice]});",
        "    action = fr.Action.goTo(outcome).build();",
        "  }",
        "}());",
      ],
    },
    "157298c0-7d31-4059-a95b-eeb08473b7e5": {
      "_id": "157298c0-7d31-4059-a95b-eeb08473b7e5",
      "context": "AUTHENTICATION_CLIENT_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for client side Device Id (Match) Authentication Module",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Device Id (Match) - Client Side",
      "script": [
        "var fontDetector = (function () {",
        "    /**",
        "     * JavaScript code to detect available availability of a",
        "     * particular font in a browser using JavaScript and CSS.",
        "     *",
        "     * Author : Lalit Patel",
        "     * Website: http://www.lalit.org/lab/javascript-css-font-detect/",
        "     * License: Apache Software License 2.0",
        "     *          http://www.apache.org/licenses/LICENSE-2.0",
        "     * Version: 0.15 (21 Sep 2009)",
        "     *          Changed comparision font to default from sans-default-default,",
        "     *          as in FF3.0 font of child element didn't fallback",
        "     *          to parent element if the font is missing.",
        "     * Version: 0.2 (04 Mar 2012)",
        "     *          Comparing font against all the 3 generic font families ie,",
        "     *          'monospace', 'sans-serif' and 'sans'. If it doesn't match all 3",
        "     *          then that font is 100% not available in the system",
        "     * Version: 0.3 (24 Mar 2012)",
        "     *          Replaced sans with serif in the list of baseFonts",
        "     */",
        "    /*",
        "     * Portions Copyrighted 2013 ForgeRock AS.",
        "     */",
        "    var detector = {}, baseFonts, testString, testSize, h, s, defaultWidth = {}, defaultHeight = {}, index;",
        "",
        "    // a font will be compared against all the three default fonts.",
        "    // and if it doesn't match all 3 then that font is not available.",
        "    baseFonts = ['monospace', 'sans-serif', 'serif'];",
        "",
        "    //we use m or w because these two characters take up the maximum width.",
        "    // And we use a LLi so that the same matching fonts can get separated",
        "    testString = "mmmmmmmmmmlli";",
        "",
        "    //we test using 72px font size, we may use any size. I guess larger the better.",
        "    testSize = '72px';",
        "",
        "    h = document.getElementsByTagName("body")[0];",
        "",
        "    // create a SPAN in the document to get the width of the text we use to test",
        "    s = document.createElement("span");",
        "    s.style.fontSize = testSize;",
        "    s.innerHTML = testString;",
        "    for (index in baseFonts) {",
        "        //get the default width for the three base fonts",
        "        s.style.fontFamily = baseFonts[index];",
        "        h.appendChild(s);",
        "        defaultWidth[baseFonts[index]] = s.offsetWidth; //width for the default font",
        "        defaultHeight[baseFonts[index]] = s.offsetHeight; //height for the defualt font",
        "        h.removeChild(s);",
        "    }",
        "",
        "    detector.detect = function(font) {",
        "        var detected = false, index, matched;",
        "        for (index in baseFonts) {",
        "            s.style.fontFamily = font + ',' + baseFonts[index]; // name of the font along with the base font for fallback.",
        "            h.appendChild(s);",
        "            matched = (s.offsetWidth !== defaultWidth[baseFonts[index]] || s.offsetHeight !== defaultHeight[baseFonts[index]]);",
        "            h.removeChild(s);",
        "            detected = detected || matched;",
        "        }",
        "        return detected;",
        "    };",
        "",
        "    return detector;",
        "}());",
        "/*",
        " * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.",
        " *",
        " * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved",
        " *",
        " * The contents of this file are subject to the terms",
        " * of the Common Development and Distribution License",
        " * (the License). You may not use this file except in",
        " * compliance with the License.",
        " *",
        " * You can obtain a copy of the License at",
        " * https://opensso.dev.java.net/public/CDDLv1.0.html or",
        " * opensso/legal/CDDLv1.0.txt",
        " * See the License for the specific language governing",
        " * permission and limitations under the License.",
        " *",
        " * When distributing Covered Code, include this CDDL",
        " * Header Notice in each file and include the License file",
        " * at opensso/legal/CDDLv1.0.txt.",
        " * If applicable, add the following below the CDDL Header,",
        " * with the fields enclosed by brackets [] replaced by",
        " * your own identifying information:",
        " * "Portions Copyrighted [year] [name of copyright owner]"",
        " *",
        " */",
        "/*",
        " * Portions Copyrighted 2013 Syntegrity.",
        " * Portions Copyrighted 2013-2014 ForgeRock AS.",
        " */",
        "",
        "var collectScreenInfo = function () {",
        "        var screenInfo = {};",
        "        if (screen) {",
        "            if (screen.width) {",
        "                screenInfo.screenWidth = screen.width;",
        "            }",
        "",
        "            if (screen.height) {",
        "                screenInfo.screenHeight = screen.height;",
        "            }",
        "",
        "            if (screen.pixelDepth) {",
        "                screenInfo.screenColourDepth = screen.pixelDepth;",
        "            }",
        "        } else {",
        "            console.warn("Cannot collect screen information. screen is not defined.");",
        "        }",
        "        return screenInfo;",
        "    },",
        "    collectTimezoneInfo = function () {",
        "        var timezoneInfo =  {}, offset = new Date().getTimezoneOffset();",
        "",
        "        if (offset) {",
        "            timezoneInfo.timezone = offset;",
        "        } else {",
        "            console.warn("Cannot collect timezone information. timezone is not defined.");",
        "        }",
        "",
        "        return timezoneInfo;",
        "    },",
        "    collectBrowserPluginsInfo = function () {",
        "",
        "        if (navigator && navigator.plugins) {",
        "            var pluginsInfo = {}, i, plugins = navigator.plugins;",
        "            pluginsInfo.installedPlugins = "";",
        "",
        "            for (i = 0; i < plugins.length; i++) {",
        "                pluginsInfo.installedPlugins = pluginsInfo.installedPlugins + plugins[i].filename + ";";",
        "            }",
        "",
        "            return pluginsInfo;",
        "        } else {",
        "            console.warn("Cannot collect browser plugin information. navigator.plugins is not defined.");",
        "            return {};",
        "        }",
        "",
        "    },",
        "// Getting geolocation takes some time and is done asynchronously, hence need a callback which is called once geolocation is retrieved.",
        "    collectGeolocationInfo = function (callback) {",
        "        var geolocationInfo = {},",
        "            successCallback = function(position) {",
        "                geolocationInfo.longitude = position.coords.longitude;",
        "                geolocationInfo.latitude = position.coords.latitude;",
        "                callback(geolocationInfo);",
        "            }, errorCallback = function(error) {",
        "                console.warn("Cannot collect geolocation information. " + error.code + ": " + error.message);",
        "                callback(geolocationInfo);",
        "            };",
        "        if (navigator && navigator.geolocation) {",
        "            // NB: If user chooses 'Not now' on Firefox neither callback gets called",
        "            //     https://bugzilla.mozilla.org/show_bug.cgi?id=675533",
        "            navigator.geolocation.getCurrentPosition(successCallback, errorCallback);",
        "        } else {",
        "            console.warn("Cannot collect geolocation information. navigator.geolocation is not defined.");",
        "            callback(geolocationInfo);",
        "        }",
        "    },",
        "    collectBrowserFontsInfo = function () {",
        "        var fontsInfo = {}, i, fontsList = ["cursive","monospace","serif","sans-serif","fantasy","default","Arial","Arial Black",",
        "            "Arial Narrow","Arial Rounded MT Bold","Bookman Old Style","Bradley Hand ITC","Century","Century Gothic",",
        "            "Comic Sans MS","Courier","Courier New","Georgia","Gentium","Impact","King","Lucida Console","Lalit",",
        "            "Modena","Monotype Corsiva","Papyrus","Tahoma","TeX","Times","Times New Roman","Trebuchet MS","Verdana",",
        "            "Verona"];",
        "        fontsInfo.installedFonts = "";",
        "",
        "        for (i = 0; i < fontsList.length; i++) {",
        "            if (fontDetector.detect(fontsList[i])) {",
        "                fontsInfo.installedFonts = fontsInfo.installedFonts + fontsList[i] + ";";",
        "            }",
        "        }",
        "        return fontsInfo;",
        "    },",
        "    devicePrint = {};",
        "",
        "devicePrint.screen = collectScreenInfo();",
        "devicePrint.timezone = collectTimezoneInfo();",
        "devicePrint.plugins = collectBrowserPluginsInfo();",
        "devicePrint.fonts = collectBrowserFontsInfo();",
        "",
        "if (navigator.userAgent) {",
        "    devicePrint.userAgent = navigator.userAgent;",
        "}",
        "if (navigator.appName) {",
        "    devicePrint.appName = navigator.appName;",
        "}",
        "if (navigator.appCodeName) {",
        "    devicePrint.appCodeName = navigator.appCodeName;",
        "}",
        "if (navigator.appVersion) {",
        "    devicePrint.appVersion = navigator.appVersion;",
        "}",
        "if (navigator.appMinorVersion) {",
        "    devicePrint.appMinorVersion = navigator.appMinorVersion;",
        "}",
        "if (navigator.buildID) {",
        "    devicePrint.buildID = navigator.buildID;",
        "}",
        "if (navigator.platform) {",
        "    devicePrint.platform = navigator.platform;",
        "}",
        "if (navigator.cpuClass) {",
        "    devicePrint.cpuClass = navigator.cpuClass;",
        "}",
        "if (navigator.oscpu) {",
        "    devicePrint.oscpu = navigator.oscpu;",
        "}",
        "if (navigator.product) {",
        "    devicePrint.product = navigator.product;",
        "}",
        "if (navigator.productSub) {",
        "    devicePrint.productSub = navigator.productSub;",
        "}",
        "if (navigator.vendor) {",
        "    devicePrint.vendor = navigator.vendor;",
        "}",
        "if (navigator.vendorSub) {",
        "    devicePrint.vendorSub = navigator.vendorSub;",
        "}",
        "if (navigator.language) {",
        "    devicePrint.language = navigator.language;",
        "}",
        "if (navigator.userLanguage) {",
        "    devicePrint.userLanguage = navigator.userLanguage;",
        "}",
        "if (navigator.browserLanguage) {",
        "    devicePrint.browserLanguage = navigator.browserLanguage;",
        "}",
        "if (navigator.systemLanguage) {",
        "    devicePrint.systemLanguage = navigator.systemLanguage;",
        "}",
        "",
        "// Attempt to collect geo-location information and return this with the data collected so far.",
        "// Otherwise, if geo-location fails or takes longer than 30 seconds, auto-submit the data collected so far.",
        "autoSubmitDelay = 30000;",
        "output.value = JSON.stringify(devicePrint);",
        "collectGeolocationInfo(function(geolocationInfo) {",
        "    devicePrint.geolocation = geolocationInfo;",
        "    output.value = JSON.stringify(devicePrint);",
        "    submit();",
        "});",
      ],
    },
    "158e500b-8180-4641-ad48-23577fe9d976": {
      "_id": "158e500b-8180-4641-ad48-23577fe9d976",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_MfaOptIn",
      "script": [
        "/*",
        "This creates the following callbacks:",
        "- TextOutputCallback: Display the step title and description",
        "- ConfirmationCallback: Display a list of buttons for choices",
        "- HiddenValueCallback: Captures the "skip" option, if selected",
        "- ScriptTextOutputCallback: Creates a "Skip for now" link button and positions it below the buttons ",
        "*/",
        "",
        "var token = generateNumericToken('xxx');",
        "var loadingMessage = 'Loading...';",
        "var linkButton = "<button id='skip-link-".concat(token).concat("' class='btn btn-block btn-link' type=submit>Skip for now</button>");",
        "var message = "<h2 class=h2>Set up 2-step verification</h2><div style='margin-bottom:1em'>Protect your account by adding a second step after entering your password to verify it's you signing in.</div>";",
        "var choices = ['Set up'];",
        "var defaultChoice = 0;",
        "var skipValue = 'Skip';",
        "",
        "// This will run recursively in the browser until references can be obtained to key DOM elements, at which point.",
        "// it will customize the DOM.  This is to avoid race conditions with the UI rendering callbacks.",
        "var setupPageScript =",
        "  'var setupPage = function() {'.concat(",
        "  '  var skipInputElem = document.getElementById("skip-input-').concat(token).concat('");').concat(",
        "  '  var messageElem;').concat(",
        "  '  document.getElementsByClassName("callback-component").forEach(').concat(",
        "  '    function (e) {').concat(",
        "  '      var m = e.firstElementChild;').concat(",
        "  '      if (m.firstChild && m.firstChild.nodeName == "#text" && m.firstChild.nodeValue.trim() == "').concat(loadingMessage).concat('") {').concat(",
        "  '        messageElem = m;').concat(",
        "  '      }').concat(",
        "  '    }').concat(",
        "  '  );').concat(",
        "  '  if (!skipInputElem || !messageElem) {').concat(",
        "  '    return setTimeout(setupPage, 50);').concat(",
        "  '  }').concat(",
        "  '  var skipContainer = document.createElement("div");').concat(",
        "  '  skipContainer.style = "width:100%";').concat(",
        "  '  skipContainer.innerHTML = "').concat(linkButton).concat('";').concat(",
        "  '  skipInputElem.parentNode.append(skipContainer);').concat(",
        "  '  messageElem.align = "center";').concat(",
        "  '  messageElem.innerHTML = "').concat(message).concat('";').concat(",
        "  '  var bindSkipLink = function() {').concat(",
        "  '    document.getElementById("skip-link-').concat(token).concat('").onclick = function() {').concat(",
        "  '      skipInputElem.value = "').concat(skipValue).concat('";').concat(",
        "  '      document.getElementById("loginButton_0").click();').concat(",
        "  '      return false;').concat(",
        "  '    };').concat(",
        "  '  };').concat(",
        "  '  setTimeout(bindSkipLink, 100);').concat(",
        "  '};').concat(",
        "  'setupPage();');",
        "",
        "var fr = JavaImporter(",
        "  org.forgerock.openam.auth.node.api.Action,",
        "  javax.security.auth.callback.ConfirmationCallback,",
        "  javax.security.auth.callback.TextOutputCallback,",
        "  com.sun.identity.authentication.callbacks.HiddenValueCallback,",
        "  com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "",
        "with (fr) {",
        "  if (callbacks.isEmpty()) {",
        "    action = Action.send(",
        "      new TextOutputCallback(",
        "          TextOutputCallback.INFORMATION,",
        "          loadingMessage",
        "      ),",
        "      new ConfirmationCallback(",
        "          ConfirmationCallback.INFORMATION,",
        "          choices,",
        "          defaultChoice",
        "      ),",
        "      new HiddenValueCallback('skip-input-'.concat(token), 'false'),",
        "      new ScriptTextOutputCallback(setupPageScript)",
        "    ).build()",
        "  } else {",
        "    if (callbacks.get(2).getValue() == skipValue) {",
        "      action = Action.goTo(skipValue).build();",
        "    } else {",
        "      action = Action.goTo(choices[callbacks.get(1).getSelectedIndex()]).build();",
        "    }",
        "  }",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "  return format.replace(/[x]/g, function(c) {",
        "    var r = Math.random()*10|0;",
        "    var v = r;",
        "    return v.toString(10);",
        "  });",
        "}",
      ],
    },
    "164fe425-01e7-4b0b-9f60-fb41f6bf362b": {
      "_id": "164fe425-01e7-4b0b-9f60-fb41f6bf362b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "FRAAS-7955 Display sharedState and transientState.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FRAAS-7955 Display States",
      "script": [
        "/* debug",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Display sharedState and transientState.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "var output = true;",
        "",
        "var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "var halign = "left";",
        "var message = "<h4>Current State Values</h4>".concat(",
        "    "<p><b>Shared State</b>:<br/>").concat(",
        "      sharedState.toString()).concat("</p>").concat(",
        "    "<p><b>Transient State</b>:<br/>").concat(",
        "      transientState.toString()).concat("</p>")",
        "var script = "Array.prototype.slice.call(\\n".concat(",
        "  "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "  "function (e) {\\n").concat(",
        "  "  var message = e.firstElementChild;\\n").concat(",
        "  "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "  "    message.className = \\"\\";\\n").concat(",
        "  "    message.style = \\"text-align: left; inline-size: 430px; overflow-wrap: break-word;\\";\\n").concat(",
        "  "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "  "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "  "  }\\n").concat(",
        "  "})")",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "if (message.length && callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            anchor",
        "        ),",
        "        new fr.ScriptTextOutputCallback(script)",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo("true").build();",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "    return format.replace(/[x]/g, function(c) {",
        "        var r = Math.random()*10|0;",
        "        var v = r;",
        "        return v.toString(10);",
        "    });",
        "}",
      ],
    },
    "169150da-0bd1-4866-8095-eae0bbc269e4": {
      "_id": "169150da-0bd1-4866-8095-eae0bbc269e4",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Collect all the configuration items required for the Message Node to function properly.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect Message Node Config",
      "script": [
        "/* Collect Message Node Config",
        " * ",
        " * Collect all the configuration items required for the Message Node to function properly.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "      var config = {",
        "        "message": {"en": "I believe I can fly!"},",
        "        "messageYes": {"en": "Glorious!"},",
        "        "messageNo": {"en": "Inconceivable!"}",
        "    };",
        "      var script = "";",
        "    script += "Array.prototype.slice.call(";",
        "    script += "    document.getElementsByTagName('input')";",
        "    script += ").forEach(";",
        "    script += "    function (input,i) {";",
        "    script += "        console.log('input '+i);"",
        "    script += "        var config = JSON.parse('"+JSON.stringify(config)+"');";",
        "    script += "        var keys = Object.keys(config);";",
        "    script += "        if (input.type === 'text') {";",
        "    script += "            input.setAttribute('value', config[keys[i]].en);";",
        "    script += "            input.dispatchEvent(new KeyboardEvent( 'input' , {'key':'Enter'} ));";",
        "    script += "        }";",
        "    script += "    }";",
        "    script += ");";",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          javax.security.auth.callback.NameCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.NameCallback("message", config.message.en),",
        "            new fr.NameCallback("messageYes", config.messageYes.en),",
        "            new fr.NameCallback("messageNo", config.messageNo.en),",
        "              new fr.ScriptTextOutputCallback(script)",
        "        ).build();",
        "    }",
        "    else {",
        "          config[callbacks.get(0).getPrompt()].en = callbacks.get(0).getName();",
        "          config[callbacks.get(1).getPrompt()].en = callbacks.get(1).getName();",
        "          config[callbacks.get(2).getPrompt()].en = callbacks.get(2).getName();",
        "          nodeState.putShared("nodeConfig", config);",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "199405e4-050e-4f2a-87d1-d9125f74a8df": {
      "_id": "199405e4-050e-4f2a-87d1-d9125f74a8df",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Reset theme to what's preserved in shared state variable "theme-id" or to default theme.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Reset Theme",
      "script": [
        "/* Reset Theme",
        " * ",
        " * Reset theme to what's preserved in shared state variable "themeId" or to default theme.",
        " * ",
        " * This script needs to be parametrized!",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      /* Begin Script Configuration */",
        "      var defaultTheme = "Expanse";",
        "      /* End Script Configuration */",
        "      ",
        "      outcome = "true";",
        "      ",
        "      var theme = defaultTheme;",
        "      if (sharedState.get("themeId") && ""+sharedState.get("themeId") !== "") {",
        "          theme = sharedState.get("themeId");",
        "    }",
        "",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        org.forgerock.openam.authentication.callbacks.PollingWaitCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        var stage = "themeId="+theme;",
        "        action = fr.Action.send(",
        "              new fr.PollingWaitCallback("100", "Please wait ...")",
        "        ).withStage(stage).build();",
        "    } else {",
        "          action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "1acc5535-13e2-4ed8-83e1-f4fefd86d243": {
      "_id": "1acc5535-13e2-4ed8-83e1-f4fefd86d243",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Readiness probe response",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Ready Response",
      "script": [
        "/* Ready Response",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Return READY in a TextOutputCallback indicating that the journey layer is operational.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "outcome = "true";",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback",
        ")",
        "if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            "READY"",
        "        )",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo(outcome).build();",
        "}",
      ],
    },
    "1b52a7e0-4019-40fa-958a-15a49870e901": {
      "_id": "1b52a7e0-4019-40fa-958a-15a49870e901",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "set the same shared state variable",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "shared",
      "script": [
        "(function () {",
        "  outcome = 'true';",
        "  var level = nodeState.get('level').asInteger();",
        "  sharedState.put('sharedValue', 'Level ' + level + ': This is a longer string value shared across all nested journeys. It contains an indicator in which level it was last set.');",
        "}());",
      ],
    },
    "1c0c73e8-2be1-41ce-b042-3c39694346b5": {
      "_id": "1c0c73e8-2be1-41ce-b042-3c39694346b5",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Verify unknown caller by account number",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Verify Unknown Caller",
      "script": [
        "/* Twilio IVR: Verify Unknown Caller",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "logger.warning("Twilio IVR: Verify Unknown Caller: start");",
        "outcome = "true";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// Build out the verification prompt",
        "var prompt = "To lookup your account, please enter or say your account number.";",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextInputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var input = new TextInputCallback(prompt);",
        "        action = Action.send(input).build();",
        "      } ",
        "      else {",
        "          var answer = new String(callbacks.get(0).getText()).replace(/[^0-9]/g, "");",
        "        logger.warning("Twilio IVR: Verify Unknown Caller: callbacks received: answer=".concat(answer));",
        "          setSharedObjectAttribute("frIndexedInteger5", answer);",
        "        logger.warning("Twilio IVR: Verify Unknown Caller: finish [outcome=".concat(outcome).concat("]"));",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "       var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "1d475815-72cb-42eb-aafd-4026989d28a7": {
      "_id": "1d475815-72cb-42eb-aafd-4026989d28a7",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for Social Identity Provider Profile Transformation",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Social Identity Provider Profile Transformation Script",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/* Default Social Identity Provider Profile Transformation script to use as a template for new scripts */",
      ],
    },
    "1e8175a2-6114-415f-9b72-9fe15bdf3661": {
      "_id": "1e8175a2-6114-415f-9b72-9fe15bdf3661",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_IsFederationEnforcedForUser",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "var fr = new JavaImporter(",
        "  org.forgerock.openam.auth.nodes,",
        "  org.forgerock.guice.core",
        ");",
        "",
        "with (fr) {",
        "  var enforcement = 'none';",
        "",
        "  function isSuperAdmin() {",
        "    var uuid = sharedState.get('_id');",
        "    var realm = sharedState.get('realm');",
        "    var identityProvider = InjectorHolder.getInstance(IdentityProvider);",
        "    var identity = identityProvider.getIdentity(uuid, realm);",
        "    var groups = identity.getAttribute('fr-attr-group').toArray();",
        "    for (var i = 0; i < groups.length; i++) {",
        "      if (groups[i] == 'super-admins') {",
        "        return true;",
        "      }",
        "    }",
        "    return false;",
        "  }",
        "",
        "  try {",
        "    switch (enforcement) {",
        "      case 'none':",
        "        outcome = 'False';",
        "        break;",
        "      case 'all':",
        "        outcome = 'True';",
        "        break;",
        "      default:",
        "        outcome = isSuperAdmin() ? 'False' : 'True';",
        "        break;",
        "    }",
        "  } catch (e) {",
        "    logger.error('Failed to determine if federation is enforced for user: {}', e);",
        "    outcome = 'Error';",
        "  }",
        "}",
      ],
    },
    "1f389a3d-21cf-417c-a6d3-42ea620071f0": {
      "_id": "1f389a3d-21cf-417c-a6d3-42ea620071f0",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Internal OIDC Claims script",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ForgeRock Internal: OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
        "",
      ],
    },
    "22ab12ac-d1d9-414b-ab51-cfae30de8c0a": {
      "_id": "22ab12ac-d1d9-414b-ab51-cfae30de8c0a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Create a configuration object for the Email Template Node.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Configure Email Template Node",
      "script": [
        "/* Configure Email Template Node",
        " * ",
        " * Create a configuration object for the Email Template Node.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - error",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "  try {",
        "  outcome = 'true';",
        "  var config = {",
        "    emailAttribute: 'mail',",
        "    emailTemplateName: 'welcome',",
        "    identityAttribute: 'userName'",
        "  };",
        "  nodeState.putShared('nodeConfig', config);",
        "  } catch (error) {",
        "      outcome = 'error';",
        "    nodeState.putShared('error', error.message);",
        "  }",
        "}());",
      ],
    },
    "23143919-6b78-40c3-b25e-beca19b229e0": {
      "_id": "23143919-6b78-40c3-b25e-beca19b229e0",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "GitHub Profile Normalization (VS)",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("GitHub rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "27f1b5a3-9446-4e5c-b965-f195a99fa666": {
      "_id": "27f1b5a3-9446-4e5c-b965-f195a99fa666",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_PasswordFixEnd",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        "This restores sharedState.objectAttributes temporarily overwritten to fix an issue with password policy.",
        "*/",
        "",
        "//var password = '';",
        "//var objAttrs = sharedState.get('objectAttributes');",
        "//if (objAttrs && objAttrs.containsKey('password')) {",
        "//  password = objAttrs.get('password');",
        "//}",
        "",
        "// Restore original object attributes",
        "var origObjAttrs = sharedState.get('originalObjectAttributes');",
        "if (origObjAttrs) {",
        "//  if (password) {",
        "//    origObjAttrs.put('password', password);",
        "//  }",
        "  sharedState.put('objectAttributes', origObjAttrs);",
        "}",
        "",
        "outcome = 'True';",
        "",
      ],
    },
    "2997bd4d-14be-4dc6-8701-27f08d10b8b7": {
      "_id": "2997bd4d-14be-4dc6-8701-27f08d10b8b7",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Profile Normalization Script for idddataweb",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "iddataweb Profile Normalization",
      "script": [
        "/*/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS. Not for Production use. ",
        " * Modified by Stephen Payne",
        " */",
        "/* Social Identity Provider Profile Transformation script for ID DataWeb */",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.error("iddataweb_Social Identity Provider Profile Transformation script: Start");",
        "userName = sharedState.get("objectAttributes").get("mail");",
        "logger.error("iddataweb_Social Identity Provider Profile Transformation script: userName" + userName );",
        "username = userName;",
        "sharedState.put("userName", userName);",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.acquiredAttributes_AcquiredFullName_fname.asString() + " " + rawProfile.acquiredAttributes_AcquiredFullName_lname.asString().toLowerCase().capitalize() ),",
        "        field("givenName", rawProfile.acquiredAttributes_AcquiredFullName_fname.asString().toLowerCase().capitalize() ),",
        "        field("familyName", rawProfile.acquiredAttributes_AcquiredFullName_lname.asString().toLowerCase().capitalize() ),",
        "        field("postalAddress", rawProfile.acquiredAttributes_AcquiredAddress_address),",
        "        field("addressLocality", rawProfile.acquiredAttributes_AcquiredAddress_locality),",
        "        field("addressRegion", rawProfile.acquiredAttributes_AcquiredAddress_administrative_area_level_1),",
        "        field("postalCode", rawProfile.acquiredAttributes_AcquiredAddress_postal_code),",
        "        field("country", rawProfile.acquiredAttributes_AcquiredAddress_country),",
        "        field("driversLicense", rawProfile.acquiredAttributes_AcquiredDriversLicenseNumber_acquiredDriversLicenseNumber),",
        "        field("driversLicenseIssuer", rawProfile.acquiredAttributes_DriversLicenseIssuerCode_DriversLicenseIssuerCode),",
        "          field("DOB", rawProfile.acquiredAttributes_AcquiredDOB_month.asString() + "/" + rawProfile.acquiredAttributes_AcquiredDOB_day.asString() + "/" + rawProfile.acquiredAttributes_AcquiredDOB_year.asString() ),",
        "",
        "        field("IDWScore", rawProfile.acquiredAttributes_IDWScore),",
        "        field("policyDecision", rawProfile.policyDecision_conclusion),",
        "        field("phone", rawProfile.userAttributes_InternationalTelephone_dialCode.asString() + rawProfile.userAttributes_InternationalTelephone_telephone.asString()),",
        "        field("username", userName )",
        "       //field("username", rawProfile.acquiredAttributes_AcquiredFullName_fname.asString() + "." + rawProfile.acquiredAttributes_AcquiredFullName_lname.asString() )",
        "",
        "   )",
        ")",
        "",
      ],
    },
    "2a076e9e-75a9-46b5-b971-10ffafbdf652": {
      "_id": "2a076e9e-75a9-46b5-b971-10ffafbdf652",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Return true if a goto param has been specified, false otherwise.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Goto Specified Decision",
      "script": [
        "/* Goto Specified Decision",
        " * ",
        " * Return true if a goto param has been specified, false otherwise.",
        " * ",
        " * This script does not require configuration. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    logger.message("Goto Specified Decision: start");",
        "      outcome = "false";",
        "      var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "      if (referer.searchParam.goto) {",
        "          outcome = "true";",
        "    }",
        "    logger.message("Goto Specified Decision: end [outcome={}]", outcome);",
        "",
        "    /*",
        "     * Parse a URL into its components and make them easily accessible by name",
        "     *",
        "     * Use in a Scripte Decision Node Script as follows:",
        "     * var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "     * var origin = referer.origin;",
        "     * ",
        "     * e.g.: https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "     * {",
        "     *     hash: '#/',",
        "     *     host: 'openam-volker-dev.forgeblocks.com',",
        "     *     hostname: 'openam-volker-dev.forgeblocks.com',",
        "     *     href: 'https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/',",
        "     *     origin: 'https://openam-volker-dev.forgeblocks.com',",
        "     *     pathname: '/am/XUI/',",
        "     *     port: '',",
        "     *     protocol: 'https',",
        "     *     search: '?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim',",
        "     *     username: '',",
        "     *     password: '',",
        "     *     searchParam: {",
        "     *         realm: '/bravo',",
        "     *         authIndexType: 'service',",
        "     *         authIndexValue: 'InitiateOwnerClaim'",
        "     *     }",
        "     * }",
        "     */",
        "    function parseUrl(href) {",
        "        var m = href.match(/^(([^:\\/?#]+):?(?:\\/\\/((?:([^\\/?#:]*):([^\\/?#:]*)@)?([^\\/?#:]*)(?::([^\\/?#:]*))?)))?([^?#]*)(\\?[^#]*)?(#.*)?$/),",
        "        r = {",
        "            hash: m[10] || "",                      // #/",
        "            host: m[3] || "",                       // openam-volker-dev.forgeblocks.com",
        "            hostname: m[6] || "",                   // openam-volker-dev.forgeblocks.com",
        "            href: m[0] || "",                       // https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "            origin: m[1] || "",                     // https://openam-volker-dev.forgeblocks.com",
        "            pathname: m[8] || (m[1] ? "/" : ""),    // /am/XUI/",
        "            port: m[7] || "",                       // ",
        "            protocol: m[2] || "",                   // https",
        "            search: m[9] || "",                     // ?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim",
        "            username: m[4] || "",                   // ",
        "            password: m[5] || "",                   // ",
        "            searchParam: {}                         // { realm: '/bravo',",
        "                                                    //   authIndexType: 'service',",
        "                                                    //   authIndexValue: 'InitiateOwnerClaim' }",
        "        };",
        "        if (r.protocol.length == 2) {",
        "            r.protocol = "file:///" + r.protocol.toUpperCase();",
        "            r.origin = r.protocol + "//" + r.host;",
        "        }",
        "        if (r.search.length > 2) {",
        "            var query = (r.search.indexOf('?') === 0) ? r.search.substr(1) : r.search;",
        "            var vars = query.split('&');",
        "            for (var i = 0; i < vars.length; i++) {",
        "            var pair = vars[i].split('=');",
        "            r.searchParam[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);",
        "            }",
        "        }",
        "        r.href = r.origin + r.pathname + r.search + r.hash;",
        "        return r;",
        "    };",
        "}());",
      ],
    },
    "2aaa8076-5d0b-4433-9660-fec1ba51b608": {
      "_id": "2aaa8076-5d0b-4433-9660-fec1ba51b608",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "temp",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "outcome = "false";",
        "if(sharedState.get("username"))",
        "{",
        "var username = sharedState.get("username")",
        "var id = sharedState.get("_id")",
        "var persona = existingSession.get('persona')",
        "",
        "sharedState.put("debug",username);",
        "sharedState.put("debug_id",id);",
        "sharedState.put("persona",persona);",
        "",
        "if(username!=='')",
        "{",
        "  outcome = "false";",
        "}}",
        "",
      ],
    },
    "2ada53cd-5d37-4592-9c7f-5711271229c2": {
      "_id": "2ada53cd-5d37-4592-9c7f-5711271229c2",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Has Profile Changed",
      "script": [
        "logger.error("Has Profile Changed: start");",
        "outcome = "unchanged";",
        "if (getObjectAttribute("old_givenName") ||",
        "    getObjectAttribute("old_sn") ||",
        "    getObjectAttribute("frUnindexedString5") ||",
        "    getObjectAttribute("old_telephoneNumber")) {",
        "  outcome = "changed";",
        "}",
        "logger.error("Has Profile Changed: end [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Get objectAttribute value",
        " */",
        "function getObjectAttribute(name) {",
        "    if (sharedState.get("objectAttributes") && sharedState.get("objectAttributes").get(name)) {",
        "        return sharedState.get("objectAttributes").get(name).toString();",
        "    }",
        "    else {",
        "        return null;",
        "    }",
        "}",
      ],
    },
    "2eb48a0c-24e0-4dac-acaf-02085c142ec5": {
      "_id": "2eb48a0c-24e0-4dac-acaf-02085c142ec5",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Integration to Okta Authentication API okta_url/api/v1/authn",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Okta API AuthN",
      "script": [
        "/* Okta Passthru Authentication",
        " *",
        " * Authors: chico.demettroff@forgerock.com, volker.scheuber@forgerock.com",
        " * ",
        " * Okta pass through authentication using Okta Authentication API.",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Platform Username and Platform Password collector nodes",
        " * before it can operate.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - Success",
        " * - Failure",
        " * - Timeout",
        " * - Error",
        " */",
        "logger.message("Okta Passthru Authentication: start");",
        "",
        "if (sharedState.get("username") && transientState.get("password")) {",
        "      /*",
        "     * BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN OKTA TENANT SETTINGS",
        "     *",
        "     */",
        "    var OKTA_API_URI = "https://dev-18030933.okta.com/api/v1/authn/";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('POST');",
        "    request.setUri(OKTA_API_URI);",
        "    request.getHeaders().add("Content-Type", "application/json");",
        "      //var body =     "{\\"username\\":".concat(sharedState.get("username")).concat(",\\"password\\":").concat(transientState.get("password")).concat(",\\"options\\":{\\"multiOptionalFactorEnroll\\":true,\\"warnBeforePasswordExpired\\":true}}");",
        "    var body = {",
        "        "username": sharedState.get("username"),",
        "        "password": transientState.get("password"),",
        "        "options": {",
        "            "multiOptionalFactorEnroll": true,",
        "            "warnBeforePasswordExpired": true",
        "        }",
        "    }",
        "      request.getEntity().setJson(body);",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    logger.message("Okta Passthru Authentication: JSON result: " + JSON.stringify(result));",
        "",
        "      if (response.getStatus().getCode() === 200 && result.status === "SUCCESS") {",
        "          outcome = "Success"",
        "        transientState.put("oktaProfile", result._embedded.user.profile);",
        "    } else {",
        "        /* Outcomes:",
        "         * - Success",
        "         * - Failure",
        "         * - Timeout",
        "         * - Error",
        "         *",
        "         * Expected/known Error Codes:",
        "         * E0000004 - Authentication failed.",
        "         * E0000003 - The request body was not well-formed",
        "         */",
        "      ",
        "    /*",
        "{",
        "    "expiresAt": "2021-10-14T22:15:04.000Z",",
        "    "status": "SUCCESS",",
        "    "sessionToken": "20111FNVseT3WyCzBHFBi3dYtx980FHen46QKlWXRNTe1kRef3GQu1W",",
        "    "_embedded": {",
        "        "user": {",
        "            "id": "00u1xqw851dEqM1Y15d7",",
        "            "passwordChanged": "2021-09-21T18:26:25.000Z",",
        "            "profile": {",
        "                "login": "chico@crossfithighvoltage.com",",
        "                "firstName": "chico",",
        "                "lastName": "deme",",
        "                "locale": "en",",
        "                "timeZone": "America/Los_Angeles"",
        "            }",
        "        }",
        "    },",
        "    "_links": {",
        "        "cancel": {",
        "            "href": "https://dev-18030933.okta.com/api/v1/authn/cancel",",
        "            "hints": {",
        "                "allow": [",
        "                    "POST"",
        "                ]",
        "            }",
        "        }",
        "    }",
        "}",
        "*/",
        "",
        "  /*",
        "  FAILED",
        "  {",
        "    "errorCode": "E0000004",",
        "    "errorSummary": "Authentication failed",",
        "    "errorLink": "E0000004",",
        "    "errorId": "oae1Y3Kk_WvRAOBSDeG9qeyHQ",",
        "    "errorCauses": []",
        "}",
        "*/",
        "        transientState.put("oktaResult", result);",
        "        if (result.timed_out) {",
        "            outcome = "Timeout";",
        "        } else if (result.errorCode === "E0000004") {",
        "            outcome = "Failure";",
        "        } else {",
        "            outcome = "Error";",
        "        }",
        "        logger.message("Okta Passthru Authentication: errorCode = ".concat(result.errorCode));",
        "        logger.message("Okta Passthru Authentication: errorSummary = ".concat(result.errorSummary));",
        "        logger.message("Okta Passthru Authentication: errorId = ".concat(result.errorId));",
        "    }",
        "} else {",
        "      outcome = "Error";",
        "      logger.message("Okta Passthru Authentication: No user or password found in shared state! Use username and password collector nodes before this script to populate shared and transient states!'");",
        "}",
        "logger.message("Okta Passthru Authentication: End (outcome=".concat(outcome).concat(")"));",
      ],
    },
    "312e951f-70c5-49d2-a9ae-93aef909d5df": {
      "_id": "312e951f-70c5-49d2-a9ae-93aef909d5df",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Salesforce",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Salesforce Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.user_id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("photoUrl", rawProfile.picture),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email),",
        "        field("locale", rawProfile.zoneInfo)))",
      ],
    },
    "3156d7e9-1589-4ffb-a659-37a1647ee03d": {
      "_id": "3156d7e9-1589-4ffb-a659-37a1647ee03d",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Converts a normalized social profile coming from ADFS into a managed user",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Normalized ADFS Profile to Managed User",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "import org.forgerock.json.JsonValue",
        "",
        "JsonValue managedUser = json(object(",
        "        field("givenName", normalizedProfile.givenName),",
        "        field("sn", normalizedProfile.familyName),",
        "        field("mail", normalizedProfile.email),",
        "        field("userName", normalizedProfile.username)))",
        "",
        "if (normalizedProfile.postalAddress.isNotNull()) managedUser.put("postalAddress", normalizedProfile.postalAddress)",
        "if (normalizedProfile.addressLocality.isNotNull()) managedUser.put("city", normalizedProfile.addressLocality)",
        "if (normalizedProfile.addressRegion.isNotNull()) managedUser.put("stateProvince", normalizedProfile.addressRegion)",
        "if (normalizedProfile.postalCode.isNotNull()) managedUser.put("postalCode", normalizedProfile.postalCode)",
        "if (normalizedProfile.country.isNotNull()) managedUser.put("country", normalizedProfile.country)",
        "if (normalizedProfile.phone.isNotNull()) managedUser.put("telephoneNumber", normalizedProfile.phone)",
        "managedUser.put("accountStatus", (normalizedProfile.roles.asString() == "fidc-volker-dev-admins") ? 'Active' : 'Inactive')",
        "",
        "// if the givenName and familyName is null or empty",
        "// then add a boolean flag to the shared state to indicate names are not present",
        "// this could be used elsewhere",
        "// for eg. this could be used in a scripted decision node to by-pass patching",
        "// the user object with blank values when givenName  and familyName is not present",
        "boolean noGivenName = normalizedProfile.givenName.isNull() || (!normalizedProfile.givenName.asString()?.trim())",
        "boolean noFamilyName = normalizedProfile.familyName.isNull() || (!normalizedProfile.familyName.asString()?.trim())",
        "sharedState.put("nameEmptyOrNull", noGivenName && noFamilyName)",
        "",
        "return managedUser",
        "",
      ],
    },
    "3369037a-7a49-4aed-a1dc-7aab7608812b": {
      "_id": "3369037a-7a49-4aed-a1dc-7aab7608812b",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Service Account - Token Modification",
      "script": [
        "(function () {",
        "  var fr = JavaImporter(",
        "    java.lang.String,",
        "    java.security.MessageDigest,",
        "    java.util.Arrays,",
        "    javax.crypto.Cipher,",
        "    javax.crypto.spec.SecretKeySpec,",
        "    org.forgerock.http.protocol.Request,",
        "    org.forgerock.http.protocol.Response,",
        "    org.forgerock.util.encode.Base64",
        "  );",
        "  ",
        "  var secret = 'FuwwVKpPER9tPSMYUiIkY7IaPzv85aGU';",
        "  ",
        "  function encrypt(str) {",
        "    try {",
        "      var key = new fr.String(secret).getBytes('UTF-8');",
        "      var sha = fr.MessageDigest.getInstance('SHA-256');",
        "      key = sha.digest(key);",
        "      key = fr.Arrays.copyOf(key, 32);",
        "      var secretKey = new fr.SecretKeySpec(key, 'AES');",
        "      var cipher = fr.Cipher.getInstance('AES/ECB/PKCS5Padding');",
        "      cipher.init(fr.Cipher.ENCRYPT_MODE, secretKey);",
        "      var finalBytes = cipher.doFinal(new fr.String(str).getBytes('UTF-8'));",
        "      return fr.Base64.encode(finalBytes);",
        "    } catch (e) {",
        "      logger.error('{}: failed to encrypt: {}', scriptName, e);",
        "      throw e;",
        "    }",
        "  }",
        "",
        "  function hasAmScope(scope) {",
        "    if (!scope) return false;",
        "    for (var i = 0; i < scope.length; i++) {",
        "      if (scope[i].indexOf('fr:am:') > -1) return true;",
        "    }",
        "    return false;",
        "  }",
        "",
        "  try {",
        "    var uri = 'http://am.fr-platform:80/am/json/authenticate?authIndexType=service&authIndexValue=FRServiceAccountInternal';",
        "    var requestParams = requestProperties.get('requestParams');",
        "",
        "    var scope = requestParams.get('scope');",
        "    if (!hasAmScope(scope)) {",
        "      logger.message('AM scope not requested');",
        "      return null;",
        "    }",
        "",
        "    var jwts = requestParams.get('assertion');",
        "    if (!jwts || jwts.isEmpty()) {",
        "      logger.message('No jwt assertion');",
        "      return null;",
        "    }",
        "",
        "    var jwt = jwts[0];",
        "    var uuid = identity.getAttribute('_id').iterator().next();",
        "",
        "    var request = new fr.Request();",
        "    request.getHeaders().add('authorization', 'svcacct ' + uuid + ' ' + jwt);",
        "    request.getHeaders().add('content-type', 'application/json');",
        "    request",
        "      .setUri(uri)",
        "      .setMethod('POST')",
        "      .setEntity('{}');",
        "",
        "    var response = httpClient.send(request).getOrThrow();",
        "    if (response.getStatus() === org.forgerock.http.protocol.Status.OK) {",
        "      var result = JSON.parse(response.getEntity().getString());",
        "      var encryptedTokenId = encrypt(result.tokenId);",
        "      accessToken.setField('sessionToken', encryptedTokenId);",
        "    } else {",
        "      logger.message('Failed to get session from service account tree (status: ' + response.getStatus() + ')');",
        "    }",
        "  } catch (e) {",
        "    throw ('Failed to modify service account token: ' + e);",
        "  }",
        "}());",
        "",
      ],
    },
    "355a8b7c-9e3c-40c1-a873-68127e483adf": {
      "_id": "355a8b7c-9e3c-40c1-a873-68127e483adf",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Extract Username from request.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "KerberosLogin: Extract Username",
      "script": [
        "/* KerberosLogin: Extract Username",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " */",
        "",
        "logger.warning("KerberosLogin: Extract Username: start");",
        "outcome = "false";",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " */",
        "var USERNAME_HEADER_NAME = "X-OpenAM-Username";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "var username = getHeader(USERNAME_HEADER_NAME);",
        "if (username) {",
        "    ",
        "      outcome = "true";",
        "    sharedState.put("username", username);",
        "    setSharedObjectAttribute("userName", username);",
        "}",
        "",
        "logger.warning("KerberosLogin: Extract Username: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Returns the value of the requested header",
        " */",
        "function getHeader(headerName) {",
        "      if (requestHeaders.get(headerName) && requestHeaders.get(headerName).get(0)) {",
        "        return requestHeaders.get(headerName).get(0).toString();",
        "    }",
        "      return null;",
        "}",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "       var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "36863ffb-40ec-48b9-94b1-9a99f71cc3b5": {
      "_id": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for OIDC claims",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
        "",
      ],
    },
    "37bf200a-158f-4a45-8ee5-81516e4593f8": {
      "_id": "37bf200a-158f-4a45-8ee5-81516e4593f8",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display session info.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Display Session Info",
      "script": [
        "/* Display Session Info",
        " * ",
        " * Display Session Info.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "",
        "    var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "    var halign = "left";",
        "",
        "    var choices = [];",
        "      var defaultChoice = 0;",
        "  ",
        "      var include = ["org","idp","saas","profileType","givenName","sn","mail","roles","userName","UserId","Locale","authInstant","AuthLevel","Host","Service"];",
        "    var message = "";",
        "    if (typeof existingSession !== "undefined") {",
        "          message = "<h4>Session Info</h4><p style=\\"font-family:courier;\\">";",
        "          include.forEach(function (key) {",
        "              message += "<b>" + key + "</b>: " + existingSession.get(key) + "<br/>";",
        "        });",
        "         message += "</p><p style=\\"font-size:70%;font-family:courier;\\">"",
        "          var entries = existingSession.keySet().toArray();",
        "        entries.forEach(function (key) {",
        "              if (include.indexOf(""+key)===-1) {",
        "                message += "<b>" + key + "</b>: " + existingSession.get(key) + "<br/>";",
        "            }",
        "        });",
        "         message += "</p>"",
        "          choices.push("Goto SAML App");",
        "          choices.push("Goto OIDC App");",
        "          if (""+existingSession.get("profileType") === "persistent") {",
        "              choices.push("Goto Profile Page");",
        "        }",
        "          choices.push("Logout");",
        "    } else {",
        "          message = "<h4>No Session!</h4><p>"",
        "          choices.push("Login");",
        "    }",
        "    var script = "Array.prototype.slice.call(\\n".concat(",
        "      "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "      "function (e) {\\n").concat(",
        "      "  var message = e.firstElementChild;\\n").concat(",
        "      "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "      "    message.className = \\"\\";\\n").concat(",
        "      "    message.style = \\"text-align: left; inline-size: 430px; overflow-wrap: break-word;\\";\\n").concat(",
        "      "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "      "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "      "  }\\n").concat(",
        "      "})")",
        "  ",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback,",
        "        javax.security.auth.callback.ConfirmationCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                anchor",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script),",
        "            new fr.ConfirmationCallback(",
        "                fr.ConfirmationCallback.INFORMATION,",
        "                choices,",
        "                defaultChoice",
        "            )",
        "        ).build()",
        "    }",
        "    else {",
        "      outcome = choices[callbacks.get(2).getSelectedIndex()];",
        "      action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "     /*",
        "      * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "      * ",
        "      * Example:",
        "      * 'xxxxx' produces '28535'",
        "      * 'xxx-xxx' produces '432-521'",
        "      */",
        "    function generateNumericToken(format) {",
        "        return format.replace(/[x]/g, function(c) {",
        "            var r = Math.random()*10|0;",
        "            var v = r;",
        "            return v.toString(10);",
        "        });",
        "    }",
        "}());",
        "",
        "/*",
        "Locale: en_US",
        "authInstant: 2021-09-25T17:28:38Z",
        "Organization: o=alpha,ou=services,ou=am-config",
        "mail: volker@scheuber.name",
        "Principals: volker@scheuber.name",
        "UserProfile: Ignore",
        "CharSet: UTF-8",
        "FullLoginURL: /am/UI/Login?code=4%2F0AX4XfWjiEfbrfIstsFUKoaibPCQmTbuPonLfuhpYhjfj-N5QEe9u2P5Os9wNadGaPsQVBA&scope=email+profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+openid&realm=%2Falpha&state=fykprtfmeclrgwszmomvqxnlirrehcs&hd=scheuber.name&prompt=none&authuser=2",
        "clientType: genericHTML",
        "goto: /am/XUI/?realm=/alpha&authIndexType=service&authIndexValue=SessionInfo&ForceAuth=true#/",
        "AMCtxId: d3188938-d07e-4134-95db-f1cc97fc6c40-503275",
        "loginURL: /am/UI/Login",
        "sn: Scheuber",
        "amlbcookie: 01",
        "HostName: 99.72.28.182",
        "UserToken: volker@scheuber.name",
        "givenName: Volker",
        "successURL: /am/XUI/?realm=/alpha&authIndexType=service&authIndexValue=SessionInfo&ForceAuth=true#/",
        "Service: Router",
        "Host: 99.72.28.182",
        "AuthLevel: 0",
        "idp: google",
        "UserId: volker@scheuber.name",
        "sun.am.UniversalIdentifier: id=volker@scheuber.name,ou=user,o=alpha,ou=services,ou=am-config",
        "OidcSid: ACuTQIObj0tajPYhLOjMlWc2urM",
        "Principal: id=volker@scheuber.name,ou=user,o=alpha,ou=services,ou=am-config",
        " */",
      ],
    },
    "3814d347-a2f2-4be9-a810-ab41a1e374bd": {
      "_id": "3814d347-a2f2-4be9-a810-ab41a1e374bd",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Hide buttons on the journey page.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Remove Button - imported (1)",
      "script": [
        "/* Remove Button",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Hide buttons on the journey page.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "    var script = "Array.prototype.slice.call(document.getElementsByTagName('button')).forEach(function (e) {e.style.display = 'none'})"",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    var message = " "",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                message",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "}());",
      ],
    },
    "38f698de-fe11-43d2-8480-44e1312d121d": {
      "_id": "38f698de-fe11-43d2-8480-44e1312d121d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "FRAAS-7955 Both States",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FRAAS-7955 Both States",
      "script": [
        "outcome = "true";",
        "",
        "setSharedObjectAttribute("userName", "FRAAS-7955");",
        "setSharedObjectAttribute("givenName", "First-shared");",
        "setSharedObjectAttribute("sn", "Last-shared");",
        "setSharedObjectAttribute("mail", "first.last-shared@company.com");",
        "",
        "setTransientObjectAttribute("userName", "FRAAS-7955");",
        "setTransientObjectAttribute("givenName", "First-transient");",
        "setTransientObjectAttribute("sn", "Last-transient");",
        "setTransientObjectAttribute("mail", "first.last-transient@company.com");",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "       var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
        "",
        "/*",
        " * Store attributes in transient state for use with the Create/Patch Object nodes.",
        " */",
        "function setTransientObjectAttribute(name, value) {",
        "    var transientStorage = transientState.get("objectAttributes");",
        "    if (transientStorage && value) {",
        "          if (transientStorage.put) {",
        "            transientStorage.put(name, value);",
        "        }",
        "          else {",
        "            transientStorage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "    transientState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "39c08084-1238-43e8-857f-2e11005eac49": {
      "_id": "39c08084-1238-43e8-857f-2e11005eac49",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Default alpha realm script for OAuth2 Access Token Modification",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha OAuth2 Access Token Modification Script",
      "script": [
        "/*",
        " * Copyright 2019-2021 ForgeRock AS. All Rights Reserved.",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script lets you modify information associated with an OAuth2 access token",
        " * with methods provided by the AccessToken (1) interface.",
        " * The changes made to OAuth2 access tokens will directly impact the size of the CTS tokens,",
        " * and, similarly, the size of the JWTs if client-based OAuth2 tokens are utilized.",
        " * When adding/updating fields make sure that the token size remains within client/user-agent limits.",
        " *",
        " * Defined variables:",
        " * accessToken - AccessToken (1).",
        " *               The access token to be updated.",
        " *               Mutable object, all changes to the access token will be reflected.",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *",
        " * Return - no value is expected, changes shall be made to the accessToken parameter directly.",
        " *",
        " * Class reference:",
        " * (1) AccessToken - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/AccessToken.html.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " */",
        "",
        "/* EXAMPLE",
        "(function () {",
        "    var frJava = JavaImporter(",
        "        org.forgerock.http.protocol.Request,",
        "        org.forgerock.http.protocol.Response",
        "    );",
        "",
        "    // Always includes this field in the token.",
        "    accessToken.setField('key1', 'value1');",
        "",
        "    // Receives and adds to the access token additional values by performing a REST call to an external service.",
        "    // WARNING: Below, you will find a reference to a third-party site, which is provided only as an example.",
        "    var uri = 'https://jsonplaceholder.typicode.com/posts';",
        "",
        "    try {",
        "        var request = new frJava.Request();",
        "",
        "        // You can chain methods that return the request object.",
        "        request.setUri(uri)",
        "            .setMethod('POST')",
        "            .setEntity(JSON.stringify({",
        "                updatedFields: {",
        "                    key2: 'value2',",
        "                    key3: 'value3'",
        "                }",
        "            }));",
        "",
        "        // You can call a method when chaining is not possible.",
        "        request.getHeaders().add('Content-Type', 'application/json; charset=UTF-8');",
        "",
        "        // Sends the request and receives the response.",
        "        var response = httpClient.send(request).getOrThrow();",
        "",
        "        // Checks if the response status is as expected.",
        "        if (response.getStatus() === org.forgerock.http.protocol.Status.CREATED) {",
        "            var result = JSON.parse(response.getEntity().getString());",
        "",
        "            // Set multiple token fields at once.",
        "            accessToken.setFields(result.updatedFields);",
        "        } else {",
        "            logger.error('Unable to obtain access token modifications. Status: ' + response.getStatus() + '. Content: ' + response.getEntity().getString());",
        "        }",
        "    } catch (e) {",
        "        logger.error('The request processing was interrupted. ' + e);",
        "",
        "        // The access token request fails with the HTTP 500 error in this case.",
        "        throw ('Unable to obtain response from: ' + uri);",
        "    }",
        "",
        "    // Adds new fields containing identity attribute values to the access token.",
        "    accessToken.setField('mail', identity.getAttribute('mail'));",
        "    accessToken.setField('phone', identity.getAttribute('telephoneNumber').toArray()[0]);",
        "",
        "    // Adds new fields containing the session property values.",
        "    // NOTE: session may not be available for non-interactive authorization grants.",
        "    if (session) {",
        "        try {",
        "            accessToken.setField('ipAddress', session.getProperty('Host'));",
        "        } catch (e) {",
        "            logger.error('Unable to retrieve session property value. ' + e);",
        "        }",
        "    }",
        "",
        "    // Removes a native field from the token entry, that was set by AM.",
        "    // WARNING: removing native fields from the token may result in loss of functionality.",
        "    // accessToken.removeTokenName()",
        "",
        "    // No return value is expected. Let it be undefined.",
        "}());",
        "*/",
      ],
    },
    "3cb43516-ae69-433a-8787-501d45db14e9": {
      "_id": "3cb43516-ae69-433a-8787-501d45db14e9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display sharedState, transientState, and headers.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "debug",
      "script": [
        "/* debug",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Display sharedState, transientState, and headers.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "var halign = "left";",
        "var message = "<p><b>Shared State</b>:<br/>".concat(",
        "      sharedState.toString()).concat("</p>").concat(",
        "    "<p><b>Transient State</b>:<br/>").concat(",
        "      transientState.toString()).concat("</p>").concat(",
        "    "<p><b>Request Headers</b>:<br/>").concat(",
        "      requestHeaders.toString()).concat("</p>")",
        "var script = "Array.prototype.slice.call(\\n".concat(",
        "  "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "  "function (e) {\\n").concat(",
        "  "  var message = e.firstElementChild;\\n").concat(",
        "  "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "  "    message.className = \\"text-left\\";\\n").concat(",
        "  "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "  "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "  "  }\\n").concat(",
        "  "})")",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "if (message.length && callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            anchor",
        "        ),",
        "        new fr.ScriptTextOutputCallback(script)",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo("true").build();",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "    return format.replace(/[x]/g, function(c) {",
        "        var r = Math.random()*10|0;",
        "        var v = r;",
        "        return v.toString(10);",
        "    });",
        "}",
      ],
    },
    "3d97c436-42c0-4dd0-a571-ea6f34f752b3": {
      "_id": "3d97c436-42c0-4dd0-a571-ea6f34f752b3",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Itsme",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Itsme Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "import org.forgerock.json.JsonValue",
        "",
        "JsonValue managedUser = json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("username", rawProfile.email),",
        "        field("email", rawProfile.email)))",
        "return managedUser",
      ],
    },
    "403cf226-6051-4368-8b72-9ba14f9a5140": {
      "_id": "403cf226-6051-4368-8b72-9ba14f9a5140",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from VKontakte",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "VKontakte Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.first_name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.photo_50),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "41c24257-d7fc-4654-8b46-c2666dc5b56d": {
      "_id": "41c24257-d7fc-4654-8b46-c2666dc5b56d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "set per level shared state variable",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "level",
      "script": [
        "(function () {",
        "  outcome = 'true';",
        "  var level = nodeState.get('level').asInteger();",
        "  sharedState.put('level' + level + 'Value', 'Level ' + level + ': This is a longer string value set at each level of the nested journeys. It contains an indicator in which level it was set.');",
        "}());",
      ],
    },
    "424da748-82cc-4b54-be6f-82bd64d82a74": {
      "_id": "424da748-82cc-4b54-be6f-82bd64d82a74",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Yahoo",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Yahoo Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("photoUrl", rawProfile.picture),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email),",
        "        field("locale", rawProfile.locale)))",
      ],
    },
    "452d73ee-c6f3-4f4e-9dae-e75bb3886cbd": {
      "_id": "452d73ee-c6f3-4f4e-9dae-e75bb3886cbd",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Copy sharedState to transientState",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Copy to transientState",
      "script": [
        "outcome = "true";",
        "if (sharedState.get("objectAttributes")) {",
        "    transientState.put("objectAttributes", sharedState.get("objectAttributes"))",
        "}",
        "if (sharedState.get("username")) {",
        "    transientState.put("username", sharedState.get("username"))",
        "}",
        "if (sharedState.get("_id")) {",
        "    transientState.put("_id", sharedState.get("_id"))",
        "}",
      ],
    },
    "472534ec-a25f-468d-a606-3fb1935190df": {
      "_id": "472534ec-a25f-468d-a606-3fb1935190df",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from WeChat",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "WeChat Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.openid),",
        "        field("displayName", rawProfile.nickname),",
        "        field("photoUrl", rawProfile.headimgurl),",
        "        field("username", rawProfile.nickname)))",
      ],
    },
    "484e6246-dbc6-4288-97e6-54e55431402e": {
      "_id": "484e6246-dbc6-4288-97e6-54e55431402e",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Apple",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Apple Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " *",
        " * In some common default configurations, the following keys are required to be not empty:",
        " * username, givenName, familyName, email.",
        " *",
        " * From RFC4517: A value of the Directory String syntax is a string of one or more",
        " * arbitrary characters from the Universal Character Set (UCS).",
        " * A zero-length character string is not permitted.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "String email = "change@me.com"",
        "String subjectId = rawProfile.sub",
        "String firstName = " "",
        "String lastName = " "",
        "String username = subjectId",
        "String name",
        "",
        "if (rawProfile.isDefined("email") && rawProfile.email.isNotNull()){ // User can elect to not share their email",
        "    email = rawProfile.email.asString()",
        "    username = email",
        "}",
        "if (rawProfile.isDefined("name") && rawProfile.name.isNotNull()) {",
        "    if (rawProfile.name.isDefined("firstName") && rawProfile.name.firstName.isNotNull()) {",
        "        firstName = rawProfile.name.firstName.asString()",
        "    }",
        "    if (rawProfile.name.isDefined("lastName") && rawProfile.name.lastName.isNotNull()) {",
        "        lastName = rawProfile.name.lastName.asString()",
        "    }",
        "}",
        "",
        "name = (firstName?.trim() ? firstName : "") + (lastName?.trim() ? ((firstName?.trim() ? " " : "") + lastName) : "")",
        "name =  (!name?.trim()) ? " " : name",
        "",
        "return json(object(",
        "        field("id", subjectId),",
        "        field("displayName", name),",
        "        field("email", email),",
        "        field("givenName", firstName),",
        "        field("familyName", lastName),",
        "        field("username", username)))",
      ],
    },
    "4855aac0-1efd-49c0-a153-3b9aadc911a6": {
      "_id": "4855aac0-1efd-49c0-a153-3b9aadc911a6",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Populate Username From Email",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Populate Username From Email",
      "script": [
        "outcome = "true";",
        "",
        "sharedState.put("username", getSharedObjectAttribute("mail"))",
        "setSharedObjectAttribute("userName", getSharedObjectAttribute("mail"))",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "       var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
        "",
        "/*",
        " * Read attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function getSharedObjectAttribute(name) {",
        "    var storage = sharedState.get("objectAttributes");",
        "    if (storage) {",
        "          if (storage.get) {",
        "            return sharedState.get("objectAttributes").get(name);",
        "        }",
        "          else {",
        "              return storage.name;",
        "        }",
        "    }",
        "    return null;",
        "}",
      ],
    },
    "48f17202-039f-4d40-b7fc-4ce380f1b929": {
      "_id": "48f17202-039f-4d40-b7fc-4ce380f1b929",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Collect all the configuration items required for the SAML2 Node to function properly.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect SAML2 Node Config",
      "script": [
        "/* Collect SAML2 Node Config",
        " * ",
        " * Collect all the configuration items required for the SAML2 Node to function properly.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "      var config = {",
        "        "metaAlias": "/iSPAzure",",
        "        "allowCreate": false,",
        "        "sloEnabled": false,",
        "        "authnContextClassRef": [],",
        "        "authnContextDeclRef": [],",
        "        "authComparison": "EXACT",",
        "        "nameIdFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",",
        "        "requestBinding": "HTTP_REDIRECT",",
        "        "binding": "HTTP_POST",",
        "        "forceAuthn": false,",
        "        "idpEntityId": "https://sts.windows.net/711ffa9c-5972-4713-ace3-688c9732614a/",",
        "        "isPassive": false,",
        "        "sloRelayState": """,
        "    };",
        "      var script = "";",
        "    script += "Array.prototype.slice.call(";",
        "    script += "    document.getElementsByTagName('input')";",
        "    script += ").forEach(";",
        "    script += "    function (input,i) {";",
        "    script += "        console.log('input '+i);"",
        "    script += "        var config = JSON.parse('"+JSON.stringify(config)+"');";",
        "    script += "        var keys = Object.keys(config);";",
        "    script += "        if (input.type === 'text') {";",
        "    script += "            input.setAttribute('value', config[keys[i]]);";",
        "    script += "            input.dispatchEvent(new KeyboardEvent( 'input' , {'key':'Enter'} ));";",
        "    script += "        }";",
        "    script += "    }";",
        "    script += ");";",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          javax.security.auth.callback.NameCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.NameCallback("metaAlias"),",
        "            new fr.NameCallback("allowCreate"),",
        "            new fr.NameCallback("sloEnabled"),",
        "            new fr.NameCallback("authnContextClassRef"),",
        "            new fr.NameCallback("authnContextDeclRef"),",
        "            new fr.NameCallback("authComparison"),",
        "            new fr.NameCallback("nameIdFormat"),",
        "            new fr.NameCallback("requestBinding"),",
        "            new fr.NameCallback("binding"),",
        "            new fr.NameCallback("forceAuthn"),",
        "            new fr.NameCallback("idpEntityId"),",
        "            new fr.NameCallback("isPassive"),",
        "            new fr.NameCallback("sloRelayState"),",
        "              new fr.ScriptTextOutputCallback(script)",
        "        ).build();",
        "    }",
        "    else {",
        "          config[callbacks.get(0).getPrompt()] = callbacks.get(0).getName();",
        "          config[callbacks.get(1).getPrompt()] = (callbacks.get(1).getName() === 'true');",
        "          config[callbacks.get(2).getPrompt()] = (callbacks.get(2).getName() === 'true');",
        "          config[callbacks.get(3).getPrompt()] = [callbacks.get(3).getName()];",
        "          config[callbacks.get(4).getPrompt()] = [callbacks.get(4).getName()];",
        "          config[callbacks.get(5).getPrompt()] = callbacks.get(5).getName();",
        "          config[callbacks.get(6).getPrompt()] = callbacks.get(6).getName();",
        "          config[callbacks.get(7).getPrompt()] = callbacks.get(7).getName();",
        "          config[callbacks.get(8).getPrompt()] = callbacks.get(8).getName();",
        "          config[callbacks.get(9).getPrompt()] = (callbacks.get(9).getName() === 'true');",
        "          config[callbacks.get(10).getPrompt()] = callbacks.get(10).getName();",
        "          config[callbacks.get(11).getPrompt()] = (callbacks.get(11).getName() === 'true');",
        "          config[callbacks.get(12).getPrompt()] = callbacks.get(12).getName();",
        "          nodeState.putShared("nodeConfig", config);",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "4a9aefc4-be0e-4625-95c3-ee8f354bce35": {
      "_id": "4a9aefc4-be0e-4625-95c3-ee8f354bce35",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_ClearCurrentYear",
      "script": [
        "if (sharedState.containsKey('objectAttributes')) {",
        "  sharedState.get('objectAttributes').remove('currentYear');",
        "}",
        "",
        "outcome = 'True';",
        "",
      ],
    },
    "4accb4d0-56ec-4a28-a769-5275dbac3147": {
      "_id": "4accb4d0-56ec-4a28-a769-5275dbac3147",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_PasswordFixStart",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        "This is a workaround that fixes an issue with password policy.",
        "",
        "The Platform Password node attempts to validate a password by calling IDM's validateProperty action, and it uses",
        "sharedState.objectAttributes as the \`object\` property of that request payload.  If the request is missing required properties",
        "or contains properties not in the object's schema, DS will error and IDM will swallow that error, returning an empty ",
        "list of failed policies instead.",
        "",
        "This workaround provides fake values for required properties. It also ensures first/last name is in objectAttributes so the",
        ""can't contain" policy can be evaluated. This workaround is cleaned up by Admin_PasswordFixEnd.js.",
        "*/",
        "",
        "// Capture existing object attributes so we can restore them later",
        "if (sharedState.containsKey('objectAttributes')) {",
        "  sharedState.put('originalObjectAttributes', sharedState.get('objectAttributes'));",
        "}",
        "",
        "// Define the object to use for policy evaluation",
        "var policyObject = {",
        "  givenName: '',",
        "  sn: '',",
        "  groups: ['fake'],",
        "  inviteDate: 'fake'",
        "};",
        "",
        "// If we've loaded the admin object, add first/last name to support",
        "// evaluation of the full policy",
        "if (sharedState.containsKey('adminObject')) {",
        "  var adminObject = sharedState.get('adminObject');",
        "  policyObject.givenName = adminObject.get('givenName');",
        "  policyObject.sn = adminObject.get('sn');",
        "}",
        "",
        "// Replace objectAttributes with our policy object",
        "sharedState.put('objectAttributes', policyObject);",
        "",
        "outcome = 'True';",
        "",
      ],
    },
    "4c7bb7bb-c5d6-47ac-92dc-256fb8121fa9": {
      "_id": "4c7bb7bb-c5d6-47ac-92dc-256fb8121fa9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_MfaRequiredCheck",
      "script": [
        "if ("false" == "true") {",
        "  outcome = "Required";",
        "} else {",
        "  outcome = "Optional";",
        "}",
      ],
    },
    "4ee5b182-1b09-45cc-97a9-0e609f0a2915": {
      "_id": "4ee5b182-1b09-45cc-97a9-0e609f0a2915",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Resend OTP Option",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Resend OTP Option",
      "script": [
        "/* CResend OTP Option",
        " *",
        " * Author: jon.knight@forgerock.com, volker.scheuber@forgerock.com",
        " * ",
        " * Collect OTP and validate the collected OTP. Also offer a resend option.",
        " * Return "true" if collected OTP is valid, "false" if collected OTP is invalid, ",
        " * and resend if the user selected the resend button.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " * - resend",
        " */",
        "(function () {",
        "  // how long until the "resend" button becomes enabled.",
        "  DELAY=20;",
        "  ",
        "  // how long (in seconds) should the OTP be accepted as valid",
        "  OTP_TTL = 30;",
        "",
        "  var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api.Action,",
        "      javax.security.auth.callback.NameCallback,",
        "      com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "  )",
        "",
        "  function createScript() {",
        "      return String(" \\n\\",
        "          var COUNT = " + DELAY + "; \\n\\",
        "          function go(obs) { \\n\\",
        "              const p = document.querySelectorAll('input[data-vv-as=\\"One Time Passcode\\"]')[0]; \\n\\",
        "              if (p) { \\n\\",
        "                  var b = document.createElement('button'); \\n\\",
        "                  b.id = 'resendButton'; \\n\\",
        "                  b.classList.add(\\"btn\\", \\"mt-3\\", \\"btn-secondary\\", \\"btn-sm\\"); \\n\\",
        "                  b.onclick = function() { p.value='___RESEND___'; p.dispatchEvent(new Event('input')); }; \\n\\",
        "                  b.innerHTML = 'Resend Code ... ' + COUNT + 's'; \\n\\",
        "                  b.disabled = true; \\n\\",
        "                  p.parentNode.insertBefore(b, p.nextSibling); \\n\\",
        "                  var t = setInterval(function() { \\n\\",
        "                      if (COUNT == 1) { \\n\\",
        "                          clearInterval(t); \\n\\",
        "                          b.disabled = false; \\n\\",
        "                          b.innerHTML = 'Resend Code'; \\n\\",
        "                      } else { \\n\\",
        "                          COUNT--; \\n\\",
        "                          b.innerHTML = 'Resend Code ... ' + COUNT + 's'; \\n\\",
        "                      } \\n\\",
        "                  }, 1000 ); \\n\\",
        "                  if (obs) obs.disconnect(); \\n\\",
        "                  return; \\n\\",
        "              } \\n\\",
        "          } \\n\\",
        "          if (document.querySelectorAll('input[data-vv-as=\\"One Time Passcode\\"]')[0]) go(); \\n\\",
        "          else { \\n\\",
        "              const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\n\\",
        "              observer.observe(document, { childList: true, subtree: true }); \\n\\",
        "          } \\n\\",
        "      ");",
        "  }",
        "",
        "  if (callbacks.isEmpty()) {",
        "      action = fr.Action.send(",
        "          new fr.ScriptTextOutputCallback(createScript()),",
        "          new fr.NameCallback("One Time Passcode")",
        "      ).build()",
        "  } else {",
        "      var otpTimestamp = Math.floor(new java.util.Date().getTime() / 1000);",
        "      var otp = callbacks.get(1).getName();",
        "      if (otp === "___RESEND___") {",
        "          action = fr.Action.goTo("resend").build();",
        "      } else {",
        "          var sentOtp = sharedState.get("oneTimePassword");",
        "          var sentOtpTimestamp = sharedState.get("oneTimePasswordTimestamp");",
        "          if (sentOtp == otp && otpTimestamp - OTP_TTL >= sentOtpTimestamp) {",
        "              action = fr.Action.goTo("true").build();",
        "            }",
        "          else {",
        "            action = fr.Action.goTo("false").build();",
        "          }",
        "      }",
        "  }",
        "}());",
      ],
    },
    "4f1273be-9c52-4879-bbe9-9a47068aeed9": {
      "_id": "4f1273be-9c52-4879-bbe9-9a47068aeed9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Unverified caller message",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Unverified Caller Message",
      "script": [
        "/* Twilio IVR: Unverified Caller Message",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "outcome = "true";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// Build out the full message",
        "var message = "That doesn't match our records. Let us try this another way.";",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextOutputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var output = new TextOutputCallback(TextOutputCallback.INFORMATION, message);",
        "        action = Action.send(output).build();",
        "      } ",
        "      else {",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
      ],
    },
    "50cde102-d4b6-44c4-9ba7-8564af05ae08": {
      "_id": "50cde102-d4b6-44c4-9ba7-8564af05ae08",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Select and apply theme from query param in the request URL.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Select Theme from URL",
      "script": [
        "/* Select Theme from URL",
        " * ",
        " * Select and apply theme from query param in the request URL.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      outcome = "true";",
        "      var theme = "";",
        "      if (requestParameters.get("themeId")) {",
        "          theme = requestParameters.get("themeId").get(0);",
        "    }",
        "",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        org.forgerock.openam.authentication.callbacks.PollingWaitCallback",
        "    )",
        "    if (theme && callbacks.isEmpty()) {",
        "        var stage = "themeId="+theme;",
        "        action = fr.Action.send(",
        "              new fr.PollingWaitCallback("100", "Please wait ...")",
        "        ).withStage(stage).build();",
        "    } else {",
        "          action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "53c50dbd-5331-4739-bea1-4c5e9bf553f2": {
      "_id": "53c50dbd-5331-4739-bea1-4c5e9bf553f2",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Welcome message",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Welcome Message",
      "script": [
        "/* Twilio IVR: Welcome Message",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "logger.warning("Twilio IVR: Welcome Message: start");",
        "outcome = "true";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// Build out the full message",
        "var message = "Thank you for calling ForgeRock Identity Cloud!";",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextOutputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var output = new TextOutputCallback(TextOutputCallback.INFORMATION, message);",
        "        action = Action.send(output).build();",
        "      } ",
        "      else {",
        "        logger.warning("Twilio IVR: Welcome Message: finish [outcome=".concat(outcome).concat("]"));",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
      ],
    },
    "5561a45f-bf00-4ec5-bab4-f069bac9a38b": {
      "_id": "5561a45f-bf00-4ec5-bab4-f069bac9a38b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Copy an OTP generated by the "HOTP Generator" node to the IDM profile shared state so it can be patched to the user profile.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "CopyOTPToObjectAttributes",
      "script": [
        "/* CopyOTPToObjectAttributes",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Copy an OTP generated by the "HOTP Generator" node to the IDM profile ",
        " * shared state so it can be patched to the user profile.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "if (sharedState.get("objectAttributes")) {",
        "    sharedState.get("objectAttributes").put("description", sharedState.get("oneTimePassword"))",
        "}",
        "else {",
        "    sharedState.put("objectAttributes", {description: sharedState.get("oneTimePassword")});",
        "}",
        "outcome = "true";",
      ],
    },
    "57807349-630f-496a-bccb-ea1011b8e945": {
      "_id": "57807349-630f-496a-bccb-ea1011b8e945",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Extract username, password, and OTP from request headers and put them in shared state for validation.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "MobileOTP: Extract Username, Password, OTP",
      "script": [
        "logger.warning("MobileOTP: Extract Username, Password, OTP: start");",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " */",
        "var USERNAME_HEADER_NAME = "X-OpenAM-Username";",
        "var PASSWORD_HEADER_NAME = "X-OpenAM-Password";",
        "var OTP_HEADER_NAME = "X-OpenAM-MobileOTP";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "outcome = "false";",
        "",
        "var username = getHeader(USERNAME_HEADER_NAME) || null;",
        "var password = getHeader(PASSWORD_HEADER_NAME) || null;",
        "var mobileOTP = getHeader(OTP_HEADER_NAME) || null;",
        "",
        "if (username && password && mobileOTP) {",
        "      sharedState.put("username", username);",
        "      transientState.put("password", password);",
        "      transientState.put("mobileOTP", mobileOTP);",
        "    outcome = "true";",
        "}",
        "",
        "logger.warning("MobileOTP: Extract Username, Password, OTP: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Returns the value of the requested header",
        " */",
        "function getHeader(headerName) {",
        "      if (requestHeaders.get(headerName) && requestHeaders.get(headerName).get(0)) {",
        "        return requestHeaders.get(headerName).get(0).toString();",
        "    }",
        "      return null;",
        "}",
      ],
    },
    "58258c2d-46f3-4811-85c4-ea1476dd9cf4": {
      "_id": "58258c2d-46f3-4811-85c4-ea1476dd9cf4",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Service Account - Cluster Internal Requests Only",
      "script": [
        "",
        "try {",
        "  var clientIpAddresses = requestHeaders.get(new java.lang.String('x-forwarded-for'));",
        "  if (!clientIpAddresses) {",
        "    logger.message('No forwarded header; internal cluster request');",
        "    outcome = 'True'",
        "  } else {",
        "    logger.message('Forwarded header {}', clientIpAddresses);",
        "    outcome = 'False';",
        "  }",
        "} catch (e) {",
        "  logger.error('Service Account - Cluster Internal Requests Only - failed deducing header');",
        "  logger.error(e);",
        "  outcome = 'Error';",
        "}",
      ],
    },
    "58c824ae-84ed-4724-82cd-db128fc3f6c": {
      "_id": "58c824ae-84ed-4724-82cd-db128fc3f6c",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Converts a normalized social profile into a managed user",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Normalized Profile to Managed User",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "import org.forgerock.json.JsonValue",
        "",
        "JsonValue managedUser = json(object(",
        "        field("givenName", normalizedProfile.givenName),",
        "        field("sn", normalizedProfile.familyName),",
        "        field("mail", normalizedProfile.email),",
        "        field("userName", normalizedProfile.username)))",
        "",
        "if (normalizedProfile.postalAddress.isNotNull()) managedUser.put("postalAddress", normalizedProfile.postalAddress)",
        "if (normalizedProfile.addressLocality.isNotNull()) managedUser.put("city", normalizedProfile.addressLocality)",
        "if (normalizedProfile.addressRegion.isNotNull()) managedUser.put("stateProvince", normalizedProfile.addressRegion)",
        "if (normalizedProfile.postalCode.isNotNull()) managedUser.put("postalCode", normalizedProfile.postalCode)",
        "if (normalizedProfile.country.isNotNull()) managedUser.put("country", normalizedProfile.country)",
        "if (normalizedProfile.phone.isNotNull()) managedUser.put("telephoneNumber", normalizedProfile.phone)",
        "",
        "// if the givenName and familyName is null or empty",
        "// then add a boolean flag to the shared state to indicate names are not present",
        "// this could be used elsewhere",
        "// for eg. this could be used in a scripted decision node to by-pass patching",
        "// the user object with blank values when givenName  and familyName is not present",
        "boolean noGivenName = normalizedProfile.givenName.isNull() || (!normalizedProfile.givenName.asString()?.trim())",
        "boolean noFamilyName = normalizedProfile.familyName.isNull() || (!normalizedProfile.familyName.asString()?.trim())",
        "sharedState.put("nameEmptyOrNull", noGivenName && noFamilyName)",
        "",
        "return managedUser",
        "",
      ],
    },
    "58d29080-4563-480b-89bb-1e7719776a21": {
      "_id": "58d29080-4563-480b-89bb-1e7719776a21",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Google",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Google Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("photoUrl", rawProfile.picture),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email),",
        "        field("locale", rawProfile.locale)))",
      ],
    },
    "5b29c5b7-b161-4a42-a41f-d6c85316b951": {
      "_id": "5b29c5b7-b161-4a42-a41f-d6c85316b951",
      "context": "SAML2_IDP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Adapter Script",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOn",
        " *      - preAuthentication",
        " *      - preSendResponse",
        " *      - preSignResponse",
        " *      - preSendFailureResponse",
        " *",
        " * Please see the javadoc for the interface definition and more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)",
        " *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * request - HttpServletRequest (2)",
        " *     Servlet request object",
        " * response - HttpServletResponse (3)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (4)",
        " *     The original authentication request sent from SP",
        " * reqId - String",
        " *     The id to use for continuation of processing if the adapter redirects",
        " * res - Response (5)",
        " *     The SAML Response",
        " * session - SSOToken (6)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * relayState - String",
        " *     The relayState that will be used in the redirect",
        " * faultCode - String",
        " *     the fault code that will be returned in the SAML response",
        " * faultDetail - String",
        " *     the fault detail that will be returned in the SAML response",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (7):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.",
        " * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/Response.html.",
        " * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 IDP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOn:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preSingleSignOn () {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for preAuthentication:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preAuthentication () {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for preSendResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection happened after processing, false otherwise. Default to false.",
        " */",
        "function preSendResponse () {",
        "    return false;",
        "}",
        "",
        "/*",
        " * Available variables for preSignResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     session",
        " *     relayState",
        " *     res",
        " *     logger",
        " */",
        "function preSignResponse () {",
        "}",
        "",
        "/*",
        " * Available variables for preSendFailureResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     response",
        " *     faultCode",
        " *     faultDetail",
        " *     logger",
        " */",
        "function preSendFailureResponse () {",
        "}",
      ],
    },
    "5b3b2c47-0248-46f4-8a1c-8a495d249037": {
      "_id": "5b3b2c47-0248-46f4-8a1c-8a495d249037",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Save/restore perpetrator",
      "script": [
        "outcome = "true";",
        "if (sharedState.get("perpetrator"))",
        "{",
        "  sharedState.put("username", sharedState.get("perpetrator"));",
        "//  if (sharedState.get("objectAttributes")) {",
        "//    sharedState.remove("objectAttributes");",
        "//  }",
        "  sharedState.put("objectAttributes", {});",
        "}",
        "else",
        "{",
        "  sharedState.put("perpetrator", sharedState.get("username"));",
        "  if (sharedState.get("objectAttributes") && ",
        "      sharedState.get("objectAttributes").get("userName")) {",
        "    sharedState.get("objectAttributes").remove("userName");",
        "  }",
        "}",
      ],
    },
    "5b553f58-16bd-42b7-a782-4a981a66dbd4": {
      "_id": "5b553f58-16bd-42b7-a782-4a981a66dbd4",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Branch based on the IDP setting.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Routed IDP Persist Decision",
      "script": [
        "/* Routed IDP Persist Decision",
        " * ",
        " * Branch based on the IDP setting.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      logger.message("Routed IDP Persist Decision: Start");",
        "      outcome = "false";",
        "      var routedIDP = sharedState.get("routedIDPs").get(0);",
        "      if (routedIDP) {",
        "        outcome = "".concat(routedIDP.get("idpPersist"));",
        "    }",
        "      logger.message("Routed IDP Persist Decision: Done [outcome={}]", outcome);",
        "}());",
      ],
    },
    "5bbdaeff-ddee-44b9-b608-8d413d7d65a6": {
      "_id": "5bbdaeff-ddee-44b9-b608-8d413d7d65a6",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if mode has already been set.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "mode",
      "script": [
        "/* mode",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Collect mode if not already set and set outcome to mode.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - 'shared and level'",
        " * - 'shared only'",
        " * - 'level only'",
        " * - 'none'",
        " */",
        "(function () {",
        "  var mode = nodeState.get('mode');",
        "  if (mode) {",
        "    outcome = mode.asString();",
        "    var level = nodeState.get('level').asInteger() + 1;",
        "    logger.error('mode: mode=' + mode.asString() + ', level=' + level);",
        "    sharedState.put('level', level);",
        "  }",
        "  else {",
        "    var choices = ['shared and level', 'shared only', 'level only', 'none'];",
        "  ",
        "    var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api.Action,",
        "      javax.security.auth.callback.ChoiceCallback",
        "    )",
        "",
        "    if (callbacks.isEmpty()) {",
        "      action = fr.Action.send([",
        "        new fr.ChoiceCallback('Choose test mode', choices, 0, false)",
        "      ]).build();",
        "    } else {",
        "      var choice = parseInt(callbacks.get(0).getSelectedIndexes()[0]);",
        "      nodeState.putShared('mode', choices[choice]);",
        "      nodeState.putShared('level', 0);",
        "      action = fr.Action.goTo(choices[choice]).build();",
        "    }",
        "  }",
        "}());",
      ],
    },
    "5dbd53c6-67ff-4a43-84c3-90c5cf5da35a": {
      "_id": "5dbd53c6-67ff-4a43-84c3-90c5cf5da35a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Return TextOutputCallback indicating the provided OTP was valid.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OTP Valid",
      "script": [
        "/* OTP Valid",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Return TextOutputCallback indicating the provided OTP was valid.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "outcome = "true";",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback",
        ")",
        "if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            "VALID"",
        "        )",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo(outcome).build();",
        "}",
      ],
    },
    "5e68fee3-047d-4fff-8e99-89fb5908f068": {
      "_id": "5e68fee3-047d-4fff-8e99-89fb5908f068",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_ForgotUsernameMailCheck",
      "script": [
        "var fr = new JavaImporter(",
        "  org.forgerock.openam.auth.nodes,",
        "  org.forgerock.guice.core,",
        "  java.util.HashMap",
        ");",
        "",
        "// This confirms the Identify Existing User node was able to find the",
        "// admin, otherwise we remove the mail attribute so no email can be sent",
        "with (fr) {",
        "  try {",
        "",
        "    var objAttrs = sharedState.get('objectAttributes') || new HashMap();",
        "    var username = objAttrs.get('userName');",
        "    outcome = username ? 'Valid' : 'Invalid';",
        "    if (username) {",
        "      outcome = 'Valid';",
        "    } else {",
        "      objAttrs.remove('mail');",
        "      sharedState.put('objectAttributes', objAttrs);",
        "      outcome = 'Invalid';",
        "    }",
        "",
        "    logger.message('Admin_ForgotUsernameMailCheck: ' + outcome);",
        "",
        "  } catch (e) {",
        "",
        "    logger.error('Admin_ForgotUsernameMailCheck: Failed to determine mail validity');",
        "    logger.error(e);",
        "    outcome = 'Error';",
        "",
        "  }",
        "}",
      ],
    },
    "5e854779-6ec1-4c39-aeba-0477e0986646": {
      "_id": "5e854779-6ec1-4c39-aeba-0477e0986646",
      "context": "CONFIG_PROVIDER_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Default global script for Config Provider",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Config Provider",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/**",
        " * The following script is a simplified template for understanding how to build",
        " * up a config Map object with custom values. The Config Provider Node will then",
        " * provide this config Map to the desired node type. It is important that the Map",
        " * you build here is named 'config'.",
        " *",
        " * Defined variables:",
        " *",
        " * nodeState - Node State (1)",
        " *           Always present, this represents the current values stored in the node state.",
        " *",
        " * idRepository - Profile Data (2)",
        " *           Always present, a repository to retrieve user information.",
        " *",
        " * secrets - Credentials and Secrets (3)",
        " *           Always present, an interface to access the Secrets API from a scripting context.",
        " *",
        " * requestHeaders (4) - Map (5)",
        " *           Always present, an object that provides methods for accessing headers in the login request.",
        " *",
        " * logger - Debug Logging (6)",
        " *          Always present, the debug logger instance.",
        " *",
        " * httpClient - HTTP Client (7)",
        " *          Always present, the HTTP client that can be used to make external HTTP requests.",
        " *",
        " * realm - String (primitive).",
        " *          Always present, the name of the realm the user is authenticating to.",
        " *",
        " * existingSession - Map<String, String> (5)",
        " *          Present if the request contains the session cookie, the user's session object. The returned map from",
        " *          SSOToken.getProperties() (8)",
        " *",
        " * requestParameters - Map (5)",
        " *          Always present, the object that contains the authentication request parameters.",
        " *",
        " *",
        " * Outputs:",
        " *",
        " * config - Map (5)",
        " *           Define and fill a Map object named 'config' with custom values, this will define the configuration for the",
        " *           associated node selected in the ConfigProviderNode.",
        " *",
        " * Reference:",
        " * (1) Node State - https://backstage.forgerock.com/docs/idcloud-am/latest/authentication-guide/scripting-api-node.html#scripting-api-node-nodeState",
        " * (2) Profile Data - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-node-id-repo",
        " * (3) Credentials and Secrets - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-authn-secrets",
        " * (4) Request Headers - https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html",
        " * (6) Debug Logging - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " * (7) HTTP Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " * (8) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " */",
        "",
        "config = nodeState.get('nodeConfig').asMap();",
      ],
    },
    "6325cf19-a49b-471e-8d26-7e4df76df0e2": {
      "_id": "6325cf19-a49b-471e-8d26-7e4df76df0e2",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from GitHub",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Okta Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.warning("Okta rawProfile: "+rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.preferred_username)))",
      ],
    },
    "638c865e-d393-4503-a517-535b9c74e010": {
      "_id": "638c865e-d393-4503-a517-535b9c74e010",
      "context": "CONFIG_PROVIDER_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "CP-InnerTreeEvaluator-static-inner1",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "CP-ITE-static-inner1",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/**",
        " * The following script is a simplified template for understanding how to build",
        " * up a config Map object with custom values. The Config Provider Node will then",
        " * provide this config Map to the desired node type. It is important that the Map",
        " * you build here is named 'config'.",
        " *",
        " * Defined variables:",
        " *",
        " * nodeState - Node State (1)",
        " *           Always present, this represents the current values stored in the node state.",
        " *",
        " * idRepository - Profile Data (2)",
        " *           Always present, a repository to retrieve user information.",
        " *",
        " * secrets - Credentials and Secrets (3)",
        " *           Always present, an interface to access the Secrets API from a scripting context.",
        " *",
        " * requestHeaders (4) - Map (5)",
        " *           Always present, an object that provides methods for accessing headers in the login request.",
        " *",
        " * logger - Debug Logging (6)",
        " *          Always present, the debug logger instance.",
        " *",
        " * httpClient - HTTP Client (7)",
        " *          Always present, the HTTP client that can be used to make external HTTP requests.",
        " *",
        " * realm - String (primitive).",
        " *          Always present, the name of the realm the user is authenticating to.",
        " *",
        " * existingSession - Map<String, String> (5)",
        " *          Present if the request contains the session cookie, the user's session object. The returned map from",
        " *          SSOToken.getProperties() (8)",
        " *",
        " * requestParameters - Map (5)",
        " *          Always present, the object that contains the authentication request parameters.",
        " *",
        " *",
        " * Outputs:",
        " *",
        " * config - Map (5)",
        " *           Define and fill a Map object named 'config' with custom values, this will define the configuration for the",
        " *           associated node selected in the ConfigProviderNode.",
        " *",
        " * Reference:",
        " * (1) Node State - https://backstage.forgerock.com/docs/idcloud-am/latest/authentication-guide/scripting-api-node.html#scripting-api-node-nodeState",
        " * (2) Profile Data - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-node-id-repo",
        " * (3) Credentials and Secrets - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-authn-secrets",
        " * (4) Request Headers - https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html",
        " * (6) Debug Logging - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " * (7) HTTP Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " * (8) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " */",
        "",
        "config = {",
        "  tree: 'inner1'",
        "};",
      ],
    },
    "653b70b0-a23d-403a-933b-911371cf84c0": {
      "_id": "653b70b0-a23d-403a-933b-911371cf84c0",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Returns privacy policy collection",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_PrivacyPolicy",
      "script": [
        "var jurisdictions = [",
        "  {",
        "    name: 'Australia',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a92472578'",
        "  },",
        "  {",
        "    name: 'Brazil',",
        "    url: 'https://www.forgerock.com/privacy-policy'",
        "  },",
        "  {",
        "    name: 'California',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a67552843'",
        "  },",
        "  {",
        "    name: 'Canada',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a92472578'",
        "  },",
        "  {",
        "    name: 'European Union',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a28580828'",
        "  },",
        "  {",
        "    name: 'Hong Kong',",
        "    url: 'https://www.forgerock.com/resources/view/109827462/overview/identity-cloud-privacy.pdf'",
        "  },",
        "  {",
        "    name: 'Indonesia',",
        "    url: 'https://www.forgerock.com/resources/view/109827462/overview/identity-cloud-privacy.pdf'",
        "  },",
        "  {",
        "    name: 'New Zealand',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a92472578'",
        "  },",
        "  {",
        "    name: 'Singapore',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a92472578'",
        "  },",
        "  {",
        "    name: 'United Kingdom',",
        "    url: 'https://backstage.forgerock.com/knowledge/identity-cloud/article/a28580828'",
        "  },",
        "  {",
        "    name: 'United States',",
        "    url: 'https://www.forgerock.com/privacy-policy'",
        "  },",
        "  {",
        "    name: 'Rest of the World',",
        "    url: 'https://www.forgerock.com/privacy-policy'",
        "  }",
        "];",
        "",
        "var token = generateNumericToken('xxx');",
        "var inputId = 'jurisdiction-input-'.concat(token);",
        "var selectId = 'jurisdiction-select-'.concat(token);",
        "",
        "// Build the header and instructions",
        "var message = "<h2 class='h2'>Accept Privacy Policy</h2><div style='margin-bottom:1em'>Select your region of residence to review the applicable privacy policy.</div>";",
        "",
        "// Build the jurisdiction dropdown",
        "var dropdown = "<select id='".concat(selectId).concat("' class='custom-select' onchange='document._onJurisdictionChange()'><option value=''>Region of residence</option>");",
        "for (var i = 0; i < jurisdictions.length; i++) {",
        "  var j = jurisdictions[i];",
        "  dropdown = dropdown.concat("<option value='").concat(j.name).concat("' data-url='").concat(j.url).concat("'>").concat(j.name).concat("</option>");",
        "}",
        "dropdown = dropdown.concat("</select>");",
        "",
        "// Build the confirmation checkbox with policy link",
        "var confirm = "<div id='confirm-wrapper' class='custom-control custom-checkbox' style='padding:1rem;visibility:hidden'>".concat(",
        "  "<input id='confirm-check' type='checkbox' class='custom-control-input' onchange='document._setNextButton()'>").concat(",
        "  "<label class='custom-control-label' for='confirm-check'>").concat(",
        "  "I agree to ForgeRock's <a id='policy-link' target=_blank href='" + jurisdictions[0].url + "'>Privacy Policy</a>").concat(",
        "  "</label>").concat(",
        ""</div>");",
        "",
        "var html = message + dropdown + confirm;",
        "",
        "var script =",
        "  'document._onJurisdictionChange = function() {'.concat(",
        "  '  var jurisdiction = getJurisdiction();').concat(",
        "  '  console.log(jurisdiction);').concat(",
        "  '  if (jurisdiction) {').concat(",
        "  '    setPolicyLink(jurisdiction.url);').concat(",
        "  '    setJurisdiction(jurisdiction.name);').concat(",
        "  '    setConfirmVisibility(true);').concat(",
        "  '  } else {').concat(",
        "  '    setJurisdiction("");').concat(",
        "  '    setConfirmVisibility(false);').concat(",
        "  '  }').concat(",
        "  '  document._setNextButton();').concat(",
        "  '};').concat(",
        "    ",
        "  'document._setNextButton = function() {').concat(",
        "  '  var jurisdiction = getJurisdiction();').concat(",
        "  '  var cb = getCheckbox();').concat(",
        "  '  loginHelpers.disableNextButton(!jurisdiction || !cb.checked);').concat(",
        "  '};').concat(",
        "    ",
        "  'var getJurisdiction = function() {').concat(",
        "  '  var sel = document.getElementById("').concat(selectId).concat('");').concat(",
        "  '  var opt = sel.options[sel.selectedIndex];').concat(",
        "  '  return opt.value ? { name: opt.value, url: opt.getAttribute("data-url") } : null;').concat(",
        "  '};').concat(",
        "    ",
        "  'var getCheckbox = function() {').concat(",
        "  '  return document.getElementById("confirm-check");').concat(",
        "  '};').concat(",
        "    ",
        "  'var setConfirmVisibility = function(show) {').concat(",
        "  '  var el = document.getElementById("confirm-wrapper");').concat(",
        "  '  el.style.visibility = show ? "visible" : "hidden";').concat(",
        "  '};').concat(",
        "    ",
        "  'var setPolicyLink = function(url) {').concat(",
        "  '  document.getElementById("policy-link").setAttribute("href", url);').concat(",
        "  '};').concat(",
        "",
        "  'var setJurisdiction = function(name) {').concat(",
        "  '  loginHelpers.setHiddenCallback("').concat(inputId).concat('", name);').concat(",
        "  '};').concat(",
        "    ",
        "  'var isPageReady = function() {').concat(",
        "  '  return document.getElementById("callback_0") != null;').concat(",
        "  '};').concat(",
        "    ",
        "  'var setupPage = function() {').concat(",
        "  '  if (!isPageReady()) {').concat(",
        "  '    return setTimeout(setupPage, 100);').concat(",
        "  '  }').concat(",
        "  '  loginHelpers.disableNextButton(true);').concat(",
        "  '  var container = document.getElementById("callback_0");').concat(",
        "  '  container.insertAdjacentHTML("beforeend", "').concat(html).concat('");').concat(",
        "  '};').concat(",
        "    ",
        "  'setupPage();');",
        "",
        "function isValidJurisdiction(name) {",
        "  for (var i = 0; i < jurisdictions.length; i++) {",
        "    if (jurisdictions[i].name == name) {",
        "      return true;",
        "    }",
        "  }",
        "  return false;",
        "}",
        "",
        "var fr = JavaImporter(",
        "  org.forgerock.openam.auth.node.api.Action,",
        "  com.sun.identity.authentication.callbacks.HiddenValueCallback,",
        "  com.sun.identity.authentication.callbacks.ScriptTextOutputCallback,",
        "  java.util.HashMap",
        ")",
        "",
        "with (fr) {",
        "  if (callbacks.isEmpty() || !isValidJurisdiction(callbacks.get(0).getValue())) {",
        "    action = Action.send(",
        "      new HiddenValueCallback(inputId, ''),",
        "      new ScriptTextOutputCallback(script)",
        "    ).build();",
        "  } else {",
        "    var OBJ_ATTRS = 'objectAttributes';",
        "    var attrs = sharedState.containsKey(OBJ_ATTRS) ? sharedState.get(OBJ_ATTRS) : new HashMap();",
        "    attrs.put('jurisdiction', callbacks.get(0).getValue());",
        "    sharedState.put(OBJ_ATTRS, attrs);",
        "    action = Action.goTo('True').build();",
        "  }",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "  return format.replace(/[x]/g, function(c) {",
        "    var r = Math.random()*10|0;",
        "    var v = r;",
        "    return v.toString(10);",
        "  });",
        "}",
      ],
    },
    "68d5a8e7-fcc9-4215-9e63-a01afe8fa849": {
      "_id": "68d5a8e7-fcc9-4215-9e63-a01afe8fa849",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Perform IDP lookup based on email domain. Set users' external IDP in shared state or continue to local authentication.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "IDP Lookup",
      "script": [
        "/* IDP Lookup",
        " * ",
        " * Perform IDP lookup based on email domain. Set users' external IDP in shared state or continue to local authentication.",
        " * ",
        " * This script requires parametrization. Make sure you carefully review the configuration parameters.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - one",
        " * - multiple",
        " * - none",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    logger.message("IDP Lookup: start");",
        "      outcome = "none";",
        "      var username = sharedState.get("username");",
        "      var domain = username.substr(username.lastIndexOf("@")+1);",
        "      var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "",
        "      /* Begin Configuration */",
        "  ",
        "    // long-lived token",
        "    var IDM_API_TOKEN = systemEnv.getProperty("esv.admin.token");",
        "  ",
        "    // IDM API Configuration",
        "    var IDM_API_URI = referer.origin + "/openidm/managed/alpha_organization?_queryFilter=idpDomains+co+'" + domain + "'&_fields=name,description,idpName,idpType,idpDomains,idpJourney,idpTheme,idpPersist,samlConfig";",
        "",
        "      /* End Configuration */",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('GET');",
        "    request.setUri(IDM_API_URI);",
        "    request.getHeaders().add("Content-Type", "application/json; charset=UTF-8");",
        "    request.getHeaders().add("Authorization", "Bearer " + IDM_API_TOKEN);",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    logger.message("IDP Lookup: JSON result: " + JSON.stringify(result));",
        "    ",
        "      var routedIDPs = result.result.length ? result.result : [{}];",
        "      // stringify the samlConfig property",
        "      routedIDPs.forEach(function (routedIDP, index) {",
        "          routedIDPs[index].samlConfig = JSON.stringify(routedIDP.samlConfig);",
        "    });",
        "      sharedState.put("routedIDPs", routedIDPs);",
        "    if (result.resultCount === 1) {",
        "        logger.message("IDP Lookup: Found exactly 1 IDP");",
        "        outcome = "one";",
        "    }",
        "      else if (result.resultCount > 1) {",
        "        logger.message("IDP Lookup: Found {} IDPs", result.resultCount);",
        "        outcome = "multiple";",
        "    }",
        "      else {",
        "        logger.message("IDP Lookup: Found no IDPs");",
        "    }",
        "    logger.message("IDP Lookup: end [outcome={}]", outcome);",
        "",
        "    /*",
        "     * Parse a URL into its components and make them easily accessible by name",
        "     *",
        "     * Use in a Scripte Decision Node Script as follows:",
        "     * var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "     * var origin = referer.origin;",
        "     * ",
        "     * e.g.: https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "     * {",
        "     *     hash: '#/',",
        "     *     host: 'openam-volker-dev.forgeblocks.com',",
        "     *     hostname: 'openam-volker-dev.forgeblocks.com',",
        "     *     href: 'https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/',",
        "     *     origin: 'https://openam-volker-dev.forgeblocks.com',",
        "     *     pathname: '/am/XUI/',",
        "     *     port: '',",
        "     *     protocol: 'https',",
        "     *     search: '?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim',",
        "     *     username: '',",
        "     *     password: '',",
        "     *     searchParam: {",
        "     *         realm: '/bravo',",
        "     *         authIndexType: 'service',",
        "     *         authIndexValue: 'InitiateOwnerClaim'",
        "     *     }",
        "     * }",
        "     */",
        "    function parseUrl(href) {",
        "        var m = href.match(/^(([^:\\/?#]+):?(?:\\/\\/((?:([^\\/?#:]*):([^\\/?#:]*)@)?([^\\/?#:]*)(?::([^\\/?#:]*))?)))?([^?#]*)(\\?[^#]*)?(#.*)?$/),",
        "        r = {",
        "            hash: m[10] || "",                      // #/",
        "            host: m[3] || "",                       // openam-volker-dev.forgeblocks.com",
        "            hostname: m[6] || "",                   // openam-volker-dev.forgeblocks.com",
        "            href: m[0] || "",                       // https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "            origin: m[1] || "",                     // https://openam-volker-dev.forgeblocks.com",
        "            pathname: m[8] || (m[1] ? "/" : ""),    // /am/XUI/",
        "            port: m[7] || "",                       // ",
        "            protocol: m[2] || "",                   // https",
        "            search: m[9] || "",                     // ?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim",
        "            username: m[4] || "",                   // ",
        "            password: m[5] || "",                   // ",
        "            searchParam: {}                         // { realm: '/bravo',",
        "                                                    //   authIndexType: 'service',",
        "                                                    //   authIndexValue: 'InitiateOwnerClaim' }",
        "        };",
        "        if (r.protocol.length == 2) {",
        "            r.protocol = "file:///" + r.protocol.toUpperCase();",
        "            r.origin = r.protocol + "//" + r.host;",
        "        }",
        "        if (r.search.length > 2) {",
        "            var query = (r.search.indexOf('?') === 0) ? r.search.substr(1) : r.search;",
        "            var vars = query.split('&');",
        "            for (var i = 0; i < vars.length; i++) {",
        "            var pair = vars[i].split('=');",
        "            r.searchParam[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);",
        "            }",
        "        }",
        "        r.href = r.origin + r.pathname + r.search + r.hash;",
        "        return r;",
        "    };",
        "}());",
      ],
    },
    "6963d84e-e2f0-4db1-a746-116604189602": {
      "_id": "6963d84e-e2f0-4db1-a746-116604189602",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_SetCurrentYear",
      "script": [
        "var currentYear = new Date().getFullYear().toString();",
        "",
        "var objAttrs = sharedState.get('objectAttributes') || new java.util.HashMap();",
        "objAttrs.put('currentYear', currentYear);",
        "sharedState.put('objectAttributes', objAttrs);",
        "",
        "outcome = 'True';",
        "",
      ],
    },
    "6ad22934-5d12-43a6-96a7-a2fba8d999bf": {
      "_id": "6ad22934-5d12-43a6-96a7-a2fba8d999bf",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Call out to University of Phoenix Course Registration System and get current course.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "UOP Get Course ID",
      "script": [
        "/* UOP Get Course ID",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Call out to University of Phoenix Course Registration System and get current class.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is. ",
        " * It requires the Identify Existing User node before it is being called.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - has classes",
        " * - no classes",
        " * - error",
        " */",
        "logger.warning("UOP Get Course ID: start now");",
        "",
        "outcome = "error";",
        "",
        "if (sharedState.get("_id") && idRepository.getAttribute(sharedState.get("_id"), "mail").iterator().hasNext()) {",
        "",
        "       /* BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN API SETTINGS",
        "     */",
        "      var email = idRepository.getAttribute(sharedState.get("_id"), "mail").iterator().next();",
        "    var UOP_CLASS_API_URI = "https://dy4rpew5va.execute-api.us-east-1.amazonaws.com/forgerock/course?courseId=CES422";",
        "      //var UOP_CLASS_API_URI = "https://dy4rpew5va.execute-api.us-east-1.amazonaws.com/forgerock/course?emailId=".concat(email);",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('GET');",
        "    request.setUri(UOP_CLASS_API_URI);",
        "",
        "    var response = httpClient.send(request).get();",
        "    var UOPClassID = response.getEntity().getString();",
        "    logger.warning("UOP Get Course ID: API call result: Course ID=".concat(UOPClassID));",
        "",
        "    /* Sample API response",
        "    CES421",
        "    */",
        "",
        "    if (UOPClassID) {",
        "        outcome = "has classes";",
        "",
        "        // preserve result in shared state",
        "        sharedState.put("uopCurrentClassID", UOPClassID);",
        "    } ",
        "    else if (UOPClassID === "") {",
        "        outcome = "no classes";",
        "    }",
        "    else {",
        "        outcome = "error";",
        "    }",
        "",
        "} else {",
        "    logger.error("UOP Get Course ID: no classes!");",
        "}",
        "",
        "logger.warning("UOP Get Course ID: End (outcome=".concat(outcome).concat(")"));",
      ],
    },
    "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30": {
      "_id": "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Amazon",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Amazon Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.user_id),",
        "        field("displayName", rawProfile.name),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "6d6c2202-725b-4196-9436-92ec11a0b385": {
      "_id": "6d6c2202-725b-4196-9436-92ec11a0b385",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display sharedState and transientState.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Display States - imported (2)",
      "script": [
        "/* Display States",
        " * ",
        " * Display sharedState and transientState.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "",
        "    var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "    var halign = "left";",
        "    var message = "<h4>Current State Values</h4>".concat(",
        "        "<p><b>Shared State</b>:<br/>").concat(",
        "        sharedState.toString()).concat("</p>").concat(",
        "        "<p><b>Transient State</b>:<br/>").concat(",
        "        transientState.toString()).concat("</p>")",
        "    var script = "Array.prototype.slice.call(\\n".concat(",
        "      "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "      "function (e) {\\n").concat(",
        "      "  var message = e.firstElementChild;\\n").concat(",
        "      "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "      "    message.className = \\"\\";\\n").concat(",
        "      "    message.style = \\"text-align: left; inline-size: 430px; overflow-wrap: break-word;\\";\\n").concat(",
        "      "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "      "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "      "  }\\n").concat(",
        "      "})")",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (message.length && callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                anchor",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "    else {",
        "      action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "     /*",
        "      * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "      * ",
        "      * Example:",
        "      * 'xxxxx' produces '28535'",
        "      * 'xxx-xxx' produces '432-521'",
        "      */",
        "    function generateNumericToken(format) {",
        "        return format.replace(/[x]/g, function(c) {",
        "            var r = Math.random()*10|0;",
        "            var v = r;",
        "            return v.toString(10);",
        "        });",
        "    }",
        "}());",
      ],
    },
    "6dfc6de4-64cb-4d47-8269-6c5ced44344d": {
      "_id": "6dfc6de4-64cb-4d47-8269-6c5ced44344d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_IsInvited",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "if (sharedState.get('invited') == true) {",
        "  outcome = 'True';",
        "} else {",
        "  outcome = 'False';",
        "}",
      ],
    },
    "703dab1a-1921-4981-98dd-b8e5349d8548": {
      "_id": "703dab1a-1921-4981-98dd-b8e5349d8548",
      "context": "AUTHENTICATION_SERVER_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for server side Device Id (Match) Authentication Module",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Device Id (Match) - Server Side",
      "script": [
        "/*",
        " * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.",
        " *",
        " * Copyright (c) 2009 Sun Microsystems Inc. All Rights Reserved",
        " *",
        " * The contents of this file are subject to the terms",
        " * of the Common Development and Distribution License",
        " * (the License). You may not use this file except in",
        " * compliance with the License.",
        " *",
        " * You can obtain a copy of the License at",
        " * https://opensso.dev.java.net/public/CDDLv1.0.html or",
        " * opensso/legal/CDDLv1.0.txt",
        " * See the License for the specific language governing",
        " * permission and limitations under the License.",
        " *",
        " * When distributing Covered Code, include this CDDL",
        " * Header Notice in each file and include the License file",
        " * at opensso/legal/CDDLv1.0.txt.",
        " * If applicable, add the following below the CDDL Header,",
        " * with the fields enclosed by brackets [] replaced by",
        " * your own identifying information:",
        " * "Portions Copyrighted [year] [name of copyright owner]"",
        " *",
        " */",
        "/*",
        " * Portions Copyrighted 2013 Syntegrity.",
        " * Portions Copyrighted 2013-2018 ForgeRock AS.",
        " */",
        "",
        "var ScalarComparator = {}, ScreenComparator = {}, MultiValueComparator = {}, UserAgentComparator = {}, GeolocationComparator = {};",
        "",
        "var config = {",
        "    profileExpiration: 30,              //in days",
        "    maxProfilesAllowed: 5,",
        "    maxPenaltyPoints: 0,",
        "    attributes: {",
        "        screen: {",
        "            required: true,",
        "            comparator: ScreenComparator,",
        "            args: {",
        "                penaltyPoints: 50",
        "            }",
        "        },",
        "        plugins: {",
        "            installedPlugins: {",
        "                required: false,",
        "                comparator: MultiValueComparator,",
        "                args: {",
        "                    maxPercentageDifference: 10,",
        "                    maxDifferences: 5,",
        "                    penaltyPoints: 100",
        "                }",
        "            }",
        "        },",
        "        fonts: {",
        "            installedFonts: {",
        "                required: false,",
        "                comparator: MultiValueComparator,",
        "                args: {",
        "                    maxPercentageDifference: 10,",
        "                    maxDifferences: 5,",
        "                    penaltyPoints: 100",
        "                }",
        "            }",
        "        },",
        "        timezone: {",
        "            timezone: {",
        "                required: false,",
        "                comparator: ScalarComparator,",
        "                args: {",
        "                    penaltyPoints: 100",
        "                }",
        "            }",
        "        },",
        "        userAgent: {",
        "            required: true,",
        "            comparator: UserAgentComparator,",
        "            args: {",
        "                ignoreVersion: true,",
        "                penaltyPoints: 100",
        "            }",
        "        },",
        "        geolocation: {",
        "            required: false,",
        "            comparator: GeolocationComparator,",
        "            args: {",
        "                allowedRange: 100,            //in miles",
        "                penaltyPoints: 100",
        "            }",
        "        }",
        "    }",
        "};",
        "",
        "//---------------------------------------------------------------------------//",
        "//                           Comparator functions                            //",
        "//---------------------------------------------------------------------------//",
        "",
        "var all, any, calculateDistance, calculateIntersection, calculatePercentage, nullOrUndefined, splitAndTrim,",
        "    undefinedLocation;",
        "",
        "// ComparisonResult",
        "",
        "/**",
        " * Constructs an instance of a ComparisonResult with the given penalty points.",
        " *",
        " * @param penaltyPoints (Number) The penalty points for the comparison (defaults to 0).",
        " * @param additionalInfoInCurrentValue (boolean) Whether the current value contains more information",
        " *                                               than the stored value (defaults to false).",
        " */",
        "function ComparisonResult() {",
        "",
        "    var penaltyPoints = 0,",
        "        additionalInfoInCurrentValue = false;",
        "",
        "    if (arguments[0] !== undefined && arguments[1] !== undefined) {",
        "        penaltyPoints = arguments[0];",
        "        additionalInfoInCurrentValue = arguments[1];",
        "    }",
        "",
        "    if (arguments[0] !== undefined && arguments[1] === undefined) {",
        "        if (typeof(arguments[0]) === "boolean") {",
        "            additionalInfoInCurrentValue = arguments[0];",
        "        } else {",
        "            penaltyPoints = arguments[0];",
        "        }",
        "    }",
        "",
        "    this.penaltyPoints = penaltyPoints;",
        "    this.additionalInfoInCurrentValue = additionalInfoInCurrentValue;",
        "",
        "}",
        "",
        "ComparisonResult.ZERO_PENALTY_POINTS = new ComparisonResult(0);",
        "",
        "/**",
        " * Static method for functional programming.",
        " *",
        " * @return boolean true if comparisonResult.isSuccessful().",
        " */",
        "ComparisonResult.isSuccessful =  function(comparisonResult) {",
        "    return comparisonResult.isSuccessful();",
        "};",
        "",
        "",
        "/**",
        " * Static method for functional programming.",
        " *",
        " * @return boolean true if comparisonResult.additionalInfoInCurrentValue.",
        " */",
        "ComparisonResult.additionalInfoInCurrentValue =  function(comparisonResult) {",
        "    return comparisonResult.additionalInfoInCurrentValue;",
        "};",
        "",
        "/**",
        " * Comparison function that can be provided as an argument to array.sort",
        " */",
        "ComparisonResult.compare = function(first, second) {",
        "    if (nullOrUndefined(first) && nullOrUndefined(second)) {",
        "        return 0;",
        "    } else if (nullOrUndefined(first)) {",
        "        return -1;",
        "    } else if (nullOrUndefined(second)) {",
        "        return 1;",
        "    } else {",
        "        if (first.penaltyPoints !== second.penaltyPoints) {",
        "            return first.penaltyPoints - second.penaltyPoints;",
        "        } else {",
        "            return (first.additionalInfoInCurrentValue ? 1 : 0) - (second.additionalInfoInCurrentValue ? 1 : 0);",
        "        }",
        "    }",
        "};",
        "",
        "/**",
        " * Amalgamates the given ComparisonResult into this ComparisonResult.",
        " *",
        " * @param comparisonResult The ComparisonResult to include.",
        " */",
        "ComparisonResult.prototype.addComparisonResult = function(comparisonResult) {",
        "    this.penaltyPoints += comparisonResult.penaltyPoints;",
        "    if (comparisonResult.additionalInfoInCurrentValue) {",
        "        this.additionalInfoInCurrentValue = comparisonResult.additionalInfoInCurrentValue;",
        "    }",
        "};",
        "",
        "/**",
        " * Returns true if no penalty points have been assigned for the comparison.",
        " *",
        " * @return boolean true if the comparison was successful.",
        " */",
        "ComparisonResult.prototype.isSuccessful = function() {",
        "    return nullOrUndefined(this.penaltyPoints) || this.penaltyPoints === 0;",
        "};",
        "",
        "/**",
        " * Compares two simple objects (String|Number) and if they are equal then returns a ComparisonResult with zero",
        " * penalty points assigned, otherwise returns a ComparisonResult with the given number of penalty points assigned.",
        " *",
        " * @param currentValue (String|Number) The current value.",
        " * @param storedValue (String|Number) The stored value.",
        " * @param config: {",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        " *        }",
        " * @return ComparisonResult.",
        " */",
        "ScalarComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("StringComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("StringComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("StringComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "    if (config.penaltyPoints === 0) {",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "",
        "    if (!nullOrUndefined(storedValue)) {",
        "        if (nullOrUndefined(currentValue) || currentValue !== storedValue) {",
        "            return new ComparisonResult(config.penaltyPoints);",
        "        }",
        "    } else if (!nullOrUndefined(currentValue)) {",
        "        return new ComparisonResult(true);",
        "    }",
        "",
        "    return ComparisonResult.ZERO_PENALTY_POINTS;",
        "};",
        "",
        "/**",
        " * Compares two screens and if they are equal then returns a ComparisonResult with zero penalty points assigned,",
        " * otherwise returns a ComparisonResult with the given number of penalty points assigned.",
        " *",
        " * @param currentValue: {",
        " *            "screenWidth": (Number) The current client screen width.",
        " *            "screenHeight": (Number) The current client screen height.",
        " *            "screenColourDepth": (Number) The current client screen colour depth.",
        " *        }",
        " * @param storedValue: {",
        " *            "screenWidth": (Number) The stored client screen width.",
        " *            "screenHeight": (Number) The stored client screen height.",
        " *            "screenColourDepth": (Number) The stored client screen colour depth.",
        " *        }",
        " * @param config: {",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        " *        }",
        " * @return ComparisonResult",
        " */",
        "ScreenComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("ScreenComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("ScreenComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("ScreenComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "",
        "    if (nullOrUndefined(currentValue)) {",
        "        currentValue = {screenWidth: null, screenHeight: null, screenColourDepth: null};",
        "    }",
        "    if (nullOrUndefined(storedValue)) {",
        "        storedValue = {screenWidth: null, screenHeight: null, screenColourDepth: null};",
        "    }",
        "",
        "    var comparisonResults = [",
        "        ScalarComparator.compare(currentValue.screenWidth, storedValue.screenWidth, config),",
        "        ScalarComparator.compare(currentValue.screenHeight, storedValue.screenHeight, config),",
        "        ScalarComparator.compare(currentValue.screenColourDepth, storedValue.screenColourDepth, config)];",
        "",
        "    if (all(comparisonResults, ComparisonResult.isSuccessful)) {",
        "        return new ComparisonResult(any(comparisonResults, ComparisonResult.additionalInfoInCurrentValue));",
        "    } else {",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "};",
        "",
        "/**",
        " * Splits both values using delimiter, trims every value and compares collections of values.",
        " * Returns zero-result for same multi-value attributes.",
        " *",
        " * If collections are not same checks if number of differences is less or equal maxDifferences or",
        " * percentage of difference is less or equal maxPercentageDifference.",
        " *",
        " * If yes then returns zero-result with additional info, else returns penaltyPoints-result.",
        " *",
        " * @param currentValue: (String) The current value.",
        " * @param storedValue: (String) The stored value.",
        " * @param config: {",
        " *            "maxPercentageDifference": (Number) The max difference percentage in the values,",
        " *                                                before the penalty is assigned.",
        " *            "maxDifferences": (Number) The max number of differences in the values,",
        " *                                       before the penalty points are assigned.",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        "  *        }",
        " * @return ComparisonResult",
        " */",
        "MultiValueComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("MultiValueComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("MultiValueComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("MultiValueComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "",
        "    var delimiter = ";",",
        "        currentValues = splitAndTrim(currentValue, delimiter),",
        "        storedValues = splitAndTrim(storedValue, delimiter),",
        "        maxNumberOfElements = Math.max(currentValues.length, storedValues.length),",
        "        numberOfTheSameElements = calculateIntersection(currentValues, storedValues).length,",
        "        numberOfDifferences = maxNumberOfElements - numberOfTheSameElements,",
        "        percentageOfDifferences = calculatePercentage(numberOfDifferences, maxNumberOfElements);",
        "",
        "    if (nullOrUndefined(storedValue) && !nullOrUndefined(currentValue)) {",
        "        return new ComparisonResult(true);",
        "    }",
        "",
        "    if (logger.messageEnabled()) {",
        "        logger.message(numberOfTheSameElements + " of " + maxNumberOfElements + " are same");",
        "    }",
        "",
        "    if (maxNumberOfElements === 0) {",
        "        logger.message("Ignored because no attributes found in both profiles");",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "",
        "    if (numberOfTheSameElements === maxNumberOfElements) {",
        "        logger.message("Ignored because all attributes are same");",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "",
        "    if (numberOfDifferences > config.maxDifferences) {",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Would be ignored if not more than " + config.maxDifferences + " differences");",
        "        }",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "",
        "    if (percentageOfDifferences > config.maxPercentageDifference) {",
        "        if (logger.messageEnabled()) {",
        "            logger.message(percentageOfDifferences + " percents are different");",
        "            logger.message("Would be ignored if not more than " + config.maxPercentageDifference + " percent");",
        "        }",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "",
        "    if (logger.messageEnabled()) {",
        "        logger.message("Ignored because number of differences(" + numberOfDifferences + ") not more than "",
        "            + config.maxDifferences);",
        "        logger.message(percentageOfDifferences + " percents are different");",
        "        logger.message("Ignored because not more than " + config.maxPercentageDifference + " percent");",
        "    }",
        "    return new ComparisonResult(true);",
        "};",
        "",
        "/**",
        " * Compares two User Agent Strings and if they are equal then returns a ComparisonResult with zero penalty",
        " * points assigned, otherwise returns a ComparisonResult with the given number of penalty points assigned.",
        " *",
        " * @param currentValue (String) The current value.",
        " * @param storedValue (String) The stored value.",
        " * @param config: {",
        " *            "ignoreVersion": (boolean) If the version numbers in the User Agent Strings should be ignore",
        " *                                       in the comparison.",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        " *        }",
        " * @return A ComparisonResult.",
        " */",
        "UserAgentComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("UserAgentComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("UserAgentComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("UserAgentComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "",
        "    if (config.ignoreVersion) {",
        "        // remove version number",
        "        currentValue = nullOrUndefined(currentValue) ? null : currentValue.replace(/[\\d\\.]+/g, "").trim();",
        "        storedValue = nullOrUndefined(storedValue) ? null : storedValue.replace(/[\\d\\.]+/g, "").trim();",
        "    }",
        "",
        "    return ScalarComparator.compare(currentValue, storedValue, config);",
        "};",
        "",
        "/**",
        " * Compares two locations, taking into account a degree of difference.",
        " *",
        " * @param currentValue: {",
        " *            "latitude": (Number) The current latitude.",
        " *            "longitude": (Number) The current longitude.",
        " *        }",
        " * @param storedValue: {",
        " *            "latitude": (Number) The stored latitude.",
        " *            "longitude": (Number) The stored longitude.",
        " *        }",
        " * @param config: {",
        " *            "allowedRange": (Number) The max difference allowed in the two locations, before the penalty is assigned.",
        " *            "penaltyPoints": (Number) The number of penalty points.",
        "*         }",
        " * @return ComparisonResult",
        " */",
        "GeolocationComparator.compare = function (currentValue, storedValue, config) {",
        "    if (logger.messageEnabled()) {",
        "        logger.message("GeolocationComparator.compare:currentValue: " + JSON.stringify(currentValue));",
        "        logger.message("GeolocationComparator.compare:storedValue: " + JSON.stringify(storedValue));",
        "        logger.message("GeolocationComparator.compare:config: " + JSON.stringify(config));",
        "    }",
        "",
        "    // Check for undefined stored or current locations",
        "",
        "    if (undefinedLocation(currentValue) && undefinedLocation(storedValue)) {",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "    if (undefinedLocation(currentValue) && !undefinedLocation(storedValue)) {",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "    if (!undefinedLocation(currentValue) && undefinedLocation(storedValue)) {",
        "        return new ComparisonResult(true);",
        "    }",
        "",
        "    // Both locations defined, therefore perform comparison",
        "",
        "    var distance = calculateDistance(currentValue, storedValue);",
        "",
        "    if (logger.messageEnabled()) {",
        "        logger.message("Distance between (" + currentValue.latitude + "," + currentValue.longitude + ") and (" +",
        "            storedValue.latitude + "," + storedValue.longitude + ") is " + distance + " miles");",
        "    }",
        "",
        "    if (parseFloat(distance.toPrecision(5)) === 0) {",
        "        logger.message("Location is the same");",
        "        return ComparisonResult.ZERO_PENALTY_POINTS;",
        "    }",
        "",
        "    if (distance <= config.allowedRange) {",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Tolerated because distance not more then " + config.allowedRange);",
        "        }",
        "        return new ComparisonResult(true);",
        "    } else {",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Would be ignored if distance not more then " + config.allowedRange);",
        "        }",
        "        return new ComparisonResult(config.penaltyPoints);",
        "    }",
        "};",
        "",
        "",
        "//---------------------------------------------------------------------------//",
        "//                    Device Print Logic - DO NOT MODIFY                     //",
        "//---------------------------------------------------------------------------//",
        "",
        "// Utility functions",
        "",
        "/**",
        " * Returns true if evaluating function f on each element of the Array a returns true.",
        " *",
        " * @param a: (Array) The array of elements to evaluate",
        " * @param f: (Function) A single argument function for mapping elements of the array to boolean.",
        " * @return boolean.",
        " */",
        "all = function(a, f) {",
        "    var i;",
        "    for (i = 0; i < a.length; i++) {",
        "        if (f(a[i]) === false) {",
        "            return false;",
        "        }",
        "    }",
        "    return true;",
        "};",
        "",
        "/**",
        " * Returns true if evaluating function f on any element of the Array a returns true.",
        " *",
        " * @param a: (Array) The array of elements to evaluate",
        " * @param f: (Function) A single argument function for mapping elements of the array to boolean.",
        " * @return boolean.",
        " */",
        "any = function(a, f) {",
        "    var i;",
        "    for (i = 0; i < a.length; i++) {",
        "        if (f(a[i]) === true) {",
        "            return true;",
        "        }",
        "    }",
        "    return false;",
        "};",
        "",
        "/**",
        " * Returns true if the provided location is null or has undefined longitude or latitude values.",
        " *",
        " * @param location: {",
        " *            "latitude": (Number) The latitude.",
        " *            "longitude": (Number) The longitude.",
        " *        }",
        " * @return boolean",
        " */",
        "undefinedLocation = function(location) {",
        "    return nullOrUndefined(location) || nullOrUndefined(location.latitude) || nullOrUndefined(location.longitude);",
        "};",
        "",
        "/**",
        " * Returns true if the provided value is null or undefined.",
        " *",
        " * @param value: a value of any type",
        " * @return boolean",
        " */",
        "nullOrUndefined = function(value) {",
        "    return value === null || value === undefined;",
        "};",
        "",
        "/**",
        " * Calculates the distances between the two locations.",
        " *",
        " * @param first: {",
        " *            "latitude": (Number) The first latitude.",
        " *            "longitude": (Number) The first longitude.",
        " *        }",
        " * @param second: {",
        " *            "latitude": (Number) The second latitude.",
        " *            "longitude": (Number) The second longitude.",
        " *        }",
        " * @return Number The distance between the two locations.",
        " */",
        "calculateDistance = function(first, second) {",
        "    var factor = (Math.PI / 180),",
        "        theta,",
        "        dist;",
        "    function degreesToRadians(degrees) {",
        "        return degrees * factor;",
        "    }",
        "    function radiansToDegrees(radians) {",
        "        return radians / factor;",
        "    }",
        "    theta = first.longitude - second.longitude;",
        "    dist = Math.sin(degreesToRadians(first.latitude)) * Math.sin(degreesToRadians(second.latitude))",
        "        + Math.cos(degreesToRadians(first.latitude)) * Math.cos(degreesToRadians(second.latitude))",
        "        * Math.cos(degreesToRadians(theta));",
        "    dist = Math.acos(dist);",
        "    dist = radiansToDegrees(dist);",
        "    dist = dist * 60 * 1.1515;",
        "    return dist;",
        "};",
        "",
        "/**",
        " * Converts a String holding a delimited sequence of values into an array.",
        " *",
        " * @param text (String) The String representation of a delimited sequence of values.",
        " * @param delimiter (String) The character delimiting values within the text String.",
        " * @return (Array) The comma separated values.",
        " */",
        "splitAndTrim = function(text, delimiter) {",
        "",
        "    var results = [],",
        "        i,",
        "        values,",
        "        value;",
        "    if (text === null) {",
        "        return results;",
        "    }",
        "",
        "    values = text.split(delimiter);",
        "    for (i = 0; i < values.length; i++) {",
        "        value = values[i].trim();",
        "        if (value !== "") {",
        "            results.push(value);",
        "        }",
        "    }",
        "",
        "    return results;",
        "};",
        "",
        "/**",
        " * Converts value to a percentage of range.",
        " *",
        " * @param value (Number) The actual number to be converted to a percentage.",
        " * @param range (Number) The total number of values (i.e. represents 100%).",
        " * @return (Number) The percentage.",
        " */",
        "calculatePercentage = function(value, range) {",
        "    if (range === 0) {",
        "        return 0;",
        "    }",
        "    return parseFloat((value / range).toPrecision(2)) * 100;",
        "};",
        "",
        "/**",
        " * Creates a new array containing only those elements found in both arrays received as arguments.",
        " *",
        " * @param first (Array) The first array.",
        " * @param second (Array) The second array.",
        " * @return (Array) The elements that found in first and second.",
        " */",
        "calculateIntersection = function(first, second) {",
        "    return first.filter(function(element) {",
        "        return second.indexOf(element) !== -1;",
        "    });",
        "};",
        "",
        "function getValue(obj, attributePath) {",
        "    var value = obj,",
        "        i;",
        "    for (i = 0; i < attributePath.length; i++) {",
        "        if (value === undefined) {",
        "            return null;",
        "        }",
        "        value = value[attributePath[i]];",
        "    }",
        "    return value;",
        "}",
        "",
        "",
        "function isLeafNode(attributeConfig) {",
        "    return attributeConfig.comparator !== undefined;",
        "}",
        "",
        "function getAttributePaths(attributeConfig, attributePath) {",
        "",
        "    var attributePaths = [],",
        "        attributeName,",
        "        attrPaths,",
        "        attrPath,",
        "        i;",
        "",
        "    for (attributeName in attributeConfig) {",
        "        if (attributeConfig.hasOwnProperty(attributeName)) {",
        "",
        "            if (isLeafNode(attributeConfig[attributeName])) {",
        "                attrPath = attributePath.slice();",
        "                attrPath.push(attributeName);",
        "                attributePaths.push(attrPath);",
        "            } else {",
        "                attrPath = attributePath.slice();",
        "                attrPath.push(attributeName);",
        "                attrPaths = getAttributePaths(attributeConfig[attributeName], attrPath);",
        "                for (i = 0; i < attrPaths.length; i++) {",
        "                    attributePaths.push(attrPaths[i]);",
        "                }",
        "            }",
        "        }",
        "    }",
        "",
        "    return attributePaths;",
        "}",
        "",
        "function getDevicePrintAttributePaths(attributeConfig) {",
        "    return getAttributePaths(attributeConfig, []);",
        "}",
        "",
        "function hasRequiredAttributes(devicePrint, attributeConfig) {",
        "",
        "    var attributePaths = getDevicePrintAttributePaths(attributeConfig),",
        "        i,",
        "        attrValue,",
        "        attrConfig;",
        "",
        "    for (i = 0; i < attributePaths.length; i++) {",
        "",
        "        attrValue = getValue(devicePrint, attributePaths[i]);",
        "        attrConfig = getValue(attributeConfig, attributePaths[i]);",
        "",
        "        if (attrConfig.required && attrValue === undefined) {",
        "            logger.warning("Device Print profile missing required attribute, " + attributePaths[i]);",
        "            return false;",
        "        }",
        "    }",
        "",
        "    logger.message("device print has required attributes");",
        "    return true;",
        "}",
        "",
        "function compareDevicePrintProfiles(attributeConfig, devicePrint, devicePrintProfiles, maxPenaltyPoints) {",
        "",
        "    var attributePaths = getDevicePrintAttributePaths(attributeConfig),",
        "        dao = sharedState.get('_DeviceIdDao'),",
        "        results,",
        "        j,",
        "        aggregatedComparisonResult,",
        "        i,",
        "        currentValue,",
        "        storedValue,",
        "        attrConfig,",
        "        comparisonResult,",
        "        selectedComparisonResult,",
        "        selectedProfile,",
        "        curDevicePrintProfile,",
        "        vals;",
        "",
        "    results = [];",
        "    for (j = 0; j < devicePrintProfiles.length; j++) {",
        "        curDevicePrintProfile = JSON.parse(org.forgerock.json.JsonValue.json(devicePrintProfiles[j]));",
        "        aggregatedComparisonResult = new ComparisonResult();",
        "        for (i = 0; i < attributePaths.length; i++) {",
        "",
        "            currentValue = getValue(devicePrint, attributePaths[i]);",
        "            storedValue = getValue(curDevicePrintProfile.devicePrint, attributePaths[i]);",
        "            attrConfig = getValue(attributeConfig, attributePaths[i]);",
        "",
        "            if (storedValue === null) {",
        "                comparisonResult = new ComparisonResult(attrConfig.penaltyPoints);",
        "            } else {",
        "                comparisonResult = attrConfig.comparator.compare(currentValue, storedValue, attrConfig.args);",
        "            }",
        "",
        "            if (logger.messageEnabled()) {",
        "                logger.message("Comparing attribute path: " + attributePaths[i]",
        "                    + ", Comparison result: successful=" + comparisonResult.isSuccessful() + ", penaltyPoints="",
        "                    + comparisonResult.penaltyPoints + ", additionalInfoInCurrentValue="",
        "                    + comparisonResult.additionalInfoInCurrentValue);",
        "            }",
        "            aggregatedComparisonResult.addComparisonResult(comparisonResult);",
        "        }",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Aggregated comparison result: successful="",
        "                + aggregatedComparisonResult.isSuccessful() + ", penaltyPoints="",
        "                + aggregatedComparisonResult.penaltyPoints + ", additionalInfoInCurrentValue="",
        "                + aggregatedComparisonResult.additionalInfoInCurrentValue);",
        "        }",
        "",
        "        results.push({",
        "            key: aggregatedComparisonResult,",
        "            value: devicePrintProfiles[j]",
        "        });",
        "    }",
        "",
        "    if (results.length === 0) {",
        "        return null;",
        "    }",
        "",
        "    results.sort(function(a, b) {",
        "        return ComparisonResult.compare(a.key, b.key);",
        "    });",
        "    selectedComparisonResult = results[0].key;",
        "    if (logger.messageEnabled()) {",
        "        logger.message("Selected comparison result: successful=" + selectedComparisonResult.isSuccessful()",
        "            + ", penaltyPoints=" + selectedComparisonResult.penaltyPoints + ", additionalInfoInCurrentValue="",
        "            + selectedComparisonResult.additionalInfoInCurrentValue);",
        "    }",
        "",
        "    selectedProfile = null;",
        "    if (selectedComparisonResult.penaltyPoints <= maxPenaltyPoints) {",
        "        selectedProfile = results[0].value;",
        "        if (logger.messageEnabled()) {",
        "            logger.message("Selected profile: " + selectedProfile +",
        "                " with " + selectedComparisonResult.penaltyPoints + " penalty points");",
        "        }",
        "    }",
        "",
        "    if (selectedProfile === null) {",
        "        return false;",
        "    }",
        "",
        "    /* update profile */",
        "    selectedProfile.put("selectionCounter",",
        "        java.lang.Integer.valueOf(parseInt(selectedProfile.get("selectionCounter"), 10) + 1));",
        "    selectedProfile.put("lastSelectedDate", java.lang.Long.valueOf(new Date().getTime()));",
        "    selectedProfile.put("devicePrint", devicePrint);",
        "",
        "    vals = [];",
        "    for (i = 0; i < devicePrintProfiles.length; i++) {",
        "        vals.push(org.forgerock.json.JsonValue.json(devicePrintProfiles[i]));",
        "    }",
        "",
        "    dao.saveDeviceProfiles(username, realm, vals);",
        "",
        "    return true;",
        "}",
        "",
        "function matchDevicePrint() {",
        "",
        "    if (!username) {",
        "        logger.error("Username not set. Cannot compare user's device print profiles.");",
        "        authState = FAILED;",
        "    } else {",
        "",
        "        if (logger.messageEnabled()) {",
        "            logger.message("client devicePrint: " + clientScriptOutputData);",
        "        }",
        "",
        "        var getProfiles = function () {",
        "",
        "                function isExpiredProfile(devicePrintProfile) {",
        "                    var expirationDate = new Date(),",
        "                        lastSelectedDate;",
        "                    expirationDate.setDate(expirationDate.getDate() - config.profileExpiration);",
        "",
        "                    lastSelectedDate = new Date(devicePrintProfile.lastSelectedDate);",
        "",
        "                    return lastSelectedDate < expirationDate;",
        "                }",
        "",
        "                function getNotExpiredProfiles() {",
        "                    var profile,",
        "                        dao = sharedState.get('_DeviceIdDao'),",
        "                        results = [],",
        "                        profiles,",
        "                        iter;",
        "",
        "                    profiles = dao.getDeviceProfiles(username, realm);",
        "",
        "                    if (profiles) {",
        "                        iter = profiles.iterator();",
        "",
        "                        while (iter.hasNext()) {",
        "                            profile = iter.next().getObject();",
        "                            if (!isExpiredProfile(profile)) {",
        "                                results.push(profile);",
        "                            }",
        "                        }",
        "                    }",
        "                    if (logger.messageEnabled()) {",
        "                        logger.message("stored non-expired profiles: " + results);",
        "                    }",
        "                    return results;",
        "                }",
        "",
        "                return getNotExpiredProfiles();",
        "            },",
        "            devicePrint = JSON.parse(clientScriptOutputData),",
        "            devicePrintProfiles = getProfiles();",
        "",
        "        if (!hasRequiredAttributes(devicePrint, config.attributes)) {",
        "            logger.message("devicePrint.hasRequiredAttributes: false");",
        "            // Will fail this module but fall-through to next module. Which should be OTP.",
        "            authState = FAILED;",
        "        } else if (compareDevicePrintProfiles(config.attributes, devicePrint, devicePrintProfiles, config.maxPenaltyPoints)) {",
        "            logger.message("devicePrint.hasValidProfile: true");",
        "            authState = SUCCESS;",
        "        } else {",
        "            logger.message("devicePrint.hasValidProfile: false");",
        "            sharedState.put('devicePrintProfile', JSON.stringify(devicePrint));",
        "            // Will fail this module but fall-through to next module. Which should be OTP.",
        "            authState = FAILED;",
        "        }",
        "    }",
        "}",
        "",
        "matchDevicePrint();",
      ],
    },
    "71545db5-ce01-46b1-b79f-d41af36bd548": {
      "_id": "71545db5-ce01-46b1-b79f-d41af36bd548",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Capture Evidence",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Onfido-CaptureEvidence",
      "script": [
        "logger.error("Onfido-CaptureEvidence: Start");",
        "/*",
        " * !!! Extend your authentication session time so your identity proofing flows don't time out !!!",
        " *",
        " * Authentication > Settings > Trees > Max Duration (Minutes)",
        " *",
        " * Set to 15 minutes.",
        " *",
        " */",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " */",
        "var onfido_auth_token = String(sharedState.get("onfidoAuthToken"));",
        "var onfido_dialog_title = "Join the Expanse family!";",
        "var onfido_dialog_msg1 = "To open an Expanse account, we will need to verify your identity.";",
        "var onfido_dialog_msg2 = "It will only take a couple of minutes.";",
        "var onfido_country_code = "US";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "var mobile = idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber");",
        "var smsNumber = "";",
        "if (mobile && mobile.iterator().hasNext()) {",
        "    smsNumber = String(mobile.iterator().next().toString());",
        "}",
        "",
        "// Inject Onfido SDK into login page",
        "onfidoScript = String("var body=document.body;\\n" +",
        "    "var script = document.createElement('script');\\n" +",
        "    "document.getElementById('callbacksPanel').style.display = 'none';\\n" +",
        "    "var onfido_div = document.createElement(\\"div\\");\\n" +",
        "    "onfido_div.id=\\"onfido-mount\\";\\n" +",
        "    "script.src = 'https://assets.onfido.com/web-sdk-releases/5.2.1/onfido.min.js';\\n" +",
        "    "var head = document.head; \\n " +",
        "    "var link = document.createElement(\\"link\\");  \\n" +",
        "    "     link.type = \\"text/css\\"; \\n " +",
        "    "     link.rel = \\"stylesheet\\"; \\n " +",
        "    "     link.href = 'https://assets.onfido.com/web-sdk-releases/5.2.1/style.css'; \\n " +",
        "    "    head.appendChild(link); \\n " +",
        "    ";\\n" +",
        "    "var onfido = {};\\n" +",
        "    "script.onload=function() {\\n" +",
        "    "    onfido=Onfido.init({\\n" +",
        "    "       token: '" + onfido_auth_token + "', \\n" +",
        "    "       useModal: true, \\n" +",
        "    "       isModalOpen: true, \\n" +",
        "    "       smsNumberCountryCode: '" + onfido_country_code + "', \\n" +",
        "    "       userDetails: { \\n" +",
        "    "           smsNumber: '" + smsNumber + "' \\n" +",
        "    "       }, \\n" +",
        "    "       steps: [\\n" +",
        "    "           {\\n" +",
        "    "               type:'welcome',\\n" +",
        "    "               options:{\\n" +",
        "    "                   title:'" + onfido_dialog_title + "',\\n" +",
        "    "                   descriptions:[\\n" +",
        "    "                       '" + onfido_dialog_msg1 + "',\\n" +",
        "    "                       '" + onfido_dialog_msg2 + "',\\n" +",
        "    "                   ]\\n" +",
        "    "               }\\n" +",
        "    "          },\\n" +",
        "    "          'document',\\n" +",
        "    "          'face',\\n" +",
        "    "          'complete',\\n" +",
        "    "       ],\\n" +",
        "    "       onComplete: function(data){ console.log('DONE'); onfido.setOptions({ isModalOpen:false }); document.getElementById('loginButton_0').click(); } \\n" +",
        "    "    })\\n" +",
        "    "};\\n" +",
        "    "document.body.appendChild(script);\\n");",
        "",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api,",
        "    javax.security.auth.callback.NameCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ");",
        "",
        "with (fr) {",
        "    if (callbacks.isEmpty()) {",
        "        logger.error("Onfido-CaptureEvidence: Sending callbacks");",
        "        action = Action.send(new ScriptTextOutputCallback(onfidoScript)).build();",
        "    } else {",
        "        logger.error("Onfido-CaptureEvidence: End (outcome=true)");",
        "        action = Action.goTo("true").build();",
        "    }",
        "}",
      ],
    },
    "71b3c70b-920c-464b-a918-4c86eaaddccd": {
      "_id": "71b3c70b-920c-464b-a918-4c86eaaddccd",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Render a dropdown",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Dropdown",
      "script": [
        "/* Dropdown",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Render a dropdown selector",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "  outcome = "true";",
        "  var choices = [" ", "Red pill", "Blue pill", "Steak", "Rabbit hole"];",
        "  ",
        "  var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.ChoiceCallback",
        "  )",
        "",
        "  if (callbacks.isEmpty()) {",
        "    action = fr.Action.send([",
        "      new fr.ChoiceCallback("Make your choice", choices, 0, false)",
        "    ]).build();",
        "  } else {",
        "    var choice = parseInt(callbacks.get(0).getSelectedIndexes()[0]);",
        "    nodeState.putShared("choice", choices[choice]);",
        "    action = fr.Action.goTo(outcome).build();",
        "  }",
        "}());",
      ],
    },
    "71e3b4ae-52c1-49d6-98fd-c279f43ea3ce": {
      "_id": "71e3b4ae-52c1-49d6-98fd-c279f43ea3ce",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "AAcustomLogic",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "outcome = "false";",
        "var predictionResult = sharedState.get("predictionResult");",
        "var predictionResultString = predictionResult.toString();",
        "",
        "var is_impossible_travel = 0;",
        "var is_credential_stuffing = 0;",
        "var is_automated_user_agent = 0;",
        "var is_brute_force = 0;",
        "var is_suspicious_ip = 0;",
        "",
        "var signal_count = 0;",
        "var position = 0;",
        "",
        "position = predictionResultString.search("is_impossible_travel=false");",
        "if(position<0)",
        "{",
        "  signal_count++;",
        "  is_impossible_travel=1;",
        "}",
        "position = predictionResultString.search("is_credential_stuffing=false");",
        "if(position<0)",
        "{",
        "  signal_count++;",
        "  is_credential_stuffing=1;",
        "}",
        "position = predictionResultString.search("is_automated_user_agent=false");",
        "if(position<0)",
        "{",
        "  signal_count++;",
        "  is_automated_user_agent=1;",
        "}",
        "position = predictionResultString.search("is_brute_force=false");",
        "if(position<0)",
        "{",
        "  signal_count++;",
        "  is_brute_force=1;",
        "}",
        "position = predictionResultString.search("is_suspicious_ip=false");",
        "if(position<0)",
        "{",
        "  signal_count++;",
        "  is_suspicious_ip=1;",
        "}",
        "",
        "sharedState.put("debug-signal-count",signal_count);",
        "if(signal_count>1)",
        "{",
        "     outcome="true"; ",
        "}",
        "",
        "",
        "",
      ],
    },
    "739bdc48-fd24-4c52-b353-88706d75558a": {
      "_id": "739bdc48-fd24-4c52-b353-88706d75558a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Check Username",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "73cecbfc-dad0-4395-be6a-6858ee3a80e5": {
      "_id": "73cecbfc-dad0-4395-be6a-6858ee3a80e5",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Microsoft",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Microsoft Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        "{",
        "    "@odata.context": "https://graph.microsoft.com/v1.0/$metadata#users/$entity",",
        "    "@odata.id": "https://graph.microsoft.com/v2/711ffa9c-5972-4713-ace3-688c9732614a/directoryObjects/7d7759e2-36d8-4e64-b173-3f890d7d46d6/Microsoft.DirectoryServices.User",",
        "    "businessPhones": [",
        "        "18014735451"",
        "    ],",
        "    "displayName": "Volker Scheuber",",
        "    "givenName": "Volker",",
        "    "jobTitle": null,",
        "    "mail": "vscheuber@vscheuber.onmicrosoft.com",",
        "    "mobilePhone": null,",
        "    "officeLocation": null,",
        "    "preferredLanguage": null,",
        "    "surname": "Scheuber",",
        "    "userPrincipalName": "vscheuber@vscheuber.onmicrosoft.com",",
        "    "id": "7d7759e2-36d8-4e64-b173-3f890d7d46d6"",
        "}",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.message("Kauai Microsoft Profile Normalization: rawProfile={}", rawProfile)",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.displayName),",
        "        field("givenName", rawProfile.givenName),",
        "        field("familyName", rawProfile.surname),",
        "        field("email", rawProfile.userPrincipalName),",
        "        field("username", rawProfile.userPrincipalName),",
        "        field("groups", rawProfile.groups)))",
      ],
    },
    "740cf6fa-a173-4e9d-b17c-44758e9b19ec": {
      "_id": "740cf6fa-a173-4e9d-b17c-44758e9b19ec",
      "context": "CONFIG_PROVIDER_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "CP-InnerTreeEvaluator-static-inner2",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "CP-ITE-static-inner2",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/**",
        " * The following script is a simplified template for understanding how to build",
        " * up a config Map object with custom values. The Config Provider Node will then",
        " * provide this config Map to the desired node type. It is important that the Map",
        " * you build here is named 'config'.",
        " *",
        " * Defined variables:",
        " *",
        " * nodeState - Node State (1)",
        " *           Always present, this represents the current values stored in the node state.",
        " *",
        " * idRepository - Profile Data (2)",
        " *           Always present, a repository to retrieve user information.",
        " *",
        " * secrets - Credentials and Secrets (3)",
        " *           Always present, an interface to access the Secrets API from a scripting context.",
        " *",
        " * requestHeaders (4) - Map (5)",
        " *           Always present, an object that provides methods for accessing headers in the login request.",
        " *",
        " * logger - Debug Logging (6)",
        " *          Always present, the debug logger instance.",
        " *",
        " * httpClient - HTTP Client (7)",
        " *          Always present, the HTTP client that can be used to make external HTTP requests.",
        " *",
        " * realm - String (primitive).",
        " *          Always present, the name of the realm the user is authenticating to.",
        " *",
        " * existingSession - Map<String, String> (5)",
        " *          Present if the request contains the session cookie, the user's session object. The returned map from",
        " *          SSOToken.getProperties() (8)",
        " *",
        " * requestParameters - Map (5)",
        " *          Always present, the object that contains the authentication request parameters.",
        " *",
        " *",
        " * Outputs:",
        " *",
        " * config - Map (5)",
        " *           Define and fill a Map object named 'config' with custom values, this will define the configuration for the",
        " *           associated node selected in the ConfigProviderNode.",
        " *",
        " * Reference:",
        " * (1) Node State - https://backstage.forgerock.com/docs/idcloud-am/latest/authentication-guide/scripting-api-node.html#scripting-api-node-nodeState",
        " * (2) Profile Data - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-node-id-repo",
        " * (3) Credentials and Secrets - https://backstage.forgerock.com/docs/am/7.1/authentication-guide/scripting-api-node.html#scripting-api-authn-secrets",
        " * (4) Request Headers - https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html",
        " * (6) Debug Logging - https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " * (7) HTTP Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " * (8) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " */",
        "",
        "config = {",
        "  tree: 'inner2'",
        "};",
      ],
    },
    "743351b3-001a-4ec8-b3ac-a674ddb8de22": {
      "_id": "743351b3-001a-4ec8-b3ac-a674ddb8de22",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Enrich user session with UOP class ID.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "UOP Enrich Session",
      "script": [
        "/* UOP Enrich Session",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Add current class ID to user session.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is. ",
        " * It requires the Identify Existing User node before it is being called.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " */",
        "logger.warning("UOP Enrich Session: start");",
        "outcome = "false";",
        "",
        "if (sharedState.get("uopCurrentClassID")) {",
        "    outcome = "true";",
        "    logger.warning("UOP Enrich Session: going to enrich session with class id: ".concat(sharedState.get("uopCurrentClassID")));",
        "  ",
        "    var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api",
        "    );",
        "",
        "    with (fr) {",
        "        logger.warning("UOP Enrich Session: End (outcome=".concat(outcome).concat(")"));",
        "        action = Action.goTo(outcome).putSessionProperty("UOPClassID", sharedState.get("uopCurrentClassID")).build();",
        "    }",
        "  ",
        "} else {",
        "    logger.error("UOP Enrich Session: no classes!");",
        "    logger.warning("UOP Enrich Session: End (outcome=".concat(outcome).concat(")"));",
        "}",
      ],
    },
    "76421cb0-0550-43e7-89f8-51ad1d95d306": {
      "_id": "76421cb0-0550-43e7-89f8-51ad1d95d306",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Detect and preserve currently active theme before setting the new theme.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Set Theme",
      "script": [
        "/* Set Theme",
        " * ",
        " * Detect and preserve currently active theme before setting the new theme.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      outcome = "true";",
        "      ",
        "      var theme = "Expanse_MFA";",
        "",
        "    // do not change, must be a random identifier",
        "    var anchor = generateNumericToken('xxx');",
        "  ",
        "      var script = "";",
        "    script += "document.getElementById(\\"theme-id-"+anchor+"\\").value = localStorage.getItem('theme-id');";",
        "    script += "console.log('theme-id='+document.getElementById(\\"theme-id-"+anchor+"\\").value);";",
        "      script += "document.getElementById(\\"loginButton_0\\").click();";",
        "",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          org.forgerock.openam.authentication.callbacks.PollingWaitCallback,",
        "        com.sun.identity.authentication.callbacks.HiddenValueCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    // discover active theme from UI",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.HiddenValueCallback("theme-id-"+anchor, "false"),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build();",
        "    }",
        "      // get active theme from callback and set new theme",
        "      else if (callbacks.size() === 2) {",
        "        // did we get the id of the currently active theme?",
        "        if (callbacks.get(0).getValue() !== "theme-id-"+anchor) {",
        "              sharedState.put("themeId", callbacks.get(0).getValue());",
        "        }",
        "        // set new theme",
        "        var stage = "themeId="+theme;",
        "        action = fr.Action.send(",
        "              new fr.PollingWaitCallback("100", "Please wait ...")",
        "        ).withStage(stage).build();",
        "    }",
        "      else {",
        "        // continue",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "     /*",
        "      * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "      * ",
        "      * Example:",
        "      * 'xxxxx' produces '28535'",
        "      * 'xxx-xxx' produces '432-521'",
        "      */",
        "    function generateNumericToken(format) {",
        "        return format.replace(/[x]/g, function(c) {",
        "            var r = Math.random()*10|0;",
        "            var v = r;",
        "            return v.toString(10);",
        "        });",
        "    }",
        "}());",
      ],
    },
    "766ed2a6-29dd-4bd7-a60d-9eabbd63545c": {
      "_id": "766ed2a6-29dd-4bd7-a60d-9eabbd63545c",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Service Account - Verify JWT",
      "script": [
        "var fr = JavaImporter(",
        "  org.forgerock.util.Options,",
        "  org.forgerock.json.jose.jwk.JWKSet,",
        "  org.forgerock.json.jose.jws.SigningManager,",
        "  org.forgerock.json.jose.builders.JwtBuilderFactory,",
        "  org.forgerock.json.jose.jws.SignedJwt",
        ");",
        "",
        "var sm = new fr.SigningManager();",
        "",
        "function getJWKs(svcAcctId) {",
        "  var svcAcct = idRepository.getIdentity(svcAcctId);",
        "  if (svcAcct == null) {",
        "    logger.message('No service account found for {}', svcAcctId);",
        "    return null;",
        "  }",
        "  var jwksAttrs = svcAcct.getAttributeValues('fr-attr-jwks');",
        "  if (!jwksAttrs || jwksAttrs.length === 0) {",
        "    logger.message('No jwks attributes in issuer');",
        "    return null;",
        "  }",
        "  var jwkSet = jwksAttrs[0];",
        "  if (!jwkSet) {",
        "    logger.message('No jwk set in jwks attribute in issuer');",
        "    return null;",
        "  }",
        "  return fr.JWKSet.parse(jwkSet).getJWKsAsList();",
        "}",
        "",
        "outcome = (function () {",
        "  var authz = requestHeaders.get('authorization');",
        "  if (authz === null || authz.length === 0 || authz[0].indexOf('svcacct') !== 0) {",
        "    logger.message('No authorization header');",
        "    return 'False';",
        "  }",
        "",
        "  authz = authz[0].split(' ');",
        "  if (authz.length !== 3) {",
        "    logger.message('Bad authorization header length {}', authz.length);",
        "    return 'False';",
        "  }",
        "  var svcAcctId = authz[1];",
        "  var jwt = authz[2];",
        "  var signedJwt = new fr.JwtBuilderFactory().reconstruct(jwt, fr.SignedJwt);",
        "",
        "  var jwks = getJWKs(svcAcctId);",
        "  for (var i = 0; i < jwks.size(); i++) {",
        "    var verifier = sm.newVerificationHandler(jwks.get(i))",
        "    if (signedJwt.verify(verifier)) {",
        "      nodeState.putShared("username", svcAcctId);",
        "      return 'True';",
        "    }",
        "  }",
        "",
        "  logger.message('Could not verify jwt');",
        "  return 'False';",
        "})();",
      ],
    },
    "779bb956-676d-4e44-b828-b9efa3c866d4": {
      "_id": "779bb956-676d-4e44-b828-b9efa3c866d4",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ForgeRockVpnOnly",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "",
        "var validIpAddresses = [",
        "  "37.71.148.92", // FR Grenoble",
        "  "84.214.156.50", // FR Oslo",
        "  "180.255.64.26", // FR Singapore",
        "  "128.106.105.136", // FR Singapore Sales",
        "  "188.39.235.130", // FR Bristol",
        "  "78.33.22.162", // FR Bristol Marsh Street",
        "  "65.113.98.10", // FR San Francisco",
        "  "24.155.146.18" // FR Austin",
        "];",
        "",
        "try {",
        "  outcome = function() {",
        "    logger.message(requestHeaders);",
        "    var vpnBypassSecret = systemEnv.getProperty('esv.amadmin.vpn.bypass.secret', '') + '';",
        "    var bypassHeader = requestHeaders.get(new java.lang.String('x-forgerock-tests-bearer'));",
        "    logger.message("checking for VPN bypass - header {} to match secret {}", bypassHeader, vpnBypassSecret);",
        "    if (vpnBypassSecret && bypassHeader && bypassHeader.size() === 1) {",
        "      logger.message("bypass header is present");",
        "      if (bypassHeader.get(0) + '' === vpnBypassSecret + '') {",
        "        logger.warning("bypassing VPN check - request from tests authorized");",
        "        return 'True';",
        "      }",
        "    }",
        "    var clientIpAddresses = requestHeaders.get(new java.lang.String('x-forwarded-for'));",
        "    logger.message(clientIpAddresses);",
        "    if (!clientIpAddresses) {",
        "      logger.message("No forwarded header - internal cluster request");",
        "      return 'True';",
        "    }",
        "    for (var i = 0; i < clientIpAddresses.size(); i++) {",
        "      var clientIpHeader = clientIpAddresses.get(i);",
        "      var ipAddresses = clientIpHeader.split(',');",
        "      for (var j = 0; j < ipAddresses.length; j++) {",
        "        var clientIp = ipAddresses[j].trim();",
        "        logger.message('Checking client IP ' + clientIp);",
        "        for (var k = 0; k < validIpAddresses.length; k++) {",
        "          if (clientIp + '' === validIpAddresses[k]) {",
        "            logger.warning("request from ForgeRock VPN authorized");",
        "            return 'True';",
        "          }",
        "        }",
        "      }",
        "    }",
        "    logger.warning("request from outside the cluster and not from ForgeRock VPN rejected");",
        "    return 'False';",
        "  }();",
        "",
        "} catch (e) {",
        "",
        "  logger.error('ForgeRockVpnOnly failed to check IP');",
        "  logger.error(e);",
        "  outcome = 'Error';",
        "",
        "}",
        "",
      ],
    },
    "790045fa-a325-4e3e-96f8-d4a91b32e9de": {
      "_id": "790045fa-a325-4e3e-96f8-d4a91b32e9de",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Use Have I Been Pwned Password to check if password has been breached.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "HIBP Password Breach Analysis",
      "script": [
        "/* HIBP Password Breach Analysis",
        " *",
        " * Authors: jon.knight@forgerock.com, volker.scheuber@forgerock.com",
        " * ",
        " * Use Have I Been Pwned Password to check if password has been breached.",
        " * Calls HIBP API to retrieve the count of matching passwords in breached ",
        " * password database",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Password or Platform Password collector nodes before",
        " * it can operate.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - clear",
        " *   The number of breaches for password was either zero or less than the ",
        " *   value of THRESHOLD",
        " * - breached ",
        " *   The number of incidents of the password in the breached password ",
        " *   database exceeds THRESHOLD",
        " * - failed",
        " *   The API call was rejected.",
        " */",
        "(function () {",
        "    var USER_AGENT="ForgeRock";",
        "    var HIBP_API_KEY=systemEnv.getProperty("esv.hibp.api.key");",
        "    var THRESHOLD=0;",
        "",
        "    function toHexString(byteArray) {",
        "        var s = '';",
        "        byteArray.forEach(function(byte) {",
        "            s += ('0' + (byte & 0xFF).toString(16)).slice(-2);",
        "        });",
        "        return s;",
        "    }",
        "",
        "    outcome = "failed";",
        "",
        "    var md = java.security.MessageDigest.getInstance('SHA-1');",
        "      var password = nodeState.get("password").asString();",
        "//      var password = new java.lang.String("");",
        "//      if (nodeState.get("password")) {",
        "//      password = nodeState.get("password").asString();",
        "//    }",
        "    var byteArray = password.getBytes("UTF-8");",
        "    md.update(byteArray);",
        "    var digest = md.digest();",
        "    var hex = String(toHexString(digest)).toUpperCase();",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('GET');",
        "    request.setUri('https://api.pwnedpasswords.com/range/' + hex.substring(0,5));",
        "    request.getHeaders().add("Accept","*/*");",
        "    request.getHeaders().add("Content-Type","application/json");",
        "    request.getHeaders().add("User-Agent", USER_AGENT);",
        "    request.getHeaders().add("hibp-api-key", HIBP_API_KEY);",
        "",
        "    var response = httpClient.send(request).get();",
        "",
        "    if (response.getStatus().getCode() === 200) {",
        "        var max = 0;",
        "        outcome = "clear";",
        "        var result = response.getEntity().getString();",
        "        var lines = result.split('\\n');",
        "        for (i=0; i<lines.length; i++) {",
        "            var prefix = lines[i].split(':')[0];",
        "            if (String(hex.substring(0,5) + prefix) == hex) {",
        "                var count = lines[i].split(':')[1];",
        "                if (count > max) max = count;",
        "            }",
        "        }",
        "        if (max > THRESHOLD) outcome = "breached";",
        "        sharedState.put("hibp_password_count", max);",
        "    }",
        "}());",
      ],
    },
    "7dce8f07-d9fe-4752-94b9-ff99dfd0433b": {
      "_id": "7dce8f07-d9fe-4752-94b9-ff99dfd0433b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Parse parameters of the incoming call.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Parse Call Parameters",
      "script": [
        "/* Twilio IVR Integration",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "",
        "logger.warning("Twilio IVR: Parse Call Parameters: start");",
        "outcome = "false";",
        "",
        "/* Begin Twilio IVR Configuration Parameters",
        " *",
        " * These are used to protect this journey so it is only being executed by your Twilio account.",
        " */",
        "var TWILIO_ACCOUNT_SID = "AC750415e3163a2e57b7aeea7eed82d944";",
        "var TWILIO_PHONE_NUMBER = "+13176443107";",
        "",
        "// keep the params to a minimum to minimize authentication session size",
        "var callParams = {",
        "  //"CallSid" : decodeURIComponent(requestParameters.get("CallSid").get(0)),",
        "  "AccountSid" : decodeURIComponent(requestParameters.get("AccountSid").get(0)),",
        "  "From" : decodeURIComponent(requestParameters.get("From").get(0)),",
        "  "To" : decodeURIComponent(requestParameters.get("To").get(0)),",
        "  //"CallStatus" : decodeURIComponent(requestParameters.get("CallStatus").get(0)),",
        "  //"ApiVersion" : decodeURIComponent(requestParameters.get("ApiVersion").get(0)),",
        "  //"Direction" : decodeURIComponent(requestParameters.get("Direction").get(0)),",
        "  //"ForwardedFrom" : decodeURIComponent(requestParameters.get("ForwardedFrom").get(0)),",
        "  //"CallerName" : decodeURIComponent(requestParameters.get("CallerNameCallerName").get(0)),",
        "  //"ParentCallSid" : decodeURIComponent(requestParameters.get("ParentCallSid").get(0)),",
        "  //"FromCity" : decodeURIComponent(requestParameters.get("FromCity").get(0)),",
        "  //"FromState" : decodeURIComponent(requestParameters.get("FromState").get(0)),",
        "  //"FromZip" : decodeURIComponent(requestParameters.get("FromZip").get(0)),",
        "  //"FromCountry" : decodeURIComponent(requestParameters.get("FromCountry").get(0)),",
        "  //"ToCity" : decodeURIComponent(requestParameters.get("ToCity").get(0)),",
        "  //"ToState" : decodeURIComponent(requestParameters.get("ToState").get(0)),",
        "  //"ToZip" : decodeURIComponent(requestParameters.get("ToZip").get(0)),",
        "  //"ToCountry" : decodeURIComponent(requestParameters.get("ToCountry").get(0)),",
        "};",
        "",
        "/* End Twilio IVR Configuration Parameters ",
        " */",
        "",
        "if (callParams.AccountSid == TWILIO_ACCOUNT_SID &&",
        "    callParams.To == TWILIO_PHONE_NUMBER) ",
        "{",
        "      outcome = "true";",
        "    sharedState.put("TwilioIVRCallParams", callParams);",
        "    setSharedObjectAttribute("telephoneNumber", callParams.From);",
        "}",
        "",
        "logger.warning("Twilio IVR: Parse Call Parameters: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "       var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "7dd80834-e7b2-4737-85a7-40434bb19dde": {
      "_id": "7dd80834-e7b2-4737-85a7-40434bb19dde",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Store the impersontor and impersonatee profile information in session properties.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Impersonate: Update Session Properties",
      "script": [
        "/* Impersonate: Update Session Properties",
        " * ",
        " * Store the impersontor and impersonatee profile information in session properties.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: jake.feasel@forgerock.com, volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      logger.message("Impersonate: Update Session Properties: start");",
        "      outcome = "true";",
        "  ",
        "    var goTo = org.forgerock.openam.auth.node.api.Action.goTo;",
        "    myGoto = goTo(outcome);",
        "    myGoto.putSessionProperty("userName", sharedState.get("username"));",
        "    myGoto.putSessionProperty("impersonator", sharedState.get("impersonator"));",
        "",
        "      logger.message("Impersonate: Update Session Properties: done [outcome={}]", outcome);",
        "    action = myGoto.build();",
        "}());",
      ],
    },
    "7e3d7067-d50f-4674-8c76-a3e13a810c33": {
      "_id": "7e3d7067-d50f-4674-8c76-a3e13a810c33",
      "context": "AUTHENTICATION_SERVER_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for server side Scripted Authentication Module",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Module - Server Side",
      "script": [
        "/*",
        " * Copyright 2015-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "var START_TIME = 9;  // 9am",
        "var END_TIME   = 17; // 5pm",
        "var longitude, latitude;",
        "var localTime;",
        "",
        "logger.message("Starting scripted authentication");",
        "logger.message("User: " + username);",
        "",
        "var userPostalAddress = getUserPostalAddress();",
        "logger.message("User address: " + userPostalAddress);",
        "",
        "getLongitudeLatitudeFromUserPostalAddress();",
        "getLocalTime();",
        "",
        "logger.message("Current time at the users location: " + localTime.getHours());",
        "if (localTime.getHours() < START_TIME || localTime.getHours() > END_TIME) {",
        "    logger.error("Login forbidden outside work hours!");",
        "    authState = FAILED;",
        "} else {",
        "    logger.message("Authentication allowed!");",
        "    authState = SUCCESS;",
        "}",
        "",
        "function getLongitudeLatitudeFromUserPostalAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userPostalAddress));",
        "      request.setMethod("GET");",
        "      //the above URI has to be extended with an API_KEY if used in a frequent manner",
        "      //see documentation: https://developers.google.com/maps/documentation/geocoding/intro",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        latitude = result.geometry.location.lat;",
        "        longitude = result.geometry.location.lng;",
        "      ",
        "           logger.message("latitude:" + latitude + " longitude:" + longitude);",
        "    }",
        "}",
        "",
        "function getLocalTime() {",
        "",
        "    var now = new Date().getTime() / 1000;",
        "    var location = "location=" + latitude + "," + longitude;",
        "    var timestamp = "timestamp=" + now;",
        "        ",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("https://maps.googleapis.com/maps/api/timezone/json?" + location + "&" + timestamp);",
        "      request.setMethod("GET");",
        "      //the above URI has to be extended with an API_KEY if used in a frequent manner",
        "      //see documentation: https://developers.google.com/maps/documentation/timezone/intro",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var timezone = JSON.parse(response.getEntity().getString());",
        "    var localTimestamp = parseInt(now) + parseInt(timezone.dstOffset) + parseInt(timezone.rawOffset);",
        "    localTime = new Date(localTimestamp*1000);",
        "}",
        "",
        "function getUserPostalAddress() {",
        "    var userAddressSet = idRepository.getAttribute(username, "postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    return userAddressSet.iterator().next()",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
      ],
    },
    "7fb962a5-9f20-41d3-a077-b424a29c1198": {
      "_id": "7fb962a5-9f20-41d3-a077-b424a29c1198",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Evaluate IPv4 CIDR access rules from "esv-ipv4-cidr-access-rules".",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "IPv4 CIDR Rules Engine",
      "script": [
        "/* IPv4 CIDR Rules Engine",
        " *",
        " * Author: volker.scheuber@forgerock.com, justin.chin@forgerock.com",
        " * ",
        " * Evaluate IPv4 CIDR access rules from "esv-ipv4-cidr-access-rules". ",
        " * Access rules must have the following format:",
        " * {",
        " *   "allow": [",
        " *     "140.118.0.0/16",",
        " *     "110.35.0.0/16",",
        " *     "131.26.0.0/16",",
        " *     "92.61.21.153/32"",
        " *   ]",
        " * }",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - allow",
        " * - deny",
        " */",
        "(function () {",
        "  outcome = "deny";",
        "  ",
        "  var rules = JSON.parse(systemEnv.getProperty("esv.ipv4.cidr.access.rules"));",
        "  var allow = rules['allow'];",
        "",
        "  /*",
        "   * Returns the value of the requested header",
        "   */",
        "  function getHeader(headerName) {",
        "    return requestHeaders.get(headerName).get(0);",
        "  }",
        "",
        "  /*",
        "   * Returns the client's IP address",
        "   */",
        "  function getClientIPAddress() {",
        "    return getHeader("x-forwarded-for").split(',')[0];",
        "  }",
        "",
        "  function IPnumber(IPaddress) {",
        "    var ip = IPaddress.match(/^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/);",
        "    if (ip) {",
        "      return (+ip[1] << 24) + (+ip[2] << 16) + (+ip[3] << 8) + +ip[4];",
        "    }",
        "    // else ... ?",
        "    return null;",
        "  }",
        "",
        "  function IPmask(maskSize) {",
        "    return -1 << (32 - maskSize);",
        "  }",
        "",
        "  function isAllowed(ip) {",
        "    var allowed = false;",
        "    allow.forEach((cidr) => {",
        "      if (",
        "        (IPnumber(ip) & IPmask(cidr.split('/')[1])) ==",
        "        IPnumber(cidr.split('/')[0])",
        "      ) {",
        "        allowed = true;",
        "      }",
        "    });",
        "    return allowed;",
        "  }",
        "  ",
        "  if (isAllowed(getClientIPAddress())) {",
        "    outcome = "allow";",
        "  }",
        "}());",
      ],
    },
    "809330cf-874c-4d57-a8f1-5882c6dd855b": {
      "_id": "809330cf-874c-4d57-a8f1-5882c6dd855b",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Converts a normalized social profile for iddataweb into a Managed user",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Normalized idddataweb Profile to Managed User",
      "script": [
        "/* Normalized idddataweb Profile to Managed User",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS. Not for production use.",
        " * Modified by Stephen Payne, 2021-Mar-30",
        " */",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "import org.forgerock.json.JsonValue",
        "logger.error("Normalized_Profile_IDDataWeb: Start " + normalizedProfile);",
        "",
        "JsonValue managedUser = json(object(",
        "        field("givenName", normalizedProfile.givenName),",
        "        field("sn", normalizedProfile.familyName),",
        "        field("userName", normalizedProfile.username)))",
        "if (normalizedProfile.postalAddress.isNotNull()) managedUser.put("postalAddress", normalizedProfile.postalAddress)",
        "if (normalizedProfile.addressLocality.isNotNull()) managedUser.put("city", normalizedProfile.addressLocality)",
        "if (normalizedProfile.addressRegion.isNotNull()) managedUser.put("stateProvince", normalizedProfile.addressRegion)",
        "if (normalizedProfile.postalCode.isNotNull()) managedUser.put("postalCode", normalizedProfile.postalCode)",
        "if (normalizedProfile.country.isNotNull()) managedUser.put("country", normalizedProfile.country)",
        "if (normalizedProfile.phone.isNotNull()) managedUser.put("telephoneNumber", normalizedProfile.phone)",
        "if (normalizedProfile.DOB.isNotNull()) managedUser.put("frIndexedString2", normalizedProfile.DOB)",
        "",
        "return managedUser",
        "",
      ],
    },
    "80c3e733-ae51-4851-a01d-1cbf193c80e9": {
      "_id": "80c3e733-ae51-4851-a01d-1cbf193c80e9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Activates the admin's account",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_SetOnboardingAttributes",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "function utcNow() {",
        "  return new Date().toISOString();",
        "}",
        "",
        "try {",
        "  ",
        "  var OBJECT_ATTRS = 'objectAttributes';",
        "",
        "  // Start by getting object attributes from shared state",
        "  var sharedObjAttrs = sharedState.get(OBJECT_ATTRS);",
        "  sharedObjAttrs.put('accountStatus', 'Active');",
        "  sharedObjAttrs.put('onboardDate', utcNow());",
        "  ",
        "  // Copy attributes from transient state",
        "  var transientObjAttrs = nodeState.get(OBJECT_ATTRS);",
        "  var attrs = ['aliasList', 'givenName', 'password', 'sn'];",
        "  for (var i = 0; i < attrs.length; i++) {",
        "    var val = transientObjAttrs.get(attrs[i]);",
        "    if (val.isNotNull()) {",
        "      sharedObjAttrs.put(attrs[i], val);",
        "    }",
        "  }",
        "  ",
        "  // Ensure object attributes match in both shared and transient state",
        "  nodeState.putTransient(OBJECT_ATTRS, sharedObjAttrs);",
        "  sharedState.put(OBJECT_ATTRS, sharedObjAttrs);",
        "  outcome = 'Success';",
        "",
        "} catch (e) {",
        "",
        "  logger.error('Failed to set attributes to complete onboarding: {}', e);",
        "  outcome = 'Error';",
        "",
        "}",
        "",
      ],
    },
    "847aab1b-c739-4d64-b26c-180f96cba02b": {
      "_id": "847aab1b-c739-4d64-b26c-180f96cba02b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Select and apply theme from based on the browser language in the request.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Select Theme by Browser Language",
      "script": [
        "/* Select Theme by Browser Language",
        " * ",
        " * Select and apply theme from based on the browser language in the request.",
        " * ",
        " * This script needs to be parametrized!",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    /******************************/",
        "    /* Begin Script Configuration */",
        "",
        "    // the script expects the themes to be named <baseTheme>_<language>, e.g. "Zardoz_en"",
        "    var baseTheme = "Zardoz";",
        "",
        "    // add all the language codes you want to support",
        "    var supportedLanguages = ["de", "en", "fr"];",
        "",
        "    // specify the default language to fall back on if the browser language is not a supported language",
        "    var defaultLanguage = "en";",
        "",
        "    /* End Script Configuration   */",
        "    /******************************/",
        "",
        "    outcome = "true";",
        "    var theme = getThemeByLanguage(baseTheme);",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        org.forgerock.openam.authentication.callbacks.PollingWaitCallback",
        "    )",
        "    if (theme && callbacks.isEmpty()) {",
        "        var stage = "themeId=" + theme;",
        "        action = fr.Action.send(",
        "            new fr.PollingWaitCallback("100", "Please wait ...")",
        "        ).withStage(stage).build();",
        "    } else {",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "    /*",
        "     * Returns the name of the theme to select based on browser language",
        "     */",
        "    function getThemeByLanguage(theme) {",
        "        var languageHeader = getHeader("accept-language");",
        "        var language = languageHeader.split(';')[0].split(',')[0].split('-')[0];",
        "        if (supportedLanguages.indexOf(language) < 0) {",
        "            language = defaultLanguage;",
        "        }",
        "        return theme + "_" + language;",
        "    }",
        "",
        "    /*",
        "     * Returns the value of the requested header",
        "     */",
        "    function getHeader(headerName) {",
        "        return requestHeaders.get(headerName).get(0) + "";",
        "    }",
        "}());",
      ],
    },
    "849ef5f3-7481-4607-a668-f0b5bf47db4c": {
      "_id": "849ef5f3-7481-4607-a668-f0b5bf47db4c",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Goodbye Message",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Goodbye Message",
      "script": [
        "/* Twilio IVR: Goodbye Message",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "logger.warning("Twilio IVR: Goodbye Message: start");",
        "outcome = "true";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// Build out the full message",
        "var message = "Thank you for calling ForgeRock Identity Cloud. Goodbye!";",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextOutputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var output = new TextOutputCallback(TextOutputCallback.INFORMATION, message);",
        "        action = Action.send(output).build();",
        "      } ",
        "      else {",
        "        logger.warning("Twilio IVR: Goodbye Message: finish [outcome=".concat(outcome).concat("]"));",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
      ],
    },
    "8508a00e-ad45-4310-b3c7-c6871b6a41a9": {
      "_id": "8508a00e-ad45-4310-b3c7-c6871b6a41a9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Browser Language Decision",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Browser Language Decision",
      "script": [
        "/* Browser Language Decision",
        " * ",
        " * Detect the browser language in the request and branch out to its named exit (e.g.: "de" or "en" or "fr") ",
        " * if it is part of the supportedLanguages array, otherwise take the "other" exit.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - other",
        " * - <all of the items in the supportedLanguages array>",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      /******************************/",
        "      /* Begin Script Configuration */",
        "      ",
        "      // add all the language codes you want to support",
        "      var supportedLanguages = ["de","en","fr"];",
        "      ",
        "      /* End Script Configuration   */",
        "      /******************************/",
        "  ",
        "      outcome = getBrowserLanguage();",
        "      ",
        "    /*",
        "     * Returns the supported browser language or "other"",
        "     */",
        "    function getBrowserLanguage() {",
        "          var languageHeader = getHeader("accept-language");",
        "          var language = languageHeader.split(';')[0].split(',')[0].split('-')[0];",
        "          if (supportedLanguages.indexOf(language) < 0) {",
        "              return "other";",
        "        }",
        "        return language;",
        "    }",
        "",
        "    /*",
        "     * Returns the value of the requested header",
        "     */",
        "    function getHeader(headerName) {",
        "        return requestHeaders.get(headerName).get(0)+"";",
        "    }",
        "}());",
      ],
    },
    "85523e71-2d77-4577-b078-6f9674cc54e2": {
      "_id": "85523e71-2d77-4577-b078-6f9674cc54e2",
      "context": "SAML2_IDP_ADAPTER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Always redirect browser pre-auth",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Adapter Always Auth",
      "script": [
        "/*",
        " * Copyright 2021-2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * The script has these top level functions that could be executed during a SAML2 flow.",
        " *      - preSingleSignOn",
        " *      - preAuthentication",
        " *      - preSendResponse",
        " *      - preSignResponse",
        " *      - preSendFailureResponse",
        " *",
        " * Please see the javadoc for the interface definition and more information about these methods.",
        " * https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/SAML2IdentityProviderAdapter.html",
        " * Note that the initialize method is not supported in the scripts.",
        " *",
        " * Defined variables. Check the documentation on the respective functions for the variables available to it.",
        " *",
        " * hostedEntityId - String",
        " *     Entity ID for the hosted IDP",
        " * realm - String",
        " *     Realm of the hosted IDP",
        " * idpAdapterScriptHelper - IdpAdapterScriptHelper (1)",
        " *     An instance of IdpAdapterScriptHelper containing helper methods. See Javadoc for more details.",
        " * request - HttpServletRequest (2)",
        " *     Servlet request object",
        " * response - HttpServletResponse (3)",
        " *     Servlet response object",
        " * authnRequest - AuthnRequest (4)",
        " *     The original authentication request sent from SP",
        " * reqId - String",
        " *     The id to use for continuation of processing if the adapter redirects",
        " * res - Response (5)",
        " *     The SAML Response",
        " * session - SSOToken (6)",
        " *     The single sign-on session. The reference type of this is Object and would need to be casted to SSOToken.",
        " * relayState - String",
        " *     The relayState that will be used in the redirect",
        " * faultCode - String",
        " *     the fault code that will be returned in the SAML response",
        " * faultDetail - String",
        " *     the fault detail that will be returned in the SAML response",
        " * logger - Logger instance",
        " *     https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *     Corresponding log files will be prefixed with: scripts.<script name>",
        " *",
        " * Throws SAML2Exception (7):",
        " *     for any exceptions occurring in the adapter. The federation process will continue",
        " *",
        " * Class reference:",
        " * (1) idpAdapterScriptHelper - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAdapterScriptHelper.html.",
        " * (2) HttpServletRequest - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html.",
        " * (3) HttpServletResponse - https://tomcat.apache.org/tomcat-7.0-doc/servletapi/javax/servlet/http/HttpServletResponse.html.",
        " * (4) AuthnRequest - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/AuthnRequest.html.",
        " * (5) Response - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/protocol/Response.html.",
        " * (6) SSOToken - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (7) SAML2Exception - https://backstage.forgerock.com/docs/am/7.2/apidocs/com/sun/identity/saml2/common/SAML2Exception.html.",
        " */",
        "",
        "/*",
        " * Template/default script for SAML2 IDP Adapter scripted plugin.",
        " */",
        "",
        "/*",
        " * Available variables for preSingleSignOn:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preSingleSignOn () {",
        "      logger.error("Chicago: preSingleSignOn");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preAuthentication:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection is happening after processing, false otherwise. Default to false.",
        " */",
        "function preAuthentication () {",
        "      logger.error("Chicago: preAuthentication");",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSendResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     response",
        " *     reqId",
        " *     session",
        " *     relayState",
        " *     logger",
        " *",
        " * Return - true if browser redirection happened after processing, false otherwise. Default to false.",
        " */",
        "function preSendResponse () {",
        "      logger.error("Chicago: preSendResponse");",
        "      logger.error("Chicago: authnRequest: "+authnRequest);",
        "      response.sendRedirect("https://idc.scheuber.io/am/XUI/?realm=alpha&authIndexType=service&authIndexValue=Dispatcher&ForceAuth=true&goto="+relayState);",
        "    return true;",
        "}",
        "",
        "/*",
        " * Available variables for preSignResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     authnRequest",
        " *     session",
        " *     relayState",
        " *     res",
        " *     logger",
        " */",
        "function preSignResponse () {",
        "      logger.error("Chicago: preSignResponse");",
        "}",
        "",
        "/*",
        " * Available variables for preSendFailureResponse:",
        " *     hostedEntityId",
        " *     realm",
        " *     idpAdapterScriptHelper",
        " *     request",
        " *     response",
        " *     faultCode",
        " *     faultDetail",
        " *     logger",
        " */",
        "function preSendFailureResponse () {",
        "      logger.error("Chicago: preSendFailureResponse");",
        "}",
      ],
    },
    "87497360-d89c-412a-a99e-c8a9bec465cc": {
      "_id": "87497360-d89c-412a-a99e-c8a9bec465cc",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ipstack",
      "script": [
        "logger.warning("ipstack: start");",
        "",
        "outcome = "unknown";",
        "",
        "var ip = getClientIPAddress();",
        "logger.warning("ipstack: ip=".concat(ip));",
        "",
        "if (ip) {",
        "",
        "      // ipstack API Configuration",
        "    var IPSTACK_ACCESS_KEY = "efc2f8d9796b9feff5f03359d6fbccc9";",
        "    var IPSTACK_API_URI = "http://api.ipstack.com/".concat(ip).concat("?access_key=").concat(IPSTACK_ACCESS_KEY);    ",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('GET');",
        "    request.setUri(IPSTACK_API_URI);",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    logger.warning("ipstack: JSON result: " + JSON.stringify(result));",
        "",
        "      /*",
        "    {",
        "        "ip": "99.72.28.182",",
        "        "type": "ipv4",",
        "        "continent_code": "NA",",
        "        "continent_name": "North America",",
        "        "country_code": "US",",
        "        "country_name": "United States",",
        "        "region_code": "TX",",
        "        "region_name": "Texas",",
        "        "city": "Georgetown",",
        "        "zip": "78626",",
        "        "latitude": 30.592500686645508,",
        "        "longitude": -97.66710662841797,",
        "        "location": {",
        "            "geoname_id": 4693342,",
        "            "capital": "Washington D.C.",",
        "            "languages": [",
        "                {",
        "                    "code": "en",",
        "                    "name": "English",",
        "                    "native": "English"",
        "                }",
        "            ],",
        "            "country_flag": "http://assets.ipstack.com/flags/us.svg",",
        "            "country_flag_emoji": "🇺🇸",",
        "            "country_flag_emoji_unicode": "U+1F1FA U+1F1F8",",
        "            "calling_code": "1",",
        "            "is_eu": false",
        "        }",
        "    }",
        "    */",
        "  ",
        "      // preserve result in transient state",
        "      transientState.put("ipstack", JSON.stringify(result));",
        "",
        "    switch(result.country_code) {",
        "      case "CA":",
        "        outcome = result.country_code;",
        "        break;",
        "      case "UK":",
        "        outcome = result.country_code;",
        "        break;",
        "      case "US":",
        "        outcome = result.country_code;",
        "        break;",
        "      default:",
        "        outcome = "other";",
        "    }",
        "",
        "} else {",
        "      logger.error("ipstack: no client ip!");",
        "}",
        "",
        "logger.warning("ipstack: finish");",
        "",
        " /*",
        "  * !!! ASSUMES ID CLOUD !!!",
        "  *",
        "  * Returns the client's IP address",
        "  */",
        " function getClientIPAddress() {",
        "    return requestHeaders.get("x-forwarded-for").get(0).split(',')[0];",
        " }",
      ],
    },
    "878816b3-2bb4-4b43-8001-10f926ddefff": {
      "_id": "878816b3-2bb4-4b43-8001-10f926ddefff",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Switch Actors And Become Impersonatee.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Impersonate: Switch Actors And Become Impersonatee",
      "script": [
        "/* Impersonate: Switch Actors And Become Impersonatee",
        " *",
        " * Switch Actors And Become Impersonatee.",
        " *",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " */",
        "",
        "(function () {",
        "    logger.warning("Impersonate: Switch Actors: start");",
        "    outcome = "false";",
        "",
        "    var impersonatee = sharedState.get("impersonatee");",
        "    var impersonator = sharedState.get("impersonator");",
        "    if (impersonatee && impersonator) {",
        "        outcome = "true";",
        "        sharedState.put("username", impersonatee);",
        "        setSharedObjectAttribute("userName", impersonatee);",
        "    }",
        "",
        "    logger.warning("Impersonate: Switch Actors: finish [outcome=".concat(outcome).concat("]"));",
        "  ",
        "    /*",
        "     * Store attributes in shared state for use with the Create/Patch Object nodes.",
        "     */",
        "    function setSharedObjectAttribute(name, value) {",
        "         var storage = sharedState.get("objectAttributes");",
        "        if (storage && value) {",
        "            if (storage.put) {",
        "                  storage.put(name, value);",
        "            }",
        "            else {",
        "                storage[name] = value;",
        "            }",
        "        }",
        "        else if (value) {",
        "            sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "        }",
        "    }",
        "}());",
      ],
    },
    "8862ca8f-7770-4af5-a888-ac0df0947f36": {
      "_id": "8862ca8f-7770-4af5-a888-ac0df0947f36",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from LinkedIn",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "LinkedIn Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("givenName", rawProfile.firstName.localized.get(0)),",
        "        field("familyName", rawProfile.lastName.localized.get(0)),",
        "        field("photoUrl", rawProfile.profilePicture.displayImage),",
        "        field("email", rawProfile.elements.get(0).get("handle~").emailAddress),",
        "        field("username", rawProfile.elements.get(0).get("handle~").emailAddress)))",
      ],
    },
    "89eff37a-2e1e-47c2-8d62-5f7417fbb6b4": {
      "_id": "89eff37a-2e1e-47c2-8d62-5f7417fbb6b4",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Return TextOutputCallback indicating the provided OTP was invalid.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OTP Invalid",
      "script": [
        "/* OTP Invalid",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Return TextOutputCallback indicating the provided OTP was invalid.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "outcome = "true";",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback",
        ")",
        "if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            "INVALID"",
        "        )",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo(outcome).build();",
        "}",
      ],
    },
    "8a768bb3-01cd-46b8-881c-b77f5a26c283": {
      "_id": "8a768bb3-01cd-46b8-881c-b77f5a26c283",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Write Onfido HTML Meta Tags",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Onfido-Meta-Tags",
      "script": [
        "/* Write HTML Meta Tags",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * This script writes meta tags to the header.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "  var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api.Action,",
        "      com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "  )",
        "",
        "  function createScript() {",
        "    return String("\\n\\",
        "    Array.prototype.slice.call(\\n\\",
        "      document.getElementsByTagName('head')\\n\\",
        "    ).forEach(\\n\\",
        "      function (e) {\\n\\",
        "        var meta = document.createElement('meta'); \\n\\",
        "        meta.name = \\"author\\"; \\n\\",
        "        meta.content = \\"John Doe\\"; \\n\\",
        "        document.getElementsByTagName('head')[0].appendChild(meta); \\n\\",
        "      }\\n\\",
        "    )");",
        "  }",
        "",
        "  if (callbacks.isEmpty()) {",
        "      action = fr.Action.send(",
        "          new fr.ScriptTextOutputCallback(createScript())",
        "      ).build()",
        "  } else {",
        "      action = fr.Action.goTo("true").build();",
        "  }",
        "}());",
      ],
    },
    "8bccfdd0-5556-4562-a1ca-6d725a449556": {
      "_id": "8bccfdd0-5556-4562-a1ca-6d725a449556",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "display country",
      "script": [
        "var fr = JavaImporter(",
        "  org.forgerock.openam.auth.node.api,",
        "  javax.security.auth.callback.TextOutputCallback",
        ");",
        "  ",
        "outcome = "true";",
        "",
        "var country = "unknown";",
        "if (transientState.get("ipstack")) {",
        "    country = JSON.parse(transientState.get("ipstack")).country_code;",
        "}",
        "  ",
        "with (fr) {",
        "  if (callbacks.isEmpty()) {",
        "    var callback = new TextOutputCallback(TextOutputCallback.INFORMATION, "Country: ".concat(country));",
        "    action = Action.send(callback).build();",
        "  } else {",
        "    action = Action.goTo("true").build();",
        "  }",
        "}",
      ],
    },
    "8e03eb43-ed5d-4c12-9e15-2051cc9be578": {
      "_id": "8e03eb43-ed5d-4c12-9e15-2051cc9be578",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Copy SAML Data To ObjectAttributes",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "CopySAMLDataToObjectAttributes",
      "script": [
        "/* CopySAMLDataToObjectAttributes",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Copy SAML Data To ObjectAttributes.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "outcome = "true";",
        "if (sharedState.get("userInfo")) {",
        "    if (sharedState.get("objectAttributes")) {",
        "          sharedState.remove("objectAttributes");",
        "    }",
        "    var userName=null,givenName=null,sn=null,mail=null,telephoneNumber=null,roles=null;",
        "",
        "    try { userName=sharedState.get("userInfo").get("userNames").get("uid").get(0).toString(); } catch (e) {}",
        "    try { givenName=sharedState.get("userInfo").get("attributes").get("givenName").get(0).toString(); } catch (e) {}",
        "    try { sn=sharedState.get("userInfo").get("attributes").get("sn").get(0).toString(); } catch (e) {}",
        "    try { mail=sharedState.get("userInfo").get("attributes").get("mail").get(0).toString(); } catch (e) {}",
        "    try { telephoneNumber=sharedState.get("userInfo").get("attributes").get("telephoneNumber").get(0).toString(); } catch (e) {}",
        "    //try { roles=sharedState.get("userInfo").get("attributes").get("roles").get(0).toString(); } catch (e) {}",
        "    try { roles=sharedState.get("userInfo").get("attributes").get("roles").toArray().join("|"); } catch (e) {}",
        "",
        "    sharedState.put("objectAttributes", {"userName":userName,"givenName":givenName,"sn":sn,"mail":mail,"telephoneNumber":telephoneNumber,"roles":roles});",
        "}",
      ],
    },
    "8e298710-b55e-4085-a464-88a375a4004b": {
      "_id": "8e298710-b55e-4085-a464-88a375a4004b",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Twitter",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twitter Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id_str),",
        "        field("displayName", rawProfile.name),",
        "        field("photoUrl", rawProfile.profile_image_url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.screen_name)))",
      ],
    },
    "90c4eca5-05f0-42f5-b9bf-88b693eabbbd": {
      "_id": "90c4eca5-05f0-42f5-b9bf-88b693eabbbd",
      "context": "SAML2_IDP_ATTRIBUTE_MAPPER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Saml2 IDP Attribute Mapper Script",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script returns a list of SAML Attribute objects for the IDP framework to insert into the generated Assertion.",
        " *",
        " * Defined variables:",
        " * session - SSOToken (1)",
        " *           The single sign-on session.",
        " * hostedEntityId - String (primitive).",
        " *                  The hosted entity ID.",
        " * remoteEntityId - String (primitive).",
        " *                  The remote entity ID.",
        " * realm - String (primitive).",
        " *         The name of the realm the user is authenticating to.",
        " * logger - Always present, the debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.SAML2_IDP_ATTRIBUTE_MAPPER",
        " * idpAttributeMapperScriptHelper - IdpAttributeMapperScriptHelper (2)",
        " *                                - An IdpAttributeMapperScriptHelper instance containing methods used for IDP attribute mapping.",
        " *",
        " * Throws SAML2Exception:",
        " *      - on failing to map the IDP attributes.",
        " *",
        " * Return - a list of SAML Attribute (3) objects.",
        " *",
        " * Class reference:",
        " * (1) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (2) IdpAttributeMapperScriptHelper - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/saml2/plugins/scripted/IdpAttributeMapperScriptHelper.html.",
        " * (3) Attribute - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/saml2/assertion/Attribute.html.",
        " */",
        "",
        "/**",
        " * Default SAML2 IDP Attribute Mapper.",
        " */",
        "function getAttributes() {",
        "    var frJava = JavaImporter(",
        "        com.sun.identity.saml2.common.SAML2Exception",
        "    );",
        "",
        "    const debugMethod = "ScriptedIDPAttributeMapper.getAttributes:: ";",
        "",
        "    try {",
        "",
        "        if (!idpAttributeMapperScriptHelper.isSessionValid(session)) {",
        "            logger.error(debugMethod + "Invalid session.");",
        "            return null;",
        "        }",
        "",
        "        var configMap = idpAttributeMapperScriptHelper.getRemoteSPConfigAttributeMap(realm, remoteEntityId);",
        "        logger.message(debugMethod + "Remote SP attribute map = {}", configMap);",
        "        if (configMap == null || configMap.isEmpty()) {",
        "            configMap = idpAttributeMapperScriptHelper.getHostedIDPConfigAttributeMap(realm, hostedEntityId);",
        "            if (configMap == null || configMap.isEmpty()) {",
        "                logger.message(debugMethod + "Configuration map is not defined.");",
        "                return null;",
        "            }",
        "            logger.message(debugMethod + "Hosted IDP attribute map = {}", configMap);",
        "        }",
        "",
        "        var attributes = new java.util.ArrayList();",
        "        var stringValueMap = new java.util.HashSet();",
        "        var binaryValueMap;",
        "        var localAttribute;",
        "",
        "        // Don't try to read the attributes from the datastore if the ignored profile is enabled in this realm.",
        "        if (!idpAttributeMapperScriptHelper.isIgnoredProfile(session, realm)) {",
        "            try {",
        "                // Resolve attributes to be read from the datastore.",
        "                var stringAttributes = new java.util.HashSet();",
        "                var binaryAttributes = new java.util.HashSet();",
        "                var keyIter = configMap.keySet().iterator();",
        "                while (keyIter.hasNext()) {",
        "                    var key = keyIter.next();",
        "                    localAttribute = configMap.get(key);",
        "                    if (!idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {",
        "                        if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {",
        "                            // add it to the list of attributes to treat as being binary",
        "                            binaryAttributes.add(idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute));",
        "                        } else {",
        "                            stringAttributes.add(localAttribute);",
        "                        }",
        "                    }",
        "                }",
        "",
        "                if (!stringAttributes.isEmpty()) {",
        "                    stringValueMap = idpAttributeMapperScriptHelper.getAttributes(session, stringAttributes);",
        "                }",
        "                if (!binaryAttributes.isEmpty()) {",
        "                    binaryValueMap = idpAttributeMapperScriptHelper.getBinaryAttributes(session, binaryAttributes);",
        "                }",
        "            } catch (error) {",
        "                logger.error(debugMethod + "Error accessing the datastore. " + error);",
        "                //continue to check in ssotoken.",
        "            }",
        "        }",
        "",
        "        var keyIter = configMap.keySet().iterator();",
        "        while (keyIter.hasNext()) {",
        "            var key = keyIter.next()",
        "            var nameFormat = null;",
        "            var samlAttribute = key;",
        "            localAttribute = configMap.get(key);",
        "            // check if samlAttribute has format nameFormat|samlAttribute",
        "            var samlAttributes = String(new java.lang.String(samlAttribute));",
        "            var tokens = samlAttributes.split('|');",
        "",
        "            if (tokens.length > 1) {",
        "                nameFormat = tokens[0];",
        "                samlAttribute = tokens[1];",
        "            }",
        "",
        "            var attributeValues = new java.util.HashSet();",
        "            if (idpAttributeMapperScriptHelper.isStaticAttribute(localAttribute)) {",
        "                // Remove the static flag before using it as the static value",
        "                localAttribute = idpAttributeMapperScriptHelper.removeStaticAttributeFlag(localAttribute);",
        "                attributeValues = new java.util.HashSet([localAttribute]);",
        "                logger.message(debugMethod + "Adding static value {} for attribute named {}", localAttribute, samlAttribute);",
        "            } else {",
        "                if (idpAttributeMapperScriptHelper.isBinaryAttribute(localAttribute)) {",
        "                    // Remove the flag as not used for lookup",
        "                    localAttribute = idpAttributeMapperScriptHelper.removeBinaryAttributeFlag(localAttribute);",
        "                    attributeValues = idpAttributeMapperScriptHelper.getBinaryAttributeValues(samlAttribute, localAttribute,",
        "                        binaryValueMap);",
        "                } else {",
        "                    if (stringValueMap != null && !stringValueMap.isEmpty()) {",
        "                        attributeValues = stringValueMap.get(localAttribute);",
        "                    } else {",
        "                        logger.message(debugMethod + "{} string value map was empty or null.", localAttribute);",
        "                    }",
        "                }",
        "",
        "                // If all else fails, try to get the value from the users ssoToken",
        "                if (attributeValues == null || attributeValues.isEmpty()) {",
        "                    logger.message(debugMethod + "User profile does not have value for {}, checking SSOToken.", localAttribute);",
        "                    attributeValues = new java.util.HashSet(idpAttributeMapperScriptHelper.getPropertySet(session, localAttribute));",
        "                }",
        "            }",
        "",
        "            if (attributeValues == null || attributeValues.isEmpty()) {",
        "                logger.message(debugMethod + "{} not found in user profile or SSOToken.", localAttribute);",
        "            } else {",
        "                attributes.add(idpAttributeMapperScriptHelper.createSAMLAttribute(samlAttribute, nameFormat, attributeValues));",
        "            }",
        "        }",
        "",
        "        return attributes;",
        "",
        "    } catch (error) {",
        "        logger.error(debugMethod + "Error mapping IDP attributes. " + error);",
        "        throw new frJava.SAML2Exception(error);",
        "    }",
        "}",
        "",
        "getAttributes();",
      ],
    },
    "91554b10-79a5-4aa8-aca1-59481a734c19": {
      "_id": "91554b10-79a5-4aa8-aca1-59481a734c19",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Twilio SMS OTP Sender",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio SMS OTP Sender",
      "script": [
        "/* Twilio SMS OTP Sender",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * This script will send an SMS containing the OTP to the phone number in the user's profile.",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Identify Existing User node and HOTP Generator node before it is being called.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - sent",
        " * - failed",
        " */",
        "logger.warning("Twilio SMS OTP Sender: start");",
        "",
        "if (sharedState.get("_id") && idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().hasNext()) {",
        "    var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(input){var output="";var chr1,chr2,chr3,enc1,enc2,enc3,enc4;var i=0;input=Base64._utf8_encode(input);while(i<input.length){chr1=input.charCodeAt(i++);chr2=input.charCodeAt(i++);chr3=input.charCodeAt(i++);enc1=chr1>>2;enc2=(chr1&3)<<4|chr2>>4;enc3=(chr2&15)<<2|chr3>>6;enc4=chr3&63;if(isNaN(chr2)){enc3=enc4=64}else if(isNaN(chr3)){enc4=64}output=output+this._keyStr.charAt(enc1)+this._keyStr.charAt(enc2)+this._keyStr.charAt(enc3)+this._keyStr.charAt(enc4)}return output},decode:function(input){var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\\+\\/\\=]/g,"");while(i<input.length){enc1=this._keyStr.indexOf(input.charAt(i++));enc2=this._keyStr.indexOf(input.charAt(i++));enc3=this._keyStr.indexOf(input.charAt(i++));enc4=this._keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!=64){output=output+String.fromCharCode(chr2)}if(enc4!=64){output=output+String.fromCharCode(chr3)}}output=Base64._utf8_decode(output);return output},_utf8_encode:function(string){string=string.replace(/\\r\\n/g,"\\n");var utftext="";for(var n=0;n<string.length;n++){var c=string.charCodeAt(n);if(c<128){utftext+=String.fromCharCode(c)}else if(c>127&&c<2048){utftext+=String.fromCharCode(c>>6|192);utftext+=String.fromCharCode(c&63|128)}else{utftext+=String.fromCharCode(c>>12|224);utftext+=String.fromCharCode(c>>6&63|128);utftext+=String.fromCharCode(c&63|128)}}return utftext},_utf8_decode:function(utftext){var string="";var i=0;var c=c1=c2=0;while(i<utftext.length){c=utftext.charCodeAt(i);if(c<128){string+=String.fromCharCode(c);i++}else if(c>191&&c<224){c2=utftext.charCodeAt(i+1);string+=String.fromCharCode((c&31)<<6|c2&63);i+=2}else{c2=utftext.charCodeAt(i+1);c3=utftext.charCodeAt(i+2);string+=String.fromCharCode((c&15)<<12|(c2&63)<<6|c3&63);i+=3}}return string}};",
        "",
        "       /* BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN AZURE AD SETTINGS",
        "     */",
        "    var TWILIO_API_SID = "AC750415e3163a2e57b7aeea7eed82d944";",
        "    var TWILIO_API_TOKEN = "d36a719c94b4be08592d69ec4f80a5bb";",
        "    var TWILIO_API_FROM = "+13176443107";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "  ",
        "    // Twilio SMS Message API Configuration",
        "    var TWILIO_API_URI = "https://api.twilio.com/2010-04-01/Accounts/".concat(TWILIO_API_SID).concat("/Messages.json");    ",
        "    var TWILIO_API_TO = idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().next();",
        "    var TWILIO_API_BODY = "OTP for account ".concat(sharedState.get("username")).concat(": ").concat(sharedState.get("oneTimePassword"));",
        "    //logger.warning("Twilio SMS OTP Sender: To: ".concat(TWILIO_API_TO));",
        "    //logger.warning("Twilio SMS OTP Sender: Message: ".concat(TWILIO_API_BODY));",
        "",
        "    var AUTHZ = "Basic ".concat(Base64.encode(TWILIO_API_SID.concat(':').concat(TWILIO_API_TOKEN)));",
        "    //logger.warning("Twilio SMS OTP Sender: AUTHZ - ".concat(AUTHZ));",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('POST');",
        "    request.setUri(TWILIO_API_URI);",
        "    request.getHeaders().add("Content-Type", "application/x-www-form-urlencoded");",
        "    request.getHeaders().add("Authorization", AUTHZ);",
        "    var params = request.getForm();",
        "    params.add("From", TWILIO_API_FROM);",
        "    params.add("Body", TWILIO_API_BODY);",
        "    params.add("To", TWILIO_API_TO);",
        "    request.getEntity().setString(params.toString());",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    //logger.warning("Twilio SMS OTP Sender: JSON result: " + JSON.stringify(result));",
        "",
        "    if (result["error_code"]) {",
        "        outcome = "failed";",
        "        logger.error("Twilio SMS OTP Sender: error_code = ".concat(result["error_code"]));",
        "        logger.error("Twilio SMS OTP Sender: error_message = ".concat(result["error_message"]));",
        "        logger.error("Twilio SMS OTP Sender: outcome = failed");",
        "    } else if (result["code"]) {",
        "        outcome = "failed";",
        "        logger.error("Twilio SMS OTP Sender: code = ".concat(result["code"]));",
        "        logger.error("Twilio SMS OTP Sender: message = ".concat(result["message"]));",
        "    } else {",
        "        outcome = "sent";",
        "        logger.warning("Twilio SMS OTP Sender: outcome = sent");",
        "    }",
        "} else {",
        "      outcome = "failed";",
        "      logger.error("Twilio SMS OTP Sender: No user or phone number found! Use 'Identify Existing User node before this script to populate the user's _id in shared state!'");",
        "      logger.error("Twilio SMS OTP Sender: outcome = failed");",
        "}",
      ],
    },
    "91d197de-5916-4dca-83b5-9a4df26e7159": {
      "_id": "91d197de-5916-4dca-83b5-9a4df26e7159",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from WordPress",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "WordPress Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.username),",
        "        field("displayName", rawProfile.display_name),",
        "        field("photoUrl", rawProfile.avatar_URL),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.username)))",
      ],
    },
    "92edf2c7-0bab-412c-a0da-82ad4f04505b": {
      "_id": "92edf2c7-0bab-412c-a0da-82ad4f04505b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect Extra Fields",
      "script": [
        "/* Collect Extra Fields",
        " * ",
        " * Collect extra fields not part of the user profile.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = 'true';",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          javax.security.auth.callback.NameCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.NameCallback('modality'),",
        "            new fr.NameCallback('jwtToken')",
        "        ).build();",
        "    }",
        "    else {",
        "          var modality = callbacks.get(0).getName();",
        "          var jwtToken = callbacks.get(1).getName();",
        "          nodeState.putShared('modality', modality);",
        "          nodeState.putShared('jwtToken', jwtToken);",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "9399ac8b-3a6e-423b-95a2-6e0fd07262b1": {
      "_id": "9399ac8b-3a6e-423b-95a2-6e0fd07262b1",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "APIProtection: Get Key And Secret",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "APIProtection: Get Key And Secret",
      "script": [
        "logger.warning("APIProtection: Get Key And Secret: start");",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " */",
        "var KEY_HEADER_NAME = "x-api-key";",
        "var SECRET_HEADER_NAME = "x-api-secret";",
        "var USERNAME_HEADER_NAME = "X-OpenAM-Username";",
        "var PASSWORD_HEADER_NAME = "X-OpenAM-Password";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "outcome = "false";",
        "",
        "var key = getHeader(KEY_HEADER_NAME) || readValue(KEY_HEADER_NAME) || null;",
        "var secret = getHeader(SECRET_HEADER_NAME) || readTransientValue(SECRET_HEADER_NAME) || null;",
        "",
        "var username = sharedState.get("username") || null;",
        "var password = transientState.get("password") || null;",
        "",
        "if (key && secret) {",
        "    logger.warning("APIProtection: Get Key And Secret: key=".concat(key));",
        "  ",
        "      storeValue(KEY_HEADER_NAME, key);",
        "      storeValue("username", username);",
        "      sharedState.put("username", key);",
        "      ",
        "      storeTransientValue(SECRET_HEADER_NAME, secret);",
        "      storeTransientValue("password", password);",
        "      transientState.put("password", secret);",
        "  ",
        "    outcome = "true";",
        "}",
        "",
        "logger.warning("APIProtection: Get Key And Secret: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Returns the value of the requested header",
        " */",
        "function getHeader(headerName) {",
        "      if (requestHeaders.get(headerName) && requestHeaders.get(headerName).get(0)) {",
        "        return requestHeaders.get(headerName).get(0).toString();",
        "    }",
        "      return null;",
        "}",
        "",
        "/*",
        " * Store value for APIProtection script use",
        " */",
        "function storeValue(name, value) {",
        "      var storage = sharedState.get("APIProtection");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "            storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("APIProtection", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
        "",
        "/*",
        " * Read value from storage for APIProtection script use",
        " */",
        "function readValue(name) {",
        "      var storage = sharedState.get("APIProtection");",
        "    if (storage) {",
        "          if (storage.get) {",
        "            return sharedState.get("APIProtection").get(name);",
        "        }",
        "          else {",
        "              return storage.name;",
        "        }",
        "    }",
        "      return null;",
        "}",
        "",
        "/*",
        " * Store transient value for APIProtection script use",
        " */",
        "function storeTransientValue(name, value) {",
        "    var transientStorage = transientState.get("APIProtection");",
        "    if (transientStorage && value) {",
        "          if (transientStorage.put) {",
        "            transientStorage.put(name, value);",
        "        }",
        "          else {",
        "              transientStorage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        transientState.put("APIProtection", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
        "",
        "/*",
        " * Read transient value from storage for APIProtection script use",
        " */",
        "function readTransientValue(name) {",
        "      var transientStorage = transientState.get("APIProtection");",
        "    if (transientStorage) {",
        "          if (transientStorage.get) {",
        "            return transientState.get("APIProtection").get(name);",
        "        }",
        "          else {",
        "              return transientStorage.name;",
        "        }",
        "    }",
        "      return null;",
        "}",
      ],
    },
    "9535446c-0ff6-4a76-8576-616599119d64": {
      "_id": "9535446c-0ff6-4a76-8576-616599119d64",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Remove button from page.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Remove Button",
      "script": [
        "/* Remove Button",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Hide buttons on the journey page.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "    var script = "Array.prototype.slice.call(document.getElementsByTagName('button')).forEach(function (e) {e.style.display = 'none'})"",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    var message = " "",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                message",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "}());",
      ],
    },
    "988c10fa-98da-4bf7-8ac9-a558d2fef1fd": {
      "_id": "988c10fa-98da-4bf7-8ac9-a558d2fef1fd",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Protection from malicious IDPs. Only allow white-listed email domains (usernames are email addresses).",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "IDP Integrity Check",
      "script": [
        "/* IDP Integrity Check",
        " * ",
        " * Protection from malicious IDPs. Only allow white-listed email domains (usernames are email addresses).",
        " * ",
        " * This script does not require cofiguration. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "false";",
        "      var routedIDP = sharedState.get("routedIDPs").get(0);",
        "      var validDomains = [];",
        "      if (routedIDP) {",
        "          validDomains = routedIDP.get("idpDomains");",
        "    }",
        "      ",
        "      var username = sharedState.get("username");",
        "      var domain = username.substr(username.lastIndexOf("@")+1);",
        "      if (validDomains.indexOf(domain) > -1) {",
        "          outcome = "true";",
        "    }",
        "}());",
      ],
    },
    "9de3eb62-f131-4fac-a294-7bd170fd4acb": {
      "_id": "9de3eb62-f131-4fac-a294-7bd170fd4acb",
      "context": "POLICY_CONDITION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for Scripted Policy Conditions",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Policy Condition",
      "script": [
        "/*",
        " * Copyright 2015-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/**",
        " * This is a Policy Condition example script. It demonstrates how to access a user's information,",
        " * use that information in external HTTP calls and make a policy decision based on the outcome.",
        " */",
        "",
        "var userAddress, userIP, resourceHost;",
        "",
        "if (validateAndInitializeParameters()) {",
        "",
        "    var countryFromUserAddress = getCountryFromUserAddress();",
        "    logger.message("Country retrieved from user's address: " + countryFromUserAddress);",
        "    var countryFromUserIP = getCountryFromUserIP();",
        "    logger.message("Country retrieved from user's IP: " + countryFromUserIP);",
        "    var countryFromResourceURI = getCountryFromResourceURI();",
        "    logger.message("Country retrieved from resource URI: " + countryFromResourceURI);",
        "",
        "    if (countryFromUserAddress === countryFromUserIP && countryFromUserAddress === countryFromResourceURI) {",
        "        logger.message("Authorization Succeeded");",
        "        responseAttributes.put("countryOfOrigin", [countryFromUserAddress]);",
        "        authorized = true;",
        "    } else {",
        "        logger.message("Authorization Failed");",
        "        authorized = false;",
        "    }",
        "",
        "} else {",
        "    logger.message("Required parameters not found. Authorization Failed.");",
        "    authorized = false;",
        "}",
        "",
        "/**",
        " * Use the user's address to lookup their country of residence.",
        " *",
        " * @returns {*} The user's country of residence.",
        " */",
        "function getCountryFromUserAddress() {",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://maps.googleapis.com/maps/api/geocode/json?address=" + encodeURIComponent(userAddress));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var geocode = JSON.parse(response.getEntity().getString());",
        "    var i;",
        "    for (i = 0; i < geocode.results.length; i++) {",
        "        var result = geocode.results[i];",
        "        var j;",
        "        for (j = 0; j < result.address_components.length; i++) {",
        "            if (result.address_components[i].types[0] == "country") {",
        "                return result.address_components[i].long_name;",
        "            }",
        "        }",
        "    }",
        "}",
        "",
        "/**",
        " * Use the user's IP to lookup the country from which the request originated.",
        " *",
        " * @returns {*} The country from which the request originated.",
        " */",
        "function getCountryFromUserIP() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + userIP);",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Use the requested resource's host name to lookup the country where the resource is hosted.",
        " *",
        " * @returns {*} The country in which the resource is hosted.",
        " */",
        "function getCountryFromResourceURI() {",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setUri("http://ip-api.com/json/" + encodeURIComponent(resourceHost));",
        "      request.setMethod("GET");",
        "",
        "    var response = httpClient.send(request).get();",
        "    logResponse(response);",
        "",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    if (result) {",
        "        return result.country;",
        "    }",
        "}",
        "",
        "/**",
        " * Retrieve and validate the variables required to make the external HTTP calls.",
        " *",
        " * @returns {boolean} Will be true if validation was successful.",
        " */",
        "function validateAndInitializeParameters() {",
        "    var userAddressSet = identity.getAttribute("postalAddress");",
        "    if (userAddressSet == null || userAddressSet.isEmpty()) {",
        "        logger.warning("No address specified for user: " + username);",
        "        return false;",
        "    }",
        "    userAddress = userAddressSet.iterator().next();",
        "    logger.message("User address: " + userAddress);",
        "",
        "    if (!environment) {",
        "        logger.warning("No environment parameters specified in the evaluation request.");",
        "        return false;",
        "    }",
        "",
        "    var ipSet = environment.get("IP");",
        "    if (ipSet == null || ipSet.isEmpty()) {",
        "        logger.warning("No IP specified in the evaluation request environment parameters.");",
        "        return false;",
        "    }",
        "    userIP = ipSet.iterator().next();",
        "    logger.message("User IP: " + userIP);",
        "",
        "    if (!resourceURI) {",
        "        logger.warning("No resource URI specified.");",
        "        return false;",
        "    }",
        "    resourceHost = resourceURI.match(/^(.*:\\/\\/)(www\\.)?([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/)[3];",
        "    logger.message("Resource host: " + resourceHost);",
        "",
        "    return true;",
        "}",
        "",
        "function logResponse(response) {",
        "    logger.message("User REST Call. Status: " + response.getStatus() + ", Body: " + response.getEntity().getString());",
        "}",
      ],
    },
    "9e9c6c4d-5d9d-4990-9f05-d8b2b25ad52b": {
      "_id": "9e9c6c4d-5d9d-4990-9f05-d8b2b25ad52b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Custom risk policy engine combining Autonomous Access signals with external signals.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "AA Custom Policy Engine",
      "script": [
        "/* AA Custom Policy Engine",
        " *",
        " * Author: marcin.zimny@forgerock.com",
        " * Adaptations: volker.scheuber@forgerock.com",
        " * ",
        " * Custom policy engine combining the Autonomous Access risk engine output with external systems and custom policy output:",
        " * ",
        " * - use multiple risk scoring policies (currently it's part of risk config file and used across all evaluations)",
        " * - deliver custom logic of delivering outcome (we can sum the signals instead of returning the highest)",
        " * - use custom signals as part of the (single) risk node (for example anonymisation detection)",
        " * - exceptions/overrides (i.e. if we have to allow a flow with high risk for whatever reason) ",
        " * ",
        " * This script needs to be parametrized. It will NOT work properly as is!",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - low",
        " * - medium",
        " * - high",
        " * - failed",
        " */",
        "(function () {",
        "  /* ",
        "   * MUST CONFIGURE THIS SECTION",
        "   * Custom signals parameters",
        "   */",
        "  ",
        "  // IPQualityScore API",
        "  var USER_AGENT = "ForgeRock"",
        "  var API_KEY = systemEnv.getProperty("esv.ipqs.api.key");",
        "  ",
        "  /*",
        "   * END MANDATORY CONFIGURATION",
        "   */",
        "  ",
        "  outcome = "failed"; //default outcome",
        "  /*",
        "    Risk Policy - Signal Scores",
        "  */",
        "  var aa_impossible_travel_score = 21;",
        "  var aa_credential_stuffing_score = 100;",
        "  var aa_automated_user_agent_score = 25;",
        "  var aa_brute_force_score = 100;",
        "  var aa_suspicious_ip_score = 35;",
        "  /*",
        "    Risk Policy - Custom Signals",
        "  */",
        "  var aa_use_anonymizer_detection = 1;",
        "  var custom_aa_tor_detected_score = 50;",
        "  var custom_aa_vpn_detected_score = 20;",
        "  var custom_aa_proxy_detected_score = 20;",
        "  /*",
        "    Risk Policy - Thresholds And Extra Features",
        "  */",
        "  var aa_medium_risk_threshold = 30;",
        "  var aa_high_risk_threshold = 75;",
        "  var aa_max_signal_count_high_risk_override = 99;",
        "  /*",
        "    Risk Policy - Method",
        "      0 - highest score out of all triggered signals",
        "      1 - summary of all triggered signals",
        "  */",
        "  var aa_risk_method=1;",
        "  /*",
        "    Risk Policy - UEBA method",
        "      0 - highest score out of 3 models",
        "      1 - average score out of 3 models",
        "  */",
        "  var aa_ueba_method=0;",
        "  /*",
        "    Risk Policy - Overrides",
        "",
        "    Whitelist - false positive control",
        "    Blacklist - preventative block",
        "    Example - ip_whitelist or ip_blacklist = ["62.21.63.30-62.21.63.30","82.21.168.1-82.21.168.255"];",
        "  */",
        "  var ip_whitelist = [];",
        "  var ip_blacklist = [];",
        "  ",
        "  /********************************************************",
        "    The engine *",
        "  */",
        "  //Define variables",
        "  var signal_count = 0;",
        "  var pos = 0;",
        "  var arr_scores = [];",
        "  var arr_scores_models = [];",
        "  var score = 0;",
        "  var predictionResultChopped;",
        "  var predictionResultChoppedVal;",
        "  //Define signal variables and assign defaults (negative)",
        "  var is_impossible_travel = 0;",
        "  var is_credential_stuffing = 0;",
        "  var is_automated_user_agent = 0;",
        "  var is_brute_force = 0;",
        "  var is_suspicious_ip = 0;",
        "  var model1_score = 0;",
        "  var model2_score = 0;",
        "  var model3_score = 0;",
        "  var isAnonymizedResult;",
        "  //Get risk data",
        "  var predictionResultRaw = sharedState.get("predictionResult");",
        "  var predictionResultString = predictionResultRaw.toString();",
        "",
        "  var result;",
        "",
        "  function inet_aton (ip)",
        "  {",
        "      return ip.split(".").reduce((int, v) => int * 256 + +v);",
        "  }",
        "",
        "",
        "  function isAnonymized()",
        "  {",
        "    var payload = sharedState.get("IPQualityScore")",
        "",
        "    if (payload)",
        "    {",
        "      var jsonResult = JSON.parse(payload);",
        "    }",
        "    else",
        "    {",
        "      var ipaddress = requestHeaders.get("X-FORWARDED-FOR").get(0).split(",")[0].trim();",
        "",
        "      var request = new org.forgerock.http.protocol.Request();",
        "      request.setMethod("GET");",
        "      request.setUri("https://ipqualityscore.com/api/json/ip/" + API_KEY + "/" + ipaddress + "?strictness=0&allow_public_access_points=false&fast=false&lighter_penalties=false&mobile=false");",
        "      request.getHeaders().add("Accept","application/json");",
        "      request.getHeaders().add("User-Agent", USER_AGENT);",
        "",
        "      var response = httpClient.send(request).get();",
        "      if (response.getStatus().getCode() === 200) {",
        "        var payload = response.getEntity().getString();",
        "        var jsonResult = JSON.parse(payload)",
        "          if (jsonResult.success === true) {",
        "          sharedState.put("Debug-IPQualityScore", payload);",
        "        }",
        "      }",
        "    }",
        "",
        "    if (jsonResult) {",
        "      if (jsonResult.tor === true) {",
        "        isAnonymizedResult = "tor";",
        "      } else if (jsonResult.vpn === true) {",
        "        isAnonymizedResult= "vpn";",
        "      } else if (jsonResult.proxy === true) {",
        "        isAnonymizedResult = "proxy";",
        "      } else {",
        "        isAnonymizedResult = "not_detected";",
        "      }",
        "    }",
        "  }",
        "",
        "",
        "  if(aa_use_anonymizer_detection==1)",
        "  {",
        "    isAnonymized();",
        "    sharedState.put("custom_aa_isAnonymized",isAnonymizedResult);",
        "    if(isAnonymizedResult=="vpn")",
        "    {",
        "      arr_scores.push(custom_aa_vpn_detected_score);",
        "    }",
        "    else if(isAnonymizedResult=="proxy")",
        "    {",
        "      arr_scores.push(custom_aa_proxy_detected_score);",
        "    }",
        "    else if(isAnonymizedResult=="tor")",
        "    {",
        "      arr_scores.push(custom_aa_tor_detected_score);",
        "    }",
        "    else",
        "    {",
        "      arr_scores.push(0);",
        "    }",
        "  }",
        "",
        "  if(predictionResultString.search("risk_score_data")>=0)",
        "  {",
        "    outcome = "low"; //default if there's data from risk API",
        "  }",
        "",
        "  //Check if we're assessing impossible travel and assign result",
        "  pos = predictionResultString.search("impossibleTravellerCheck=true");",
        "  if(pos>0)",
        "  {",
        "    pos = predictionResultString.search("is_impossible_travel=false");",
        "    if(pos<0)",
        "    {",
        "      signal_count++;",
        "      is_impossible_travel=1;",
        "      arr_scores.push(aa_impossible_travel_score);",
        "    }",
        "  }",
        "  //Check if we're assessing credential stuffing and assign result",
        "  pos = predictionResultString.search("credentialStuffing=true");",
        "  if(pos>0)",
        "  {",
        "    pos = predictionResultString.search("is_credential_stuffing=false");",
        "    if(pos<0)",
        "    {",
        "      signal_count++;",
        "      is_credential_stuffing=1;",
        "      arr_scores.push(aa_credential_stuffing_score);",
        "    }",
        "  }",
        "  //Check if we're assessing automated user angent (antibot) and assign result",
        "  pos = predictionResultString.search("automatedUserAgentsFilter=true");",
        "  if(pos>0)",
        "  {",
        "    pos = predictionResultString.search("is_automated_user_agent=false");",
        "    if(pos<0)",
        "    {",
        "      signal_count++;",
        "      is_automated_user_agent=1;",
        "      arr_scores.push(aa_automated_user_agent_score);",
        "    }",
        "  }",
        "  //Check if we're assessing brute-force and assign result",
        "  pos = predictionResultString.search("bruteForcePreventionCheck=true");",
        "  if(pos>0)",
        "  {",
        "    pos = predictionResultString.search("is_brute_force=false");",
        "    if(pos<0)",
        "    {",
        "      signal_count++;",
        "      is_brute_force=1;",
        "      arr_scores.push(aa_brute_force_score);",
        "    }",
        "  }",
        "  //Check if we're assessing suspicious IP and assign result",
        "  pos = predictionResultString.search("suspiciousIPCheck=true");",
        "  if(pos>0)",
        "  {",
        "    pos = predictionResultString.search("is_suspicious_ip=false");",
        "    if(pos<0)",
        "    {",
        "      signal_count++;",
        "      is_suspicious_ip=1;",
        "      arr_scores.push(aa_suspicious_ip_score);",
        "    }",
        "  }",
        "  //Check if we're assessing UEBA and assign result",
        "  pos = predictionResultString.search("anomalyDetection=true");",
        "  if(pos>0)",
        "  {",
        "    pos = predictionResultString.search("clustering_result=");",
        "    if(pos>0)",
        "    {",
        "        predictionResultChopped=predictionResultString.substring(pos);",
        "        predictionResultChopped=predictionResultChopped.substring(predictionResultChopped.search("risk_score="));",
        "        predictionResultChoppedVal=predictionResultChopped.substring(11,predictionResultChopped.search(","));",
        "        predictionResultChopped=predictionResultChopped.substring(11);",
        "        model1score=parseInt(predictionResultChoppedVal,10);",
        "",
        "        predictionResultChopped=predictionResultChopped.substring(predictionResultChopped.search("risk_score="));",
        "        predictionResultChoppedVal=predictionResultChopped.substring(11,predictionResultChopped.search(","));",
        "        predictionResultChopped=predictionResultChopped.substring(11);",
        "        model2score=parseInt(predictionResultChoppedVal,10);",
        "",
        "        predictionResultChopped=predictionResultChopped.substring(predictionResultChopped.search("risk_score="));",
        "        predictionResultChoppedVal=predictionResultChopped.substring(11,predictionResultChopped.search(","));",
        "        predictionResultChopped=predictionResultChopped.substring(11);",
        "        model3score=parseInt(predictionResultChoppedVal,10);",
        "",
        "        arr_scores_models.push(model1score,model2score,model3score);",
        "    }",
        "  }",
        "",
        "  //Deliver risk score",
        "  if(aa_ueba_method==0)",
        "  {",
        "    score = Math.max.apply(null, arr_scores_models);",
        "  }",
        "  else if(aa_ueba_method==1)",
        "  {",
        "    score = arr_scores_models.reduce((a, b) => a + b, 0)/arr_scores_models.length;",
        "  }",
        "  arr_scores.push(score);",
        "",
        "",
        "  if(aa_risk_method==0)",
        "  {",
        "    score = Math.max.apply(null, arr_scores);",
        "  }",
        "  else if (aa_risk_method===1)",
        "  {",
        "    score = arr_scores.reduce((a, b) => a + b, 0);",
        "  }",
        "  //Deliver risk outcome",
        "  if(score>aa_medium_risk_threshold)",
        "  {",
        "    outcome="medium";",
        "  }",
        "  if(score>aa_high_risk_threshold)",
        "  {",
        "    outcome="high";",
        "  }",
        "  if(signal_count>=aa_max_signal_count_high_risk_override && outcome=="medium")",
        "  {",
        "    outcome="high";",
        "    sharedState.put("debug-signal-count-override","true");",
        "  }",
        "",
        "  //process the blacklist and whitelist",
        "  var src_ipaddress;",
        "  var src_ipaddress_dec;",
        "  var list_first_ipaddress_dec;",
        "  var list_last_ipaddress_dec;",
        "  var list_entry;",
        "  var logmessage;",
        "  src_ipaddress = requestHeaders.get("X-FORWARDED-FOR").get(0).split(",")[0].trim();",
        "  src_ipaddress_dec = inet_aton(src_ipaddress);",
        "",
        "  if(ip_blacklist.length>0)",
        "  {",
        "    for (var i = 0; i < ip_blacklist.length; i++)",
        "    {",
        "      list_entry = ip_blacklist[i].split("-");",
        "      list_first_ipaddress_dec=inet_aton(list_entry[0]);",
        "      list_last_ipaddress_dec=inet_aton(list_entry[1]);",
        "",
        "      if(src_ipaddress_dec>=list_first_ipaddress_dec && src_ipaddress_dec<=list_last_ipaddress_dec)",
        "      {",
        "          sharedState.put("debug-blacklist","condition met for: " + src_ipaddress + ", " + outcome + "->high");",
        "           outcome="high";",
        "      }",
        "    }",
        "  }",
        "  if(ip_whitelist.length>0)",
        "  {",
        "    for (var i = 0; i < ip_whitelist.length; i++)",
        "    {",
        "      //list_entry = ip_whitelist[i].split("-");",
        "      list_entry = ip_whitelist[i].split("-");",
        "      list_first_ipaddress_dec=inet_aton(list_entry[0]);",
        "      list_last_ipaddress_dec=inet_aton(list_entry[1]);",
        "      if(src_ipaddress_dec>=list_first_ipaddress_dec && src_ipaddress_dec<=list_last_ipaddress_dec)",
        "      {",
        "        sharedState.put("debug-whitelist","condition met for: " + src_ipaddress + ", " + outcome + "->low");",
        "        outcome = "low";",
        "      }",
        "    }",
        "  }",
        "",
        "",
        "",
        "  sharedState.put('debug-score',score.toString());",
        "  sharedState.put('debug-signal-count',signal_count.toString());",
        "  sharedState.put('debug-outcome',outcome);",
        "}());",
      ],
    },
    "a064f7b7-29c5-480b-ac09-d3d122829278": {
      "_id": "a064f7b7-29c5-480b-ac09-d3d122829278",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Sanitize objectAttributes",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Sanitize objectAttributes",
      "script": [
        "/*",
        "{",
        "    "userName": "sholmes",",
        "    "givenName": "Sherlock",",
        "    "sn": "Holmes",",
        "    "mail": "info918@06152alerts.security.org",",
        "    "telephoneNumber": ,",
        "    "postalAddress": "221B Baker Street",",
        "    "city": "London",",
        "    "stateProvince": ,",
        "    "postalCode": "NW1",",
        "    "country": "United States",",
        "    "preferences": {",
        "        "marketing": false,",
        "        "updates": true",
        "    }",
        "}",
        "*/",
        "logger.error("Sanitize objectAttributes: start");",
        "outcome = "true";",
        "var attrs = sharedState.get("objectAttributes");",
        "if (attrs) {",
        "  var keys = [",
        "    "userName",",
        "    "givenName",",
        "    "sn",",
        "    "mail",",
        "    "telephoneNumber",",
        "    "postalAddress",",
        "    "city",",
        "    "stateProvince",",
        "    "postalCode",",
        "    "country",",
        "    "frIndexedString2"",
        "  ]",
        "  keys.forEach(function (key) {",
        "    if (attrs.get(key) && attrs.get(key).toString() == "") {",
        "      logger.error("Sanitize objectAttributes: remove ".concat(key));",
        "      attrs.remove(key);",
        "    }",
        "  })",
        "}",
        "if (transientState.get("objectAttributes") && transientState.get("objectAttributes").get("password").toString() !== "") {",
        "  logger.error("Sanitize objectAttributes: preserve password in shared state");",
        "  setSharedObjectAttribute("password", transientState.get("objectAttributes").get("password").toString());",
        "}",
        "logger.error("Sanitize objectAttributes: end");",
        "",
        "/*",
        " * Properly set attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "    if (sharedState.get("objectAttributes")) {",
        "        sharedState.get("objectAttributes").put(name, value);",
        "    }",
        "    else {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":"+value+"}"));",
        "    }",
        "}",
      ],
    },
    "a316aedd-8b3b-4f68-b6e8-65859f1e87be": {
      "_id": "a316aedd-8b3b-4f68-b6e8-65859f1e87be",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_LocalRegistrationPrep",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        "When an admin managed object is created at the time of invitation, the email address",
        "is used to populate the required first/last names.  This script clears those attributes",
        "(if set to the email address) so the UI doesn't display the email address in the first/last",
        "name input fields.",
        "",
        "It also populates other required attributes with fake values to ensure password policy",
        "validation works correctly when AM calls IDM.",
        "*/",
        "",
        "var objAttrs = sharedState.get('objectAttributes') || new java.util.HashMap();",
        "objAttrs.put('givenName', '');",
        "objAttrs.put('sn', '');",
        "objAttrs.put('groups', ['fake']);",
        "objAttrs.put('inviteDate', 'fake');",
        "sharedState.put('objectAttributes', objAttrs);",
        "",
        "outcome = 'True';",
        "",
      ],
    },
    "a31a1796-8410-46b8-82ca-eb0c6e901775": {
      "_id": "a31a1796-8410-46b8-82ca-eb0c6e901775",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Collect all the configuration items required for the Set Custom Cookie node to function properly.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect Set Custom Cookie Node Config",
      "script": [
        "/* Collect Set Custom Cookie Node Config",
        " * ",
        " * Collect all the configuration items required for the Set Custom Cookie node to function properly.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "      var config = {",
        "        "name": "oreo",",
        "        "value": "original",",
        "        "domain": ".scheuber.io",",
        "        "path": "/",",
        "        "maxAge": 3600,",
        "        "useHttpOnlyCookie": true,",
        "        "useSecureCookie": true,",
        "        "sameSite": "NONE"",
        "    };",
        "  ",
        "      var script = "";",
        "    script += "Array.prototype.slice.call(";",
        "    script += "    document.getElementsByTagName('input')";",
        "    script += ").forEach(";",
        "    script += "    function (input,i) {";",
        "    script += "        console.log('input '+i);"",
        "    script += "        var config = JSON.parse('"+JSON.stringify(config)+"');";",
        "    script += "        var keys = Object.keys(config);";",
        "    script += "        if (input.type === 'text') {";",
        "    script += "            input.setAttribute('value', config[keys[i]]);";",
        "    script += "            input.dispatchEvent(new KeyboardEvent( 'input' , {'key':'Enter'} ));";",
        "    script += "        }";",
        "    script += "    }";",
        "    script += ");";",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          javax.security.auth.callback.NameCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.NameCallback("name"),",
        "            new fr.NameCallback("value"),",
        "            new fr.NameCallback("domain"),",
        "            new fr.NameCallback("path"),",
        "            new fr.NameCallback("maxAge"),",
        "            new fr.NameCallback("useHttpOnlyCookie"),",
        "            new fr.NameCallback("useSecureCookie"),",
        "            new fr.NameCallback("sameSite"),",
        "              new fr.ScriptTextOutputCallback(script)",
        "        ).build();",
        "    }",
        "    else {",
        "          config[callbacks.get(0).getPrompt()] = callbacks.get(0).getName();",
        "          config[callbacks.get(1).getPrompt()] = callbacks.get(1).getName();",
        "          config[callbacks.get(2).getPrompt()] = callbacks.get(2).getName();",
        "          config[callbacks.get(3).getPrompt()] = callbacks.get(3).getName();",
        "          config[callbacks.get(4).getPrompt()] = parseInt(callbacks.get(4).getName(), 10).toFixed();",
        "          config[callbacks.get(5).getPrompt()] = (""+callbacks.get(5).getName() === 'true');",
        "          config[callbacks.get(6).getPrompt()] = (""+callbacks.get(6).getName() === 'true');",
        "          config[callbacks.get(7).getPrompt()] = callbacks.get(7).getName();",
        "          nodeState.putShared("nodeConfig", config);",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "a7a78773-445b-4eca-bb93-409e86bced81": {
      "_id": "a7a78773-445b-4eca-bb93-409e86bced81",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from GitHub",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "GitHub Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("username", rawProfile.login)))",
      ],
    },
    "a873fcd8-8f17-4675-9dd6-54ab1c11e2df": {
      "_id": "a873fcd8-8f17-4675-9dd6-54ab1c11e2df",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Record that MFA has been performed for this journey and no longer needs to be performed. This allows journeys and inner journeys to check that flag before performing MFA multiple times.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Record MFA",
      "script": [
        "/* MFA Status",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Record that MFA has been performed for this journey and no longer needs ",
        " * to be performed. This allows journeys and inner journeys to check that ",
        " * flag before performing MFA multiple times.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "outcome = "true";",
        "sharedState.put("mfaPerformed", "true");",
      ],
    },
    "a8f10e93-3f6c-4d6c-b6a3-a8453e3d6b3a": {
      "_id": "a8f10e93-3f6c-4d6c-b6a3-a8453e3d6b3a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Reset the attributes holding replay credentials for the IG replay use case.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ResetPasswordReplayCredentials",
      "script": [
        "/* ResetPasswordReplayCredentials",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Reset the attributes holding replay credentials for the IG replay use case.",
        " * ",
        " * This script needs to be parametrized for your env.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "  outcome = "true";",
        "  var REPLAY_USERNAME_IDM_ATTR = "frUnindexedString1";",
        "  var REPLAY_PASSWORD_IDM_ATTR = "frUnindexedString2";",
        "  ",
        "  sharedState.get("objectAttributes").put(REPLAY_USERNAME_IDM_ATTR, null);",
        "  sharedState.get("objectAttributes").put(REPLAY_PASSWORD_IDM_ATTR, null);",
        "}());",
      ],
    },
    "aa2dabff-f5c4-4dc5-b4ac-5909e88a3a8f": {
      "_id": "aa2dabff-f5c4-4dc5-b4ac-5909e88a3a8f",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Verify known caller by first name",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Verify Known Caller",
      "script": [
        "/* Twilio IVR: Verify Known Caller",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "logger.warning("Twilio IVR: Verify Known Caller: start");",
        "outcome = "false";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// For ID Cloud use "_id", for classic deployments use "username"",
        "var userid = sharedState.get("_id")",
        "",
        "// Retrieve the known caller's first name",
        "var firstName = idRepository.getAttribute(userid, "givenName").iterator().next().replaceAll("[^a-zA-Z ]", "").toLowerCase();",
        "",
        "// Build out the full message",
        "var message = "I see we have a profile associated with your phone number!";",
        "",
        "// Build out the verification prompt",
        "var prompt = "To verify I have the right account, please say your first name.";",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextOutputCallback,",
        "      javax.security.auth.callback.TextInputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var output = new TextOutputCallback(TextOutputCallback.INFORMATION, message);",
        "        var input = new TextInputCallback(prompt);",
        "        action = Action.send(output, input).build();",
        "      } ",
        "      else {",
        "          var answer = callbacks.get(1).getText().replaceAll("[^a-zA-Z ]", "").toLowerCase();",
        "        logger.warning("Twilio IVR: Verify Known Caller: callbacks received: answer=".concat(answer).concat(" [firstName=").concat(firstName).concat("]"));",
        "        if (answer == firstName) {",
        "              outcome = "true";",
        "        }",
        "          else if (answer.length == 0) {",
        "              outcome = "no input";",
        "        }",
        "        logger.warning("Twilio IVR: Verify Known Caller: finish [outcome=".concat(outcome).concat("]"));",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
      ],
    },
    "ab78dcb5-85cb-41a6-813e-e07a77761376": {
      "_id": "ab78dcb5-85cb-41a6-813e-e07a77761376",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_ProfileToManagedObject",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "function setIfValidString(managedData, managedKey, profileKey) {",
        "  var normalizedValue = normalizedProfile.get(profileKey);",
        "  if (normalizedValue && !normalizedValue.isNull() && normalizedValue.asString() != '') {",
        "    managedData.put(managedKey, normalizedValue);",
        "  }",
        "}",
        "",
        "(function () {",
        "  var frJava = JavaImporter(",
        "    org.forgerock.json.JsonValue,",
        "    java.util.HashMap",
        "  );",
        "",
        "  var OBJ_ATTR = 'objectAttributes';",
        "",
        "  // We should have objectAttributes during onboarding because the user is established earlier in",
        "  // the journey.  We won't have objectAttributes during login, though.",
        "  var objAttrs = sharedState.containsKey(OBJ_ATTR) ? sharedState.get(OBJ_ATTR) : new frJava.HashMap();",
        "",
        "  // If this flow requires email matching, confirm the IdP user email address matches the FR email address",
        "  if (sharedState.checkEmailClaim == true) {",
        "    var idpEmail = normalizedProfile.get('email').asString();",
        "    var frEmail = objAttrs.get('mail');",
        "    if (idpEmail != frEmail) {",
        "      throw 'Email claim from IDP does not match identity mail attribute';",
        "    }",
        "  }",
        "",
        "  // Update user with first/last name from IDP, if available",
        "  var managedUserData = frJava.JsonValue.json(frJava.JsonValue.object());",
        "  setIfValidString(managedUserData, 'givenName', 'givenName');",
        "  setIfValidString(managedUserData, 'sn', 'familyName');",
        "  ",
        "  // For login: Ensure the mail attribute is set in case we have to look up the admin using",
        "  // their email.  This will occur when an existing admin is federating for the first time.",
        "  if (!objAttrs.containsKey('mail')) {",
        "    managedUserData.put('mail', normalizedProfile.get('email').asString());",
        "  }",
        "",
        "  if (!normalizedProfile.get('groups').isNull()) {",
        "    managedUserData.put('groups', normalizedProfile.get('groups').asList());",
        "  }",
        "  ",
        "  // Merge anything we've put into \`managedUserData\` into sharedState.objectAttributes because",
        "  // \`managedUserData\` goes into transient state, which isn't used by our downstream nodes",
        "  var keys = managedUserData.keys().toArray();",
        "  for (var i = 0; i < keys.length; i++) {",
        "    objAttrs.put(keys[i], managedUserData.get(keys[i]));",
        "  }",
        "  sharedState.put(OBJ_ATTR, objAttrs);",
        "",
        "  return managedUserData;",
        "}());",
      ],
    },
    "ab917dad-6fdb-46c2-8c8c-42f094ebeea1": {
      "_id": "ab917dad-6fdb-46c2-8c8c-42f094ebeea1",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Perform IDP re-lookup based on the Organization ID from the initial lookup. Set users' external IDP in shared state for further processing.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "IDP Re-Lookup",
      "script": [
        "/* IDP Re-Lookup",
        " * ",
        " * Perform IDP re-lookup based on the Organization ID from the initial lookup. ",
        " * Set users' external IDP in shared state for further processing.",
        " * ",
        " * This script requires parametrization. Make sure you carefully review the configuration parameters.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    logger.message("IDP Re-Lookup: start");",
        "      outcome = "false";",
        "      var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "      var orgId = referer.searchParam.o;",
        "      sharedState.put("username", referer.searchParam.u);",
        "",
        "      /* Begin Configuration */",
        "  ",
        "    // long-lived token, expires: Friday, January 16, 2032 9:45:14 PM GMT-06:00",
        "    var IDM_API_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJlMWE1YzU5OC04MGUyLTRhZGMtYjM0NS0zMWQwMmUyOThjNGIiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiNGYzMDkxYTktZjU0Ni00MDdiLTkzNjMtM2RiZGJiZjYzMDc0LTM1NzcwOSIsInN1Ym5hbWUiOiJlMWE1YzU5OC04MGUyLTRhZGMtYjM0NS0zMWQwMmUyOThjNGIiLCJpc3MiOiJodHRwczovL29wZW5hbS12b2xrZXItZGV2LmZvcmdlYmxvY2tzLmNvbTo0NDMvYW0vb2F1dGgyL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoiLUIxQlRUM3FqNi04Zkd3a2d6bzgzNzlSRjVJLjA4NkNJdTFyOUNCNlROcEIwV3Q5OFEyNTJYcyIsImF1ZCI6IjY5ZDA1YzExLWU4ZmUtNGFlNS1hN2M5LTIyNTJhNGQ4NWRmNCIsIm5iZiI6MTY0MjU2MzkxNCwiZ3JhbnRfdHlwZSI6InBhc3N3b3JkIiwic2NvcGUiOlsiZnI6aWRtOioiXSwiYXV0aF90aW1lIjoxNjQyNTYzOTE0LCJyZWFsbSI6Ii9hbHBoYSIsImV4cCI6MTk1NzkyMzkxNCwiaWF0IjoxNjQyNTYzOTE0LCJleHBpcmVzX2luIjozMTUzNjAwMDAsImp0aSI6Ii1CMUJUVDNxajYtOGZHd2tnem84Mzc5UkY1SS5CSHFZNVp3c0lGNVpMbEtvcGNvUlVGVHNLUjAiLCJtYXlfYWN0Ijp7ImNsaWVudF9pZCI6WyI2OWQwNWMxMS1lOGZlLTRhZTUtYTdjOS0yMjUyYTRkODVkZjQiXX19.f2NmwHVtekH93jO7-jM6mkFRcuvEN3WzcKsH-RAPnlc";",
        "",
        "    // IDM API Configuration",
        "    var IDM_API_URI = referer.origin + "/openidm/managed/alpha_organization/"+ orgId + "?_fields=name,description,idpName,idpType,idpDomains,idpJourney,idpTheme,idpPersist";",
        "",
        "      /* End Configuration */",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('GET');",
        "    request.setUri(IDM_API_URI);",
        "    request.getHeaders().add("Content-Type", "application/json; charset=UTF-8");",
        "    request.getHeaders().add("Authorization", "Bearer " + IDM_API_TOKEN);",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    logger.message("IDP Re-Lookup: JSON result: " + JSON.stringify(result));",
        "    ",
        "      if (result) {",
        "          outcome = "true";",
        "        var routedIDPs = [result];",
        "        sharedState.put("routedIDPs", routedIDPs);",
        "        logger.message("IDP Re-Lookup: Found IDP");",
        "    }",
        "    logger.message("IDP Re-Lookup: end [outcome={}]", outcome);",
        "",
        "    /*",
        "     * Parse a URL into its components and make them easily accessible by name",
        "     *",
        "     * Use in a Scripte Decision Node Script as follows:",
        "     * var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "     * var origin = referer.origin;",
        "     * ",
        "     * e.g.: https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "     * {",
        "     *     hash: '#/',",
        "     *     host: 'openam-volker-dev.forgeblocks.com',",
        "     *     hostname: 'openam-volker-dev.forgeblocks.com',",
        "     *     href: 'https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/',",
        "     *     origin: 'https://openam-volker-dev.forgeblocks.com',",
        "     *     pathname: '/am/XUI/',",
        "     *     port: '',",
        "     *     protocol: 'https',",
        "     *     search: '?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim',",
        "     *     username: '',",
        "     *     password: '',",
        "     *     searchParam: {",
        "     *         realm: '/bravo',",
        "     *         authIndexType: 'service',",
        "     *         authIndexValue: 'InitiateOwnerClaim'",
        "     *     }",
        "     * }",
        "     */",
        "    function parseUrl(href) {",
        "        var m = href.match(/^(([^:\\/?#]+):?(?:\\/\\/((?:([^\\/?#:]*):([^\\/?#:]*)@)?([^\\/?#:]*)(?::([^\\/?#:]*))?)))?([^?#]*)(\\?[^#]*)?(#.*)?$/),",
        "        r = {",
        "            hash: m[10] || "",                      // #/",
        "            host: m[3] || "",                       // openam-volker-dev.forgeblocks.com",
        "            hostname: m[6] || "",                   // openam-volker-dev.forgeblocks.com",
        "            href: m[0] || "",                       // https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "            origin: m[1] || "",                     // https://openam-volker-dev.forgeblocks.com",
        "            pathname: m[8] || (m[1] ? "/" : ""),    // /am/XUI/",
        "            port: m[7] || "",                       // ",
        "            protocol: m[2] || "",                   // https",
        "            search: m[9] || "",                     // ?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim",
        "            username: m[4] || "",                   // ",
        "            password: m[5] || "",                   // ",
        "            searchParam: {}                         // { realm: '/bravo',",
        "                                                    //   authIndexType: 'service',",
        "                                                    //   authIndexValue: 'InitiateOwnerClaim' }",
        "        };",
        "        if (r.protocol.length == 2) {",
        "            r.protocol = "file:///" + r.protocol.toUpperCase();",
        "            r.origin = r.protocol + "//" + r.host;",
        "        }",
        "        if (r.search.length > 2) {",
        "            var query = (r.search.indexOf('?') === 0) ? r.search.substr(1) : r.search;",
        "            var vars = query.split('&');",
        "            for (var i = 0; i < vars.length; i++) {",
        "            var pair = vars[i].split('=');",
        "            r.searchParam[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);",
        "            }",
        "        }",
        "        r.href = r.origin + r.pathname + r.search + r.hash;",
        "        return r;",
        "    };",
        "}());",
      ],
    },
    "ac9fc25e-3ad9-4f80-a796-2d9093795439": {
      "_id": "ac9fc25e-3ad9-4f80-a796-2d9093795439",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if MFA has already been performed for this journey. This allows journeys and inner journeys not to perform MFA multiple times.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "MFA Status",
      "script": [
        "/* MFA Status",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if MFA has already been performed for this journey. ",
        " * This allows journeys and inner journeys not to perform MFA multiple times.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " */",
        "outcome = "false";",
        "if (sharedState.get("mfaPerformed")=="true") {",
        "      outcome = "true";",
        "}",
      ],
    },
    "aef262d0-7a42-4a34-9826-e7dbc2ea6eb9": {
      "_id": "aef262d0-7a42-4a34-9826-e7dbc2ea6eb9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Route users to their organization's IDP of type saml, oidc, local, or custom and apply the organization's theme, if specified",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "IDP Router",
      "script": [
        "/* IDP Router",
        " * ",
        " * Route users to their organization's IDP of type saml, oidc, local, ",
        " * or custom and apply the organization's theme, if specified.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - saml",
        " * - oidc",
        " * - local",
        " * - custom",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      logger.message("IDP Router: Start");",
        "    outcome = "local";",
        "      var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "      var routedIDP = sharedState.get("routedIDPs").get(0);",
        "      if (routedIDP) {",
        "        outcome = routedIDP.get("idpType");",
        "        logger.message("IDP Router: Routed IDP: " + routedIDP);",
        "          sharedState.put("selectedIdp", routedIDP.get("idpName"));",
        "        var nodeConfig = {};",
        "          // load samlConfig",
        "          if (routedIDP.get("samlConfig")) {",
        "              nodeConfig = JSON.parse(routedIDP.get("samlConfig"));",
        "        }",
        "          // route to a custom journey",
        "        if (routedIDP.get("idpJourney")) {",
        "            logger.message("IDP Router: Route to custom IDP {}, journey: {}", routedIDP.get("idpName"), routedIDP.get("idpJourney"));",
        "              nodeConfig.tree = routedIDP.get("idpJourney");",
        "              outcome = "custom";",
        "        }",
        "          sharedState.put("nodeConfig", nodeConfig);",
        "          // only send callback if the org/idp requires a custom theme",
        "        if (routedIDP.get("idpTheme") && callbacks.isEmpty()) {",
        "            var stage = "themeId="+routedIDP.get("idpTheme");",
        "            var fr = JavaImporter(",
        "                org.forgerock.openam.auth.node.api.Action,",
        "                org.forgerock.openam.authentication.callbacks.PollingWaitCallback",
        "            )",
        "              action = fr.Action.send(",
        "                  new fr.PollingWaitCallback("0", "Please wait ...")",
        "            ).withStage(stage).build();",
        "          }",
        "    }",
        "      logger.message("IDP Router: Done [outcome={}]", outcome);",
        "",
        "    /*",
        "     * Parse a URL into its components and make them easily accessible by name",
        "     *",
        "     * Use in a Scripte Decision Node Script as follows:",
        "     * var referer = parseUrl(requestHeaders.get("referer").get(0));",
        "     * var origin = referer.origin;",
        "     * ",
        "     * e.g.: https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "     * {",
        "     *     hash: '#/',",
        "     *     host: 'openam-volker-dev.forgeblocks.com',",
        "     *     hostname: 'openam-volker-dev.forgeblocks.com',",
        "     *     href: 'https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/',",
        "     *     origin: 'https://openam-volker-dev.forgeblocks.com',",
        "     *     pathname: '/am/XUI/',",
        "     *     port: '',",
        "     *     protocol: 'https',",
        "     *     search: '?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim',",
        "     *     username: '',",
        "     *     password: '',",
        "     *     searchParam: {",
        "     *         realm: '/bravo',",
        "     *         authIndexType: 'service',",
        "     *         authIndexValue: 'InitiateOwnerClaim'",
        "     *     }",
        "     * }",
        "     */",
        "    function parseUrl(href) {",
        "        var m = href.match(/^(([^:\\/?#]+):?(?:\\/\\/((?:([^\\/?#:]*):([^\\/?#:]*)@)?([^\\/?#:]*)(?::([^\\/?#:]*))?)))?([^?#]*)(\\?[^#]*)?(#.*)?$/),",
        "        r = {",
        "            hash: m[10] || "",                      // #/",
        "            host: m[3] || "",                       // openam-volker-dev.forgeblocks.com",
        "            hostname: m[6] || "",                   // openam-volker-dev.forgeblocks.com",
        "            href: m[0] || "",                       // https://openam-volker-dev.forgeblocks.com/am/XUI/?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim#/",
        "            origin: m[1] || "",                     // https://openam-volker-dev.forgeblocks.com",
        "            pathname: m[8] || (m[1] ? "/" : ""),    // /am/XUI/",
        "            port: m[7] || "",                       // ",
        "            protocol: m[2] || "",                   // https",
        "            search: m[9] || "",                     // ?realm=/bravo&authIndexType=service&authIndexValue=InitiateOwnerClaim",
        "            username: m[4] || "",                   // ",
        "            password: m[5] || "",                   // ",
        "            searchParam: {}                         // { realm: '/bravo',",
        "                                                    //   authIndexType: 'service',",
        "                                                    //   authIndexValue: 'InitiateOwnerClaim' }",
        "        };",
        "        if (r.protocol.length == 2) {",
        "            r.protocol = "file:///" + r.protocol.toUpperCase();",
        "            r.origin = r.protocol + "//" + r.host;",
        "        }",
        "        if (r.search.length > 2) {",
        "            var query = (r.search.indexOf('?') === 0) ? r.search.substr(1) : r.search;",
        "            var vars = query.split('&');",
        "            for (var i = 0; i < vars.length; i++) {",
        "            var pair = vars[i].split('=');",
        "            r.searchParam[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);",
        "            }",
        "        }",
        "        r.href = r.origin + r.pathname + r.search + r.hash;",
        "        return r;",
        "    };",
        "}());",
      ],
    },
    "b3824c66-2dff-4613-9e54-4a7577fdb765": {
      "_id": "b3824c66-2dff-4613-9e54-4a7577fdb765",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Places a timestamp in the frIndexedMultivalued1 attribute",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "TimeStamp_Login",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "",
        "",
        "//var timestamps = sharedState.get("objectAttributes").get("frIndexedMultivalued1");",
        "",
        "",
        "var lastLogin = new Date();",
        "/*",
        "var datetime = ""+ currentdate.getDate() + "/"",
        "                + (currentdate.getMonth()+1)  + "/" ",
        "                + currentdate.getFullYear() + " @ "  ",
        "                + currentdate.getHours() + ":"  ",
        "                + currentdate.getMinutes() + ":" ",
        "                + currentdate.getSeconds();",
        "*/",
        "",
        "var objectAttributes = sharedState.get("objectAttributes");",
        "",
        "",
        "sharedState.put("last Login",lastLogin.toString());",
        "",
        "",
        "",
        "",
        "",
        "objectAttributes.put("frUnindexedString1",lastLogin.toString());",
        "",
        "",
        "sharedState.put("objectAttributes",objectAttributes);",
        "",
        "",
        "outcome = "true";",
      ],
    },
    "b63981d8-cb73-4e47-8749-e58654dcaa31": {
      "_id": "b63981d8-cb73-4e47-8749-e58654dcaa31",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "This script uses phonevalidator.com to determine the type of phone number stored in the user profile.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Phone Validator - Line Type",
      "script": [
        "/* Phone Validator - Line Type",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * This script uses phonevalidator.com to determine the type of phone number stored in the user profile.",
        " * Get your own API Key at https://www.phonevalidator.com",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Identify Existing User node before it is being called.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - CELL PHONE",
        " * - LANDLINE",
        " * - VOIP",
        " * - TOLL-FREE",
        " * - UNKNOWN",
        " * - failed",
        " */",
        "logger.warning("Phone Validator - Line Type: start");",
        "",
        "if (getSharedObjectAttribute("telephoneNumber") || (sharedState.get("_id") && idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().hasNext())) {",
        "",
        "    /* BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN AZURE AD SETTINGS",
        "     *",
        "       * Phone Validator - Line Type API Configuration",
        "       * Get your own API Key at https://www.phonevalidator.com",
        "     */",
        "    var PV_API_KEY = "849d564a-594d-4bde-b691-afe5ddadd547";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "",
        "      var PV_API_TYPE = "basic";",
        "    var PV_API_PHONE = getSharedObjectAttribute("telephoneNumber") || idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().next();",
        "    var PV_API_URI = "https://www.phonevalidator.com/api/v2/phonesearch?apikey=".concat(PV_API_KEY).concat("&phone=").concat(PV_API_PHONE).concat("&type=").concat(PV_API_TYPE);    ",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('GET');",
        "    request.setUri(PV_API_URI);",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "",
        "    if (result["StatusCode"]=="200") {",
        "        outcome = result["PhoneBasic"]["LineType"];",
        "    } else {",
        "        outcome = "failed";",
        "    }",
        "    logger.error("Phone Validator - Line Type: StatusCode = ".concat(result["StatusCode"]));",
        "    logger.error("Phone Validator - Line Type: StatusMessage = ".concat(result["StatusMessage"]));",
        "    logger.error("Phone Validator - Line Type: outcome = ".concat(outcome));",
        "} else {",
        "      outcome = "failed";",
        "      logger.error("Phone Validator - Line Type: No user or phone number found! Use 'Identify Existing User node before this script to populate the user's _id in shared state or put a valid cell phone number into sharedState.objectAttributes.telephoneNumber!'");",
        "    logger.error("Phone Validator - Line Type: outcome = ".concat(outcome));",
        "}",
        "",
        "/*",
        " * Read attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function getSharedObjectAttribute(name) {",
        "    var storage = sharedState.get("objectAttributes");",
        "    if (storage) {",
        "          if (storage.get) {",
        "            return sharedState.get("objectAttributes").get(name);",
        "        }",
        "          else {",
        "            return storage.name;",
        "        }",
        "    }",
        "    return null;",
        "}",
      ],
    },
    "b6fce769-cf21-4963-a8dc-7c5370a4d15b": {
      "_id": "b6fce769-cf21-4963-a8dc-7c5370a4d15b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "shared State Printer",
      "script": [
        "var fr = JavaImporter(",
        "  org.forgerock.openam.auth.node.api,",
        "  javax.security.auth.callback.TextOutputCallback",
        ");",
        "outcome = "true";",
        "with (fr) {",
        "  if (callbacks.isEmpty()) {",
        "    var callback = new TextOutputCallback(TextOutputCallback.INFORMATION, "sharedState: ".concat(sharedState.toString()));",
        "    action = Action.send(callback).build();",
        "  } else {",
        "    action = Action.goTo("true").build();",
        "  }",
        "}",
      ],
    },
    "b703581a-e112-42b9-bc24-6db8bced5a13": {
      "_id": "b703581a-e112-42b9-bc24-6db8bced5a13",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display sharedState and transientState.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Display States",
      "script": [
        "/* Display States",
        " * ",
        " * Display sharedState and transientState.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "",
        "    var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "    var halign = "left";",
        "    var message = "<h4>Current State Values</h4>".concat(",
        "        "<p><b>Shared State</b>:<br/>").concat(",
        "        sharedState.toString()).concat("</p>").concat(",
        "        "<p><b>Transient State</b>:<br/>").concat(",
        "        transientState.toString()).concat("</p>").concat(",
        "        "<p><b>Request Headers</b>:<br/>").concat(",
        "        requestHeaders.toString()).concat("</p>")",
        "    var script = "Array.prototype.slice.call(\\n".concat(",
        "      "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "      "function (e) {\\n").concat(",
        "      "  var message = e.firstElementChild;\\n").concat(",
        "      "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "      "    message.className = \\"\\";\\n").concat(",
        "      "    message.style = \\"text-align: left; inline-size: 430px; overflow-wrap: break-word;\\";\\n").concat(",
        "      "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "      "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "      "  }\\n").concat(",
        "      "})")",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (message.length && callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                anchor",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "    else {",
        "      action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "     /*",
        "      * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "      * ",
        "      * Example:",
        "      * 'xxxxx' produces '28535'",
        "      * 'xxx-xxx' produces '432-521'",
        "      */",
        "    function generateNumericToken(format) {",
        "        return format.replace(/[x]/g, function(c) {",
        "            var r = Math.random()*10|0;",
        "            var v = r;",
        "            return v.toString(10);",
        "        });",
        "    }",
        "}());",
      ],
    },
    "b7259916-71ed-4675-8c5a-de86a80e4aed": {
      "_id": "b7259916-71ed-4675-8c5a-de86a80e4aed",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript2",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "b7ce17a1-e41d-42b0-bedc-f88a4d5e1c3a": {
      "_id": "b7ce17a1-e41d-42b0-bedc-f88a4d5e1c3a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Prepares onboarding check if not amadmin",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_AmadminCheck",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "var fr = new JavaImporter(",
        "  java.util.HashMap",
        ");",
        "",
        "with (fr) {",
        "  try {",
        "    ",
        "    if (sharedState.get('username').toLowerCase() == 'amadmin') {",
        "      outcome = 'True';",
        "    } else {",
        "      outcome = 'False';",
        "    }",
        "    ",
        "  } catch (e) {",
        "",
        "    logger.error('Failed to determine if user is amadmin: {}', e);",
        "    outcome = 'Error';",
        "",
        "  }",
        "}",
      ],
    },
    "b88ce1fe-2480-4fd5-8062-2bd1f4659e2e": {
      "_id": "b88ce1fe-2480-4fd5-8062-2bd1f4659e2e",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_LoadObjectByID",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This is a utility script to simplify access to admin identity properties. It",
        " * requires that \`sharedState._id\` be populated, which can be loaded using an",
        " * Identify Existing User node.",
        " */",
        "",
        "function val(attrs, name) {",
        "  if (attrs.containsKey(name)) {",
        "    return attrs.get(name).iterator().next();",
        "  }",
        "  return '';",
        "}",
        "",
        "(function() {",
        "  var fr = new JavaImporter(",
        "    org.forgerock.openam.auth.nodes,",
        "    org.forgerock.guice.core",
        "  );",
        "",
        "  with (fr) {",
        "    try {",
        "",
        "      outcome = 'False';",
        "",
        "      if (!sharedState.containsKey('_id')) {",
        "        throw 'Required sharedState property _id is missing';",
        "      }      ",
        "      ",
        "      var realm = sharedState.get('realm');",
        "      var uuid = sharedState.get('_id');",
        "      ",
        "      var identityProvider = InjectorHolder.getInstance(IdentityProvider);",
        "      var identity = identityProvider.getIdentity(uuid, realm);",
        "      var attrs = identity.getAttributes();",
        "      ",
        "      sharedState.put('adminObject', {",
        "        givenName: val(attrs, 'givenName'),        ",
        "        sn: val(attrs, 'sn'),",
        "        mail: val(attrs, 'mail'),",
        "        inviteDate: val(attrs, 'fr-idm-inviteDate'),",
        "        onboardDate: val(attrs, 'fr-idm-onboardDate')        ",
        "      });",
        "",
        "      logger.message('Loaded admin object for id: {}', uuid);",
        "",
        "      outcome = 'True';",
        "",
        "    } catch (e) {",
        "      logger.error('Failed to load admin object: {}', e);",
        "    }",
        "  }",
        "}());",
      ],
    },
    "bae1d54a-e97d-4997-aa5d-c027f21af82c": {
      "_id": "bae1d54a-e97d-4997-aa5d-c027f21af82c",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Normalizes raw profile data from Facebook",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Facebook Profile Normalization",
      "script": [
        "/*",
        " * Copyright 2020 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "return json(object(",
        "        field("id", rawProfile.id),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.first_name),",
        "        field("familyName", rawProfile.last_name),",
        "        field("photoUrl", rawProfile.picture.data.url),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email)))",
      ],
    },
    "be6f1f2c-30ee-41fb-9e1e-8da72267fad3": {
      "_id": "be6f1f2c-30ee-41fb-9e1e-8da72267fad3",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Greet verified caller",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Greet Verified Caller",
      "script": [
        "/* Twilio IVR: Greet Verified Caller",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "outcome = "true";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// For ID Cloud use "_id", for classic deployments use "username"",
        "var userid = sharedState.get("_id")",
        "",
        "// Configure how you would like to address the verified caller. The default is the full name.",
        "var name = [idRepository.getAttribute(userid, "givenName").iterator().next(), idRepository.getAttribute(userid, "sn").iterator().next()].join(" ");",
        "",
        "// Build out the full message",
        "var message = ["Hello", name, "! How can I help you today?"].join(" ");",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextOutputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var output = new TextOutputCallback(TextOutputCallback.INFORMATION, message);",
        "        action = Action.send(output).build();",
        "      } ",
        "      else {",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
      ],
    },
    "c234ba0b-58a1-4cfd-9567-09edde980745": {
      "_id": "c234ba0b-58a1-4cfd-9567-09edde980745",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 1433147666269,
      "default": true,
      "description": "Internal token modification script",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ForgeRock Internal: OAuth2 Access Token Modification Script",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "// Script is intentionally empty",
        "",
      ],
    },
    "c253a7ac-ebc9-4268-9e62-89f38f98e4ab": {
      "_id": "c253a7ac-ebc9-4268-9e62-89f38f98e4ab",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "CopyIDToObjectAttributes",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "",
        "sharedState.get("objectAttributes").put("_id", sharedState.get("_id"));",
        "",
        "outcome = "true";",
      ],
    },
    "c827d2b4-3608-4693-868e-bbcf86bd87c7": {
      "_id": "c827d2b4-3608-4693-868e-bbcf86bd87c7",
      "context": "AUTHENTICATION_CLIENT_SIDE",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for client side Scripted Authentication Module",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Scripted Module - Client Side",
      "script": [
        "/*",
        " * Copyright 2016-2017 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "/* Default Authentication client side script to use as a template for new scripts */",
      ],
    },
    "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d": {
      "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if username has already been collected.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FrodoTestScript1",
      "script": [
        "/* Check Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Check if username has already been collected.",
        " * Return "known" if yes, "unknown" otherwise.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - known",
        " * - unknown",
        " */",
        "(function () {",
        "    if (null != sharedState.get("username")) {",
        "        outcome = "known";",
        "    }",
        "    else {",
        "        outcome = "unknown";",
        "    }",
        "}());",
      ],
    },
    "c9fa3899-c3ce-4833-af83-64d709202600": {
      "_id": "c9fa3899-c3ce-4833-af83-64d709202600",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Verify security PIN",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio IVR: Verify Security PIN",
      "script": [
        "/* Twilio IVR: Verify Security PIN",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " * ",
        " * Depending on the amount of data collected through callbacks and how many of the callParams",
        " * you activate below, you will need to change your authentication session from JWT to CTS or",
        " * Memory.",
        " */",
        "logger.warning("Twilio IVR: Verify Security PIN: start");",
        "outcome = "false";",
        "",
        "/* Begin Configuration",
        " */",
        "",
        "// For ID Cloud use "_id", for classic deployments use "username"",
        "var userid = sharedState.get("_id")",
        "",
        "// Retrieve the identified caller's PIN (in IDM: frUnindexedInteger5, in AM: fr-attr-int5)",
        "var securityPIN = idRepository.getAttribute(userid, "fr-attr-int5").iterator().next();",
        "",
        "// Build out the verification prompt",
        "var prompt = "To verify I have the right account, please enter your 4-digit security PIN.";",
        "",
        "/* End Configuration",
        " */",
        "",
        "var fr = JavaImporter(",
        "      org.forgerock.openam.auth.node.api,",
        "      javax.security.auth.callback.TextInputCallback",
        ");",
        "  ",
        "with (fr) {",
        "      if (callbacks.isEmpty()) {",
        "        var input = new TextInputCallback(prompt);",
        "        action = Action.send(input).build();",
        "      } ",
        "      else {",
        "          var answer = new String(callbacks.get(0).getText()).replace(/[^0-9]/g, "");",
        "        logger.warning("Twilio IVR: Verify Security PIN: callbacks received");",
        "        if (answer == securityPIN) {",
        "              outcome = "true";",
        "        }",
        "        logger.warning("Twilio IVR: Verify Security PIN: finish [outcome=".concat(outcome).concat("]"));",
        "        action = Action.goTo(outcome).build();",
        "      }",
        "}",
      ],
    },
    "cdea92a1-d2bf-4364-a525-fde8b7a95792": {
      "_id": "cdea92a1-d2bf-4364-a525-fde8b7a95792",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Get Lockout Status",
      "script": [
        "outcome = "true";",
        "",
        "var username = sharedState.get("_id")",
        "var lockoutDataAttr = "sunAMAuthInvalidAttemptsData"",
        "var accountStatusAttr = "inetUserStatus"",
        "",
        "var lockoutData = idRepository.getAttribute(username, lockoutDataAttr)",
        "var accountStatus = idRepository.getAttribute(username, accountStatusAttr)",
        "",
        "transientState.put("lockoutData", lockoutData)",
        "transientState.put("accountStatus", accountStatus)",
        "",
        "logger.error(lockoutData.toString())",
      ],
    },
    "ce6fbbcf-5d9a-471b-bcc1-448758a6374a": {
      "_id": "ce6fbbcf-5d9a-471b-bcc1-448758a6374a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Validate OTP in profile attribute",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "MobileOTP: Validate OTP In Profile Attribute",
      "script": [
        "/*",
        " * Validate OTP in user profile attribute against OTP in shared state",
        " */",
        "outcome = "false";",
        "var OTP_LENGTH = 8;",
        "",
        "if (sharedState.get("mobileOTP")) {",
        "      var profileOTP = idRepository.getAttribute(username, "fr-attr-int5");",
        "}",
        "",
        "function checkPassword(profileOTP, password) {",
        "    var oneTimePassword = profileOTP.substring(0,7);",
        "    var passwordTimestamp = Number(profileOTP.substring(8));",
        "",
        "    var passwordMatches = oneTimePassword",
        "        && (oneTimePassword == password)",
        "        && passwordTimestamp != null",
        "        && isWithinExpiryTime(passwordTimestamp);",
        "    return passwordMatches;",
        "}",
        "",
        "function isWithinExpiryTime(passwordTimestamp) {",
        "        Instant previous = Instant.ofEpochSecond(passwordTimestamp);",
        "        Duration passwordExpiry = Duration.ofMinutes(config.passwordExpiryTime());",
        "        Instant now = Time.getClock().instant();",
        "        logger.debug("previous {} \\n passwordExpiry {} \\n now {}", previous, passwordExpiry, now);",
        "        boolean withinExpiryTime = Duration.between(previous.plus(passwordExpiry), now).isNegative();",
        "        logger.debug("withinExpiryTime {}", withinExpiryTime);",
        "        return withinExpiryTime;",
        "}",
        "",
        "/*",
        "    private Action checkPassword(TreeContext context, String password) {",
        "        JsonValue oneTimePassword = context.getState(ONE_TIME_PASSWORD);",
        "        JsonValue passwordTimestamp = context.getState(ONE_TIME_PASSWORD_TIMESTAMP);",
        "",
        "        boolean passwordMatches = oneTimePassword != null && oneTimePassword.isString()",
        "                && oneTimePassword.asString().equals(password)",
        "                && passwordTimestamp != null && passwordTimestamp.isNumber()",
        "                && isWithinExpiryTime(passwordTimestamp.asLong());",
        "        logger.debug("passwordMatches {}", passwordMatches);",
        "        return goTo(passwordMatches).build();",
        "    }",
        "",
        "    private boolean isWithinExpiryTime(long passwordTimestamp) {",
        "        Instant previous = Instant.ofEpochSecond(passwordTimestamp);",
        "        Duration passwordExpiry = Duration.ofMinutes(config.passwordExpiryTime());",
        "        Instant now = Time.getClock().instant();",
        "        logger.debug("previous {} \\n passwordExpiry {} \\n now {}", previous, passwordExpiry, now);",
        "        boolean withinExpiryTime = Duration.between(previous.plus(passwordExpiry), now).isNegative();",
        "        logger.debug("withinExpiryTime {}", withinExpiryTime);",
        "        return withinExpiryTime;",
        "    }",
        "    */",
      ],
    },
    "cf3515f0-8278-4ee3-a530-1bad7424c416": {
      "_id": "cf3515f0-8278-4ee3-a530-1bad7424c416",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Default alpha realm script for OIDC claims",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
      ],
    },
    "cfb208d8-241c-4953-b87b-bf59d1ab3d05": {
      "_id": "cfb208d8-241c-4953-b87b-bf59d1ab3d05",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_EnableEmailClaimCheck",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "nodeState.putShared('checkEmailClaim', true);",
        "",
        "outcome = 'True';",
      ],
    },
    "d22f9a0c-426a-4466-b95e-d0f125b0d5fa": {
      "_id": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Default global script for OAuth2 Access Token Modification",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "OAuth2 Access Token Modification Script",
      "script": [
        "/*",
        " * Copyright 2019-2021 ForgeRock AS. All Rights Reserved.",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script lets you modify information associated with an OAuth2 access token",
        " * with methods provided by the AccessToken (1) interface.",
        " * The changes made to OAuth2 access tokens will directly impact the size of the CTS tokens,",
        " * and, similarly, the size of the JWTs if client-based OAuth2 tokens are utilized.",
        " * When adding/updating fields make sure that the token size remains within client/user-agent limits.",
        " *",
        " * Defined variables:",
        " * accessToken - AccessToken (1).",
        " *               The access token to be updated.",
        " *               Mutable object, all changes to the access token will be reflected.",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding log files will be prefixed with: scripts.OAUTH2_ACCESS_TOKEN_MODIFICATION.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *",
        " * Return - no value is expected, changes shall be made to the accessToken parameter directly.",
        " *",
        " * Class reference:",
        " * (1) AccessToken - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/AccessToken.html.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        " */",
        "",
        "(function () {",
        "  // Adds new fields containing the session property values.",
        "  // NOTE: session may not be available for non-interactive authorization grants.",
        "  if (session) {",
        "    try {",
        "      accessToken.setField('ip_address', session.getProperty('Host'));",
        "    } catch (e) {",
        "      logger.error('Unable to retrieve session property value. ' + e);",
        "    }",
        "  }",
        "}());",
        "",
        "/* EXAMPLE",
        "(function () {",
        "    var frJava = JavaImporter(",
        "        org.forgerock.http.protocol.Request,",
        "        org.forgerock.http.protocol.Response",
        "    );",
        "",
        "    // Always includes this field in the token.",
        "    accessToken.setField('key1', 'value1');",
        "",
        "    // Receives and adds to the access token additional values by performing a REST call to an external service.",
        "    // WARNING: Below, you will find a reference to a third-party site, which is provided only as an example.",
        "    var uri = 'https://jsonplaceholder.typicode.com/posts';",
        "",
        "    try {",
        "        var request = new frJava.Request();",
        "",
        "        // You can chain methods that return the request object.",
        "        request.setUri(uri)",
        "            .setMethod('POST')",
        "            .setEntity(JSON.stringify({",
        "                updatedFields: {",
        "                    key2: 'value2',",
        "                    key3: 'value3'",
        "                }",
        "            }));",
        "",
        "        // You can call a method when chaining is not possible.",
        "        request.getHeaders().add('Content-Type', 'application/json; charset=UTF-8');",
        "",
        "        // Sends the request and receives the response.",
        "        var response = httpClient.send(request).getOrThrow();",
        "",
        "        // Checks if the response status is as expected.",
        "        if (response.getStatus() === org.forgerock.http.protocol.Status.CREATED) {",
        "            var result = JSON.parse(response.getEntity().getString());",
        "",
        "            // Set multiple token fields at once.",
        "            accessToken.setFields(result.updatedFields);",
        "        } else {",
        "            logger.error('Unable to obtain access token modifications. Status: ' + response.getStatus() + '. Content: ' + response.getEntity().getString());",
        "        }",
        "    } catch (e) {",
        "        logger.error('The request processing was interrupted. ' + e);",
        "",
        "        // The access token request fails with the HTTP 500 error in this case.",
        "        throw ('Unable to obtain response from: ' + uri);",
        "    }",
        "",
        "    // Adds new fields containing identity attribute values to the access token.",
        "    accessToken.setField('mail', identity.getAttribute('mail'));",
        "    accessToken.setField('phone', identity.getAttribute('telephoneNumber').toArray()[0]);",
        "",
        "    // Adds new fields containing the session property values.",
        "    // NOTE: session may not be available for non-interactive authorization grants.",
        "    if (session) {",
        "        try {",
        "            accessToken.setField('ipAddress', session.getProperty('Host'));",
        "        } catch (e) {",
        "            logger.error('Unable to retrieve session property value. ' + e);",
        "        }",
        "    }",
        "",
        "    // Removes a native field from the token entry, that was set by AM.",
        "    // WARNING: removing native fields from the token may result in loss of functionality.",
        "    // accessToken.removeTokenName()",
        "",
        "    // No return value is expected. Let it be undefined.",
        "}());",
        "*/",
      ],
    },
    "d25a1315-8beb-4a0c-84bf-534214fed087": {
      "_id": "d25a1315-8beb-4a0c-84bf-534214fed087",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Prepare Reset Of OTP Profile Attribute",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "MobileOTP: Prepare Reset Of OTP Profile Attribute",
      "script": [
        "/*",
        " * Reset OTP profile attribute in ObjectAttributes so it can be patched to the user profile.",
        " */",
        "outcome = "true";",
        "",
        "setSharedObjectAttribute("fr-attr-int5", "0");",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "      var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "d2a41d85-d33a-42d9-a7dd-50dfbc9fa7c0": {
      "_id": "d2a41d85-d33a-42d9-a7dd-50dfbc9fa7c0",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check Applicant",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Onfido-CheckApplicant",
      "script": [
        "logger.error("Onfido-CheckApplicant: Start");",
        "",
        "/*",
        " * !!! Extend your authentication session time so your identity proofing flows don't time out !!!",
        " *",
        " * Authentication > Settings > Trees > Max Duration (Minutes)",
        " *",
        " * Set to 15 minutes.",
        " *",
        " */",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " *",
        " * REPLACE WITH YOUR OWN ONFIDO API TOKEN",
        " */",
        "//var ONFIDO_API_TOKEN = "api_live.StUdfxdiCFb.YrzbadxB_R2-qG5lFUc3lWg6JAc3Cnq-"",
        "var ONFIDO_API_TOKEN = "api_live.H5ysRusAomY.nbbkimoWc91cDZAWJZkJt0Tkqdjm1Rjr";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "var requestBodyJson = {",
        "    "applicant_id": String(sharedState.get("onfidoApplicantID")),",
        "    "report_names": ["document", "facial_similarity_photo"]",
        "}",
        "// var requestBodyJson = {",
        "//     "applicant_id": String(sharedState.get("onfidoApplicantID")),",
        "//     "report_names": ["document"]",
        "// }",
        "",
        "var failure = true",
        "",
        "var fr = JavaImporter(",
        "    org.forgerock.http.protocol.Request",
        ")",
        "",
        "var request = new fr.Request()",
        "request.setUri("https://api.onfido.com/v3/checks")",
        "request.setMethod("POST")",
        "request.getHeaders().add("Content-Type", "application/json; charset=UTF-8")",
        "request.getHeaders().add("Authorization", "Token token=" + ONFIDO_API_TOKEN)",
        "request.getEntity().setString(JSON.stringify(requestBodyJson))",
        "",
        "var response = httpClient.send(request).get()",
        "logger.error("Onfido-CheckApplicant: Initiate checks response: ".concat(response.getEntity().getString()));",
        "",
        "if (response.getStatus().getCode() === 200) {",
        "    var id = JSON.parse(response.getEntity().getString()).id",
        "    failure = !id",
        "    if (!failure) sharedState.put("onfidoAuthToken", id);",
        "} else {",
        "    failure = true",
        "}",
        "",
        "outcome = failure ? "false" : "true";",
        "logger.error("Onfido-CheckApplicant: End (outcome=".concat(outcome).concat(")"));",
      ],
    },
    "d2cf4f18-651a-4a3c-9b04-ee4fc896d0c3": {
      "_id": "d2cf4f18-651a-4a3c-9b04-ee4fc896d0c3",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Social Identity Provider Profile Transformation for ForgeRock OIDC Providers",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ST_healthcare-idc-social-transformation",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock. Not for production use.",
        " * Modified by Stephen Payne",
        " */",
        "/* Social Identity Provider Profile Transformation script for Healthcare ID Cloud */",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "logger.error("ST_healthcare-idc-social-transformation Healthcare ID Cloud Identity Provider Profile Transformation script: Start");",
        "",
        "logger.error("ST_healthcare-idc-social-transformation Profile Transformation script: Start");",
        "logger.error("ST_healthcare-idc-social-transformationy: givenName " + rawProfile.givenName);",
        "logger.error("ST_healthcare-idc-social-transformation: sn: " +rawProfile.familyName);",
        "logger.error("ST_healthcare-idc-social-transformation: id: " +rawProfile.id);",
        "logger.error("ST_healthcare-idc-social-transformation: mail: " + rawProfile.email);",
        "logger.error("ST_healthcare-idc-social-transformation: cn: " + rawProfile.displayName);",
        "logger.error("ST_healthcare-idc-social-transformation: userName: " + rawProfile.username);",
        "logger.error("ST_healthcare-idc-social-transformation: id: " + rawProfile.id.asString());",
        "//logger.error("ST_healthcare-idc-social-transformation: iplanet-am-user-alias-list: " + selectedIdp + '-' + rawProfile.id.asString() );",
        "//logger.error("ST_healthcare-idc-social-transformation: selectedIdp: " + selectedIdp);",
        "if (rawProfile.fhirUser.isNotNull()) logger.error("ST_healthcare-idc-social-transformation: fhirUser: " + rawProfile.fhirUser);",
        "if (rawProfile.IAL.isNotNull()) logger.error("ST_healthcare-idc-social-transformatio: IAL: " + rawProfile.IAL);",
        "",
        "",
        "",
        "",
        "return json(object(",
        "        field("id", rawProfile.sub),",
        "        field("displayName", rawProfile.name),",
        "        field("givenName", rawProfile.given_name),",
        "        field("familyName", rawProfile.family_name),",
        "        field("email", rawProfile.email),",
        "        field("username", rawProfile.email),",
        "        field("IAL", rawProfile.IAL),  ",
        "        field("telephoneNumber", rawProfile.phone_number),",
        "        field("fhirUser", rawProfile.fhirUser),",
        "        field("userType", rawProfile.userType),",
        "        )",
        ")",
      ],
    },
    "d3405f9c-d338-4dc2-b00d-7aacf77b731d": {
      "_id": "d3405f9c-d338-4dc2-b00d-7aacf77b731d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Return the generated OTP using a TextOutputCallback",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Return OTP",
      "script": [
        "/* Return OTP",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Return the generated OTP using a TextOutputCallback.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "outcome = "true";",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback",
        ")",
        "if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            nodeState.get("oneTimePassword").asString()",
        "        )",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo(outcome).build();",
        "}",
      ],
    },
    "d6469639-249f-4df1-9e03-335cd3e37b3d": {
      "_id": "d6469639-249f-4df1-9e03-335cd3e37b3d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Get Email",
      "script": [
        "logger.error("Get Email: start");",
        "outcome = "true";",
        "if (getProfileAttribute("mail")) {",
        "  setSharedObjectAttribute("mail", getProfileAttribute("mail"));",
        "}",
        "logger.error("Get Email: end");",
        "",
        "/*",
        " * Get profile attribute",
        " */",
        "function getProfileAttribute(name) {",
        "    return idRepository.getAttribute(sharedState.get("_id"), name).iterator().next();",
        "}",
        "",
        "/*",
        " * Properly set attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "    if (sharedState.get("objectAttributes")) {",
        "        sharedState.get("objectAttributes").put(name, value);",
        "    }",
        "    else {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":"+value+"}"));",
        "    }",
        "}",
      ],
    },
    "d6f3befb-c73a-437e-b02a-66d9b4c93f8b": {
      "_id": "d6f3befb-c73a-437e-b02a-66d9b4c93f8b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Extract impersonatee and impersonator from headers and become impersonator.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Impersonate: Extract Actors And Become Impersonator",
      "script": [
        "/* Impersonate: Extract Actors And Become Impersonator",
        " *",
        " * Extract impersonatee and impersonator from headers and become impersonatee.",
        " *",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * - false",
        " */",
        "",
        "(function () {",
        "    logger.warning("Impersonate: Extract Actors: start");",
        "    outcome = "false";",
        "",
        "    /*",
        "     * BEGIN SCRIPT CONFIGURATION",
        "     */",
        "    var IMPERSONATEE_HEADER_NAME = "X-Impersonatee";",
        "    var IMPERSONATOR_HEADER_NAME = "X-Impersonator";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "",
        "    var impersonatee = getHeader(IMPERSONATEE_HEADER_NAME);",
        "    var impersonator = getHeader(IMPERSONATOR_HEADER_NAME);",
        "    if (impersonatee && impersonator) {",
        "        outcome = "true";",
        "        sharedState.put("impersonatee", impersonatee);",
        "        sharedState.put("impersonator", impersonator);",
        "        sharedState.put("username", impersonator);",
        "        setSharedObjectAttribute("userName", impersonator);",
        "    }",
        "",
        "    logger.warning("Impersonate: Extract Actors: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "    /*",
        "     * Returns the value of the requested header",
        "     */",
        "    function getHeader(headerName) {",
        "        if (requestHeaders.get(headerName) && requestHeaders.get(headerName).get(0)) {",
        "            return requestHeaders.get(headerName).get(0).toString();",
        "        }",
        "        return null;",
        "    }",
        "",
        "    /*",
        "     * Store attributes in shared state for use with the Create/Patch Object nodes.",
        "     */",
        "    function setSharedObjectAttribute(name, value) {",
        "         var storage = sharedState.get("objectAttributes");",
        "        if (storage && value) {",
        "            if (storage.put) {",
        "                  storage.put(name, value);",
        "            }",
        "            else {",
        "                storage[name] = value;",
        "            }",
        "        }",
        "        else if (value) {",
        "            sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "        }",
        "    }",
        "}());",
      ],
    },
    "d70df7a8-6390-409d-b821-166272a9a9c8": {
      "_id": "d70df7a8-6390-409d-b821-166272a9a9c8",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Collect all the configuration items required for the Inner Tree Evaluator to function properly.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect Inner Tree Evaluator Config",
      "script": [
        "/* Collect Inner Tree Evaluator Config",
        " * ",
        " * Collect all the configuration items required for the Inner Tree Evaluator to function properly.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "      var config = {",
        "        "tree": "Login",",
        "    };",
        "      var script = "";",
        "    script += "Array.prototype.slice.call(";",
        "    script += "    document.getElementsByTagName('input')";",
        "    script += ").forEach(";",
        "    script += "    function (input,i) {";",
        "    script += "        console.log('input '+i);"",
        "    script += "        var config = JSON.parse('"+JSON.stringify(config)+"');";",
        "    script += "        var keys = Object.keys(config);";",
        "    script += "        if (input.type === 'text') {";",
        "    script += "            input.setAttribute('value', config[keys[i]]);";",
        "    script += "            input.dispatchEvent(new KeyboardEvent( 'input' , {'key':'Enter'} ));";",
        "    script += "        }";",
        "    script += "    }";",
        "    script += ");";",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          javax.security.auth.callback.NameCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.NameCallback("tree", config.tree),",
        "              new fr.ScriptTextOutputCallback(script)",
        "        ).build();",
        "    }",
        "    else {",
        "          config[callbacks.get(0).getPrompt()] = callbacks.get(0).getName();",
        "          nodeState.putShared("nodeConfig", config);",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "}());",
      ],
    },
    "d82a4ad6-cd8a-437b-af55-7373e50d685b": {
      "_id": "d82a4ad6-cd8a-437b-af55-7373e50d685b",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Collect Replay Password (frUnindexedString2).",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect Replay Password (frUnindexedString2)",
      "script": [
        "/* Collect And Encrypt Custom Password",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " * ",
        " * See copyright notices, conditions, and disclaimers at the bottom of this script.",
        " * ",
        " * volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    "use strict";var sjcl={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(message){this.toString=function(){return"CORRUPT: "+this.message};this.message=message},invalid:function(message){this.toString=function(){return"INVALID: "+this.message};this.message=message},bug:function(message){this.toString=function(){return"BUG: "+this.message};this.message=message},notReady:function(message){this.toString=function(){return"NOT READY: "+this.message};this.message=message}}};sjcl.cipher.aes=function(key){if(!this._tables[0][0][0]){this._precompute()}var i,j,tmp,encKey,decKey,sbox=this._tables[0][4],decTable=this._tables[1],keyLen=key.length,rcon=1;if(keyLen!==4&&keyLen!==6&&keyLen!==8){throw new sjcl.exception.invalid("invalid aes key size")}this._key=[encKey=key.slice(0),decKey=[]];for(i=keyLen;i<4*keyLen+28;i++){tmp=encKey[i-1];if(i%keyLen===0||keyLen===8&&i%keyLen===4){tmp=sbox[tmp>>>24]<<24^sbox[tmp>>16&255]<<16^sbox[tmp>>8&255]<<8^sbox[tmp&255];if(i%keyLen===0){tmp=tmp<<8^tmp>>>24^rcon<<24;rcon=rcon<<1^(rcon>>7)*283}}encKey[i]=encKey[i-keyLen]^tmp}for(j=0;i;j++,i--){tmp=encKey[j&3?i:i-4];if(i<=4||j<4){decKey[j]=tmp}else{decKey[j]=decTable[0][sbox[tmp>>>24]]^decTable[1][sbox[tmp>>16&255]]^decTable[2][sbox[tmp>>8&255]]^decTable[3][sbox[tmp&255]]}}};sjcl.cipher.aes.prototype={encrypt:function(data){return this._crypt(data,0)},decrypt:function(data){return this._crypt(data,1)},_tables:[[[],[],[],[],[]],[[],[],[],[],[]]],_precompute:function(){var encTable=this._tables[0],decTable=this._tables[1],sbox=encTable[4],sboxInv=decTable[4],i,x,xInv,d=[],th=[],x2,x4,x8,s,tEnc,tDec;for(i=0;i<256;i++){th[(d[i]=i<<1^(i>>7)*283)^i]=i}for(x=xInv=0;!sbox[x];x^=x2||1,xInv=th[xInv]||1){s=xInv^xInv<<1^xInv<<2^xInv<<3^xInv<<4;s=s>>8^s&255^99;sbox[x]=s;sboxInv[s]=x;x8=d[x4=d[x2=d[x]]];tDec=x8*16843009^x4*65537^x2*257^x*16843008;tEnc=d[s]*257^s*16843008;for(i=0;i<4;i++){encTable[i][x]=tEnc=tEnc<<24^tEnc>>>8;decTable[i][s]=tDec=tDec<<24^tDec>>>8}}for(i=0;i<5;i++){encTable[i]=encTable[i].slice(0);decTable[i]=decTable[i].slice(0)}},_crypt:function(input,dir){if(input.length!==4){throw new sjcl.exception.invalid("invalid aes block size")}var key=this._key[dir],a=input[0]^key[0],b=input[dir?3:1]^key[1],c=input[2]^key[2],d=input[dir?1:3]^key[3],a2,b2,c2,nInnerRounds=key.length/4-2,i,kIndex=4,out=[0,0,0,0],table=this._tables[dir],t0=table[0],t1=table[1],t2=table[2],t3=table[3],sbox=table[4];for(i=0;i<nInnerRounds;i++){a2=t0[a>>>24]^t1[b>>16&255]^t2[c>>8&255]^t3[d&255]^key[kIndex];b2=t0[b>>>24]^t1[c>>16&255]^t2[d>>8&255]^t3[a&255]^key[kIndex+1];c2=t0[c>>>24]^t1[d>>16&255]^t2[a>>8&255]^t3[b&255]^key[kIndex+2];d=t0[d>>>24]^t1[a>>16&255]^t2[b>>8&255]^t3[c&255]^key[kIndex+3];kIndex+=4;a=a2;b=b2;c=c2}for(i=0;i<4;i++){out[dir?3&-i:i]=sbox[a>>>24]<<24^sbox[b>>16&255]<<16^sbox[c>>8&255]<<8^sbox[d&255]^key[kIndex++];a2=a;a=b;b=c;c=d;d=a2}return out}};sjcl.bitArray={bitSlice:function(a,bstart,bend){a=sjcl.bitArray._shiftRight(a.slice(bstart/32),32-(bstart&31)).slice(1);return bend===undefined?a:sjcl.bitArray.clamp(a,bend-bstart)},extract:function(a,bstart,blength){var x,sh=Math.floor(-bstart-blength&31);if((bstart+blength-1^bstart)&-32){x=a[bstart/32|0]<<32-sh^a[bstart/32+1|0]>>>sh}else{x=a[bstart/32|0]>>>sh}return x&(1<<blength)-1},concat:function(a1,a2){if(a1.length===0||a2.length===0){return a1.concat(a2)}var last=a1[a1.length-1],shift=sjcl.bitArray.getPartial(last);if(shift===32){return a1.concat(a2)}else{return sjcl.bitArray._shiftRight(a2,shift,last|0,a1.slice(0,a1.length-1))}},bitLength:function(a){var l=a.length,x;if(l===0){return 0}x=a[l-1];return(l-1)*32+sjcl.bitArray.getPartial(x)},clamp:function(a,len){if(a.length*32<len){return a}a=a.slice(0,Math.ceil(len/32));var l=a.length;len=len&31;if(l>0&&len){a[l-1]=sjcl.bitArray.partial(len,a[l-1]&2147483648>>len-1,1)}return a},partial:function(len,x,_end){if(len===32){return x}return(_end?x|0:x<<32-len)+len*1099511627776},getPartial:function(x){return Math.round(x/1099511627776)||32},equal:function(a,b){if(sjcl.bitArray.bitLength(a)!==sjcl.bitArray.bitLength(b)){return false}var x=0,i;for(i=0;i<a.length;i++){x|=a[i]^b[i]}return x===0},_shiftRight:function(a,shift,carry,out){var i,last2=0,shift2;if(out===undefined){out=[]}for(;shift>=32;shift-=32){out.push(carry);carry=0}if(shift===0){return out.concat(a)}for(i=0;i<a.length;i++){out.push(carry|a[i]>>>shift);carry=a[i]<<32-shift}last2=a.length?a[a.length-1]:0;shift2=sjcl.bitArray.getPartial(last2);out.push(sjcl.bitArray.partial(shift+shift2&31,shift+shift2>32?carry:out.pop(),1));return out},_xor4:function(x,y){return[x[0]^y[0],x[1]^y[1],x[2]^y[2],x[3]^y[3]]},byteswapM:function(a){var i,v,m=65280;for(i=0;i<a.length;++i){v=a[i];a[i]=v>>>24|v>>>8&m|(v&m)<<8|v<<24}return a}};sjcl.codec.utf8String={fromBits:function(arr){var out="",bl=sjcl.bitArray.bitLength(arr),i,tmp;for(i=0;i<bl/8;i++){if((i&3)===0){tmp=arr[i/4]}out+=String.fromCharCode(tmp>>>8>>>8>>>8);tmp<<=8}return decodeURIComponent(escape(out))},toBits:function(str){str=unescape(encodeURIComponent(str));var out=[],i,tmp=0;for(i=0;i<str.length;i++){tmp=tmp<<8|str.charCodeAt(i);if((i&3)===3){out.push(tmp);tmp=0}}if(i&3){out.push(sjcl.bitArray.partial(8*(i&3),tmp))}return out}};sjcl.codec.base64={_chars:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",fromBits:function(arr,_noEquals,_url){var out="",i,bits=0,c=sjcl.codec.base64._chars,ta=0,bl=sjcl.bitArray.bitLength(arr);if(_url){c=c.substr(0,62)+"-_"}for(i=0;out.length*6<bl;){out+=c.charAt((ta^arr[i]>>>bits)>>>26);if(bits<6){ta=arr[i]<<6-bits;bits+=26;i++}else{ta<<=6;bits-=6}}while(out.length&3&&!_noEquals){out+="="}return out},toBits:function(str,_url){str=str.replace(/\\s|=/g,"");var out=[],i,bits=0,c=sjcl.codec.base64._chars,ta=0,x;if(_url){c=c.substr(0,62)+"-_"}for(i=0;i<str.length;i++){x=c.indexOf(str.charAt(i));if(x<0){throw new sjcl.exception.invalid("this isn't base64!")}if(bits>26){bits-=26;out.push(ta^x>>>bits);ta=x<<32-bits}else{bits+=6;ta^=x<<32-bits}}if(bits&56){out.push(sjcl.bitArray.partial(bits&56,ta,1))}return out}};sjcl.codec.base64url={fromBits:function(arr){return sjcl.codec.base64.fromBits(arr,1,1)},toBits:function(str){return sjcl.codec.base64.toBits(str,1)}};sjcl.hash.sha256=function(hash){if(!this._key[0]){this._precompute()}if(hash){this._h=hash._h.slice(0);this._buffer=hash._buffer.slice(0);this._length=hash._length}else{this.reset()}};sjcl.hash.sha256.hash=function(data){return(new sjcl.hash.sha256).update(data).finalize()};sjcl.hash.sha256.prototype={blockSize:512,reset:function(){this._h=this._init.slice(0);this._buffer=[];this._length=0;return this},update:function(data){if(typeof data==="string"){data=sjcl.codec.utf8String.toBits(data)}var i,b=this._buffer=sjcl.bitArray.concat(this._buffer,data),ol=this._length,nl=this._length=ol+sjcl.bitArray.bitLength(data);if(nl>9007199254740991){throw new sjcl.exception.invalid("Cannot hash more than 2^53 - 1 bits")}if(typeof Uint32Array!=="undefined"){var c=new Uint32Array(b);var j=0;for(i=512+ol-(512+ol&511);i<=nl;i+=512){this._block(c.subarray(16*j,16*(j+1)));j+=1}b.splice(0,16*j)}else{for(i=512+ol-(512+ol&511);i<=nl;i+=512){this._block(b.splice(0,16))}}return this},finalize:function(){var i,b=this._buffer,h=this._h;b=sjcl.bitArray.concat(b,[sjcl.bitArray.partial(1,1)]);for(i=b.length+2;i&15;i++){b.push(0)}b.push(Math.floor(this._length/4294967296));b.push(this._length|0);while(b.length){this._block(b.splice(0,16))}this.reset();return h},_init:[],_key:[],_precompute:function(){var i=0,prime=2,factor,isPrime;function frac(x){return(x-Math.floor(x))*4294967296|0}for(;i<64;prime++){isPrime=true;for(factor=2;factor*factor<=prime;factor++){if(prime%factor===0){isPrime=false;break}}if(isPrime){if(i<8){this._init[i]=frac(Math.pow(prime,1/2))}this._key[i]=frac(Math.pow(prime,1/3));i++}}},_block:function(w){var i,tmp,a,b,h=this._h,k=this._key,h0=h[0],h1=h[1],h2=h[2],h3=h[3],h4=h[4],h5=h[5],h6=h[6],h7=h[7];for(i=0;i<64;i++){if(i<16){tmp=w[i]}else{a=w[i+1&15];b=w[i+14&15];tmp=w[i&15]=(a>>>7^a>>>18^a>>>3^a<<25^a<<14)+(b>>>17^b>>>19^b>>>10^b<<15^b<<13)+w[i&15]+w[i+9&15]|0}tmp=tmp+h7+(h4>>>6^h4>>>11^h4>>>25^h4<<26^h4<<21^h4<<7)+(h6^h4&(h5^h6))+k[i];h7=h6;h6=h5;h5=h4;h4=h3+tmp|0;h3=h2;h2=h1;h1=h0;h0=tmp+(h1&h2^h3&(h1^h2))+(h1>>>2^h1>>>13^h1>>>22^h1<<30^h1<<19^h1<<10)|0}h[0]=h[0]+h0|0;h[1]=h[1]+h1|0;h[2]=h[2]+h2|0;h[3]=h[3]+h3|0;h[4]=h[4]+h4|0;h[5]=h[5]+h5|0;h[6]=h[6]+h6|0;h[7]=h[7]+h7|0}};sjcl.mode.ccm={name:"ccm",_progressListeners:[],listenProgress:function(cb){sjcl.mode.ccm._progressListeners.push(cb)},unListenProgress:function(cb){var index=sjcl.mode.ccm._progressListeners.indexOf(cb);if(index>-1){sjcl.mode.ccm._progressListeners.splice(index,1)}},_callProgressListener:function(val){var p=sjcl.mode.ccm._progressListeners.slice(),i;for(i=0;i<p.length;i+=1){p[i](val)}},encrypt:function(prf,plaintext,iv,adata,tlen){var L,out=plaintext.slice(0),tag,w=sjcl.bitArray,ivl=w.bitLength(iv)/8,ol=w.bitLength(out)/8;tlen=tlen||64;adata=adata||[];if(ivl<7){throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes")}for(L=2;L<4&&ol>>>8*L;L++){}if(L<15-ivl){L=15-ivl}iv=w.clamp(iv,8*(15-L));tag=sjcl.mode.ccm._computeTag(prf,plaintext,iv,adata,tlen,L);out=sjcl.mode.ccm._ctrMode(prf,out,iv,tag,tlen,L);return w.concat(out.data,out.tag)},decrypt:function(prf,ciphertext,iv,adata,tlen){tlen=tlen||64;adata=adata||[];var L,w=sjcl.bitArray,ivl=w.bitLength(iv)/8,ol=w.bitLength(ciphertext),out=w.clamp(ciphertext,ol-tlen),tag=w.bitSlice(ciphertext,ol-tlen),tag2;ol=(ol-tlen)/8;if(ivl<7){throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes")}for(L=2;L<4&&ol>>>8*L;L++){}if(L<15-ivl){L=15-ivl}iv=w.clamp(iv,8*(15-L));out=sjcl.mode.ccm._ctrMode(prf,out,iv,tag,tlen,L);tag2=sjcl.mode.ccm._computeTag(prf,out.data,iv,adata,tlen,L);if(!w.equal(out.tag,tag2)){throw new sjcl.exception.corrupt("ccm: tag doesn't match")}return out.data},_macAdditionalData:function(prf,adata,iv,tlen,ol,L){var mac,tmp,i,macData=[],w=sjcl.bitArray,xor=w._xor4;mac=[w.partial(8,(adata.length?1<<6:0)|tlen-2<<2|L-1)];mac=w.concat(mac,iv);mac[3]|=ol;mac=prf.encrypt(mac);if(adata.length){tmp=w.bitLength(adata)/8;if(tmp<=65279){macData=[w.partial(16,tmp)]}else if(tmp<=4294967295){macData=w.concat([w.partial(16,65534)],[tmp])}macData=w.concat(macData,adata);for(i=0;i<macData.length;i+=4){mac=prf.encrypt(xor(mac,macData.slice(i,i+4).concat([0,0,0])))}}return mac},_computeTag:function(prf,plaintext,iv,adata,tlen,L){var mac,i,w=sjcl.bitArray,xor=w._xor4;tlen/=8;if(tlen%2||tlen<4||tlen>16){throw new sjcl.exception.invalid("ccm: invalid tag length")}if(adata.length>4294967295||plaintext.length>4294967295){throw new sjcl.exception.bug("ccm: can't deal with 4GiB or more data")}mac=sjcl.mode.ccm._macAdditionalData(prf,adata,iv,tlen,w.bitLength(plaintext)/8,L);for(i=0;i<plaintext.length;i+=4){mac=prf.encrypt(xor(mac,plaintext.slice(i,i+4).concat([0,0,0])))}return w.clamp(mac,tlen*8)},_ctrMode:function(prf,data,iv,tag,tlen,L){var enc,i,w=sjcl.bitArray,xor=w._xor4,ctr,l=data.length,bl=w.bitLength(data),n=l/50,p=n;ctr=w.concat([w.partial(8,L-1)],iv).concat([0,0,0]).slice(0,4);tag=w.bitSlice(xor(tag,prf.encrypt(ctr)),0,tlen);if(!l){return{tag:tag,data:[]}}for(i=0;i<l;i+=4){if(i>n){sjcl.mode.ccm._callProgressListener(i/l);n+=p}ctr[3]++;enc=prf.encrypt(ctr);data[i]^=enc[0];data[i+1]^=enc[1];data[i+2]^=enc[2];data[i+3]^=enc[3]}return{tag:tag,data:w.clamp(data,bl)}}};sjcl.misc.hmac=function(key,Hash){this._hash=Hash=Hash||sjcl.hash.sha256;var exKey=[[],[]],i,bs=Hash.prototype.blockSize/32;this._baseHash=[new Hash,new Hash];if(key.length>bs){key=Hash.hash(key)}for(i=0;i<bs;i++){exKey[0][i]=key[i]^909522486;exKey[1][i]=key[i]^1549556828}this._baseHash[0].update(exKey[0]);this._baseHash[1].update(exKey[1]);this._resultHash=new Hash(this._baseHash[0])};sjcl.misc.hmac.prototype.encrypt=sjcl.misc.hmac.prototype.mac=function(data){if(!this._updated){this.update(data);return this.digest(data)}else{throw new sjcl.exception.invalid("encrypt on already updated hmac called!")}};sjcl.misc.hmac.prototype.reset=function(){this._resultHash=new this._hash(this._baseHash[0]);this._updated=false};sjcl.misc.hmac.prototype.update=function(data){this._updated=true;this._resultHash.update(data)};sjcl.misc.hmac.prototype.digest=function(){var w=this._resultHash.finalize(),result=new this._hash(this._baseHash[1]).update(w).finalize();this.reset();return result};sjcl.misc.pbkdf2=function(password,salt,count,length,Prff){count=count||1e4;if(length<0||count<0){throw new sjcl.exception.invalid("invalid params to pbkdf2")}if(typeof password==="string"){password=sjcl.codec.utf8String.toBits(password)}if(typeof salt==="string"){salt=sjcl.codec.utf8String.toBits(salt)}Prff=Prff||sjcl.misc.hmac;var prf=new Prff(password),u,ui,i,j,k,out=[],b=sjcl.bitArray;for(k=1;32*out.length<(length||1);k++){u=ui=prf.encrypt(b.concat(salt,[k]));for(i=1;i<count;i++){ui=prf.encrypt(ui);for(j=0;j<ui.length;j++){u[j]^=ui[j]}}out=out.concat(u)}if(length){out=b.clamp(out,length)}return out};sjcl.prng=function(defaultParanoia){this._pools=[new sjcl.hash.sha256];this._poolEntropy=[0];this._reseedCount=0;this._robins={};this._eventId=0;this._collectorIds={};this._collectorIdNext=0;this._strength=0;this._poolStrength=0;this._nextReseed=0;this._key=[0,0,0,0,0,0,0,0];this._counter=[0,0,0,0];this._cipher=undefined;this._defaultParanoia=defaultParanoia;this._collectorsStarted=false;this._callbacks={progress:{},seeded:{}};this._callbackI=0;this._NOT_READY=0;this._READY=1;this._REQUIRES_RESEED=2;this._MAX_WORDS_PER_BURST=65536;this._PARANOIA_LEVELS=[0,48,64,96,128,192,256,384,512,768,1024];this._MILLISECONDS_PER_RESEED=3e4;this._BITS_PER_RESEED=80};sjcl.prng.prototype={randomWords:function(nwords,paranoia){var out=[],i,readiness=this.isReady(paranoia),g;if(readiness===this._NOT_READY){throw new sjcl.exception.notReady("generator isn't seeded")}else if(readiness&this._REQUIRES_RESEED){this._reseedFromPools(!(readiness&this._READY))}for(i=0;i<nwords;i+=4){if((i+1)%this._MAX_WORDS_PER_BURST===0){this._gate()}g=this._gen4words();out.push(g[0],g[1],g[2],g[3])}this._gate();return out.slice(0,nwords)},setDefaultParanoia:function(paranoia,allowZeroParanoia){if(paranoia===0&&allowZeroParanoia!=="Setting paranoia=0 will ruin your security; use it only for testing"){throw new sjcl.exception.invalid("Setting paranoia=0 will ruin your security; use it only for testing")}this._defaultParanoia=paranoia},addEntropy:function(data,estimatedEntropy,source){source=source||"user";var id,i,tmp,t=(new Date).valueOf(),robin=this._robins[source],oldReady=this.isReady(),err=0,objName;id=this._collectorIds[source];if(id===undefined){id=this._collectorIds[source]=this._collectorIdNext++}if(robin===undefined){robin=this._robins[source]=0}this._robins[source]=(this._robins[source]+1)%this._pools.length;switch(typeof data){case"number":if(estimatedEntropy===undefined){estimatedEntropy=1}this._pools[robin].update([id,this._eventId++,1,estimatedEntropy,t,1,data|0]);break;case"object":objName=Object.prototype.toString.call(data);if(objName==="[object Uint32Array]"){tmp=[];for(i=0;i<data.length;i++){tmp.push(data[i])}data=tmp}else{if(objName!=="[object Array]"){err=1}for(i=0;i<data.length&&!err;i++){if(typeof data[i]!=="number"){err=1}}}if(!err){if(estimatedEntropy===undefined){estimatedEntropy=0;for(i=0;i<data.length;i++){tmp=data[i];while(tmp>0){estimatedEntropy++;tmp=tmp>>>1}}}this._pools[robin].update([id,this._eventId++,2,estimatedEntropy,t,data.length].concat(data))}break;case"string":if(estimatedEntropy===undefined){estimatedEntropy=data.length}this._pools[robin].update([id,this._eventId++,3,estimatedEntropy,t,data.length]);this._pools[robin].update(data);break;default:err=1}if(err){throw new sjcl.exception.bug("random: addEntropy only supports number, array of numbers or string")}this._poolEntropy[robin]+=estimatedEntropy;this._poolStrength+=estimatedEntropy;if(oldReady===this._NOT_READY){if(this.isReady()!==this._NOT_READY){this._fireEvent("seeded",Math.max(this._strength,this._poolStrength))}this._fireEvent("progress",this.getProgress())}},isReady:function(paranoia){var entropyRequired=this._PARANOIA_LEVELS[paranoia!==undefined?paranoia:this._defaultParanoia];if(this._strength&&this._strength>=entropyRequired){return this._poolEntropy[0]>this._BITS_PER_RESEED&&(new Date).valueOf()>this._nextReseed?this._REQUIRES_RESEED|this._READY:this._READY}else{return this._poolStrength>=entropyRequired?this._REQUIRES_RESEED|this._NOT_READY:this._NOT_READY}},getProgress:function(paranoia){var entropyRequired=this._PARANOIA_LEVELS[paranoia?paranoia:this._defaultParanoia];if(this._strength>=entropyRequired){return 1}else{return this._poolStrength>entropyRequired?1:this._poolStrength/entropyRequired}},startCollectors:function(){if(this._collectorsStarted){return}this._eventListener={loadTimeCollector:this._bind(this._loadTimeCollector),mouseCollector:this._bind(this._mouseCollector),keyboardCollector:this._bind(this._keyboardCollector),accelerometerCollector:this._bind(this._accelerometerCollector),touchCollector:this._bind(this._touchCollector)};if(window.addEventListener){window.addEventListener("load",this._eventListener.loadTimeCollector,false);window.addEventListener("mousemove",this._eventListener.mouseCollector,false);window.addEventListener("keypress",this._eventListener.keyboardCollector,false);window.addEventListener("devicemotion",this._eventListener.accelerometerCollector,false);window.addEventListener("touchmove",this._eventListener.touchCollector,false)}else if(document.attachEvent){document.attachEvent("onload",this._eventListener.loadTimeCollector);document.attachEvent("onmousemove",this._eventListener.mouseCollector);document.attachEvent("keypress",this._eventListener.keyboardCollector)}else{throw new sjcl.exception.bug("can't attach event")}this._collectorsStarted=true},stopCollectors:function(){if(!this._collectorsStarted){return}if(window.removeEventListener){window.removeEventListener("load",this._eventListener.loadTimeCollector,false);window.removeEventListener("mousemove",this._eventListener.mouseCollector,false);window.removeEventListener("keypress",this._eventListener.keyboardCollector,false);window.removeEventListener("devicemotion",this._eventListener.accelerometerCollector,false);window.removeEventListener("touchmove",this._eventListener.touchCollector,false)}else if(document.detachEvent){document.detachEvent("onload",this._eventListener.loadTimeCollector);document.detachEvent("onmousemove",this._eventListener.mouseCollector);document.detachEvent("keypress",this._eventListener.keyboardCollector)}this._collectorsStarted=false},addEventListener:function(name,callback){this._callbacks[name][this._callbackI++]=callback},removeEventListener:function(name,cb){var i,j,cbs=this._callbacks[name],jsTemp=[];for(j in cbs){if(cbs.hasOwnProperty(j)&&cbs[j]===cb){jsTemp.push(j)}}for(i=0;i<jsTemp.length;i++){j=jsTemp[i];delete cbs[j]}},_bind:function(func){var that=this;return function(){func.apply(that,arguments)}},_gen4words:function(){for(var i=0;i<4;i++){this._counter[i]=this._counter[i]+1|0;if(this._counter[i]){break}}return this._cipher.encrypt(this._counter)},_gate:function(){this._key=this._gen4words().concat(this._gen4words());this._cipher=new sjcl.cipher.aes(this._key)},_reseed:function(seedWords){this._key=sjcl.hash.sha256.hash(this._key.concat(seedWords));this._cipher=new sjcl.cipher.aes(this._key);for(var i=0;i<4;i++){this._counter[i]=this._counter[i]+1|0;if(this._counter[i]){break}}},_reseedFromPools:function(full){var reseedData=[],strength=0,i;this._nextReseed=reseedData[0]=(new Date).valueOf()+this._MILLISECONDS_PER_RESEED;for(i=0;i<16;i++){reseedData.push(Math.random()*4294967296|0)}for(i=0;i<this._pools.length;i++){reseedData=reseedData.concat(this._pools[i].finalize());strength+=this._poolEntropy[i];this._poolEntropy[i]=0;if(!full&&this._reseedCount&1<<i){break}}if(this._reseedCount>=1<<this._pools.length){this._pools.push(new sjcl.hash.sha256);this._poolEntropy.push(0)}this._poolStrength-=strength;if(strength>this._strength){this._strength=strength}this._reseedCount++;this._reseed(reseedData)},_keyboardCollector:function(){this._addCurrentTimeToEntropy(1)},_mouseCollector:function(ev){var x,y;try{x=ev.x||ev.clientX||ev.offsetX||0;y=ev.y||ev.clientY||ev.offsetY||0}catch(err){x=0;y=0}if(x!=0&&y!=0){this.addEntropy([x,y],2,"mouse")}this._addCurrentTimeToEntropy(0)},_touchCollector:function(ev){var touch=ev.touches[0]||ev.changedTouches[0];var x=touch.pageX||touch.clientX,y=touch.pageY||touch.clientY;this.addEntropy([x,y],1,"touch");this._addCurrentTimeToEntropy(0)},_loadTimeCollector:function(){this._addCurrentTimeToEntropy(2)},_addCurrentTimeToEntropy:function(estimatedEntropy){if(typeof window!=="undefined"&&window.performance&&typeof window.performance.now==="function"){this.addEntropy(window.performance.now(),estimatedEntropy,"loadtime")}else{this.addEntropy((new Date).valueOf(),estimatedEntropy,"loadtime")}},_accelerometerCollector:function(ev){var ac=ev.accelerationIncludingGravity.x||ev.accelerationIncludingGravity.y||ev.accelerationIncludingGravity.z;if(window.orientation){var or=window.orientation;if(typeof or==="number"){this.addEntropy(or,1,"accelerometer")}}if(ac){this.addEntropy(ac,2,"accelerometer")}this._addCurrentTimeToEntropy(0)},_fireEvent:function(name,arg){var j,cbs=sjcl.random._callbacks[name],cbsTemp=[];for(j in cbs){if(cbs.hasOwnProperty(j)){cbsTemp.push(cbs[j])}}for(j=0;j<cbsTemp.length;j++){cbsTemp[j](arg)}}};sjcl.random=new sjcl.prng(6);(function(){function getCryptoModule(){try{return require("crypto")}catch(e){return null}}try{var buf,crypt,ab;if(typeof module!=="undefined"&&module.exports&&(crypt=getCryptoModule())&&crypt.randomBytes){buf=crypt.randomBytes(1024/8);buf=new Uint32Array(new Uint8Array(buf).buffer);sjcl.random.addEntropy(buf,1024,"crypto.randomBytes")}else if(typeof window!=="undefined"&&typeof Uint32Array!=="undefined"){ab=new Uint32Array(32);if(window.crypto&&window.crypto.getRandomValues){window.crypto.getRandomValues(ab)}else if(window.msCrypto&&window.msCrypto.getRandomValues){window.msCrypto.getRandomValues(ab)}else{return}sjcl.random.addEntropy(ab,1024,"crypto.getRandomValues")}else{}}catch(e){if(typeof window!=="undefined"&&window.console){console.log("There was an error collecting entropy from the browser:");console.log(e)}}})();sjcl.json={defaults:{v:1,iter:1e4,ks:128,ts:64,mode:"ccm",adata:"",cipher:"aes"},_encrypt:function(password,plaintext,params,rp){params=params||{};rp=rp||{};var j=sjcl.json,p=j._add({iv:sjcl.random.randomWords(4,0)},j.defaults),tmp,prp,adata;j._add(p,params);adata=p.adata;if(typeof p.salt==="string"){p.salt=sjcl.codec.base64.toBits(p.salt)}if(typeof p.iv==="string"){p.iv=sjcl.codec.base64.toBits(p.iv)}if(!sjcl.mode[p.mode]||!sjcl.cipher[p.cipher]||typeof password==="string"&&p.iter<=100||p.ts!==64&&p.ts!==96&&p.ts!==128||p.ks!==128&&p.ks!==192&&p.ks!==256||(p.iv.length<2||p.iv.length>4)){throw new sjcl.exception.invalid("json encrypt: invalid parameters")}if(typeof password==="string"){tmp=sjcl.misc.cachedPbkdf2(password,p);password=tmp.key.slice(0,p.ks/32);p.salt=tmp.salt}else if(sjcl.ecc&&password instanceof sjcl.ecc.elGamal.publicKey){tmp=password.kem();p.kemtag=tmp.tag;password=tmp.key.slice(0,p.ks/32)}if(typeof plaintext==="string"){plaintext=sjcl.codec.utf8String.toBits(plaintext)}if(typeof adata==="string"){p.adata=adata=sjcl.codec.utf8String.toBits(adata)}prp=new sjcl.cipher[p.cipher](password);j._add(rp,p);rp.key=password;if(p.mode==="ccm"&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&plaintext instanceof ArrayBuffer){p.ct=sjcl.arrayBuffer.ccm.encrypt(prp,plaintext,p.iv,adata,p.ts)}else{p.ct=sjcl.mode[p.mode].encrypt(prp,plaintext,p.iv,adata,p.ts)}return p},encrypt:function(password,plaintext,params,rp){var j=sjcl.json,p=j._encrypt.apply(j,arguments);return j.encode(p)},_decrypt:function(password,ciphertext,params,rp){params=params||{};rp=rp||{};var j=sjcl.json,p=j._add(j._add(j._add({},j.defaults),ciphertext),params,true),ct,tmp,prp,adata=p.adata;if(typeof p.salt==="string"){p.salt=sjcl.codec.base64.toBits(p.salt)}if(typeof p.iv==="string"){p.iv=sjcl.codec.base64.toBits(p.iv)}if(!sjcl.mode[p.mode]||!sjcl.cipher[p.cipher]||typeof password==="string"&&p.iter<=100||p.ts!==64&&p.ts!==96&&p.ts!==128||p.ks!==128&&p.ks!==192&&p.ks!==256||!p.iv||(p.iv.length<2||p.iv.length>4)){throw new sjcl.exception.invalid("json decrypt: invalid parameters")}if(typeof password==="string"){tmp=sjcl.misc.cachedPbkdf2(password,p);password=tmp.key.slice(0,p.ks/32);p.salt=tmp.salt}else if(sjcl.ecc&&password instanceof sjcl.ecc.elGamal.secretKey){password=password.unkem(sjcl.codec.base64.toBits(p.kemtag)).slice(0,p.ks/32)}if(typeof adata==="string"){adata=sjcl.codec.utf8String.toBits(adata)}prp=new sjcl.cipher[p.cipher](password);if(p.mode==="ccm"&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&p.ct instanceof ArrayBuffer){ct=sjcl.arrayBuffer.ccm.decrypt(prp,p.ct,p.iv,p.tag,adata,p.ts)}else{ct=sjcl.mode[p.mode].decrypt(prp,p.ct,p.iv,adata,p.ts)}j._add(rp,p);rp.key=password;if(params.raw===1){return ct}else{return sjcl.codec.utf8String.fromBits(ct)}},decrypt:function(password,ciphertext,params,rp){var j=sjcl.json;return j._decrypt(password,j.decode(ciphertext),params,rp)},encode:function(obj){var i,out="{",comma="";for(i in obj){if(obj.hasOwnProperty(i)){if(!i.match(/^[a-z0-9]+$/i)){throw new sjcl.exception.invalid("json encode: invalid property name")}out+=comma+'"'+i+'":';comma=",";switch(typeof obj[i]){case"number":case"boolean":out+=obj[i];break;case"string":out+='"'+escape(obj[i])+'"';break;case"object":out+='"'+sjcl.codec.base64.fromBits(obj[i],0)+'"';break;default:throw new sjcl.exception.bug("json encode: unsupported type")}}}return out+"}"},decode:function(str){str=str.replace(/\\s/g,"");if(!str.match(/^\\{.*}$/)){throw new sjcl.exception.invalid("json decode: this isn't json!")}var a=str.replace(/^\\{|}$/g,"").split(/,/),out={},i,m;for(i=0;i<a.length;i++){if(!(m=a[i].match(/^\\s*(?:(["']?)([a-z][a-z0-9]*)\\1)\\s*:\\s*(?:(-?\\d+)|"([a-z0-9+\\/%*_.@=\\-]*)"|(true|false))$/i))){throw new sjcl.exception.invalid("json decode: this isn't json!")}if(m[3]!=null){out[m[2]]=parseInt(m[3],10)}else if(m[4]!=null){out[m[2]]=m[2].match(/^(ct|adata|salt|iv)$/)?sjcl.codec.base64.toBits(m[4]):unescape(m[4])}else if(m[5]!=null){out[m[2]]=m[5]==="true"}}return out},_add:function(target,src,requireSame){if(target===undefined){target={}}if(src===undefined){return target}var i;for(i in src){if(src.hasOwnProperty(i)){if(requireSame&&target[i]!==undefined&&target[i]!==src[i]){throw new sjcl.exception.invalid("required parameter overridden")}target[i]=src[i]}}return target},_subtract:function(plus,minus){var out={},i;for(i in plus){if(plus.hasOwnProperty(i)&&plus[i]!==minus[i]){out[i]=plus[i]}}return out},_filter:function(src,filter){var out={},i;for(i=0;i<filter.length;i++){if(src[filter[i]]!==undefined){out[filter[i]]=src[filter[i]]}}return out}};sjcl.encrypt=sjcl.json.encrypt;sjcl.decrypt=sjcl.json.decrypt;sjcl.misc._pbkdf2Cache={};sjcl.misc.cachedPbkdf2=function(password,obj){var cache=sjcl.misc._pbkdf2Cache,c,cp,str,salt,iter;obj=obj||{};iter=obj.iter||1e3;cp=cache[password]=cache[password]||{};c=cp[iter]=cp[iter]||{firstSalt:obj.salt&&obj.salt.length?obj.salt.slice(0):sjcl.random.randomWords(2,0)};salt=obj.salt===undefined?c.firstSalt:obj.salt;c[salt]=c[salt]||sjcl.misc.pbkdf2(password,salt,obj.iter);return{key:c[salt].slice(0),salt:salt.slice(0)}};if(typeof module!=="undefined"&&module.exports){module.exports=sjcl}if(typeof define==="function"){define([],function(){return sjcl})}",
        "    var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(input){var output="";var chr1,chr2,chr3,enc1,enc2,enc3,enc4;var i=0;input=Base64._utf8_encode(input);while(i<input.length){chr1=input.charCodeAt(i++);chr2=input.charCodeAt(i++);chr3=input.charCodeAt(i++);enc1=chr1>>2;enc2=(chr1&3)<<4|chr2>>4;enc3=(chr2&15)<<2|chr3>>6;enc4=chr3&63;if(isNaN(chr2)){enc3=enc4=64}else if(isNaN(chr3)){enc4=64}output=output+this._keyStr.charAt(enc1)+this._keyStr.charAt(enc2)+this._keyStr.charAt(enc3)+this._keyStr.charAt(enc4)}return output},decode:function(input){var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\\+\\/\\=]/g,"");while(i<input.length){enc1=this._keyStr.indexOf(input.charAt(i++));enc2=this._keyStr.indexOf(input.charAt(i++));enc3=this._keyStr.indexOf(input.charAt(i++));enc4=this._keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!=64){output=output+String.fromCharCode(chr2)}if(enc4!=64){output=output+String.fromCharCode(chr3)}}output=Base64._utf8_decode(output);return output},_utf8_encode:function(string){string=string.replace(/\\r\\n/g,"\\n");var utftext="";for(var n=0;n<string.length;n++){var c=string.charCodeAt(n);if(c<128){utftext+=String.fromCharCode(c)}else if(c>127&&c<2048){utftext+=String.fromCharCode(c>>6|192);utftext+=String.fromCharCode(c&63|128)}else{utftext+=String.fromCharCode(c>>12|224);utftext+=String.fromCharCode(c>>6&63|128);utftext+=String.fromCharCode(c&63|128)}}return utftext},_utf8_decode:function(utftext){var string="";var i=0;var c=c1=c2=0;while(i<utftext.length){c=utftext.charCodeAt(i);if(c<128){string+=String.fromCharCode(c);i++}else if(c>191&&c<224){c2=utftext.charCodeAt(i+1);string+=String.fromCharCode((c&31)<<6|c2&63);i+=2}else{c2=utftext.charCodeAt(i+1);c3=utftext.charCodeAt(i+2);string+=String.fromCharCode((c&15)<<12|(c2&63)<<6|c3&63);i+=3}}return string}};",
        "",
        "      logger.message("Collect And Encrypt Custom Password: start");",
        "    outcome = "true";",
        "  ",
        "    /* Begin Configuration */",
        "      ",
        "      // Attribute name",
        "      var idmAttrName = "frUnindexedString2"; // AM: "fr-attr-str2"",
        "      ",
        "      // Pick a shared secret to use for encryption and decryption",
        "    var sharedSecret = "RainbowPoniesHaveNoStripes";",
        "",
        "      // Fine-tune encryption settings. Default iterations are 10k, to speed up the process, it's reduced to 1k here.",
        "      var encryptionParameters = { "iter" : 1000 };",
        "      ",
        "    // Build out the password prompt",
        "    var prompt = "Replay Password";",
        "",
        "    /* End Configuration */",
        "  ",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.PasswordCallback,",
        "          java.lang.String",
        "    )",
        "    ",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "          new fr.PasswordCallback(prompt, false)",
        "        ).build();",
        "    } ",
        "    else {",
        "          // PasswordCallback returns the password as a char[], which is not the same as a JS char array. It must be converted to a proper string using the java.lang.Sting.valueOf(char[]) method.",
        "        var password = new String(fr.String.valueOf(callbacks.get(0).getPassword()));",
        "        logger.message("Collect And Encrypt Custom Password: callbacks received");",
        "",
        "          /*",
        "        var cipherPasswordJson = sjcl.encrypt(sharedSecret, password, encryptionParameters);",
        "        //setSharedObjectAttribute(idmAttrName, Base64.encode(JSON.stringify(cipherPasswordJson)));",
        "        setSharedObjectAttribute(idmAttrName, JSON.stringify(cipherPasswordJson));",
        "        logger.message("Collect And Encrypt Custom Password: cipherPasswordJson="+JSON.stringify(cipherPasswordJson));",
        "        */",
        "      ",
        "        logger.message("Collect And Encrypt Custom Password: password="+Base64.encode(password));",
        "        setSharedObjectAttribute(idmAttrName, Base64.encode(password));",
        "",
        "        logger.message("Collect And Encrypt Custom Password: finish [outcome=".concat(outcome).concat("]"));",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "    /*",
        "     * Store attributes in shared state for use with the Create/Patch Object nodes.",
        "     */",
        "    function setSharedObjectAttribute(name, value) {",
        "        var storage = sharedState.get("objectAttributes");",
        "        if (storage && value) {",
        "            if (storage.put) {",
        "                  storage.put(name, value);",
        "            }",
        "            else {",
        "                storage[name] = value;",
        "            }",
        "        }",
        "        else if (value) {",
        "              var object = {",
        "                  name: value",
        "            };",
        "            sharedState.put("objectAttributes", object);",
        "            //sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "        }",
        "    }",
        "}());",
        "/* SJCL is open. You can use, modify and redistribute it under a BSD",
        "license or under the GNU GPL, version 2.0.",
        "",
        "---------------------------------------------------------------------",
        "",
        "http://opensource.org/licenses/BSD-2-Clause",
        "",
        "Copyright (c) 2009-2015, Emily Stark, Mike Hamburg and Dan Boneh at",
        "Stanford University. All rights reserved.",
        "",
        "Redistribution and use in source and binary forms, with or without",
        "modification, are permitted provided that the following conditions are",
        "met:",
        "",
        "1. Redistributions of source code must retain the above copyright",
        "notice, this list of conditions and the following disclaimer.",
        "",
        "2. Redistributions in binary form must reproduce the above copyright",
        "notice, this list of conditions and the following disclaimer in the",
        "documentation and/or other materials provided with the distribution.",
        "",
        "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS",
        "IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED",
        "TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A",
        "PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
        "HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
        "SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED",
        "TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR",
        "PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
        "LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING",
        "NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS",
        "SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "",
        "---------------------------------------------------------------------",
        "",
        "http://opensource.org/licenses/GPL-2.0",
        "",
        "The Stanford Javascript Crypto Library (hosted here on GitHub) is a",
        "project by the Stanford Computer Security Lab to build a secure,",
        "powerful, fast, small, easy-to-use, cross-browser library for",
        "cryptography in Javascript.",
        "",
        "Copyright (c) 2009-2015, Emily Stark, Mike Hamburg and Dan Boneh at",
        "Stanford University.",
        "",
        "This program is free software; you can redistribute it and/or modify it",
        "under the terms of the GNU General Public License as published by the",
        "Free Software Foundation; either version 2 of the License, or (at your",
        "option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful, but",
        "WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General",
        "Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License along",
        "with this program; if not, write to the Free Software Foundation, Inc.,",
        "59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */",
        "",
        "/*",
        " * Base64 encode / decode",
        " *  http://www.webtoolkit.info/",
        " * ",
        " * Example:",
        " * Base64.encode('some string')",
        " * Base64.decode('some encoded string')",
        " */",
      ],
    },
    "db854830-a069-471f-875a-8dc67d45ea2d": {
      "_id": "db854830-a069-471f-875a-8dc67d45ea2d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_SetInviteMailVars",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "var objAttrs = sharedState.get('objectAttributes') || new HashMap();",
        "objAttrs.put('currentYear', new Date().getFullYear().toString());",
        "sharedState.put('objectAttributes', objAttrs);",
        "",
        "outcome = 'True';",
        "",
      ],
    },
    "dbe0bf9a-72aa-49d5-8483-9db147985a47": {
      "_id": "dbe0bf9a-72aa-49d5-8483-9db147985a47",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Normalizes raw profile data from ADFS",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "ADFS Profile Normalization (JS)",
      "script": [
        "/*",
        " * Copyright 2022 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script returns the social identity profile information for the authenticating user",
        " * in a standard form expected by the Social Provider Handler Node.",
        " *",
        " * Defined variables:",
        " * rawProfile - The social identity provider profile information for the authenticating user.",
        " *              JsonValue (1).",
        " * logger - The debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " * realm - String (primitive).",
        " *         The name of the realm the user is authenticating to.",
        " * requestHeaders - TreeMap (2).",
        " *                  The object that provides methods for accessing headers in the login request:",
        " *                  https://backstage.forgerock.com/docs/am/7/authentication-guide/scripting-api-node.html#scripting-api-node-requestHeaders.",
        " * requestParameters - TreeMap (2).",
        " *                     The object that contains the authentication request parameters.",
        " * selectedIdp - String (primitive).",
        " *               The social identity provider name. For example: google.",
        " * sharedState - LinkedHashMap (3).",
        " *               The object that holds the state of the authentication tree and allows data exchange between the stateless nodes:",
        " *               https://backstage.forgerock.com/docs/am/7/auth-nodes/core-action.html#accessing-tree-state.",
        " * transientState - LinkedHashMap (3).",
        " *                  The object for storing sensitive information that must not leave the server unencrypted,",
        " *                  and that may not need to persist between authentication requests during the authentication session:",
        " *                  https://backstage.forgerock.com/docs/am/7/auth-nodes/core-action.html#accessing-tree-state.",
        " *",
        " * Return - a JsonValue (1).",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *",
        " *          This script's last statement should result in a JsonValue (1) with the following keys:",
        " *          {",
        " *              {"displayName": "corresponding-social-identity-provider-value"},",
        " *              {"email": "corresponding-social-identity-provider-value"},",
        " *              {"familyName": "corresponding-social-identity-provider-value"},",
        " *              {"givenName": "corresponding-social-identity-provider-value"},",
        " *              {"id": "corresponding-social-identity-provider-value"},",
        " *              {"locale": "corresponding-social-identity-provider-value"},",
        " *              {"photoUrl": "corresponding-social-identity-provider-value"},",
        " *              {"username": "corresponding-social-identity-provider-value"}",
        " *          }",
        " *",
        " *          The consumer of this data defines which keys are required and which are optional.",
        " *          For example, the script associated with the Social Provider Handler Node and,",
        " *          ultimately, the managed object created/updated with this data",
        " *          will expect certain keys to be populated.",
        " *          In some common default configurations, the following keys are required to be not empty:",
        " *          username, givenName, familyName, email.",
        " *",
        " *          From RFC4517: A value of the Directory String syntax is a string of one or more",
        " *          arbitrary characters from the Universal Character Set (UCS).",
        " *          A zero-length character string is not permitted.",
        " *",
        " * (1) JsonValue - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/json/JsonValue.html.",
        " * (2) TreeMap - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeMap.html.",
        " * (3) LinkedHashMap - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " */",
        "",
        "(function () {",
        "    var frJava = JavaImporter(",
        "        org.forgerock.json.JsonValue",
        "    );",
        "",
        "    var normalizedProfileData = frJava.JsonValue.json(frJava.JsonValue.object());",
        "  ",
        "      //logger.message('Seguin rawProfile: '+rawProfile);",
        "",
        "    normalizedProfileData.put('id', rawProfile.get('sub').asString());",
        "    normalizedProfileData.put('displayName', rawProfile.get('givenName').asString() + ' ' + rawProfile.get('sn').asString());",
        "    normalizedProfileData.put('email', rawProfile.get('mail').asString());",
        "    normalizedProfileData.put('givenName', rawProfile.get('givenName').asString());",
        "    normalizedProfileData.put('familyName', rawProfile.get('sn').asString());",
        "    normalizedProfileData.put('username', rawProfile.get('upn').asString());",
        "    normalizedProfileData.put('roles', rawProfile.get('roles').asString());",
        "  ",
        "      //logger.message('Seguin normalizedProfileData: '+normalizedProfileData);",
        "",
        "    return normalizedProfileData;",
        "}());",
      ],
    },
    "dc0c9905-4a58-4f61-8562-337514e610a7": {
      "_id": "dc0c9905-4a58-4f61-8562-337514e610a7",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_IdPNormalization",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script maps token claim values to managed object attributes. It uses a "claim map" that defines",
        " * several common claim names for a given attribute so that this same script can be used for all IdPs.",
        " * For example, the attribute \`familyName\` can be populated from claims \`familyName\`, \`family_name\`, or \`sn\`.",
        " * ",
        " * Also, if custom IdP config exists in shared state and defines IdP-to-IDC group membership mappings,",
        " * those will be applied/enforced by this script. ",
        " */",
        "",
        "var SHARED_STATE_KEY = 'idpCustomConfig';",
        "",
        "// Helper to avoid strict comparison of string objects",
        "function containsGroup(jsArray, javaString) {",
        "  for (var i = 0; i < jsArray.length; i++) {",
        "    if (jsArray[i] == javaString) {",
        "      return true;",
        "    }",
        "  }",
        "  return false;",
        "}",
        "",
        "(function () {",
        "  var fr = JavaImporter(",
        "    java.lang.String,",
        "    java.util.ArrayList,",
        "    org.forgerock.json.JsonValue",
        "  );",
        "  ",
        "  var normalizedProfileData = fr.JsonValue.json(fr.JsonValue.object());",
        "  var idpConfig = sharedState.get(SHARED_STATE_KEY);",
        "",
        "  // If we have config that defines a groups claim map for this IdP, ensure the claim value matches one that's in the map",
        "  if (idpConfig && idpConfig.groups) {",
        "",
        "    logger.message('enforcing groups claim config');",
        "",
        "    // Get the groups claim from the IdP profile",
        "    var groupsClaim = rawProfile.get(idpConfig.groups.claim);",
        "    if (groupsClaim.isNull()) {",
        "      logger.error('groups claim map was enabled for "{}", but claim "{}" was not found in the raw profile', selectedIdp, idpConfig.groups.claim);",
        "      throw 'Required groups claim is missing from raw profile';",
        "    }",
        "",
        "    logger.message('received group claim value {}', groupsClaim);",
        "",
        "    // Validate the claim type and convert strings to single-value collection",
        "    var groupsClaimList;",
        "    if (groupsClaim.isCollection()) {",
        "      groupsClaimList = groupsClaim;",
        "    } else if (groupsClaim.isString()) {",
        "      groupsClaimList = new fr.ArrayList();",
        "      groupsClaimList.add(groupsClaim);",
        "    } else {",
        "      throw 'Groups claim was not a string or collection';",
        "    }",
        "    ",
        "    // Assert the claim contains at least one group",
        "    var groupsClaimLen = groupsClaimList.size();",
        "    if (groupsClaimLen < 1) {",
        "      throw 'An empty groups claim was found in raw profile';",
        "    }",
        "",
        "    // Loop through each IDC group name in the map. If the raw profile groups claim contains",
        "    // a value that matches the map for that IDC group, add that IDC group to the list for this admin.",
        "    var groups = [];",
        "    for (var idcGroupName in idpConfig.groups.mappings) {",
        "      for (var i = 0; i < groupsClaimLen; i++) {",
        "        var claimGroupId = groupsClaimList.get(i).asString();",
        "",
        "        logger.message('checking if mapping for IDC group "{}" contains claim value "{}"', idcGroupName, claimGroupId);",
        "",
        "        if (containsGroup(idpConfig.groups.mappings[idcGroupName], claimGroupId)) {",
        "          groups.push(idcGroupName);",
        "        }",
        "      }",
        "    }",
        "",
        "    // Assert at least one group was mapped to the claim",
        "    if (groups.length == 0) {",
        "      logger.error('groups claim map was enabled for "{}", but the value of claim "{}" did not match a group mapping', selectedIdp, idpConfig.groups.claim);",
        "      throw 'Raw profile groups claim value does not match a configured mapping';",
        "    }",
        "",
        "    normalizedProfileData.put('groups', groups);",
        "    sharedState.put('groups', groups);",
        "  } else {",
        "    logger.message('no enabled groups claim config to enforce');",
        "  }",
        "",
        "  // Maps normalized profile keys to the possible raw profile keys that values can come from",
        "  var claimMap = {",
        "    email: ['email', 'mail'],",
        "    familyName: ['familyName', 'family_name', 'sn'],",
        "    givenName: ['givenName', 'given_name']",
        "  };",
        "",
        "  // Try to populate each normalized profile property",
        "  var keys = Object.keys(claimMap);",
        "  for (var i = 0; i < keys.length; i++) {",
        "    var normalizedProp = keys[i];",
        "    // Try each mapped raw profile key until a value is found",
        "    for (var j = 0; j < claimMap[normalizedProp].length; j++) {",
        "      var rawProp = claimMap[normalizedProp][j];",
        "      if (!rawProfile.get(rawProp).isNull()) {",
        "        normalizedProfileData.put(normalizedProp, rawProfile.get(rawProp));",
        "        break;",
        "      }",
        "    }",
        "  }",
        "",
        "  return normalizedProfileData;",
        "}());",
      ],
    },
    "dedbc9f6-7fc9-4332-a330-55f7aeb95e78": {
      "_id": "dedbc9f6-7fc9-4332-a330-55f7aeb95e78",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "FRAAS-7955 Shared State Only",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FRAAS-7955 Shared State Only",
      "script": [
        "outcome = "true";",
        "",
        "setSharedObjectAttribute("userName", "FRAAS-7955");",
        "setSharedObjectAttribute("givenName", "First-shared");",
        "setSharedObjectAttribute("sn", "Last-shared");",
        "setSharedObjectAttribute("mail", "first.last-shared@company.com");",
        "",
        "/*",
        " * Store attributes in shared state for use with the Create/Patch Object nodes.",
        " */",
        "function setSharedObjectAttribute(name, value) {",
        "       var storage = sharedState.get("objectAttributes");",
        "    if (storage && value) {",
        "          if (storage.put) {",
        "              storage.put(name, value);",
        "        }",
        "          else {",
        "              storage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "        sharedState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "e0666b8b-f625-4047-89d8-e7e91151027f": {
      "_id": "e0666b8b-f625-4047-89d8-e7e91151027f",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Twilio Voice OTP Sender",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Twilio Voice OTP Sender",
      "script": [
        "/* Twilio Voice OTP Sender",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * This script will deliver the OTP via voice to the phone number in the user's profile.",
        " * ",
        " * This script needs to be parametrized. It will not work properly as is. ",
        " * It requires the Identify Existing User node and HOTP Generator node before it is being called.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - sent",
        " * - failed",
        " */",
        "logger.warning("Twilio Voice OTP Sender: start");",
        "",
        "if (sharedState.get("_id") && idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().hasNext()) {",
        "    var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(input){var output="";var chr1,chr2,chr3,enc1,enc2,enc3,enc4;var i=0;input=Base64._utf8_encode(input);while(i<input.length){chr1=input.charCodeAt(i++);chr2=input.charCodeAt(i++);chr3=input.charCodeAt(i++);enc1=chr1>>2;enc2=(chr1&3)<<4|chr2>>4;enc3=(chr2&15)<<2|chr3>>6;enc4=chr3&63;if(isNaN(chr2)){enc3=enc4=64}else if(isNaN(chr3)){enc4=64}output=output+this._keyStr.charAt(enc1)+this._keyStr.charAt(enc2)+this._keyStr.charAt(enc3)+this._keyStr.charAt(enc4)}return output},decode:function(input){var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\\+\\/\\=]/g,"");while(i<input.length){enc1=this._keyStr.indexOf(input.charAt(i++));enc2=this._keyStr.indexOf(input.charAt(i++));enc3=this._keyStr.indexOf(input.charAt(i++));enc4=this._keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!=64){output=output+String.fromCharCode(chr2)}if(enc4!=64){output=output+String.fromCharCode(chr3)}}output=Base64._utf8_decode(output);return output},_utf8_encode:function(string){string=string.replace(/\\r\\n/g,"\\n");var utftext="";for(var n=0;n<string.length;n++){var c=string.charCodeAt(n);if(c<128){utftext+=String.fromCharCode(c)}else if(c>127&&c<2048){utftext+=String.fromCharCode(c>>6|192);utftext+=String.fromCharCode(c&63|128)}else{utftext+=String.fromCharCode(c>>12|224);utftext+=String.fromCharCode(c>>6&63|128);utftext+=String.fromCharCode(c&63|128)}}return utftext},_utf8_decode:function(utftext){var string="";var i=0;var c=c1=c2=0;while(i<utftext.length){c=utftext.charCodeAt(i);if(c<128){string+=String.fromCharCode(c);i++}else if(c>191&&c<224){c2=utftext.charCodeAt(i+1);string+=String.fromCharCode((c&31)<<6|c2&63);i+=2}else{c2=utftext.charCodeAt(i+1);c3=utftext.charCodeAt(i+2);string+=String.fromCharCode((c&15)<<12|(c2&63)<<6|c3&63);i+=3}}return string}};",
        "",
        "    /* BEGIN SCRIPT CONFIGURATION",
        "     *",
        "     * REPLACE WITH YOUR OWN AZURE AD SETTINGS",
        "     */",
        "    var TWILIO_API_SID = "AC750415e3163a2e57b7aeea7eed82d944";",
        "    var TWILIO_API_TOKEN = "d36a719c94b4be08592d69ec4f80a5bb";",
        "    var TWILIO_API_FROM = "+13176443107";",
        "    /*",
        "     * END SCRIPT CONFIGURATION",
        "     */",
        "  ",
        "    // Twilio SMS Message API Configuration",
        "    var TWILIO_API_URI = "https://api.twilio.com/2010-04-01/Accounts/".concat(TWILIO_API_SID).concat("/Calls.json");    ",
        "    var TWILIO_API_TO = idRepository.getAttribute(sharedState.get("_id"), "telephoneNumber").iterator().next();",
        "      var OTP = sharedState.get("oneTimePassword").split("").join("; ");",
        "    var TWILIO_API_TWIML = "<Response><Pause length='1'/><Say voice='alice'>Your one-time password is ".concat(OTP).concat("</Say><Pause length='1'/><Say>Your one-time password is ").concat(OTP).concat("</Say><Pause length='1'/><Say>Goodbye</Say></Response>");",
        "    //logger.warning("Twilio Voice OTP Sender: To: ".concat(TWILIO_API_TO));",
        "    //logger.warning("Twilio Voice OTP Sender: Twiml: ".concat(TWILIO_API_TWIML));",
        "",
        "    var AUTHZ = "Basic ".concat(Base64.encode(TWILIO_API_SID.concat(':').concat(TWILIO_API_TOKEN)));",
        "    //logger.warning("Twilio SMS OTP Sender: AUTHZ - ".concat(AUTHZ));",
        "",
        "    var request = new org.forgerock.http.protocol.Request();",
        "    request.setMethod('POST');",
        "    request.setUri(TWILIO_API_URI);",
        "    request.getHeaders().add("Content-Type", "application/x-www-form-urlencoded");",
        "    request.getHeaders().add("Authorization", AUTHZ);",
        "    var params = request.getForm();",
        "    params.add("From", TWILIO_API_FROM);",
        "    params.add("Twiml", TWILIO_API_TWIML);",
        "    params.add("To", TWILIO_API_TO);",
        "    request.getEntity().setString(params.toString());",
        "",
        "    var response = httpClient.send(request).get();",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    //logger.warning("Twilio SMS OTP Sender: JSON result: " + JSON.stringify(result));",
        "",
        "    if (result["status"]=="queued") {",
        "        outcome = result["status"];",
        "        logger.error("Twilio Voice OTP Sender: status = ".concat(result["status"]));",
        "        logger.error("Twilio Voice OTP Sender: subresource_uris = ".concat(result["subresource_uris"]));",
        "        logger.error("Twilio Voice OTP Sender: outcome = ".concat(outcome));",
        "    } else {",
        "        outcome = "failed";",
        "        logger.error("Twilio Voice OTP Sender: status = ".concat(result["status"]));",
        "        logger.error("Twilio Voice OTP Sender: code = ".concat(result["code"]));",
        "        logger.error("Twilio Voice OTP Sender: more_info = ".concat(result["more_info"]));",
        "        logger.error("Twilio Voice OTP Sender: message = ".concat(result["message"]));",
        "        logger.error("Twilio Voice OTP Sender: outcome = ".concat(outcome));",
        "    }",
        "} else {",
        "      outcome = "failed";",
        "      logger.error("Twilio Voice OTP Sender: No user or phone number found! Use 'Identify Existing User node before this script to populate the user's _id in shared state!'");",
        "    logger.error("Twilio Voice OTP Sender: outcome = ".concat(outcome));",
        "}",
      ],
    },
    "e0ba741b-c952-4062-9899-0b1c19237ee4": {
      "_id": "e0ba741b-c952-4062-9899-0b1c19237ee4",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "FRAAS-7955 Workaround: Copy sharedState to transientState",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FRAAS-7955 Workaround",
      "script": [
        "outcome = "true";",
        "var attrs = sharedState.get("objectAttributes");",
        "if (attrs) {",
        "      setTransientObjectAttribute("givenName", attrs.get("givenName").concat("-workaround"));",
        "      setTransientObjectAttribute("sn", attrs.get("sn").concat("-workaround"));",
        "      setTransientObjectAttribute("mail", attrs.get("mail").concat("-workaround"));",
        "}",
        "",
        "/*",
        " * Store attributes in transient state for use with the Create/Patch Object nodes.",
        " */",
        "function setTransientObjectAttribute(name, value) {",
        "    var transientStorage = transientState.get("objectAttributes");",
        "    if (transientStorage && value) {",
        "          if (transientStorage.put) {",
        "            transientStorage.put(name, value);",
        "        }",
        "          else {",
        "            transientStorage[name] = value;",
        "        }",
        "    }",
        "    else if (value) {",
        "    transientState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "}",
      ],
    },
    "e15a13ee-9168-40cf-934f-656a5f568a6a": {
      "_id": "e15a13ee-9168-40cf-934f-656a5f568a6a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "hashdeviceProfile",
      "script": [
        "/*",
        "  - Data made available by nodes that have already executed are available in the sharedState variable.",
        "  - The script should set outcome to either "true" or "false".",
        " */",
        "",
        "//<script type="text/javascript" src="http://www.myersdaily.org/joseph/javascript/md5.js" />",
        "",
        "function hashCode(r){var e,h=0;for(e=0;e<r.length;e++)h=(h<<5)-h+r.charCodeAt(e),h|=0;return h>>>0}",
        "",
        "",
        "var hashMe = sharedState.get("forgeRock.device.profile");",
        "var hashMe = sharedState.put("forgeRock.device.profile","deleted in script - hashdeviceProfile");",
        "//var hashMeStr = JSON.stringify(hashMe);",
        "//logger.error("HashMeStr: " + hashMeStr);",
        "",
        "sharedState.put("deviceHash",hashCode(escape(hashMe)).toString());",
        "sharedState.put("frIndexedString1",hashCode(escape(hashMe)).toString());",
        "",
        "outcome = "true";",
      ],
    },
    "e1db8a0a-0329-4962-a5bf-ecffaca376ae": {
      "_id": "e1db8a0a-0329-4962-a5bf-ecffaca376ae",
      "context": "OIDC_CLAIMS",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Used by endUserUIClient",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha endUserUIClient OIDC Claims Script",
      "script": [
        "/*",
        " * Copyright 2014-2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script computes claim values returned in ID tokens and/or at the UserInfo Endpoint.",
        " * The claim values are computed for:",
        " * the claims derived from the requested scopes,",
        " * the claims provided by the authorization server,",
        " * and the claims requested by the client via the claims parameter.",
        " *",
        " * In the CONFIGURATION AND CUSTOMIZATION section, you can",
        " * define the scope-to-claims mapping, and",
        " * assign to each claim a resolver function that will compute the claim value.",
        " *",
        " * Defined variables (class references are provided below):",
        " * scopes - Set<String> (6).",
        " *          Always present, the requested scopes.",
        " * claims - Map<String, Object> (5).",
        " *          Always present, default server provided claims.",
        " * claimObjects - List<Claim> (7, 2).",
        " *                Always present, the default server provided claims.",
        " * requestedClaims - Map<String, Set<String>> (5).",
        " *                   Always present, not empty if the request contains the claims parameter and the server has enabled",
        " *                   claims_parameter_supported. A map of the requested claims to possible values, otherwise empty;",
        " *                   requested claims with no requested values will have a key but no value in the map. A key with",
        " *                   a single value in its Set (6) indicates that this is the only value that should be returned.",
        " * requestedTypedClaims - List<Claim> (7, 2).",
        " *                        Always present, the requested claims.",
        " *                        Requested claims with no requested values will have a claim with no values.",
        " *                        A claim with a single value indicates this is the only value that should be returned.",
        " * claimsLocales - List<String> (7).",
        " *                 The values from the 'claims_locales' parameter.",
        " *                 See https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts for the OIDC specification details.",
        " * requestProperties - Unmodifiable Map (5).",
        " *                     Always present, contains a map of request properties:",
        " *                     requestUri - The request URI.",
        " *                     realm - The realm that the request relates to.",
        " *                     requestParams - A map of the request params and/or posted data.",
        " *                                     Each value is a list of one or more properties.",
        " *                                     Please note that these should be handled in accordance with OWASP best practices:",
        " *                                     https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection.",
        " * clientProperties - Unmodifiable Map (5).",
        " *                    Present if the client specified in the request was identified, contains a map of client properties:",
        " *                    clientId - The client's URI for the request locale.",
        " *                    allowedGrantTypes - List of the allowed grant types (org.forgerock.oauth2.core.GrantType) for the client.",
        " *                    allowedResponseTypes - List of the allowed response types for the client.",
        " *                    allowedScopes - List of the allowed scopes for the client.",
        " *                    customProperties - A map of the custom properties of the client.",
        " *                                       Lists or maps will be included as sub-maps; for example:",
        " *                                       customMap[Key1]=Value1 will be returned as customMap -> Key1 -> Value1.",
        " *                                       To add custom properties to a client, update the Custom Properties field",
        " *                                       in AM Console > Realm Name > Applications > OAuth 2.0 > Clients > Client ID > Advanced.",
        " * identity - AMIdentity (3).",
        " *            Always present, the identity of the resource owner.",
        " * session - SSOToken (4).",
        " *           Present if the request contains the session cookie, the user's session object.",
        " * scriptName - String (primitive).",
        " *              Always present, the display name of the script.",
        " * logger - Always present, the "OAuth2Provider" debug logger instance:",
        " *          https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-logger.html#scripting-api-global-logger.",
        " *          Corresponding files will be prefixed with: scripts.OIDC_CLAIMS.",
        " * httpClient - HTTP Client (8).",
        " *              Always present, the HTTP Client instance:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/scripting-api-global-http-client.html#scripting-api-global-http-client.",
        " *              In order to use the client, you may need to add",
        " *              org.forgerock.http.Client,",
        " *              org.forgerock.http.protocol.*,",
        " *              and org.forgerock.util.promise.PromiseImpl",
        " *              to the allowed Java classes in the scripting engine configuration, as described in:",
        " *              https://backstage.forgerock.com/docs/am/7/scripting-guide/script-engine-security.html",
        " *",
        " * Return - a new UserInfoClaims(Map<String, Object> values, Map<String, List<String>> compositeScopes) (1) object.",
        " *          The result of the last statement in the script is returned to the server.",
        " *          Currently, the Immediately Invoked Function Expression (also known as Self-Executing Anonymous Function)",
        " *          is the last (and only) statement in this script, and its return value will become the script result.",
        " *          Do not use "return variable" statement outside of a function definition.",
        " *          See RESULTS section for additional details.",
        " *",
        " * Class reference:",
        " * (1) UserInfoClaims - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html.",
        " * (2) Claim - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html).",
        " *         An instance of org.forgerock.openidconnect.Claim has methods to access",
        " *         the claim name, requested values, locale, and whether the claim is essential.",
        " * (3) AMIdentity - https://backstage.forgerock.com/docs/am/7/apidocs/com/sun/identity/idm/AMIdentity.html.",
        " * (4) SSOToken - https://backstage.forgerock.com/docs/am/7/apidocs/com/iplanet/sso/SSOToken.html.",
        " * (5) Map - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html,",
        " *           or https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html.",
        " * (6) Set - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html.",
        " * (7) List - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html.",
        " * (8) Client - https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/http/Client.html.",
        "*/",
        "",
        "(function () {",
        "    // SETUP",
        "",
        "    /**",
        "     * Claim processing utilities.",
        "     * An object that contains reusable functions for processing claims.",
        "     * @see CLAIM PROCESSING UTILITIES section for details.",
        "     */",
        "    var utils = getUtils();",
        "",
        "    // CONFIGURATION AND CUSTOMIZATION",
        "",
        "    /**",
        "     * OAuth 2.0 scope values (scopes) can be used by the Client to request OIDC claims.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a scope value to an array of claim names",
        "     * to specify which claims need to be processed and returned for the requested scopes.",
        "     * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims}",
        "     * for the scope values that could be used to request claims as defined in the OIDC specification.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can choose the claim names returned for a scope.",
        "     */",
        "    utils.setScopeClaimsMap({",
        "        profile: [",
        "            'name',",
        "            'family_name',",
        "            'given_name',",
        "            'zoneinfo',",
        "            'locale'",
        "        ],",
        "        email: ['email'],",
        "        address: ['address'],",
        "        phone: ['phone_number']",
        "    });",
        "",
        "    /**",
        "     * In this script, each claim",
        "     * derived from the requested scopes,",
        "     * provided by the authorization server, and",
        "     * requested by the client via the claims parameter",
        "     * will be processed by a function associated with the claim name.",
        "     *",
        "     * Call this configuration method, and pass in as the first argument",
        "     * an object that maps a claim name to a resolver function,",
        "     * which will be automatically executed for each claim processed by the script.",
        "     *",
        "     * The claim resolver function will receive the requested claim information",
        "     * in an instance of org.forgerock.openidconnect.Claim as the first argument.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html}",
        "     * for details on the Claim class.",
        "     *",
        "     * If the claim resolver function returns a value,",
        "     * other than undefined or null,",
        "     * the claim will be included in the script's results.",
        "     *",
        "     * The Claim instance provides methods to check",
        "     * what the name of the claim is,",
        "     * which values the claim request contains,",
        "     * whether the claim is essential, and",
        "     * which locale the claim is associated with.",
        "     * The resolver function can consider this information when computing and returning the claim value.",
        "     *",
        "     * Below, find a default configuration that is expected to work in the current environment.",
        "     * A reusable function, utils.getUserProfileClaimResolver(String attribute-name),",
        "     * is called to return a claim resolver function based on a user profile attribute.",
        "     * @see CLAIM RESOLVERS section for the implementation details and examples.",
        "     * For the address claim, an example of a claim resolver that uses another claim resolver is provided.",
        "     *",
        "     * CUSTOMIZATION",
        "     * You can reuse the predefined utils methods with your custom arguments.",
        "     * You can also specify a custom resolver function for a claim name,",
        "     * that will compute and return the claim value—as shown in the commented out example below.",
        "     */",
        "    utils.setClaimResolvers({",
        "        /*",
        "        // An example of a simple claim resolver function that is defined for a claim",
        "        // directly in the configuration object:",
        "        custom-claim-name: function (requestedClaim) {",
        "            // In this case, initially, the claim value comes straight from a user profile attribute value:",
        "            var claimValue = identity.getAttribute('custom-attribute-name').toArray()[0]",
        "",
        "            // Optionally, provide additional logic for processing (filtering, formatting, etc.) the claim value.",
        "            // You can use:",
        "            // requestedClaim.getName()",
        "            // requestedClaim.getValues()",
        "            // requestedClaim.getLocale()",
        "            // requestedClaim.isEssential()",
        "",
        "            return claimValue",
        "        },",
        "        */",
        "        /**",
        "         * The use of utils.getUserProfileClaimResolver shows how",
        "         * an argument passed to a function that returns a claim resolver",
        "         * becomes available to the resolver function (via its lexical context).",
        "         */",
        "        name: utils.getUserProfileClaimResolver('cn'),",
        "        family_name: utils.getUserProfileClaimResolver('sn'),",
        "        given_name: utils.getUserProfileClaimResolver('givenname'),",
        "        zoneinfo: utils.getUserProfileClaimResolver('preferredtimezone'),",
        "        locale: utils.getUserProfileClaimResolver('preferredlocale'),",
        "        email: utils.getUserProfileClaimResolver('mail'),",
        "        address: utils.getAddressClaimResolver(",
        "            /**",
        "             * The passed in user profile claim resolver function",
        "             * can be used by the address claim resolver function",
        "             * to obtain the claim value to be formatted as per the OIDC specification:",
        "             * @see https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim.",
        "             */",
        "            utils.getUserProfileClaimResolver('postaladdress')",
        "        ),",
        "        phone_number: utils.getUserProfileClaimResolver('telephonenumber')",
        "    });",
        "",
        "    // CLAIM PROCESSING UTILITIES",
        "",
        "    /**",
        "     * @returns {object} An object that contains reusable claim processing utilities.",
        "     * @see PUBLIC METHODS section and the return statement for the list of exported functions.",
        "     */",
        "    function getUtils () {",
        "        // IMPORT JAVA",
        "",
        "        /**",
        "         * Provides Java scripting functionality.",
        "         * @see {@link https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino/Scripting_Java#javaimporter_constructor}.",
        "         */",
        "        var frJava = JavaImporter(",
        "            org.forgerock.oauth2.core.exceptions.InvalidRequestException,",
        "            org.forgerock.oauth2.core.UserInfoClaims,",
        "            org.forgerock.openidconnect.Claim,",
        "",
        "            java.util.LinkedHashMap,",
        "            java.util.ArrayList",
        "        );",
        "",
        "        // SET UP CONFIGURATION",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported scope values (scopes)",
        "         * and the corresponding claim names for each scope value.",
        "         */",
        "        var scopeClaimsMap;",
        "",
        "        /**",
        "         * Placeholder for a configuration option that contains",
        "         * an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value.",
        "         */",
        "        var claimResolvers;",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported scopes and the corresponding claim names,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps each supported scope value to an array of claim names,",
        "         * in order to specify which claims need to be processed for the requested scopes.",
        "         * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims} for details.",
        "         * @param {string[]} [params.profile] - An array of claim names to be returned if the profile scope is requested.",
        "         * @param {string[]} [params.email] - An array of claim names to be returned if the email scope is requested.",
        "         * @param {string[]} [params.address] - An array of claim names to be returned if the address scope is requested.",
        "         * @param {string[]} [params.phone] - An array of claim names to be returned if the phone scope is requested.",
        "         * @returns {undefined}",
        "         */",
        "        function setScopeClaimsMap(params) {",
        "            scopeClaimsMap = params;",
        "        }",
        "",
        "        /**",
        "         * A (public) method that accepts an object that maps the supported claim names",
        "         * and the resolver functions returning the claim value,",
        "         * and assigns it to a (private) variable that serves as a configuration option.",
        "         * @param {object} params - An object that maps",
        "         * each supported claim name to a function that computes and returns the claim value.",
        "         */",
        "        function setClaimResolvers(params) {",
        "            claimResolvers = params;",
        "        }",
        "",
        "        // CLAIM RESOLVERS",
        "",
        "        /**",
        "         * Claim resolvers are functions that return a claim value.",
        "         * @param {*}",
        "         * @returns {*}",
        "         */",
        "",
        "        /**",
        "         * Defines a claim resolver based on a user profile attribute.",
        "         * @param {string} attributeName - Name of the user profile attribute.",
        "         * @returns {function} A function that will determine the claim value",
        "         * based on the user profile attribute and the (requested) claim properties.",
        "         */",
        "        function getUserProfileClaimResolver (attributeName) {",
        "            /**",
        "             * Resolves a claim with a user profile attribute value.",
        "             * Returns undefined if the identity attribute is not populated,",
        "             * OR if the claim has requested values that do not contain the identity attribute value.",
        "             * ATTENTION: the aforementioned comparison is case-sensitive.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {string|HashSet|undefined}",
        "             */",
        "            function resolveClaim(claim) {",
        "                var userProfileValue;",
        "",
        "                if (identity) {",
        "                    userProfileValue = getClaimValueFromSet(claim, identity.getAttribute(attributeName));",
        "",
        "                    if (userProfileValue && !userProfileValue.isEmpty()) {",
        "                        if (!claim.getValues() || claim.getValues().isEmpty() || claim.getValues().contains(userProfileValue)) {",
        "                            return userProfileValue;",
        "                        }",
        "                    }",
        "                }",
        "            }",
        "",
        "            return resolveClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an address claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional formatting to the value before returning it.",
        "         */",
        "        function getAddressClaimResolver (resolveClaim) {",
        "            /**",
        "             * Creates an address claim object from a value returned by a claim resolver,",
        "             * and returns the address claim object as the claim value.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim}.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {java.util.LinkedHashMap|undefined} The address claim object created from a claim value.",
        "             */",
        "            function resolveAddressClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "                var addressObject;",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    addressObject = new frJava.LinkedHashMap();",
        "",
        "                    addressObject.put('formatted', claimValue);",
        "",
        "                    return addressObject;",
        "                }",
        "            }",
        "",
        "            return resolveAddressClaim;",
        "        }",
        "",
        "        /**",
        "         * Returns an essential claim resolver based on a claim value obtained with another claim resolver.",
        "         * @param {function} resolveClaim - A function that returns a claim value.",
        "         * @returns {function} A function that will accept a claim as an argument,",
        "         * run the claim resolver function for the claim and obtain the claim value,",
        "         * and apply additional logic for essential claims.",
        "         */",
        "        function getEssentialClaimResolver (resolveClaim) {",
        "            /**",
        "             * Returns a claim value or throws an error.",
        "             * The claim value is obtained with a claim resolving function available from the closure.",
        "             * Throws an exception if the claim is essential and no value is returned for the claim.",
        "             *",
        "             * Use of this resolver is optional.",
        "             * @see {@link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests} stating:",
        "             * "Note that even if the Claims are not available because the End-User did not authorize their release or they are not present,",
        "             * the Authorization Server MUST NOT generate an error when Claims are not returned, whether they are Essential or Voluntary,",
        "             * unless otherwise specified in the description of the specific claim."",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*}",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             */",
        "            function resolveEssentialClaim(claim) {",
        "                var claimValue = resolveClaim(claim);",
        "",
        "                if (claim.isEssential() && !isClaimValueValid(claimValue)) {",
        "                    throw new frJava.InvalidRequestException('Could not provide value for essential claim: ' + claim.getName());",
        "                }",
        "",
        "                return claimValue;",
        "            }",
        "",
        "            return resolveEssentialClaim;",
        "        }",
        "",
        "        /**",
        "         * Provides default resolution for a claim.",
        "         * Use it if a claim-specific resolver is not defined in the configuration.",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @returns {*} A single value associated with this claim.",
        "         */",
        "        function resolveAnyClaim (claim) {",
        "            if (claim.getValues().size() === 1) {",
        "                return claim.getValues().toArray()[0];",
        "            }",
        "        }",
        "",
        "        // UTILITIES",
        "",
        "        /**",
        "         * Returns claim value from a set.",
        "         * If the set contains a single value, returns the value.",
        "         * If the set contains multiple values, returns the set.",
        "         * Otherwise, returns undefined.",
        "         *",
        "         * @param {org.forgerock.openidconnect.Claim} claim",
        "         * An object that provides methods to obtain information/requirements associated with a claim.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "         * @param {java.util.HashSet} set The set—for example, a user profile attribute value.",
        "         * @returns {string|java.util.HashSet|undefined}",
        "         */",
        "        function getClaimValueFromSet (claim, set) {",
        "            if (set && set.size()) {",
        "                if (set.size() === 1) {",
        "                    return set.toArray()[0];",
        "                } else {",
        "                    return set;",
        "                }",
        "            } else if (logger.warningEnabled()) {",
        "                logger.warning('OIDC Claims script. Got an empty set for claim: ' + claim.getName());",
        "            }",
        "        }",
        "",
        "        function isClaimValueValid (claimValue) {",
        "            if (typeof claimValue === 'undefined' || claimValue === null) {",
        "                return false;",
        "            }",
        "",
        "            return true;",
        "        }",
        "",
        "        // CLAIM PROCESSING",
        "",
        "        /**",
        "         * Constructs and returns an object populated with the computed claim values",
        "         * and the requested scopes mapped to the claim names.",
        "         * @returns {org.forgerock.oauth2.core.UserInfoClaims} The object to be returned to the authorization server.",
        "         * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "         * @see RESULTS section for the use of this function.",
        "         */",
        "        function getUserInfoClaims () {",
        "            return new frJava.UserInfoClaims(getComputedClaims(), getCompositeScopes());",
        "        }",
        "",
        "        /**",
        "         * Creates a map of (requested) claim names populated with the computed claim values.",
        "         * @returns {java.util.LinkedHashMap}",
        "         * A map of the requested claim names and the corresponding claim values.",
        "         */",
        "        function getComputedClaims () {",
        "            /**",
        "             * Creates a complete list of claim objects from:",
        "             * the claims derived from the scopes,",
        "             * the claims provided by the authorization server,",
        "             * and the claims requested by the client.",
        "             * @returns {java.util.ArrayList}",
        "             * Returns a complete list of org.forgerock.openidconnect.Claim objects available to the script.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "             */",
        "            function getClaims() {",
        "                /**",
        "                 * Returns a list of claim objects for the requested scopes.",
        "                 * Uses the scopeClaimsMap configuration option to derive the claim names;",
        "                 * no other properties of a claim derived from a scope are populated.",
        "                 * @returns {java.util.ArrayList}",
        "                 * A list of org.forgerock.openidconnect.Claim objects derived from the requested scopes.",
        "                 * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for the claim object details.",
        "                 */",
        "                function convertScopeToClaims() {",
        "                    var claims = new frJava.ArrayList();",
        "",
        "                    scopes.toArray().forEach(function (scope) {",
        "                        if (String(scope) !== 'openid' && scopeClaimsMap[scope]) {",
        "                            scopeClaimsMap[scope].forEach(function (claimName) {",
        "                                claims.add(new frJava.Claim(claimName));",
        "                            });",
        "                        }",
        "                    });",
        "",
        "                    return claims;",
        "                }",
        "",
        "                var claims = new frJava.ArrayList();",
        "",
        "                claims.addAll(convertScopeToClaims());",
        "                claims.addAll(claimObjects);",
        "                claims.addAll(requestedTypedClaims);",
        "",
        "                return claims;",
        "            }",
        "",
        "            /**",
        "             * Computes and returns a claim value.",
        "             * To obtain the claim value, uses the resolver function specified for the claim in the claimResolvers configuration object.",
        "             * @see claimResolvers",
        "             * If no resolver function is found, uses the default claim resolver function.",
        "             *",
        "             * @param {org.forgerock.openidconnect.Claim} claim",
        "             * An object that provides methods to obtain information/requirements associated with a claim.",
        "             * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/openidconnect/Claim.html} for details.",
        "             * @returns {*} Claim value.",
        "             * @throws {org.forgerock.oauth2.core.exceptions.InvalidRequestException}",
        "             * Rethrows this exception if a claim resolver throws it.",
        "             * You can throw org.forgerock.oauth2.core.exceptions.InvalidRequestException from your custom claim resolver",
        "             * if you want to terminate the claim processing.",
        "             */",
        "            function computeClaim(claim) {",
        "                var resolveClaim;",
        "                var message;",
        "",
        "                try {",
        "                    resolveClaim = claimResolvers[claim.getName()] || resolveAnyClaim;",
        "",
        "                    return resolveClaim(claim);",
        "                } catch (e) {",
        "                    message = 'OIDC Claims script exception. Unable to resolve OIDC Claim. ' + e;",
        "",
        "                    if (String(e).indexOf('org.forgerock.oauth2.core.exceptions.InvalidRequestException') !== -1) {",
        "                        throw e;",
        "                    }",
        "",
        "                    if (logger.warningEnabled()) {",
        "                        logger.warning(message);",
        "                    }",
        "                }",
        "            }",
        "",
        "            var computedClaims = new frJava.LinkedHashMap();",
        "",
        "            getClaims().toArray().forEach(function (claim) {",
        "                var claimValue = computeClaim(claim);",
        "",
        "                if (isClaimValueValid(claimValue)) {",
        "                    computedClaims.put(claim.getName(), claimValue);",
        "                } else {",
        "                    /**",
        "                     * If a claim has been processed, but appears in the list again,",
        "                     * and its value cannot be computed under the new conditions,",
        "                     * the claim is removed from the final result.",
        "                     *",
        "                     * For example, a claim could be mapped to a scope and found in the user profile,",
        "                     * but also requested by the client with required values that don't match the computed one.",
        "                     * @see {link https://openid.net/specs/openid-connect-core-1_0.html#IndividualClaimsRequests}.",
        "                     * for the relevant OIDC specification details.",
        "                     */",
        "                    computedClaims.remove(claim.getName());",
        "                }",
        "            });",
        "",
        "            return computedClaims;",
        "        }",
        "",
        "        /**",
        "         * Creates a map of requested scopes and the corresponding claim names.",
        "         * @returns {java.util.LinkedHashMap}",
        "         */",
        "        function getCompositeScopes () {",
        "            var compositeScopes = new frJava.LinkedHashMap();",
        "",
        "            scopes.toArray().forEach(function (scope) {",
        "                var scopeClaims = new frJava.ArrayList();",
        "",
        "                if (scopeClaimsMap[scope]) {",
        "                    scopeClaimsMap[scope].forEach(function (claimName) {",
        "                        scopeClaims.add(claimName);",
        "                    });",
        "                }",
        "",
        "                if (scopeClaims.size()) {",
        "                    compositeScopes.put(scope, scopeClaims);",
        "                }",
        "            });",
        "",
        "            return compositeScopes;",
        "        }",
        "",
        "        // PUBLIC METHODS",
        "",
        "        return {",
        "            setScopeClaimsMap: setScopeClaimsMap,",
        "            setClaimResolvers: setClaimResolvers,",
        "            getUserProfileClaimResolver: getUserProfileClaimResolver,",
        "            getAddressClaimResolver: getAddressClaimResolver,",
        "            getEssentialClaimResolver: getEssentialClaimResolver,",
        "            getUserInfoClaims: getUserInfoClaims",
        "        };",
        "    }",
        "",
        "    // RESULTS",
        "",
        "    /**",
        "     * This script returns an instance of the org.forgerock.oauth2.core.UserInfoClaims class",
        "     * populated with the computed claim values and",
        "     * the requested scopes mapped to the claim names.",
        "     * @see {@link https://backstage.forgerock.com/docs/am/7/apidocs/org/forgerock/oauth2/core/UserInfoClaims.html}.",
        "     *",
        "     * Assigning it to a variable gives you an opportunity",
        "     * to log the content of the returned value during development.",
        "     */",
        "    var userInfoClaims = utils.getUserInfoClaims();",
        "",
        "    /*",
        "    logger.error(scriptName + ' results:')",
        "    logger.error('Values: ' + userInfoClaims.getValues())",
        "    logger.error('Scopes: ' + userInfoClaims.getCompositeScopes())",
        "    */",
        "",
        "    return userInfoClaims;",
        "}());",
      ],
    },
    "e232cff3-2460-47cd-80b2-36c86c0d0f06": {
      "_id": "e232cff3-2460-47cd-80b2-36c86c0d0f06",
      "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Used by endUserUIClient",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Alpha endUserUIClient OAuth2 Access Token Modification Script",
      "script": [
        "(function () {",
        "  if (scopes.contains('fr:autoaccess:*') || scopes.contains('fr:iga:*')) {",
        "    var fr = JavaImporter(",
        "      com.sun.identity.idm.IdType",
        "    );",
        "    var groups = [];",
        "    identity.getMemberships(fr.IdType.GROUP).toArray().forEach(function (group) {",
        "      groups.push(group.getAttribute('cn').toArray()[0]);",
        "    });",
        "    accessToken.setField('groups', groups);",
        "  }",
        "}());",
        "",
      ],
    },
    "e4417108-4dc9-4ffc-9995-3cd490adf2ed": {
      "_id": "e4417108-4dc9-4ffc-9995-3cd490adf2ed",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Collect PIN",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Collect PIN",
      "script": [
        "/* Collect PIN",
        " * ",
        " * Collect PIN using password callback and store in user profile.",
        " * ",
        " * This script must be parametrized. It may not work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "  ",
        "  /*** BEGIN PARAMETRIZATION ***/",
        "  var pinAttrName = 'frUnindexedString3';",
        "  var pinPrompt = 'New PIN';",
        "  /**** END PARAMETRIZATION ****/",
        "  ",
        "  outcome = 'true';",
        "  var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "      javax.security.auth.callback.PasswordCallback",
        "  )",
        "  if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "      new fr.PasswordCallback(pinPrompt, false)",
        "    ).build();",
        "  }",
        "  else {",
        "      var pin = new java.lang.String(callbacks.get(0).getPassword());",
        "    setTransientObjectAttribute(pinAttrName, pin);",
        "    action = fr.Action.goTo(outcome).build();",
        "  }",
        "",
        "  /*",
        "   * Store attributes in transient state for use with the Create/Patch Object nodes.",
        "   */",
        "  function setTransientObjectAttribute(name, value) {",
        "    var transientStorage = transientState.get("objectAttributes");",
        "    if (transientStorage && value) {",
        "      if (transientStorage.put) {",
        "        transientStorage.put(name, value);",
        "      }",
        "      else {",
        "        transientStorage[name] = value;",
        "      }",
        "    }",
        "    else if (value) {",
        "      transientState.put("objectAttributes", JSON.parse("{\\""+name+"\\":\\""+value+"\\"}"));",
        "    }",
        "  }",
        "}());",
      ],
    },
    "e49225eb-e7ad-4699-bf2a-d57689f9cd6e": {
      "_id": "e49225eb-e7ad-4699-bf2a-d57689f9cd6e",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display sharedState and transientState.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Display States - imported (1)",
      "script": [
        "/* Display States",
        " * ",
        " * Display sharedState and transientState.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "    outcome = "true";",
        "",
        "    var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "    var halign = "left";",
        "    var message = "<h4>Current State Values</h4>".concat(",
        "        "<p><b>Shared State</b>:<br/>").concat(",
        "        sharedState.toString()).concat("</p>").concat(",
        "        "<p><b>Transient State</b>:<br/>").concat(",
        "        transientState.toString()).concat("</p>").concat(",
        "        "<p><b>Request Headers</b>:<br/>").concat(",
        "        requestHeaders.toString()).concat("</p>")",
        "    var script = "Array.prototype.slice.call(\\n".concat(",
        "      "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "      "function (e) {\\n").concat(",
        "      "  var message = e.firstElementChild;\\n").concat(",
        "      "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "      "    message.className = \\"\\";\\n").concat(",
        "      "    message.style = \\"text-align: left; inline-size: 430px; overflow-wrap: break-word;\\";\\n").concat(",
        "      "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "      "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "      "  }\\n").concat(",
        "      "})")",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (message.length && callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                anchor",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "    else {",
        "      action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "     /*",
        "      * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "      * ",
        "      * Example:",
        "      * 'xxxxx' produces '28535'",
        "      * 'xxx-xxx' produces '432-521'",
        "      */",
        "    function generateNumericToken(format) {",
        "        return format.replace(/[x]/g, function(c) {",
        "            var r = Math.random()*10|0;",
        "            var v = r;",
        "            return v.toString(10);",
        "        });",
        "    }",
        "}());",
      ],
    },
    "e9c9d940-30d9-4a0c-a834-7de69a0600cf": {
      "_id": "e9c9d940-30d9-4a0c-a834-7de69a0600cf",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_CollectUsernameOrEmail",
      "script": [
        "var fr = JavaImporter(",
        "  org.forgerock.json.JsonValue,",
        "  org.forgerock.openam.auth.node.api.Action,",
        "  javax.security.auth.callback.NameCallback,",
        "  java.util.HashMap",
        ");",
        "",
        "with (fr) {",
        "  try {",
        "    ",
        "    if (callbacks.isEmpty()) {",
        "      ",
        "      action = Action.send(new NameCallback('Username or email address')).build();",
        "      ",
        "    } else {",
        "",
        "      // If a value is provided, store it as username and an object attribute",
        "      var callback = callbacks.iterator().next();",
        "      var name = callback.getName().trim();",
        "      if (name) {",
        "        var objAttrs = sharedState.get('objectAttributes') || new HashMap();",
        "        objAttrs.put('mail', name);",
        "        sharedState.put('username', name);",
        "        sharedState.put('objectAttributes', objAttrs);",
        "",
        "        action = Action.goTo('Collected').build();",
        "      }",
        "      ",
        "    }",
        "    ",
        "  } catch (e) {",
        "    ",
        "    logger.error('Admin_CollectUsernameOrEmail: {}', e);",
        "    action = Action.goTo('Error').build();",
        "    ",
        "  }",
        "}",
      ],
    },
    "ec8b314c-8e11-4364-93b9-a3e82d2a074a": {
      "_id": "ec8b314c-8e11-4364-93b9-a3e82d2a074a",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display Password from nodeState",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Display Password",
      "script": [
        "/* Display Password",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Display Password collected via Platform Password node.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "var password = "unable to retrieve!";",
        "if (nodeState.get("password")) {",
        "  password = nodeState.get("password").asString();",
        "}",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback",
        ")",
        "if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            password",
        "        )",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo("true").build();",
        "}",
      ],
    },
    "ed685f9f-5909-4726-86e8-22bd38b47663": {
      "_id": "ed685f9f-5909-4726-86e8-22bd38b47663",
      "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
      "createdBy": "null",
      "creationDate": 0,
      "default": true,
      "description": "Converts a normalized social profile into an Identity",
      "language": "GROOVY",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Normalized Profile to Identity",
      "script": [
        "/*",
        " * Copyright 2021 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "import static org.forgerock.json.JsonValue.field",
        "import static org.forgerock.json.JsonValue.json",
        "import static org.forgerock.json.JsonValue.object",
        "",
        "import org.forgerock.json.JsonValue",
        "",
        "JsonValue identity = json(object(",
        "        field("givenName", normalizedProfile.givenName),",
        "        field("sn", normalizedProfile.familyName),",
        "        field("mail", normalizedProfile.email),",
        "        field("cn", normalizedProfile.displayName),",
        "        field("userName", normalizedProfile.username),",
        "        field("iplanet-am-user-alias-list", selectedIdp + '-' + normalizedProfile.id.asString())))",
        "",
        "return identity",
      ],
    },
    "f1a2764b-d05a-4480-8f5f-78fda7814227": {
      "_id": "f1a2764b-d05a-4480-8f5f-78fda7814227",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "APIProtection: Reset State",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "APIProtection: Reset States",
      "script": [
        "logger.warning("APIProtection: Reset States: start");",
        "",
        "/*",
        " * BEGIN SCRIPT CONFIGURATION",
        " *",
        " * Outcomes:",
        " * - "true"",
        " */",
        "var KEY_HEADER_NAME = "x-api-key";",
        "var SECRET_HEADER_NAME = "x-api-secret";",
        "/*",
        " * END SCRIPT CONFIGURATION",
        " */",
        "",
        "outcome = "true";",
        "",
        "if (sharedState.get("username") == readValue(KEY_HEADER_NAME)) {",
        "    logger.warning("APIProtection: Reset States: resetting username to:".concat(readValue("username")));",
        "      sharedState.put("username", readValue("username"));",
        "}",
        "",
        "if (transientState.get("password") == readTransientValue(SECRET_HEADER_NAME)) {",
        "    logger.warning("APIProtection: Reset States: resetting password");",
        "      transientState.put("password", readTransientValue("password"));",
        "}",
        "",
        "logger.warning("APIProtection: Reset States: finish [outcome=".concat(outcome).concat("]"));",
        "",
        "/*",
        " * Read value from storage for APIProtection script use",
        " */",
        "function readValue(name) {",
        "      var storage = sharedState.get("APIProtection");",
        "    if (storage) {",
        "          if (storage.get) {",
        "            return sharedState.get("APIProtection").get(name);",
        "        }",
        "          else {",
        "              return storage.name;",
        "        }",
        "    }",
        "      return null;",
        "}",
        "",
        "/*",
        " * Read transient value from storage for APIProtection script use",
        " */",
        "function readTransientValue(name) {",
        "      var transientStorage = transientState.get("APIProtection");",
        "    if (transientStorage) {",
        "          if (transientStorage.get) {",
        "            return transientState.get("APIProtection").get(name);",
        "        }",
        "          else {",
        "              return transientStorage.name;",
        "        }",
        "    }",
        "      return null;",
        "}",
      ],
    },
    "f2107949-22f8-46c4-865d-ae1d1110a9cb": {
      "_id": "f2107949-22f8-46c4-865d-ae1d1110a9cb",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Detect and preserve currently active theme before setting the new theme.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Set OATH Theme",
      "script": [
        "/* Set OATH Theme",
        " * ",
        " * Detect and preserve currently active theme before setting the new theme.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " */",
        "(function () {",
        "      outcome = "true";",
        "      ",
        "      var theme = "Expanse_OATH";",
        "",
        "    // do not change, must be a random identifier",
        "    var anchor = generateNumericToken('xxx');",
        "  ",
        "      var script = "";",
        "    script += "document.getElementById(\\"theme-id-"+anchor+"\\").value = localStorage.getItem('theme-id');";",
        "    script += "console.log('theme-id='+document.getElementById(\\"theme-id-"+anchor+"\\").value);";",
        "      script += "document.getElementById(\\"loginButton_0\\").click();";",
        "",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "          org.forgerock.openam.authentication.callbacks.PollingWaitCallback,",
        "        com.sun.identity.authentication.callbacks.HiddenValueCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    // discover active theme from UI",
        "    if (callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.HiddenValueCallback("theme-id-"+anchor, "false"),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build();",
        "    }",
        "      // get active theme from callback and set new theme",
        "      else if (callbacks.size() === 2) {",
        "        // did we get the id of the currently active theme?",
        "        if (callbacks.get(0).getValue() !== "theme-id-"+anchor) {",
        "              sharedState.put("themeId", callbacks.get(0).getValue());",
        "        }",
        "        // set new theme",
        "        var stage = "themeId="+theme;",
        "        action = fr.Action.send(",
        "              new fr.PollingWaitCallback("0", "Please wait ...")",
        "        ).withStage(stage).build();",
        "    }",
        "      else {",
        "        // continue",
        "        action = fr.Action.goTo(outcome).build();",
        "    }",
        "",
        "     /*",
        "      * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "      * ",
        "      * Example:",
        "      * 'xxxxx' produces '28535'",
        "      * 'xxx-xxx' produces '432-521'",
        "      */",
        "    function generateNumericToken(format) {",
        "        return format.replace(/[x]/g, function(c) {",
        "            var r = Math.random()*10|0;",
        "            var v = r;",
        "            return v.toString(10);",
        "        });",
        "    }",
        "}());",
      ],
    },
    "f26cc0de-ee31-4114-8a32-27799bb49357": {
      "_id": "f26cc0de-ee31-4114-8a32-27799bb49357",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Setup MFA Choice",
      "script": [
        "/*",
        " * Adapt the configuration values below",
        " */",
        "",
        "// do not change, must be a random identifier",
        "var anchor = generateNumericToken('xxx');",
        "",
        "// specify the horizontal alignment of the message: left, center, right",
        "var halign = "center";",
        "",
        "// specify the style to apply to the button in the message to make it look like a link",
        "var linkButtonStyle = "border: 0; color: #109CF1; text-decoration: none; background-color: transparent;";",
        "",
        "// specify the link button HTML element. only modify the text between the <button> and </button> tags.",
        "var linkButton = "<button id=\\"skip-link-".concat(anchor).concat("\\" type=\\"submit\\" style=\\"").concat(linkButtonStyle).concat("\\">skip for now.</button>");",
        "",
        "// specify the message you want to display and place the linkButton anywhere",
        "var message = "Please select your prefered factor or".concat(linkButton);",
        "",
        "// specify the choices you want to offer the user.",
        "var choices = ["SMS","Fido","Push"];",
        "",
        "// specify the default choice. this setting must be a valid 0-based index of the choices array above.",
        "var defaultChoice = 0;",
        "",
        "/*",
        " * All the configuration values are above this comment.",
        " *",
        " * DO NOT MAKE ANY CHANGES BELOW!",
        " */",
        "",
        "// find the TextOutputCallback with the message_anchor",
        "// and replace the message_anchor with the message",
        "var displayMessageScript = "".concat(",
        "  "Array.prototype.slice.call(\\n").concat(",
        "  "  document.getElementsByClassName('callback-component')\\n").concat(",
        "  ").forEach(\\n").concat(",
        "  "  function (e) {\\n").concat(",
        "  "    var message = e.firstElementChild;\\n").concat(",
        "  "    if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == 'message-").concat(anchor).concat("') {\\n").concat(",
        "  "      message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "  "      message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "  "    }\\n").concat(",
        "  "  }\\n").concat(",
        "  ")")",
        "",
        "// hijack the link button in the message and:",
        "// - find the HiddenValueCallback and set its value to "Skip"",
        "// - then simulate a login button click",
        "var skipOptionScript = "".concat(",
        "  "document.getElementById(\\"skip-link-").concat(anchor).concat("\\").onclick = function(){\\n").concat(",
        "  "  document.getElementById(\\"skip-input-").concat(anchor).concat("\\").value = \\"Skip\\";\\n").concat(",
        "  "  document.getElementById(\\"loginButton_0\\").click();\\n").concat(",
        "  "  return false;\\n").concat(",
        "  "}")",
        "",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.ConfirmationCallback,",
        "    javax.security.auth.callback.TextOutputCallback,",
        "    com.sun.identity.authentication.callbacks.HiddenValueCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "",
        "if (callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            "message-".concat(anchor)",
        "        ),",
        "        new fr.ConfirmationCallback(",
        "            fr.ConfirmationCallback.INFORMATION,",
        "            choices,",
        "            defaultChoice",
        "        ),",
        "        new fr.HiddenValueCallback("skip-input-".concat(anchor), "false"),",
        "        new fr.ScriptTextOutputCallback(displayMessageScript),",
        "        new fr.ScriptTextOutputCallback(skipOptionScript)",
        "    ).build()",
        "}",
        "else {",
        "  // did the user skip?",
        "  if (callbacks.get(2).getValue() == "Skip") {",
        "    action = fr.Action.goTo("Skip").build();",
        "  }",
        "  // user didn't skip, pick the right outcome",
        "  else {",
        "    action = fr.Action.goTo(choices[callbacks.get(1).getSelectedIndex()]).build();",
        "  }",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "    return format.replace(/[x]/g, function(c) {",
        "        var r = Math.random()*10|0;",
        "        var v = r;",
        "        return v.toString(10);",
        "    });",
        "}",
      ],
    },
    "fbc563cb-eced-4e1b-9cd4-022680347668": {
      "_id": "fbc563cb-eced-4e1b-9cd4-022680347668",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "FRAAS-7955 Show Object Values",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "FRAAS-7955 Show Object Values",
      "script": [
        "var outcome = true;",
        "",
        "// Requires Identify Existing User auth node to retrieve real user ID from IDM",
        "var userid = sharedState.get("_id");",
        "",
        "// Retrieve user profile attributes",
        "var userName = idRepository.getAttribute(userid, "uid").iterator().next().toString();",
        "var firstName = idRepository.getAttribute(userid, "givenName").iterator().next().toString();",
        "var lastName = idRepository.getAttribute(userid, "sn").iterator().next().toString();",
        "var email = idRepository.getAttribute(userid, "mail").iterator().next().toString();",
        "",
        "var anchor = "anchor-".concat(generateNumericToken('xxx'));",
        "var halign = "left";",
        "var message = "<h4>Object Values</h4>".concat(",
        "    "<p><b>Username</b>: ").concat(userName).concat("</p>").concat(",
        "    "<p><b>First Name</b>: ").concat(firstName).concat("</p>").concat(",
        "    "<p><b>Last Name</b>: ").concat(lastName).concat("</p>").concat(",
        "    "<p><b>Email</b>: ").concat(email).concat("</p>")",
        "var script = "Array.prototype.slice.call(\\n".concat(",
        "  "document.getElementsByClassName('callback-component')).forEach(\\n").concat(",
        "  "function (e) {\\n").concat(",
        "  "  var message = e.firstElementChild;\\n").concat(",
        "  "  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '").concat(anchor).concat("') {\\n").concat(",
        "  "    message.className = \\"text-left\\";\\n").concat(",
        "  "    message.align = \\"").concat(halign).concat("\\";\\n").concat(",
        "  "    message.innerHTML = '").concat(message).concat("';\\n").concat(",
        "  "  }\\n").concat(",
        "  "})")",
        "var fr = JavaImporter(",
        "    org.forgerock.openam.auth.node.api.Action,",
        "    javax.security.auth.callback.TextOutputCallback,",
        "    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "if (message.length && callbacks.isEmpty()) {",
        "    action = fr.Action.send(",
        "        new fr.TextOutputCallback(",
        "            fr.TextOutputCallback.INFORMATION,",
        "            anchor",
        "        ),",
        "        new fr.ScriptTextOutputCallback(script)",
        "    ).build()",
        "}",
        "else {",
        "  action = fr.Action.goTo(outcome).build();",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "    return format.replace(/[x]/g, function(c) {",
        "        var r = Math.random()*10|0;",
        "        var v = r;",
        "        return v.toString(10);",
        "    });",
        "}",
      ],
    },
    "fd536b1f-6ee4-4505-b148-71160414ddcc": {
      "_id": "fd536b1f-6ee4-4505-b148-71160414ddcc",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_AttributeCollectionWorkaroundCleanup",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        "This is the second part of a workaround began in Admin_AttributeCollectionWorkaround.",
        "*/",
        "",
        "var objAttrs = sharedState.get('objectAttributes') || new HashMap();",
        "",
        "if (objAttrs.containsKey('groups')) {",
        "  var groups = objAttrs.get('groups');",
        "  if (groups.length == 1 && groups[0] == 'fake') {",
        "    objAttrs.remove('groups');",
        "  }",
        "}",
        "",
        "if (objAttrs.containsKey('inviteDate') && objAttrs.get('inviteDate') == 'fake') {",
        "   objAttrs.remove('inviteDate');",
        "}",
        "",
        "sharedState.put('objectAttributes', objAttrs);",
        "",
        "outcome = 'True';",
      ],
    },
    "fd560219-00ad-4763-9a29-f65aa9ecf776": {
      "_id": "fd560219-00ad-4763-9a29-f65aa9ecf776",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_GetIdPGroupsClaimConfig",
      "script": [
        "/*",
        " * Copyright 2023 ForgeRock AS. All Rights Reserved",
        " *",
        " * Use of this code requires a commercial software license with ForgeRock AS.",
        " * or with one of its affiliates. All use shall be exclusively subject",
        " * to such license between the licensee and ForgeRock AS.",
        " */",
        "",
        "/*",
        " * This script is used to retrieve optional custom IdP configuration from IDM as an admin",
        " * completes a login journey. This needs to happen after an IdP has been selected so that",
        " * the \`selectedIdp\` exists in shared state. The result will be stored in a shared state",
        " * key of \`idpCustomConfig\`. The value will be \`null\` if no config was found in IDM.",
        " */",
        "",
        "var AM_INTERNAL_URL = 'http://am.fr-platform:80/am';",
        "var IDM_INTERNAL_URL = 'http://idm.fr-platform:80/openidm';",
        "var RSFILTER_PROVISIONING_CLIENT_ID = 'idm-provisioning';",
        "var RSFILTER_PROVISIONING_SECRET = 'DKNK5K2m5Q98tBTt0yei';",
        "",
        "var SHARED_STATE_KEY = 'idpCustomConfig';",
        "var TXN_ID_HEADER = 'x-forgerock-transactionid';",
        "",
        "// Helper for returning the request transaction ID",
        "function getTransId() {",
        "  var transIds = requestHeaders.get(TXN_ID_HEADER);",
        "  if (transIds) {",
        "    return java.lang.String(transIds.get(0));",
        "  }",
        "  return null;",
        "}",
        "",
        "// Retrieves an access token using a client credentials grant",
        "function getAccessToken(txnId, clientId, clientSecret, scope) {",
        "  var fr = JavaImporter(",
        "    java.lang.String,",
        "    org.forgerock.http.protocol.Request,",
        "    org.forgerock.http.protocol.Response,",
        "    org.forgerock.util.encode.Base64",
        "  );",
        "",
        "  var basicAuthCreds = fr.Base64.encode(new fr.String(clientId + ':' + clientSecret).getBytes('UTF-8'));",
        "",
        "  var request = new fr.Request();",
        "  request.getHeaders().add('authorization', 'Basic ' + basicAuthCreds);",
        "  request.getHeaders().add('content-type', 'application/x-www-form-urlencoded');",
        "  if (txnId) {",
        "    request.getHeaders().add(TXN_ID_HEADER, txnId);",
        "  }",
        "  request",
        "    .setEntity('grant_type=client_credentials&scope=' + scope)",
        "    .setMethod('POST')",
        "    .setUri(AM_INTERNAL_URL + '/oauth2/access_token');",
        "",
        "  var response = httpClient.send(request).getOrThrow();",
        "  if (response.getStatus() === org.forgerock.http.protocol.Status.OK) {",
        "    var result = JSON.parse(response.getEntity().getString());",
        "    logger.message('got access token for client {}', clientId);",
        "    return result.access_token;",
        "  }",
        "  ",
        "  logger.error('failed to get access token for client {}; received status {}', clientId, response.getStatus());",
        "  throw 'failed to get access token';",
        "}",
        "",
        "// Retrieves the IdP custom configuration from IDM",
        "function getConfigFromIDM(txnId, accessToken, idp) {",
        "  var fr = JavaImporter(",
        "    org.forgerock.http.protocol.Request,",
        "    org.forgerock.http.protocol.Response,",
        "    org.forgerock.json.JsonValue,",
        "    org.forgerock.openam.placeholder.substitution.PlaceholderSubstitution,",
        "    org.forgerock.guice.core.InjectorHolder",
        "  );",
        "",
        "  var request = new fr.Request();",
        "  request.getHeaders().add('authorization', 'Bearer ' + accessToken);",
        "  if (txnId) {",
        "    request.getHeaders().add(TXN_ID_HEADER, txnId);",
        "  }",
        "  request",
        "    .setMethod('GET')",
        "    .setUri(IDM_INTERNAL_URL + '/config/fidc/federation-' + idp);",
        "",
        "  var response = httpClient.send(request).getOrThrow();",
        "  if (response.getStatus() === org.forgerock.http.protocol.Status.OK) {",
        "    var rawConfig = JSON.parse(response.getEntity().getString());",
        "    var placeholder = fr.InjectorHolder.getInstance(fr.PlaceholderSubstitution);",
        "    var finalConfig = JSON.parse(placeholder.substitute(fr.JsonValue.json(rawConfig)));",
        "    return finalConfig;",
        "  } else if (response.getStatus() === org.forgerock.http.protocol.Status.NOT_FOUND) {",
        "    return null;",
        "  }",
        "  ",
        "  logger.error('failed to get groups claim config for IdP {}; received status {}', idp, response.getStatus());",
        "  throw 'failed to get groups claim config';",
        "}",
        "",
        "(function () {",
        "  try {",
        "    var idp = nodeState.get('selectedIdp');",
        "    if (!idp.isString()) {",
        "      throw 'selectedIdp not found in shared state';",
        "    }",
        "",
        "    var txnId = getTransId();",
        "    var accessToken = getAccessToken(txnId, RSFILTER_PROVISIONING_CLIENT_ID, RSFILTER_PROVISIONING_SECRET, 'fr:idm:*');",
        "",
        "    var config = getConfigFromIDM(txnId, accessToken, idp.asString())",
        "    if (config) {",
        "      nodeState.putShared(SHARED_STATE_KEY, config);",
        "      logger.message('found groups claim config for IdP {}', idp.asString());",
        "    } else {",
        "      logger.message('no groups claim config found for IdP {}', idp.asString());",
        "    }",
        " ",
        "    outcome = 'Success';",
        "  } catch (e) {",
        "    logger.error('failed to get federation config from IDM: {}', e);",
        "    outcome = 'Error';",
        "  }",
        "}());",
      ],
    },
    "fe35a8fb-31b1-441c-bb9b-27932565061c": {
      "_id": "fe35a8fb-31b1-441c-bb9b-27932565061c",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Admin_MfaGetApp",
      "script": [
        "/*",
        "This creates the following callbacks:",
        "- TextOutputCallback: Display the step title and description",
        "- ConfirmationCallback: Display the "Next" button",
        "- HiddenValueCallback: Captures the "Get app" option, if selected",
        "- ScriptTextOutputCallback: Creates a "Download the app" link button and positions it below the "Next" button",
        "*/",
        "",
        "var token = generateNumericToken('xxx');",
        "var loadingMessage = 'Loading...';",
        "var linkButton = "<button id='getapp-link-".concat(token).concat("' class='btn btn-block btn-link' type='submit'>Download the app</button>");",
        "var message = "<h2 class='h2'>Set up the ForgeRock Authenticator</h2><div style='margin-bottom:1em'>To get started, you need to register your device using the ForgeRock Authenticator app.</div>";",
        "var choices = ['Next'];",
        "var defaultChoice = 0;",
        "var getAppValue = 'Get app';",
        "var getAppInputId = 'getapp-input-'.concat(token);",
        "",
        "var setupPageScript =",
        "  'var setupPage = function() {'.concat(",
        "  '  var getAppInputElem = document.getElementById("').concat(getAppInputId).concat('");').concat(",
        "  '  var messageElem;').concat(",
        "  '  document.getElementsByClassName("callback-component").forEach(').concat(",
        "  '    function (e) {').concat(",
        "  '      var m = e.firstElementChild;').concat(",
        "  '      if (m.firstChild && m.firstChild.nodeName == "#text" && m.firstChild.nodeValue.trim() == "').concat(loadingMessage).concat('") {').concat(",
        "  '        messageElem = m;').concat(",
        "  '      }').concat(",
        "  '    }').concat(",
        "  '  );').concat(",
        "  '  if (!getAppInputElem || !messageElem) {').concat(",
        "  '    return setTimeout(setupPage, 50);').concat(",
        "  '  }').concat(",
        "  '  var skipContainer = document.createElement("div");').concat(",
        "  '  skipContainer.style = "width:100%";').concat(",
        "  '  skipContainer.innerHTML = "').concat(linkButton).concat('";').concat(",
        "  '  getAppInputElem.parentNode.append(skipContainer);').concat(",
        "  '  messageElem.align = "center";').concat(",
        "  '  messageElem.innerHTML = "').concat(message).concat('";').concat(",
        "  '  var bindGetAppLink = function() {').concat(",
        "  '    document.getElementById("getapp-link-').concat(token).concat('").onclick = function() {').concat(",
        "  '      getAppInputElem.value = "').concat(getAppValue).concat('";').concat(",
        "  '      document.getElementById("loginButton_0").click();').concat(",
        "  '      return false;').concat(",
        "  '    };').concat(",
        "  '  };').concat(",
        "  '  setTimeout(bindGetAppLink, 100);').concat(",
        "  '};').concat(",
        "  'setupPage();');",
        "",
        "var fr = JavaImporter(",
        "  org.forgerock.openam.auth.node.api.Action,",
        "  javax.security.auth.callback.ConfirmationCallback,",
        "  javax.security.auth.callback.TextOutputCallback,",
        "  com.sun.identity.authentication.callbacks.HiddenValueCallback,",
        "  com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        ")",
        "",
        "with (fr) {",
        "  if (callbacks.isEmpty()) {",
        "    action = Action.send(",
        "      new TextOutputCallback(",
        "          TextOutputCallback.INFORMATION,",
        "          loadingMessage",
        "      ),",
        "      new ConfirmationCallback(",
        "          ConfirmationCallback.INFORMATION,",
        "          choices,",
        "          defaultChoice",
        "      ),",
        "      new HiddenValueCallback(getAppInputId, 'false'),",
        "      new ScriptTextOutputCallback(setupPageScript)",
        "    ).build()",
        "  } else {",
        "    if (callbacks.get(2).getValue() == getAppValue) {",
        "      action = Action.goTo(getAppValue).build();",
        "    } else {",
        "      action = Action.goTo(choices[callbacks.get(1).getSelectedIndex()]).build();",
        "    }",
        "  }",
        "}",
        "",
        " /*",
        "  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "  * ",
        "  * Example:",
        "  * 'xxxxx' produces '28535'",
        "  * 'xxx-xxx' produces '432-521'",
        "  */",
        "function generateNumericToken(format) {",
        "  return format.replace(/[x]/g, function(c) {",
        "    var r = Math.random()*10|0;",
        "    var v = r;",
        "    return v.toString(10);",
        "  });",
        "}",
      ],
    },
    "fe5e303b-9ed7-4853-84fe-0ae43e2254d5": {
      "_id": "fe5e303b-9ed7-4853-84fe-0ae43e2254d5",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display the username in an HTML dialog.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Display Username",
      "script": [
        "/* Display Username",
        " *",
        " * Author: volker.scheuber@forgerock.com",
        " * ",
        " * Display the username.",
        " * ",
        " * This script does not need to be parametrized. It will work properly as is.",
        " * ",
        " * The Scripted Decision Node needs the following outcomes defined:",
        " * - true",
        " */",
        "(function () {",
        "  try {",
        "    var outcome = 'true';",
        "    var username = nodeState.get('username').asString();",
        "",
        "    // Specify the message you want to display. You may use HTML for formatting. Avoid line breaks! Use <br> instead.",
        "    var message = '<h5>'+username+'</h5>';",
        "",
        "    var anchor = 'anchor-'+generateNumericToken('xxx');",
        "    var script = "Array.prototype.slice.call(\\n \\",
        "      document.getElementsByClassName('callback-component')).forEach(\\n \\",
        "      function (e) {\\n \\",
        "        var message = e.firstElementChild;\\n \\",
        "        if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '"+anchor+"') {\\n \\",
        "          message.innerHTML = '"+message+"';\\n \\",
        "        }\\n \\",
        "      })";",
        "    var fr = JavaImporter(",
        "        org.forgerock.openam.auth.node.api.Action,",
        "        javax.security.auth.callback.TextOutputCallback,",
        "        com.sun.identity.authentication.callbacks.ScriptTextOutputCallback",
        "    )",
        "    if (message.length && callbacks.isEmpty()) {",
        "        action = fr.Action.send(",
        "            new fr.TextOutputCallback(",
        "                fr.TextOutputCallback.INFORMATION,",
        "                anchor",
        "            ),",
        "            new fr.ScriptTextOutputCallback(script)",
        "        ).build()",
        "    }",
        "    else {",
        "      action = fr.Action.goTo(outcome).build();",
        "    }",
        "  } catch (error) {",
        "    logger.error('Error: ' + error);",
        "    nodeState.putShared('error', error.message);",
        "  }",
        "",
        "   /*",
        "    * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.",
        "    * ",
        "    * Example:",
        "    * 'xxxxx' produces '28535'",
        "    * 'xxx-xxx' produces '432-521'",
        "    */",
        "  function generateNumericToken(format) {",
        "      return format.replace(/[x]/g, function(c) {",
        "          var r = Math.random()*10|0;",
        "          var v = r;",
        "          return v.toString(10);",
        "      });",
        "  }",
        "}());",
      ],
    },
    "fff76556-2882-4109-a9a6-c42d546cfe57": {
      "_id": "fff76556-2882-4109-a9a6-c42d546cfe57",
      "context": "OAUTH2_SCRIPTED_JWT_ISSUER",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "null",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "Service Account - JWT Issuers",
      "script": [
        "(function () {",
        "  var frJava = JavaImporter(",
        "    org.forgerock.oauth2.core.TrustedJwtIssuerConfig,",
        "    java.util.HashSet",
        "  );",
        "",
        "  with (frJava) {",
        "    var iss = idRepository.getIdentity(issuer);",
        "    if (iss == null) {",
        "      logger.message('No issuer found for: ' + issuer);",
        "      return null;",
        "    }",
        "    logger.message('Found issuer: ' + iss);",
        "",
        "    var accountStatus = iss.getAttributeValues('inetUserStatus');",
        "    if (!accountStatus || accountStatus.length === 0) {",
        "      logger.message('No inetUserStatus attribute in issuer');",
        "      return null;",
        "    } else if (accountStatus[0].toLowerCase() != 'active') {",
        "      logger.message('Issuer is not active');",
        "      return null;",
        "    }",
        "",
        "    var jwksAttrs = iss.getAttributeValues('fr-attr-jwks');",
        "    if (!jwksAttrs || jwksAttrs.length === 0) {",
        "      logger.message('No jwks attributes in issuer');",
        "      return null;",
        "    }",
        "",
        "    var jwkSet = jwksAttrs[0];",
        "    if (!jwkSet) {",
        "      logger.message('No jwk set in issuer');",
        "      return null;",
        "    }",
        "",
        "    var config = new TrustedJwtIssuerConfig(",
        "      issuer,",
        "      'sub',",
        "      'scope',",
        "      new HashSet([issuer]),",
        "      jwkSet,",
        "      null, null, null",
        "    );",
        "",
        "    return config;",
        "  }",
        "}());",
      ],
    },
  },
}
`;

exports[`ScriptOps readScript() 1: Read script by id 'c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d' 1`] = `
{
  "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
  "context": "AUTHENTICATION_TREE_DECISION_NODE",
  "createdBy": "null",
  "creationDate": 0,
  "default": false,
  "description": "Check if username has already been collected.",
  "language": "JAVASCRIPT",
  "lastModifiedBy": "null",
  "lastModifiedDate": 0,
  "name": "FrodoTestScript1",
  "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
}
`;

exports[`ScriptOps readScriptByName() 1: Read script by name 'FrodoTestScript1' 1`] = `
{
  "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
  "context": "AUTHENTICATION_TREE_DECISION_NODE",
  "createdBy": "null",
  "creationDate": 0,
  "default": false,
  "description": "Check if username has already been collected.",
  "language": "JAVASCRIPT",
  "lastModifiedBy": "null",
  "lastModifiedDate": 0,
  "name": "FrodoTestScript1",
  "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
}
`;

exports[`ScriptOps readScripts() 1: Read scripts 1`] = `
[
  {
    "_id": "638c865e-d393-4503-a517-535b9c74e010",
    "context": "CONFIG_PROVIDER_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "CP-InnerTreeEvaluator-static-inner1",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "CP-ITE-static-inner1",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoqCiAqIFRoZSBmb2xsb3dpbmcgc2NyaXB0IGlzIGEgc2ltcGxpZmllZCB0ZW1wbGF0ZSBmb3IgdW5kZXJzdGFuZGluZyBob3cgdG8gYnVpbGQKICogdXAgYSBjb25maWcgTWFwIG9iamVjdCB3aXRoIGN1c3RvbSB2YWx1ZXMuIFRoZSBDb25maWcgUHJvdmlkZXIgTm9kZSB3aWxsIHRoZW4KICogcHJvdmlkZSB0aGlzIGNvbmZpZyBNYXAgdG8gdGhlIGRlc2lyZWQgbm9kZSB0eXBlLiBJdCBpcyBpbXBvcnRhbnQgdGhhdCB0aGUgTWFwCiAqIHlvdSBidWlsZCBoZXJlIGlzIG5hbWVkICdjb25maWcnLgogKgogKiBEZWZpbmVkIHZhcmlhYmxlczoKICoKICogbm9kZVN0YXRlIC0gTm9kZSBTdGF0ZSAoMSkKICogICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGlzIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgdmFsdWVzIHN0b3JlZCBpbiB0aGUgbm9kZSBzdGF0ZS4KICoKICogaWRSZXBvc2l0b3J5IC0gUHJvZmlsZSBEYXRhICgyKQogKiAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIGEgcmVwb3NpdG9yeSB0byByZXRyaWV2ZSB1c2VyIGluZm9ybWF0aW9uLgogKgogKiBzZWNyZXRzIC0gQ3JlZGVudGlhbHMgYW5kIFNlY3JldHMgKDMpCiAqICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgYW4gaW50ZXJmYWNlIHRvIGFjY2VzcyB0aGUgU2VjcmV0cyBBUEkgZnJvbSBhIHNjcmlwdGluZyBjb250ZXh0LgogKgogKiByZXF1ZXN0SGVhZGVycyAoNCkgLSBNYXAgKDUpCiAqICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgYW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgbWV0aG9kcyBmb3IgYWNjZXNzaW5nIGhlYWRlcnMgaW4gdGhlIGxvZ2luIHJlcXVlc3QuCiAqCiAqIGxvZ2dlciAtIERlYnVnIExvZ2dpbmcgKDYpCiAqICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgZGVidWcgbG9nZ2VyIGluc3RhbmNlLgogKgogKiBodHRwQ2xpZW50IC0gSFRUUCBDbGllbnQgKDcpCiAqICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgSFRUUCBjbGllbnQgdGhhdCBjYW4gYmUgdXNlZCB0byBtYWtlIGV4dGVybmFsIEhUVFAgcmVxdWVzdHMuCiAqCiAqIHJlYWxtIC0gU3RyaW5nIChwcmltaXRpdmUpLgogKiAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIG5hbWUgb2YgdGhlIHJlYWxtIHRoZSB1c2VyIGlzIGF1dGhlbnRpY2F0aW5nIHRvLgogKgogKiBleGlzdGluZ1Nlc3Npb24gLSBNYXA8U3RyaW5nLCBTdHJpbmc+ICg1KQogKiAgICAgICAgICBQcmVzZW50IGlmIHRoZSByZXF1ZXN0IGNvbnRhaW5zIHRoZSBzZXNzaW9uIGNvb2tpZSwgdGhlIHVzZXIncyBzZXNzaW9uIG9iamVjdC4gVGhlIHJldHVybmVkIG1hcCBmcm9tCiAqICAgICAgICAgIFNTT1Rva2VuLmdldFByb3BlcnRpZXMoKSAoOCkKICoKICogcmVxdWVzdFBhcmFtZXRlcnMgLSBNYXAgKDUpCiAqICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QgcGFyYW1ldGVycy4KICoKICoKICogT3V0cHV0czoKICoKICogY29uZmlnIC0gTWFwICg1KQogKiAgICAgICAgICAgRGVmaW5lIGFuZCBmaWxsIGEgTWFwIG9iamVjdCBuYW1lZCAnY29uZmlnJyB3aXRoIGN1c3RvbSB2YWx1ZXMsIHRoaXMgd2lsbCBkZWZpbmUgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZQogKiAgICAgICAgICAgYXNzb2NpYXRlZCBub2RlIHNlbGVjdGVkIGluIHRoZSBDb25maWdQcm92aWRlck5vZGUuCiAqCiAqIFJlZmVyZW5jZToKICogKDEpIE5vZGUgU3RhdGUgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvaWRjbG91ZC1hbS9sYXRlc3QvYXV0aGVudGljYXRpb24tZ3VpZGUvc2NyaXB0aW5nLWFwaS1ub2RlLmh0bWwjc2NyaXB0aW5nLWFwaS1ub2RlLW5vZGVTdGF0ZQogKiAoMikgUHJvZmlsZSBEYXRhIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMS9hdXRoZW50aWNhdGlvbi1ndWlkZS9zY3JpcHRpbmctYXBpLW5vZGUuaHRtbCNzY3JpcHRpbmctYXBpLW5vZGUtaWQtcmVwbwogKiAoMykgQ3JlZGVudGlhbHMgYW5kIFNlY3JldHMgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4xL2F1dGhlbnRpY2F0aW9uLWd1aWRlL3NjcmlwdGluZy1hcGktbm9kZS5odG1sI3NjcmlwdGluZy1hcGktYXV0aG4tc2VjcmV0cwogKiAoNCkgUmVxdWVzdCBIZWFkZXJzIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXV0aGVudGljYXRpb24tZ3VpZGUvc2NyaXB0aW5nLWFwaS1ub2RlLmh0bWwjc2NyaXB0aW5nLWFwaS1ub2RlLXJlcXVlc3RIZWFkZXJzLgogKiAoNSkgTWFwIC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9NYXAuaHRtbAogKiAoNikgRGVidWcgTG9nZ2luZyAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuaHRtbCNzY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuCiAqICg3KSBIVFRQIENsaWVudCAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9odHRwL0NsaWVudC5odG1sLgogKiAoOCkgU1NPVG9rZW4gLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL2NvbS9pcGxhbmV0L3Nzby9TU09Ub2tlbi5odG1sLgogKi8KCmNvbmZpZyA9IHsKICB0cmVlOiAnaW5uZXIxJwp9Ow==",
  },
  {
    "_id": "a8f10e93-3f6c-4d6c-b6a3-a8453e3d6b3a",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Reset the attributes holding replay credentials for the IG replay use case.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ResetPasswordReplayCredentials",
    "script": "LyogUmVzZXRQYXNzd29yZFJlcGxheUNyZWRlbnRpYWxzCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICogCiAqIFJlc2V0IHRoZSBhdHRyaWJ1dGVzIGhvbGRpbmcgcmVwbGF5IGNyZWRlbnRpYWxzIGZvciB0aGUgSUcgcmVwbGF5IHVzZSBjYXNlLgogKiAKICogVGhpcyBzY3JpcHQgbmVlZHMgdG8gYmUgcGFyYW1ldHJpemVkIGZvciB5b3VyIGVudi4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqLwooZnVuY3Rpb24gKCkgewogIG91dGNvbWUgPSAidHJ1ZSI7CiAgdmFyIFJFUExBWV9VU0VSTkFNRV9JRE1fQVRUUiA9ICJmclVuaW5kZXhlZFN0cmluZzEiOwogIHZhciBSRVBMQVlfUEFTU1dPUkRfSURNX0FUVFIgPSAiZnJVbmluZGV4ZWRTdHJpbmcyIjsKICAKICBzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKS5wdXQoUkVQTEFZX1VTRVJOQU1FX0lETV9BVFRSLCBudWxsKTsKICBzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKS5wdXQoUkVQTEFZX1BBU1NXT1JEX0lETV9BVFRSLCBudWxsKTsKfSgpKTs=",
  },
  {
    "_id": "073a64d4-37c9-486d-8c59-6583494644b9",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "FRAAS-7955 Transient State Only",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FRAAS-7955 Transient State Only",
    "script": "b3V0Y29tZSA9ICJ0cnVlIjsKCnNldFRyYW5zaWVudE9iamVjdEF0dHJpYnV0ZSgidXNlck5hbWUiLCAiRlJBQVMtNzk1NSIpOwpzZXRUcmFuc2llbnRPYmplY3RBdHRyaWJ1dGUoImdpdmVuTmFtZSIsICJGaXJzdC10cmFuc2llbnQiKTsKc2V0VHJhbnNpZW50T2JqZWN0QXR0cmlidXRlKCJzbiIsICJMYXN0LXRyYW5zaWVudCIpOwpzZXRUcmFuc2llbnRPYmplY3RBdHRyaWJ1dGUoIm1haWwiLCAiZmlyc3QubGFzdC10cmFuc2llbnRAY29tcGFueS5jb20iKTsKCi8qCiAqIFN0b3JlIGF0dHJpYnV0ZXMgaW4gdHJhbnNpZW50IHN0YXRlIGZvciB1c2Ugd2l0aCB0aGUgQ3JlYXRlL1BhdGNoIE9iamVjdCBub2Rlcy4KICovCmZ1bmN0aW9uIHNldFRyYW5zaWVudE9iamVjdEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkgewogICAgdmFyIHRyYW5zaWVudFN0b3JhZ2UgPSB0cmFuc2llbnRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKTsKICAgIGlmICh0cmFuc2llbnRTdG9yYWdlICYmIHZhbHVlKSB7CiAgICAgICAgICBpZiAodHJhbnNpZW50U3RvcmFnZS5wdXQpIHsKICAgICAgICAgICAgdHJhbnNpZW50U3RvcmFnZS5wdXQobmFtZSwgdmFsdWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICB0cmFuc2llbnRTdG9yYWdlW25hbWVdID0gdmFsdWU7CiAgICAgICAgfQogICAgfQogICAgZWxzZSBpZiAodmFsdWUpIHsKICAgIHRyYW5zaWVudFN0YXRlLnB1dCgib2JqZWN0QXR0cmlidXRlcyIsIEpTT04ucGFyc2UoIntcIiIrbmFtZSsiXCI6XCIiK3ZhbHVlKyJcIn0iKSk7CiAgICB9Cn0=",
  },
  {
    "_id": "ec8b314c-8e11-4364-93b9-a3e82d2a074a",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Display Password from nodeState",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Display Password",
    "script": "LyogRGlzcGxheSBQYXNzd29yZAogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBEaXNwbGF5IFBhc3N3b3JkIGNvbGxlY3RlZCB2aWEgUGxhdGZvcm0gUGFzc3dvcmQgbm9kZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKi8KdmFyIHBhc3N3b3JkID0gInVuYWJsZSB0byByZXRyaWV2ZSEiOwppZiAobm9kZVN0YXRlLmdldCgicGFzc3dvcmQiKSkgewogIHBhc3N3b3JkID0gbm9kZVN0YXRlLmdldCgicGFzc3dvcmQiKS5hc1N0cmluZygpOwp9CnZhciBmciA9IEphdmFJbXBvcnRlcigKICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2sKKQppZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgbmV3IGZyLlRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICAgICAgZnIuVGV4dE91dHB1dENhbGxiYWNrLklORk9STUFUSU9OLAogICAgICAgICAgICBwYXNzd29yZAogICAgICAgICkKICAgICkuYnVpbGQoKQp9CmVsc2UgewogIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKCJ0cnVlIikuYnVpbGQoKTsKfQ==",
  },
  {
    "_id": "dbe0bf9a-72aa-49d5-8483-9db147985a47",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Normalizes raw profile data from ADFS",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ADFS Profile Normalization (JS)",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMKICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgovKgogKiBUaGlzIHNjcmlwdCByZXR1cm5zIHRoZSBzb2NpYWwgaWRlbnRpdHkgcHJvZmlsZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGF1dGhlbnRpY2F0aW5nIHVzZXIKICogaW4gYSBzdGFuZGFyZCBmb3JtIGV4cGVjdGVkIGJ5IHRoZSBTb2NpYWwgUHJvdmlkZXIgSGFuZGxlciBOb2RlLgogKgogKiBEZWZpbmVkIHZhcmlhYmxlczoKICogcmF3UHJvZmlsZSAtIFRoZSBzb2NpYWwgaWRlbnRpdHkgcHJvdmlkZXIgcHJvZmlsZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGF1dGhlbnRpY2F0aW5nIHVzZXIuCiAqICAgICAgICAgICAgICBKc29uVmFsdWUgKDEpLgogKiBsb2dnZXIgLSBUaGUgZGVidWcgbG9nZ2VyIGluc3RhbmNlOgogKiAgICAgICAgICBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9zY3JpcHRpbmctZ3VpZGUvc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLmh0bWwjc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLgogKiByZWFsbSAtIFN0cmluZyAocHJpbWl0aXZlKS4KICogICAgICAgICBUaGUgbmFtZSBvZiB0aGUgcmVhbG0gdGhlIHVzZXIgaXMgYXV0aGVudGljYXRpbmcgdG8uCiAqIHJlcXVlc3RIZWFkZXJzIC0gVHJlZU1hcCAoMikuCiAqICAgICAgICAgICAgICAgICAgVGhlIG9iamVjdCB0aGF0IHByb3ZpZGVzIG1ldGhvZHMgZm9yIGFjY2Vzc2luZyBoZWFkZXJzIGluIHRoZSBsb2dpbiByZXF1ZXN0OgogKiAgICAgICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2F1dGhlbnRpY2F0aW9uLWd1aWRlL3NjcmlwdGluZy1hcGktbm9kZS5odG1sI3NjcmlwdGluZy1hcGktbm9kZS1yZXF1ZXN0SGVhZGVycy4KICogcmVxdWVzdFBhcmFtZXRlcnMgLSBUcmVlTWFwICgyKS4KICogICAgICAgICAgICAgICAgICAgICBUaGUgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QgcGFyYW1ldGVycy4KICogc2VsZWN0ZWRJZHAgLSBTdHJpbmcgKHByaW1pdGl2ZSkuCiAqICAgICAgICAgICAgICAgVGhlIHNvY2lhbCBpZGVudGl0eSBwcm92aWRlciBuYW1lLiBGb3IgZXhhbXBsZTogZ29vZ2xlLgogKiBzaGFyZWRTdGF0ZSAtIExpbmtlZEhhc2hNYXAgKDMpLgogKiAgICAgICAgICAgICAgIFRoZSBvYmplY3QgdGhhdCBob2xkcyB0aGUgc3RhdGUgb2YgdGhlIGF1dGhlbnRpY2F0aW9uIHRyZWUgYW5kIGFsbG93cyBkYXRhIGV4Y2hhbmdlIGJldHdlZW4gdGhlIHN0YXRlbGVzcyBub2RlczoKICogICAgICAgICAgICAgICBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hdXRoLW5vZGVzL2NvcmUtYWN0aW9uLmh0bWwjYWNjZXNzaW5nLXRyZWUtc3RhdGUuCiAqIHRyYW5zaWVudFN0YXRlIC0gTGlua2VkSGFzaE1hcCAoMykuCiAqICAgICAgICAgICAgICAgICAgVGhlIG9iamVjdCBmb3Igc3RvcmluZyBzZW5zaXRpdmUgaW5mb3JtYXRpb24gdGhhdCBtdXN0IG5vdCBsZWF2ZSB0aGUgc2VydmVyIHVuZW5jcnlwdGVkLAogKiAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IG1heSBub3QgbmVlZCB0byBwZXJzaXN0IGJldHdlZW4gYXV0aGVudGljYXRpb24gcmVxdWVzdHMgZHVyaW5nIHRoZSBhdXRoZW50aWNhdGlvbiBzZXNzaW9uOgogKiAgICAgICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2F1dGgtbm9kZXMvY29yZS1hY3Rpb24uaHRtbCNhY2Nlc3NpbmctdHJlZS1zdGF0ZS4KICoKICogUmV0dXJuIC0gYSBKc29uVmFsdWUgKDEpLgogKiAgICAgICAgICBUaGUgcmVzdWx0IG9mIHRoZSBsYXN0IHN0YXRlbWVudCBpbiB0aGUgc2NyaXB0IGlzIHJldHVybmVkIHRvIHRoZSBzZXJ2ZXIuCiAqICAgICAgICAgIEN1cnJlbnRseSwgdGhlIEltbWVkaWF0ZWx5IEludm9rZWQgRnVuY3Rpb24gRXhwcmVzc2lvbiAoYWxzbyBrbm93biBhcyBTZWxmLUV4ZWN1dGluZyBBbm9ueW1vdXMgRnVuY3Rpb24pCiAqICAgICAgICAgIGlzIHRoZSBsYXN0IChhbmQgb25seSkgc3RhdGVtZW50IGluIHRoaXMgc2NyaXB0LCBhbmQgaXRzIHJldHVybiB2YWx1ZSB3aWxsIGJlY29tZSB0aGUgc2NyaXB0IHJlc3VsdC4KICogICAgICAgICAgRG8gbm90IHVzZSAicmV0dXJuIHZhcmlhYmxlIiBzdGF0ZW1lbnQgb3V0c2lkZSBvZiBhIGZ1bmN0aW9uIGRlZmluaXRpb24uCiAqCiAqICAgICAgICAgIFRoaXMgc2NyaXB0J3MgbGFzdCBzdGF0ZW1lbnQgc2hvdWxkIHJlc3VsdCBpbiBhIEpzb25WYWx1ZSAoMSkgd2l0aCB0aGUgZm9sbG93aW5nIGtleXM6CiAqICAgICAgICAgIHsKICogICAgICAgICAgICAgIHsiZGlzcGxheU5hbWUiOiAiY29ycmVzcG9uZGluZy1zb2NpYWwtaWRlbnRpdHktcHJvdmlkZXItdmFsdWUifSwKICogICAgICAgICAgICAgIHsiZW1haWwiOiAiY29ycmVzcG9uZGluZy1zb2NpYWwtaWRlbnRpdHktcHJvdmlkZXItdmFsdWUifSwKICogICAgICAgICAgICAgIHsiZmFtaWx5TmFtZSI6ICJjb3JyZXNwb25kaW5nLXNvY2lhbC1pZGVudGl0eS1wcm92aWRlci12YWx1ZSJ9LAogKiAgICAgICAgICAgICAgeyJnaXZlbk5hbWUiOiAiY29ycmVzcG9uZGluZy1zb2NpYWwtaWRlbnRpdHktcHJvdmlkZXItdmFsdWUifSwKICogICAgICAgICAgICAgIHsiaWQiOiAiY29ycmVzcG9uZGluZy1zb2NpYWwtaWRlbnRpdHktcHJvdmlkZXItdmFsdWUifSwKICogICAgICAgICAgICAgIHsibG9jYWxlIjogImNvcnJlc3BvbmRpbmctc29jaWFsLWlkZW50aXR5LXByb3ZpZGVyLXZhbHVlIn0sCiAqICAgICAgICAgICAgICB7InBob3RvVXJsIjogImNvcnJlc3BvbmRpbmctc29jaWFsLWlkZW50aXR5LXByb3ZpZGVyLXZhbHVlIn0sCiAqICAgICAgICAgICAgICB7InVzZXJuYW1lIjogImNvcnJlc3BvbmRpbmctc29jaWFsLWlkZW50aXR5LXByb3ZpZGVyLXZhbHVlIn0KICogICAgICAgICAgfQogKgogKiAgICAgICAgICBUaGUgY29uc3VtZXIgb2YgdGhpcyBkYXRhIGRlZmluZXMgd2hpY2gga2V5cyBhcmUgcmVxdWlyZWQgYW5kIHdoaWNoIGFyZSBvcHRpb25hbC4KICogICAgICAgICAgRm9yIGV4YW1wbGUsIHRoZSBzY3JpcHQgYXNzb2NpYXRlZCB3aXRoIHRoZSBTb2NpYWwgUHJvdmlkZXIgSGFuZGxlciBOb2RlIGFuZCwKICogICAgICAgICAgdWx0aW1hdGVseSwgdGhlIG1hbmFnZWQgb2JqZWN0IGNyZWF0ZWQvdXBkYXRlZCB3aXRoIHRoaXMgZGF0YQogKiAgICAgICAgICB3aWxsIGV4cGVjdCBjZXJ0YWluIGtleXMgdG8gYmUgcG9wdWxhdGVkLgogKiAgICAgICAgICBJbiBzb21lIGNvbW1vbiBkZWZhdWx0IGNvbmZpZ3VyYXRpb25zLCB0aGUgZm9sbG93aW5nIGtleXMgYXJlIHJlcXVpcmVkIHRvIGJlIG5vdCBlbXB0eToKICogICAgICAgICAgdXNlcm5hbWUsIGdpdmVuTmFtZSwgZmFtaWx5TmFtZSwgZW1haWwuCiAqCiAqICAgICAgICAgIEZyb20gUkZDNDUxNzogQSB2YWx1ZSBvZiB0aGUgRGlyZWN0b3J5IFN0cmluZyBzeW50YXggaXMgYSBzdHJpbmcgb2Ygb25lIG9yIG1vcmUKICogICAgICAgICAgYXJiaXRyYXJ5IGNoYXJhY3RlcnMgZnJvbSB0aGUgVW5pdmVyc2FsIENoYXJhY3RlciBTZXQgKFVDUykuCiAqICAgICAgICAgIEEgemVyby1sZW5ndGggY2hhcmFjdGVyIHN0cmluZyBpcyBub3QgcGVybWl0dGVkLgogKgogKiAoMSkgSnNvblZhbHVlIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL2pzb24vSnNvblZhbHVlLmh0bWwuCiAqICgyKSBUcmVlTWFwIC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9UcmVlTWFwLmh0bWwuCiAqICgzKSBMaW5rZWRIYXNoTWFwIC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9MaW5rZWRIYXNoTWFwLmh0bWwuCiAqLwoKKGZ1bmN0aW9uICgpIHsKICAgIHZhciBmckphdmEgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZQogICAgKTsKCiAgICB2YXIgbm9ybWFsaXplZFByb2ZpbGVEYXRhID0gZnJKYXZhLkpzb25WYWx1ZS5qc29uKGZySmF2YS5Kc29uVmFsdWUub2JqZWN0KCkpOwogIAogIAkvL2xvZ2dlci5tZXNzYWdlKCdTZWd1aW4gcmF3UHJvZmlsZTogJytyYXdQcm9maWxlKTsKCiAgICBub3JtYWxpemVkUHJvZmlsZURhdGEucHV0KCdpZCcsIHJhd1Byb2ZpbGUuZ2V0KCdzdWInKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ2Rpc3BsYXlOYW1lJywgcmF3UHJvZmlsZS5nZXQoJ2dpdmVuTmFtZScpLmFzU3RyaW5nKCkgKyAnICcgKyByYXdQcm9maWxlLmdldCgnc24nKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ2VtYWlsJywgcmF3UHJvZmlsZS5nZXQoJ21haWwnKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ2dpdmVuTmFtZScsIHJhd1Byb2ZpbGUuZ2V0KCdnaXZlbk5hbWUnKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ2ZhbWlseU5hbWUnLCByYXdQcm9maWxlLmdldCgnc24nKS5hc1N0cmluZygpKTsKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ3VzZXJuYW1lJywgcmF3UHJvZmlsZS5nZXQoJ3VwbicpLmFzU3RyaW5nKCkpOwogICAgbm9ybWFsaXplZFByb2ZpbGVEYXRhLnB1dCgncm9sZXMnLCByYXdQcm9maWxlLmdldCgncm9sZXMnKS5hc1N0cmluZygpKTsKICAKICAJLy9sb2dnZXIubWVzc2FnZSgnU2VndWluIG5vcm1hbGl6ZWRQcm9maWxlRGF0YTogJytub3JtYWxpemVkUHJvZmlsZURhdGEpOwoKICAgIHJldHVybiBub3JtYWxpemVkUHJvZmlsZURhdGE7Cn0oKSk7",
  },
  {
    "_id": "d2cf4f18-651a-4a3c-9b04-ee4fc896d0c3",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Social Identity Provider Profile Transformation for ForgeRock OIDC Providers",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ST_healthcare-idc-social-transformation",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2suIE5vdCBmb3IgcHJvZHVjdGlvbiB1c2UuCiAqIE1vZGlmaWVkIGJ5IFN0ZXBoZW4gUGF5bmUKICovCi8qIFNvY2lhbCBJZGVudGl0eSBQcm92aWRlciBQcm9maWxlIFRyYW5zZm9ybWF0aW9uIHNjcmlwdCBmb3IgSGVhbHRoY2FyZSBJRCBDbG91ZCAqLwppbXBvcnQgc3RhdGljIG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUuZmllbGQKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmpzb24KaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLm9iamVjdAoKbG9nZ2VyLmVycm9yKCJTVF9oZWFsdGhjYXJlLWlkYy1zb2NpYWwtdHJhbnNmb3JtYXRpb24gSGVhbHRoY2FyZSBJRCBDbG91ZCBJZGVudGl0eSBQcm92aWRlciBQcm9maWxlIFRyYW5zZm9ybWF0aW9uIHNjcmlwdDogU3RhcnQiKTsKCmxvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW9uIFByb2ZpbGUgVHJhbnNmb3JtYXRpb24gc2NyaXB0OiBTdGFydCIpOwpsb2dnZXIuZXJyb3IoIlNUX2hlYWx0aGNhcmUtaWRjLXNvY2lhbC10cmFuc2Zvcm1hdGlvbnk6IGdpdmVuTmFtZSAiICsgcmF3UHJvZmlsZS5naXZlbk5hbWUpOwpsb2dnZXIuZXJyb3IoIlNUX2hlYWx0aGNhcmUtaWRjLXNvY2lhbC10cmFuc2Zvcm1hdGlvbjogc246ICIgK3Jhd1Byb2ZpbGUuZmFtaWx5TmFtZSk7CmxvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW9uOiBpZDogIiArcmF3UHJvZmlsZS5pZCk7CmxvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW9uOiBtYWlsOiAiICsgcmF3UHJvZmlsZS5lbWFpbCk7CmxvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW9uOiBjbjogIiArIHJhd1Byb2ZpbGUuZGlzcGxheU5hbWUpOwpsb2dnZXIuZXJyb3IoIlNUX2hlYWx0aGNhcmUtaWRjLXNvY2lhbC10cmFuc2Zvcm1hdGlvbjogdXNlck5hbWU6ICIgKyByYXdQcm9maWxlLnVzZXJuYW1lKTsKbG9nZ2VyLmVycm9yKCJTVF9oZWFsdGhjYXJlLWlkYy1zb2NpYWwtdHJhbnNmb3JtYXRpb246IGlkOiAiICsgcmF3UHJvZmlsZS5pZC5hc1N0cmluZygpKTsKLy9sb2dnZXIuZXJyb3IoIlNUX2hlYWx0aGNhcmUtaWRjLXNvY2lhbC10cmFuc2Zvcm1hdGlvbjogaXBsYW5ldC1hbS11c2VyLWFsaWFzLWxpc3Q6ICIgKyBzZWxlY3RlZElkcCArICctJyArIHJhd1Byb2ZpbGUuaWQuYXNTdHJpbmcoKSApOwovL2xvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW9uOiBzZWxlY3RlZElkcDogIiArIHNlbGVjdGVkSWRwKTsKaWYgKHJhd1Byb2ZpbGUuZmhpclVzZXIuaXNOb3ROdWxsKCkpIGxvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW9uOiBmaGlyVXNlcjogIiArIHJhd1Byb2ZpbGUuZmhpclVzZXIpOwppZiAocmF3UHJvZmlsZS5JQUwuaXNOb3ROdWxsKCkpIGxvZ2dlci5lcnJvcigiU1RfaGVhbHRoY2FyZS1pZGMtc29jaWFsLXRyYW5zZm9ybWF0aW86IElBTDogIiArIHJhd1Byb2ZpbGUuSUFMKTsKCgoKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnN1YiksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uYW1lKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5naXZlbl9uYW1lKSwKICAgICAgICBmaWVsZCgiZmFtaWx5TmFtZSIsIHJhd1Byb2ZpbGUuZmFtaWx5X25hbWUpLAogICAgICAgIGZpZWxkKCJlbWFpbCIsIHJhd1Byb2ZpbGUuZW1haWwpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUuZW1haWwpLAogICAgICAgIGZpZWxkKCJJQUwiLCByYXdQcm9maWxlLklBTCksICAKICAgICAgICBmaWVsZCgidGVsZXBob25lTnVtYmVyIiwgcmF3UHJvZmlsZS5waG9uZV9udW1iZXIpLAogICAgICAgIGZpZWxkKCJmaGlyVXNlciIsIHJhd1Byb2ZpbGUuZmhpclVzZXIpLAogICAgICAgIGZpZWxkKCJ1c2VyVHlwZSIsIHJhd1Byb2ZpbGUudXNlclR5cGUpLAogICAgICAgICkKKQ==",
  },
  {
    "_id": "73cecbfc-dad0-4395-be6a-6858ee3a80e5",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Microsoft",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Microsoft Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKewogICAgIkBvZGF0YS5jb250ZXh0IjogImh0dHBzOi8vZ3JhcGgubWljcm9zb2Z0LmNvbS92MS4wLyRtZXRhZGF0YSN1c2Vycy8kZW50aXR5IiwKICAgICJAb2RhdGEuaWQiOiAiaHR0cHM6Ly9ncmFwaC5taWNyb3NvZnQuY29tL3YyLzcxMWZmYTljLTU5NzItNDcxMy1hY2UzLTY4OGM5NzMyNjE0YS9kaXJlY3RvcnlPYmplY3RzLzdkNzc1OWUyLTM2ZDgtNGU2NC1iMTczLTNmODkwZDdkNDZkNi9NaWNyb3NvZnQuRGlyZWN0b3J5U2VydmljZXMuVXNlciIsCiAgICAiYnVzaW5lc3NQaG9uZXMiOiBbCiAgICAgICAgIjE4MDE0NzM1NDUxIgogICAgXSwKICAgICJkaXNwbGF5TmFtZSI6ICJWb2xrZXIgU2NoZXViZXIiLAogICAgImdpdmVuTmFtZSI6ICJWb2xrZXIiLAogICAgImpvYlRpdGxlIjogbnVsbCwKICAgICJtYWlsIjogInZzY2hldWJlckB2c2NoZXViZXIub25taWNyb3NvZnQuY29tIiwKICAgICJtb2JpbGVQaG9uZSI6IG51bGwsCiAgICAib2ZmaWNlTG9jYXRpb24iOiBudWxsLAogICAgInByZWZlcnJlZExhbmd1YWdlIjogbnVsbCwKICAgICJzdXJuYW1lIjogIlNjaGV1YmVyIiwKICAgICJ1c2VyUHJpbmNpcGFsTmFtZSI6ICJ2c2NoZXViZXJAdnNjaGV1YmVyLm9ubWljcm9zb2Z0LmNvbSIsCiAgICAiaWQiOiAiN2Q3NzU5ZTItMzZkOC00ZTY0LWIxNzMtM2Y4OTBkN2Q0NmQ2Igp9CiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmxvZ2dlci5tZXNzYWdlKCJLYXVhaSBNaWNyb3NvZnQgUHJvZmlsZSBOb3JtYWxpemF0aW9uOiByYXdQcm9maWxlPXt9IiwgcmF3UHJvZmlsZSkKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLmRpc3BsYXlOYW1lKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5naXZlbk5hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5zdXJuYW1lKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLnVzZXJQcmluY2lwYWxOYW1lKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLnVzZXJQcmluY2lwYWxOYW1lKSwKICAgICAgICBmaWVsZCgiZ3JvdXBzIiwgcmF3UHJvZmlsZS5ncm91cHMpKSk=",
  },
  {
    "_id": "5bbdaeff-ddee-44b9-b608-8d413d7d65a6",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if mode has already been set.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "mode",
    "script": "LyogbW9kZQogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBDb2xsZWN0IG1vZGUgaWYgbm90IGFscmVhZHkgc2V0IGFuZCBzZXQgb3V0Y29tZSB0byBtb2RlLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSAnc2hhcmVkIGFuZCBsZXZlbCcKICogLSAnc2hhcmVkIG9ubHknCiAqIC0gJ2xldmVsIG9ubHknCiAqIC0gJ25vbmUnCiAqLwooZnVuY3Rpb24gKCkgewogIHZhciBtb2RlID0gbm9kZVN0YXRlLmdldCgnbW9kZScpOwogIGlmIChtb2RlKSB7CiAgICBvdXRjb21lID0gbW9kZS5hc1N0cmluZygpOwogICAgdmFyIGxldmVsID0gbm9kZVN0YXRlLmdldCgnbGV2ZWwnKS5hc0ludGVnZXIoKSArIDE7CiAgICBsb2dnZXIuZXJyb3IoJ21vZGU6IG1vZGU9JyArIG1vZGUuYXNTdHJpbmcoKSArICcsIGxldmVsPScgKyBsZXZlbCk7CiAgICBzaGFyZWRTdGF0ZS5wdXQoJ2xldmVsJywgbGV2ZWwpOwogIH0KICBlbHNlIHsKICAgIHZhciBjaG9pY2VzID0gWydzaGFyZWQgYW5kIGxldmVsJywgJ3NoYXJlZCBvbmx5JywgJ2xldmVsIG9ubHknLCAnbm9uZSddOwogIAogICAgdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5DaG9pY2VDYWxsYmFjawogICAgKQoKICAgIGlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5zZW5kKFsKICAgICAgICBuZXcgZnIuQ2hvaWNlQ2FsbGJhY2soJ0Nob29zZSB0ZXN0IG1vZGUnLCBjaG9pY2VzLCAwLCBmYWxzZSkKICAgICAgXSkuYnVpbGQoKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBjaG9pY2UgPSBwYXJzZUludChjYWxsYmFja3MuZ2V0KDApLmdldFNlbGVjdGVkSW5kZXhlcygpWzBdKTsKICAgICAgbm9kZVN0YXRlLnB1dFNoYXJlZCgnbW9kZScsIGNob2ljZXNbY2hvaWNlXSk7CiAgICAgIG5vZGVTdGF0ZS5wdXRTaGFyZWQoJ2xldmVsJywgMCk7CiAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKGNob2ljZXNbY2hvaWNlXSkuYnVpbGQoKTsKICAgIH0KICB9Cn0oKSk7",
  },
  {
    "_id": "be6f1f2c-30ee-41fb-9e1e-8da72267fad3",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Greet verified caller",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twilio IVR: Greet Verified Caller",
    "script": "LyogVHdpbGlvIElWUjogR3JlZXQgVmVyaWZpZWQgQ2FsbGVyCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKiAKICogRGVwZW5kaW5nIG9uIHRoZSBhbW91bnQgb2YgZGF0YSBjb2xsZWN0ZWQgdGhyb3VnaCBjYWxsYmFja3MgYW5kIGhvdyBtYW55IG9mIHRoZSBjYWxsUGFyYW1zCiAqIHlvdSBhY3RpdmF0ZSBiZWxvdywgeW91IHdpbGwgbmVlZCB0byBjaGFuZ2UgeW91ciBhdXRoZW50aWNhdGlvbiBzZXNzaW9uIGZyb20gSldUIHRvIENUUyBvcgogKiBNZW1vcnkuCiAqLwpvdXRjb21lID0gInRydWUiOwoKLyogQmVnaW4gQ29uZmlndXJhdGlvbgogKi8KCi8vIEZvciBJRCBDbG91ZCB1c2UgIl9pZCIsIGZvciBjbGFzc2ljIGRlcGxveW1lbnRzIHVzZSAidXNlcm5hbWUiCnZhciB1c2VyaWQgPSBzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpCgovLyBDb25maWd1cmUgaG93IHlvdSB3b3VsZCBsaWtlIHRvIGFkZHJlc3MgdGhlIHZlcmlmaWVkIGNhbGxlci4gVGhlIGRlZmF1bHQgaXMgdGhlIGZ1bGwgbmFtZS4KdmFyIG5hbWUgPSBbaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZSh1c2VyaWQsICJnaXZlbk5hbWUiKS5pdGVyYXRvcigpLm5leHQoKSwgaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZSh1c2VyaWQsICJzbiIpLml0ZXJhdG9yKCkubmV4dCgpXS5qb2luKCIgIik7CgovLyBCdWlsZCBvdXQgdGhlIGZ1bGwgbWVzc2FnZQp2YXIgbWVzc2FnZSA9IFsiSGVsbG8iLCBuYW1lLCAiISBIb3cgY2FuIEkgaGVscCB5b3UgdG9kYXk/Il0uam9pbigiICIpOwoKLyogRW5kIENvbmZpZ3VyYXRpb24KICovCgp2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGksCiAgICAgIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suVGV4dE91dHB1dENhbGxiYWNrCik7CiAgCndpdGggKGZyKSB7CiAgICAgIGlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICAgICAgdmFyIG91dHB1dCA9IG5ldyBUZXh0T3V0cHV0Q2FsbGJhY2soVGV4dE91dHB1dENhbGxiYWNrLklORk9STUFUSU9OLCBtZXNzYWdlKTsKICAgICAgICBhY3Rpb24gPSBBY3Rpb24uc2VuZChvdXRwdXQpLmJ1aWxkKCk7CiAgICAgIH0gCiAgICAgIGVsc2UgewogICAgICAgIGFjdGlvbiA9IEFjdGlvbi5nb1RvKG91dGNvbWUpLmJ1aWxkKCk7CiAgICAgIH0KfQ==",
  },
  {
    "_id": "53c50dbd-5331-4739-bea1-4c5e9bf553f2",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Welcome message",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twilio IVR: Welcome Message",
    "script": "LyogVHdpbGlvIElWUjogV2VsY29tZSBNZXNzYWdlCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKiAKICogRGVwZW5kaW5nIG9uIHRoZSBhbW91bnQgb2YgZGF0YSBjb2xsZWN0ZWQgdGhyb3VnaCBjYWxsYmFja3MgYW5kIGhvdyBtYW55IG9mIHRoZSBjYWxsUGFyYW1zCiAqIHlvdSBhY3RpdmF0ZSBiZWxvdywgeW91IHdpbGwgbmVlZCB0byBjaGFuZ2UgeW91ciBhdXRoZW50aWNhdGlvbiBzZXNzaW9uIGZyb20gSldUIHRvIENUUyBvcgogKiBNZW1vcnkuCiAqLwpsb2dnZXIud2FybmluZygiVHdpbGlvIElWUjogV2VsY29tZSBNZXNzYWdlOiBzdGFydCIpOwpvdXRjb21lID0gInRydWUiOwoKLyogQmVnaW4gQ29uZmlndXJhdGlvbgogKi8KCi8vIEJ1aWxkIG91dCB0aGUgZnVsbCBtZXNzYWdlCnZhciBtZXNzYWdlID0gIlRoYW5rIHlvdSBmb3IgY2FsbGluZyBGb3JnZVJvY2sgSWRlbnRpdHkgQ2xvdWQhIjsKCi8qIEVuZCBDb25maWd1cmF0aW9uCiAqLwoKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLAogICAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjawopOwogIAp3aXRoIChmcikgewogICAgICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgICAgIHZhciBvdXRwdXQgPSBuZXcgVGV4dE91dHB1dENhbGxiYWNrKFRleHRPdXRwdXRDYWxsYmFjay5JTkZPUk1BVElPTiwgbWVzc2FnZSk7CiAgICAgICAgYWN0aW9uID0gQWN0aW9uLnNlbmQob3V0cHV0KS5idWlsZCgpOwogICAgICB9IAogICAgICBlbHNlIHsKICAgICAgICBsb2dnZXIud2FybmluZygiVHdpbGlvIElWUjogV2VsY29tZSBNZXNzYWdlOiBmaW5pc2ggW291dGNvbWU9Ii5jb25jYXQob3V0Y29tZSkuY29uY2F0KCJdIikpOwogICAgICAgIGFjdGlvbiA9IEFjdGlvbi5nb1RvKG91dGNvbWUpLmJ1aWxkKCk7CiAgICAgIH0KfQ==",
  },
  {
    "_id": "4accb4d0-56ec-4a28-a769-5275dbac3147",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_PasswordFixStart",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKVGhpcyBpcyBhIHdvcmthcm91bmQgdGhhdCBmaXhlcyBhbiBpc3N1ZSB3aXRoIHBhc3N3b3JkIHBvbGljeS4KClRoZSBQbGF0Zm9ybSBQYXNzd29yZCBub2RlIGF0dGVtcHRzIHRvIHZhbGlkYXRlIGEgcGFzc3dvcmQgYnkgY2FsbGluZyBJRE0ncyB2YWxpZGF0ZVByb3BlcnR5IGFjdGlvbiwgYW5kIGl0IHVzZXMKc2hhcmVkU3RhdGUub2JqZWN0QXR0cmlidXRlcyBhcyB0aGUgYG9iamVjdGAgcHJvcGVydHkgb2YgdGhhdCByZXF1ZXN0IHBheWxvYWQuICBJZiB0aGUgcmVxdWVzdCBpcyBtaXNzaW5nIHJlcXVpcmVkIHByb3BlcnRpZXMKb3IgY29udGFpbnMgcHJvcGVydGllcyBub3QgaW4gdGhlIG9iamVjdCdzIHNjaGVtYSwgRFMgd2lsbCBlcnJvciBhbmQgSURNIHdpbGwgc3dhbGxvdyB0aGF0IGVycm9yLCByZXR1cm5pbmcgYW4gZW1wdHkgCmxpc3Qgb2YgZmFpbGVkIHBvbGljaWVzIGluc3RlYWQuCgpUaGlzIHdvcmthcm91bmQgcHJvdmlkZXMgZmFrZSB2YWx1ZXMgZm9yIHJlcXVpcmVkIHByb3BlcnRpZXMuIEl0IGFsc28gZW5zdXJlcyBmaXJzdC9sYXN0IG5hbWUgaXMgaW4gb2JqZWN0QXR0cmlidXRlcyBzbyB0aGUKImNhbid0IGNvbnRhaW4iIHBvbGljeSBjYW4gYmUgZXZhbHVhdGVkLiBUaGlzIHdvcmthcm91bmQgaXMgY2xlYW5lZCB1cCBieSBBZG1pbl9QYXNzd29yZEZpeEVuZC5qcy4KKi8KCi8vIENhcHR1cmUgZXhpc3Rpbmcgb2JqZWN0IGF0dHJpYnV0ZXMgc28gd2UgY2FuIHJlc3RvcmUgdGhlbSBsYXRlcgppZiAoc2hhcmVkU3RhdGUuY29udGFpbnNLZXkoJ29iamVjdEF0dHJpYnV0ZXMnKSkgewogIHNoYXJlZFN0YXRlLnB1dCgnb3JpZ2luYWxPYmplY3RBdHRyaWJ1dGVzJywgc2hhcmVkU3RhdGUuZ2V0KCdvYmplY3RBdHRyaWJ1dGVzJykpOwp9CgovLyBEZWZpbmUgdGhlIG9iamVjdCB0byB1c2UgZm9yIHBvbGljeSBldmFsdWF0aW9uCnZhciBwb2xpY3lPYmplY3QgPSB7CiAgZ2l2ZW5OYW1lOiAnJywKICBzbjogJycsCiAgZ3JvdXBzOiBbJ2Zha2UnXSwKICBpbnZpdGVEYXRlOiAnZmFrZScKfTsKCi8vIElmIHdlJ3ZlIGxvYWRlZCB0aGUgYWRtaW4gb2JqZWN0LCBhZGQgZmlyc3QvbGFzdCBuYW1lIHRvIHN1cHBvcnQKLy8gZXZhbHVhdGlvbiBvZiB0aGUgZnVsbCBwb2xpY3kKaWYgKHNoYXJlZFN0YXRlLmNvbnRhaW5zS2V5KCdhZG1pbk9iamVjdCcpKSB7CiAgdmFyIGFkbWluT2JqZWN0ID0gc2hhcmVkU3RhdGUuZ2V0KCdhZG1pbk9iamVjdCcpOwogIHBvbGljeU9iamVjdC5naXZlbk5hbWUgPSBhZG1pbk9iamVjdC5nZXQoJ2dpdmVuTmFtZScpOwogIHBvbGljeU9iamVjdC5zbiA9IGFkbWluT2JqZWN0LmdldCgnc24nKTsKfQoKLy8gUmVwbGFjZSBvYmplY3RBdHRyaWJ1dGVzIHdpdGggb3VyIHBvbGljeSBvYmplY3QKc2hhcmVkU3RhdGUucHV0KCdvYmplY3RBdHRyaWJ1dGVzJywgcG9saWN5T2JqZWN0KTsKCm91dGNvbWUgPSAnVHJ1ZSc7Cg==",
  },
  {
    "_id": "8a768bb3-01cd-46b8-881c-b77f5a26c283",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Write Onfido HTML Meta Tags",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Onfido-Meta-Tags",
    "script": "LyogV3JpdGUgSFRNTCBNZXRhIFRhZ3MKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogVGhpcyBzY3JpcHQgd3JpdGVzIG1ldGEgdGFncyB0byB0aGUgaGVhZGVyLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqLwooZnVuY3Rpb24gKCkgewogIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICAgIGNvbS5zdW4uaWRlbnRpdHkuYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjawogICkKCiAgZnVuY3Rpb24gY3JlYXRlU2NyaXB0KCkgewogICAgcmV0dXJuIFN0cmluZygiXG5cCiAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcblwKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVxuXAogICAgKS5mb3JFYWNoKFxuXAogICAgICBmdW5jdGlvbiAoZSkge1xuXAogICAgICAgIHZhciBtZXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbWV0YScpOyBcblwKICAgICAgICBtZXRhLm5hbWUgPSBcImF1dGhvclwiOyBcblwKICAgICAgICBtZXRhLmNvbnRlbnQgPSBcIkpvaG4gRG9lXCI7IFxuXAogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQobWV0YSk7IFxuXAogICAgICB9XG5cCiAgICApIik7CiAgfQoKICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICAgIG5ldyBmci5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2soY3JlYXRlU2NyaXB0KCkpCiAgICAgICkuYnVpbGQoKQogIH0gZWxzZSB7CiAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKCJ0cnVlIikuYnVpbGQoKTsKICB9Cn0oKSk7",
  },
  {
    "_id": "766ed2a6-29dd-4bd7-a60d-9eabbd63545c",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Service Account - Verify JWT",
    "script": "dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2sudXRpbC5PcHRpb25zLAogIG9yZy5mb3JnZXJvY2suanNvbi5qb3NlLmp3ay5KV0tTZXQsCiAgb3JnLmZvcmdlcm9jay5qc29uLmpvc2UuandzLlNpZ25pbmdNYW5hZ2VyLAogIG9yZy5mb3JnZXJvY2suanNvbi5qb3NlLmJ1aWxkZXJzLkp3dEJ1aWxkZXJGYWN0b3J5LAogIG9yZy5mb3JnZXJvY2suanNvbi5qb3NlLmp3cy5TaWduZWRKd3QKKTsKCnZhciBzbSA9IG5ldyBmci5TaWduaW5nTWFuYWdlcigpOwoKZnVuY3Rpb24gZ2V0SldLcyhzdmNBY2N0SWQpIHsKICB2YXIgc3ZjQWNjdCA9IGlkUmVwb3NpdG9yeS5nZXRJZGVudGl0eShzdmNBY2N0SWQpOwogIGlmIChzdmNBY2N0ID09IG51bGwpIHsKICAgIGxvZ2dlci5tZXNzYWdlKCdObyBzZXJ2aWNlIGFjY291bnQgZm91bmQgZm9yIHt9Jywgc3ZjQWNjdElkKTsKICAgIHJldHVybiBudWxsOwogIH0KICB2YXIgandrc0F0dHJzID0gc3ZjQWNjdC5nZXRBdHRyaWJ1dGVWYWx1ZXMoJ2ZyLWF0dHItandrcycpOwogIGlmICghandrc0F0dHJzIHx8IGp3a3NBdHRycy5sZW5ndGggPT09IDApIHsKICAgIGxvZ2dlci5tZXNzYWdlKCdObyBqd2tzIGF0dHJpYnV0ZXMgaW4gaXNzdWVyJyk7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgdmFyIGp3a1NldCA9IGp3a3NBdHRyc1swXTsKICBpZiAoIWp3a1NldCkgewogICAgbG9nZ2VyLm1lc3NhZ2UoJ05vIGp3ayBzZXQgaW4gandrcyBhdHRyaWJ1dGUgaW4gaXNzdWVyJyk7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgcmV0dXJuIGZyLkpXS1NldC5wYXJzZShqd2tTZXQpLmdldEpXS3NBc0xpc3QoKTsKfQoKb3V0Y29tZSA9IChmdW5jdGlvbiAoKSB7CiAgdmFyIGF1dGh6ID0gcmVxdWVzdEhlYWRlcnMuZ2V0KCdhdXRob3JpemF0aW9uJyk7CiAgaWYgKGF1dGh6ID09PSBudWxsIHx8IGF1dGh6Lmxlbmd0aCA9PT0gMCB8fCBhdXRoelswXS5pbmRleE9mKCdzdmNhY2N0JykgIT09IDApIHsKICAgIGxvZ2dlci5tZXNzYWdlKCdObyBhdXRob3JpemF0aW9uIGhlYWRlcicpOwogICAgcmV0dXJuICdGYWxzZSc7CiAgfQoKICBhdXRoeiA9IGF1dGh6WzBdLnNwbGl0KCcgJyk7CiAgaWYgKGF1dGh6Lmxlbmd0aCAhPT0gMykgewogICAgbG9nZ2VyLm1lc3NhZ2UoJ0JhZCBhdXRob3JpemF0aW9uIGhlYWRlciBsZW5ndGgge30nLCBhdXRoei5sZW5ndGgpOwogICAgcmV0dXJuICdGYWxzZSc7CiAgfQogIHZhciBzdmNBY2N0SWQgPSBhdXRoelsxXTsKICB2YXIgand0ID0gYXV0aHpbMl07CiAgdmFyIHNpZ25lZEp3dCA9IG5ldyBmci5Kd3RCdWlsZGVyRmFjdG9yeSgpLnJlY29uc3RydWN0KGp3dCwgZnIuU2lnbmVkSnd0KTsKCiAgdmFyIGp3a3MgPSBnZXRKV0tzKHN2Y0FjY3RJZCk7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBqd2tzLnNpemUoKTsgaSsrKSB7CiAgICB2YXIgdmVyaWZpZXIgPSBzbS5uZXdWZXJpZmljYXRpb25IYW5kbGVyKGp3a3MuZ2V0KGkpKQogICAgaWYgKHNpZ25lZEp3dC52ZXJpZnkodmVyaWZpZXIpKSB7CiAgICAgIG5vZGVTdGF0ZS5wdXRTaGFyZWQoInVzZXJuYW1lIiwgc3ZjQWNjdElkKTsKICAgICAgcmV0dXJuICdUcnVlJzsKICAgIH0KICB9CgogIGxvZ2dlci5tZXNzYWdlKCdDb3VsZCBub3QgdmVyaWZ5IGp3dCcpOwogIHJldHVybiAnRmFsc2UnOwp9KSgpOw==",
  },
  {
    "_id": "5561a45f-bf00-4ec5-bab4-f069bac9a38b",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Copy an OTP generated by the "HOTP Generator" node to the IDM profile shared state so it can be patched to the user profile.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "CopyOTPToObjectAttributes",
    "script": "LyogQ29weU9UUFRvT2JqZWN0QXR0cmlidXRlcwogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBDb3B5IGFuIE9UUCBnZW5lcmF0ZWQgYnkgdGhlICJIT1RQIEdlbmVyYXRvciIgbm9kZSB0byB0aGUgSURNIHByb2ZpbGUgCiAqIHNoYXJlZCBzdGF0ZSBzbyBpdCBjYW4gYmUgcGF0Y2hlZCB0byB0aGUgdXNlciBwcm9maWxlLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqLwppZiAoc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikpIHsKICAgIHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpLnB1dCgiZGVzY3JpcHRpb24iLCBzaGFyZWRTdGF0ZS5nZXQoIm9uZVRpbWVQYXNzd29yZCIpKQp9CmVsc2UgewogICAgc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwge2Rlc2NyaXB0aW9uOiBzaGFyZWRTdGF0ZS5nZXQoIm9uZVRpbWVQYXNzd29yZCIpfSk7Cn0Kb3V0Y29tZSA9ICJ0cnVlIjs=",
  },
  {
    "_id": "1acc5535-13e2-4ed8-83e1-f4fefd86d243",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Readiness probe response",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Ready Response",
    "script": "LyogUmVhZHkgUmVzcG9uc2UKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogUmV0dXJuIFJFQURZIGluIGEgVGV4dE91dHB1dENhbGxiYWNrIGluZGljYXRpbmcgdGhhdCB0aGUgam91cm5leSBsYXllciBpcyBvcGVyYXRpb25hbC4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKi8Kb3V0Y29tZSA9ICJ0cnVlIjsKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjawopCmlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICBuZXcgZnIuVGV4dE91dHB1dENhbGxiYWNrKAogICAgICAgICAgICBmci5UZXh0T3V0cHV0Q2FsbGJhY2suSU5GT1JNQVRJT04sCiAgICAgICAgICAgICJSRUFEWSIKICAgICAgICApCiAgICApLmJ1aWxkKCkKfQplbHNlIHsKICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbyhvdXRjb21lKS5idWlsZCgpOwp9",
  },
  {
    "_id": "123725a9-2119-4efd-a6b0-456f3ccd34b7",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "deviceprofile_to_attribute",
    "script": "dmFyIG9iamVjdEF0dHJpYnV0ZXMgPSBzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKTsKdmFyIGRldmljZUhhc2ggPSBzaGFyZWRTdGF0ZS5nZXQoImRldmljZUhhc2giKTsKCnNoYXJlZFN0YXRlLnB1dCgiZnJJbmRleGVkU3RyaW5nMSIgLCBkZXZpY2VIYXNoICk7CgoKCmlmKG9iamVjdEF0dHJpYnV0ZXMgPT09IG51bGwgfHwgb2JqZWN0QXR0cmlidXRlcyA9PT0gdW5kZWZpbmVkKQp7CgoKIG9iamVjdEF0dHJpYnV0ZXMgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ1c2VyTmFtZSIgOiAiYW5vbi0iLmNvbmNhdChkZXZpY2VIYXNoKSwKICAgICAgICAgICAgICAgICAgICAgImdpdmVuTmFtZSIgOiAiICIsCiAgICAgICAgICAgICAgICAgICAgICJzbiIgOiAiICIsCiAgICAgICAgICAgICAgICAgICAgICJtYWlsIiA6ICJhbm9uLSIuY29uY2F0KGRldmljZUhhc2gpLmNvbmNhdCgiQG15dGVzdHJ1bi5jb20iKSwKICAgICAgICAgICAgICAgICAgICAgImZySW5kZXhlZFN0cmluZzEiIDogZGV2aWNlSGFzaAogICAgICAgICAgICAgICAgICAgIH0KfQplbHNlCnsKCiAgICBvYmplY3RBdHRyaWJ1dGVzLnB1dCgidXNlck5hbWUiLCAgImFub24tIi5jb25jYXQoZGV2aWNlSGFzaCkpOwogICAgb2JqZWN0QXR0cmlidXRlcy5wdXQoImdpdmVuTmFtZSIsICIgIik7CiAgICBvYmplY3RBdHRyaWJ1dGVzLnB1dCgic24iLCAiICIpOwogICAgb2JqZWN0QXR0cmlidXRlcy5wdXQoIm1haWwiLCAiYW5vbi0iLmNvbmNhdChkZXZpY2VIYXNoKS5jb25jYXQoIkBteXRlc3RydW4uY29tIikpOwogICAgb2JqZWN0QXR0cmlidXRlcy5wdXQoImZySW5kZXhlZFN0cmluZzEiLCBkZXZpY2VIYXNoKTsKICAgCn0KCgpzaGFyZWRTdGF0ZS5wdXQoIm9iamVjdEF0dHJpYnV0ZXMiLG9iamVjdEF0dHJpYnV0ZXMpOwogICAgCm91dGNvbWUgPSAidHJ1ZSI7",
  },
  {
    "_id": "2aaa8076-5d0b-4433-9660-fec1ba51b608",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "temp",
    "script": "LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwpvdXRjb21lID0gImZhbHNlIjsKaWYoc2hhcmVkU3RhdGUuZ2V0KCJ1c2VyTmFtZSIpKQp7CnZhciB1c2VybmFtZSA9IHNoYXJlZFN0YXRlLmdldCgidXNlck5hbWUiKQp2YXIgaWQgPSBzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpCnZhciBwZXJzb25hID0gZXhpc3RpbmdTZXNzaW9uLmdldCgncGVyc29uYScpCgpzaGFyZWRTdGF0ZS5wdXQoImRlYnVnIix1c2VybmFtZSk7CnNoYXJlZFN0YXRlLnB1dCgiZGVidWdfaWQiLGlkKTsKc2hhcmVkU3RhdGUucHV0KCJwZXJzb25hIixwZXJzb25hKTsKCmlmKHVzZXJuYW1lIT09JycpCnsKICBvdXRjb21lID0gInRydWUiOwp9fQo=",
  },
  {
    "_id": "22ab12ac-d1d9-414b-ab51-cfae30de8c0a",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Create a configuration object for the Email Template Node.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Configure Email Template Node",
    "script": "LyogQ29uZmlndXJlIEVtYWlsIFRlbXBsYXRlIE5vZGUKICogCiAqIENyZWF0ZSBhIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciB0aGUgRW1haWwgVGVtcGxhdGUgTm9kZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKiAtIGVycm9yCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgdHJ5IHsKICBvdXRjb21lID0gJ3RydWUnOwogIHZhciBjb25maWcgPSB7CiAgICBlbWFpbEF0dHJpYnV0ZTogJ21haWwnLAogICAgZW1haWxUZW1wbGF0ZU5hbWU6ICd3ZWxjb21lJywKICAgIGlkZW50aXR5QXR0cmlidXRlOiAndXNlck5hbWUnCiAgfTsKICBub2RlU3RhdGUucHV0U2hhcmVkKCdub2RlQ29uZmlnJywgY29uZmlnKTsKICB9IGNhdGNoIChlcnJvcikgewogICAgICBvdXRjb21lID0gJ2Vycm9yJzsKICAgIG5vZGVTdGF0ZS5wdXRTaGFyZWQoJ2Vycm9yJywgZXJyb3IubWVzc2FnZSk7CiAgfQp9KCkpOw==",
  },
  {
    "_id": "76421cb0-0550-43e7-89f8-51ad1d95d306",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Detect and preserve currently active theme before setting the new theme.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Set Theme",
    "script": "LyogU2V0IFRoZW1lCiAqIAogKiBEZXRlY3QgYW5kIHByZXNlcnZlIGN1cnJlbnRseSBhY3RpdmUgdGhlbWUgYmVmb3JlIHNldHRpbmcgdGhlIG5ldyB0aGVtZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqLwooZnVuY3Rpb24gKCkgewogICAgICBvdXRjb21lID0gInRydWUiOwogICAgICAKICAgICAgdmFyIHRoZW1lID0gIkV4cGFuc2VfTUZBIjsKCiAgICAvLyBkbyBub3QgY2hhbmdlLCBtdXN0IGJlIGEgcmFuZG9tIGlkZW50aWZpZXIKICAgIHZhciBhbmNob3IgPSBnZW5lcmF0ZU51bWVyaWNUb2tlbigneHh4Jyk7CiAgCiAgICAgIHZhciBzY3JpcHQgPSAiIjsKICAgIHNjcmlwdCArPSAiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aGVtZS1pZC0iK2FuY2hvcisiXCIpLnZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RoZW1lLWlkJyk7IjsKICAgIHNjcmlwdCArPSAiY29uc29sZS5sb2coJ3RoZW1lLWlkPScrZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aGVtZS1pZC0iK2FuY2hvcisiXCIpLnZhbHVlKTsiOwogICAgICBzY3JpcHQgKz0gImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9naW5CdXR0b25fMFwiKS5jbGljaygpOyI7CgogICAgdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogICAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLlBvbGxpbmdXYWl0Q2FsbGJhY2ssCiAgICAgICAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuSGlkZGVuVmFsdWVDYWxsYmFjaywKICAgICAgICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2sKICAgICkKICAgIC8vIGRpc2NvdmVyIGFjdGl2ZSB0aGVtZSBmcm9tIFVJCiAgICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5zZW5kKAogICAgICAgICAgICBuZXcgZnIuSGlkZGVuVmFsdWVDYWxsYmFjaygidGhlbWUtaWQtIithbmNob3IsICJmYWxzZSIpLAogICAgICAgICAgICBuZXcgZnIuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrKHNjcmlwdCkKICAgICAgICApLmJ1aWxkKCk7CiAgICB9CiAgICAgIC8vIGdldCBhY3RpdmUgdGhlbWUgZnJvbSBjYWxsYmFjayBhbmQgc2V0IG5ldyB0aGVtZQogICAgICBlbHNlIGlmIChjYWxsYmFja3Muc2l6ZSgpID09PSAyKSB7CiAgICAgICAgLy8gZGlkIHdlIGdldCB0aGUgaWQgb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgdGhlbWU/CiAgICAgICAgaWYgKGNhbGxiYWNrcy5nZXQoMCkuZ2V0VmFsdWUoKSAhPT0gInRoZW1lLWlkLSIrYW5jaG9yKSB7CiAgICAgICAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJ0aGVtZUlkIiwgY2FsbGJhY2tzLmdldCgwKS5nZXRWYWx1ZSgpKTsKICAgICAgICB9CiAgICAgICAgLy8gc2V0IG5ldyB0aGVtZQogICAgICAgIHZhciBzdGFnZSA9ICJ0aGVtZUlkPSIrdGhlbWU7CiAgICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgICAgICAgbmV3IGZyLlBvbGxpbmdXYWl0Q2FsbGJhY2soIjEwMCIsICJQbGVhc2Ugd2FpdCAuLi4iKQogICAgICAgICkud2l0aFN0YWdlKHN0YWdlKS5idWlsZCgpOwogICAgfQogICAgICBlbHNlIHsKICAgICAgICAvLyBjb250aW51ZQogICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKG91dGNvbWUpLmJ1aWxkKCk7CiAgICB9CgogICAgIC8qCiAgICAgICogR2VuZXJhdGUgYSB0b2tlbiBpbiB0aGUgZGVzaXJlZCBmb3JtYXQuIEFsbCAneCcgY2hhcmFjdGVycyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggYSByYW5kb20gbnVtYmVyIDAtOS4KICAgICAgKiAKICAgICAgKiBFeGFtcGxlOgogICAgICAqICd4eHh4eCcgcHJvZHVjZXMgJzI4NTM1JwogICAgICAqICd4eHgteHh4JyBwcm9kdWNlcyAnNDMyLTUyMScKICAgICAgKi8KICAgIGZ1bmN0aW9uIGdlbmVyYXRlTnVtZXJpY1Rva2VuKGZvcm1hdCkgewogICAgICAgIHJldHVybiBmb3JtYXQucmVwbGFjZSgvW3hdL2csIGZ1bmN0aW9uKGMpIHsKICAgICAgICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpKjEwfDA7CiAgICAgICAgICAgIHZhciB2ID0gcjsKICAgICAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTApOwogICAgICAgIH0pOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "d70df7a8-6390-409d-b821-166272a9a9c8",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Collect all the configuration items required for the Inner Tree Evaluator to function properly.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Collect Inner Tree Evaluator Config",
    "script": "LyogQ29sbGVjdCBJbm5lciBUcmVlIEV2YWx1YXRvciBDb25maWcKICogCiAqIENvbGxlY3QgYWxsIHRoZSBjb25maWd1cmF0aW9uIGl0ZW1zIHJlcXVpcmVkIGZvciB0aGUgSW5uZXIgVHJlZSBFdmFsdWF0b3IgdG8gZnVuY3Rpb24gcHJvcGVybHkuCiAqIAogKiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKi8KKGZ1bmN0aW9uICgpIHsKICAgIG91dGNvbWUgPSAidHJ1ZSI7CiAgICAgIHZhciBjb25maWcgPSB7CiAgICAgICAgInRyZWUiOiAiTG9naW4iLAogICAgfTsKICAgICAgdmFyIHNjcmlwdCA9ICIiOwogICAgc2NyaXB0ICs9ICJBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCgiOwogICAgc2NyaXB0ICs9ICIgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0JykiOwogICAgc2NyaXB0ICs9ICIpLmZvckVhY2goIjsKICAgIHNjcmlwdCArPSAiICAgIGZ1bmN0aW9uIChpbnB1dCxpKSB7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICBjb25zb2xlLmxvZygnaW5wdXQgJytpKTsiCiAgICBzY3JpcHQgKz0gIiAgICAgICAgdmFyIGNvbmZpZyA9IEpTT04ucGFyc2UoJyIrSlNPTi5zdHJpbmdpZnkoY29uZmlnKSsiJyk7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGNvbmZpZyk7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3RleHQnKSB7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIGNvbmZpZ1trZXlzW2ldXSk7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICAgICAgaW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgS2V5Ym9hcmRFdmVudCggJ2lucHV0JyAsIHsna2V5JzonRW50ZXInfSApKTsiOwogICAgc2NyaXB0ICs9ICIgICAgICAgIH0iOwogICAgc2NyaXB0ICs9ICIgICAgfSI7CiAgICBzY3JpcHQgKz0gIik7IjsKICAgIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgICAgIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suTmFtZUNhbGxiYWNrLAogICAgICAgIGNvbS5zdW4uaWRlbnRpdHkuYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjawogICAgKQogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICAgICAgbmV3IGZyLk5hbWVDYWxsYmFjaygidHJlZSIsIGNvbmZpZy50cmVlKSwKICAgICAgICAgICAgICBuZXcgZnIuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrKHNjcmlwdCkKICAgICAgICApLmJ1aWxkKCk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAgIGNvbmZpZ1tjYWxsYmFja3MuZ2V0KDApLmdldFByb21wdCgpXSA9IGNhbGxiYWNrcy5nZXQoMCkuZ2V0TmFtZSgpOwogICAgICAgICAgbm9kZVN0YXRlLnB1dFNoYXJlZCgibm9kZUNvbmZpZyIsIGNvbmZpZyk7CiAgICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKICAgIH0KfSgpKTs=",
  },
  {
    "_id": "1e8175a2-6114-415f-9b72-9fe15bdf3661",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_IsFederationEnforcedForUser",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKdmFyIGZyID0gbmV3IEphdmFJbXBvcnRlcigKICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGVzLAogIG9yZy5mb3JnZXJvY2suZ3VpY2UuY29yZQopOwoKd2l0aCAoZnIpIHsKICB2YXIgZW5mb3JjZW1lbnQgPSAnbm9uZSc7CgogIGZ1bmN0aW9uIGlzU3VwZXJBZG1pbigpIHsKICAgIHZhciB1dWlkID0gc2hhcmVkU3RhdGUuZ2V0KCdfaWQnKTsKICAgIHZhciByZWFsbSA9IHNoYXJlZFN0YXRlLmdldCgncmVhbG0nKTsKICAgIHZhciBpZGVudGl0eVByb3ZpZGVyID0gSW5qZWN0b3JIb2xkZXIuZ2V0SW5zdGFuY2UoSWRlbnRpdHlQcm92aWRlcik7CiAgICB2YXIgaWRlbnRpdHkgPSBpZGVudGl0eVByb3ZpZGVyLmdldElkZW50aXR5KHV1aWQsIHJlYWxtKTsKICAgIHZhciBncm91cHMgPSBpZGVudGl0eS5nZXRBdHRyaWJ1dGUoJ2ZyLWF0dHItZ3JvdXAnKS50b0FycmF5KCk7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykgewogICAgICBpZiAoZ3JvdXBzW2ldID09ICdzdXBlci1hZG1pbnMnKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBmYWxzZTsKICB9CgogIHRyeSB7CiAgICBzd2l0Y2ggKGVuZm9yY2VtZW50KSB7CiAgICAgIGNhc2UgJ25vbmUnOgogICAgICAgIG91dGNvbWUgPSAnRmFsc2UnOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICdhbGwnOgogICAgICAgIG91dGNvbWUgPSAnVHJ1ZSc7CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgb3V0Y29tZSA9IGlzU3VwZXJBZG1pbigpID8gJ0ZhbHNlJyA6ICdUcnVlJzsKICAgICAgICBicmVhazsKICAgIH0KICB9IGNhdGNoIChlKSB7CiAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBkZXRlcm1pbmUgaWYgZmVkZXJhdGlvbiBpcyBlbmZvcmNlZCBmb3IgdXNlcjoge30nLCBlKTsKICAgIG91dGNvbWUgPSAnRXJyb3InOwogIH0KfQ==",
  },
  {
    "_id": "8e298710-b55e-4085-a464-88a375a4004b",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Twitter",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twitter Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkX3N0ciksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uYW1lKSwKICAgICAgICBmaWVsZCgicGhvdG9VcmwiLCByYXdQcm9maWxlLnByb2ZpbGVfaW1hZ2VfdXJsKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLnNjcmVlbl9uYW1lKSkp",
  },
  {
    "_id": "14f14ad3-f35f-455b-a7ba-d7cd939c6921",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Dropdown selector",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Choice inner1, inner2",
    "script": "LyogQ2hvaWNlIGlubmVyMSwgaW5uZXIyCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICogCiAqIFJlbmRlciBhIGRyb3Bkb3duIHNlbGVjdG9yCiAqIAogKiBUaGlzIHNjcmlwdCBtdXN0IGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCBub3Qgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqLwooZnVuY3Rpb24gKCkgewogIG91dGNvbWUgPSAidHJ1ZSI7CiAgdmFyIGNob2ljZXMgPSBbImlubmVyMSIsICJpbm5lcjIiXTsKICAKICB2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suQ2hvaWNlQ2FsbGJhY2sKICApCgogIGlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZChbCiAgICAgIG5ldyBmci5DaG9pY2VDYWxsYmFjaygiU2VsZWN0IGEgam91cm5leSIsIGNob2ljZXMsIDAsIGZhbHNlKQogICAgXSkuYnVpbGQoKTsKICB9IGVsc2UgewogICAgdmFyIGNob2ljZSA9IHBhcnNlSW50KGNhbGxiYWNrcy5nZXQoMCkuZ2V0U2VsZWN0ZWRJbmRleGVzKClbMF0pOwogICAgbm9kZVN0YXRlLnB1dFNoYXJlZCgibm9kZUNvbmZpZyIsIHt0cmVlOiBjaG9pY2VzW2Nob2ljZV19KTsKICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKG91dGNvbWUpLmJ1aWxkKCk7CiAgfQp9KCkpOw==",
  },
  {
    "_id": "90c4eca5-05f0-42f5-b9bf-88b693eabbbd",
    "context": "SAML2_IDP_ATTRIBUTE_MAPPER",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Saml2 IDP Attribute Mapper Script",
    "script": "",
  },
  {
    "_id": "a7a78773-445b-4eca-bb93-409e86bced81",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from GitHub",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "GitHub Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLm5hbWUpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUubG9naW4pKSk=",
  },
  {
    "_id": "1f389a3d-21cf-417c-a6d3-42ea620071f0",
    "context": "OIDC_CLAIMS",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Internal OIDC Claims script",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ForgeRock Internal: OIDC Claims Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTQtMjAyMyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUwogKiBvciB3aXRoIG9uZSBvZiBpdHMgYWZmaWxpYXRlcy4gQWxsIHVzZSBzaGFsbCBiZSBleGNsdXNpdmVseSBzdWJqZWN0CiAqIHRvIHN1Y2ggbGljZW5zZSBiZXR3ZWVuIHRoZSBsaWNlbnNlZSBhbmQgRm9yZ2VSb2NrIEFTLgogKi8KCi8qCiAqIFRoaXMgc2NyaXB0IGNvbXB1dGVzIGNsYWltIHZhbHVlcyByZXR1cm5lZCBpbiBJRCB0b2tlbnMgYW5kL29yIGF0IHRoZSBVc2VySW5mbyBFbmRwb2ludC4KICogVGhlIGNsYWltIHZhbHVlcyBhcmUgY29tcHV0ZWQgZm9yOgogKiB0aGUgY2xhaW1zIGRlcml2ZWQgZnJvbSB0aGUgcmVxdWVzdGVkIHNjb3BlcywKICogdGhlIGNsYWltcyBwcm92aWRlZCBieSB0aGUgYXV0aG9yaXphdGlvbiBzZXJ2ZXIsCiAqIGFuZCB0aGUgY2xhaW1zIHJlcXVlc3RlZCBieSB0aGUgY2xpZW50IHZpYSB0aGUgY2xhaW1zIHBhcmFtZXRlci4KICoKICogSW4gdGhlIENPTkZJR1VSQVRJT04gQU5EIENVU1RPTUlaQVRJT04gc2VjdGlvbiwgeW91IGNhbgogKiBkZWZpbmUgdGhlIHNjb3BlLXRvLWNsYWltcyBtYXBwaW5nLCBhbmQKICogYXNzaWduIHRvIGVhY2ggY2xhaW0gYSByZXNvbHZlciBmdW5jdGlvbiB0aGF0IHdpbGwgY29tcHV0ZSB0aGUgY2xhaW0gdmFsdWUuCiAqCiAqIERlZmluZWQgdmFyaWFibGVzIChjbGFzcyByZWZlcmVuY2VzIGFyZSBwcm92aWRlZCBiZWxvdyk6CiAqIHNjb3BlcyAtIFNldDxTdHJpbmc+ICg2KS4KICogICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSByZXF1ZXN0ZWQgc2NvcGVzLgogKiBjbGFpbXMgLSBNYXA8U3RyaW5nLCBPYmplY3Q+ICg1KS4KICogICAgICAgICAgQWx3YXlzIHByZXNlbnQsIGRlZmF1bHQgc2VydmVyIHByb3ZpZGVkIGNsYWltcy4KICogY2xhaW1PYmplY3RzIC0gTGlzdDxDbGFpbT4gKDcsIDIpLgogKiAgICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIGRlZmF1bHQgc2VydmVyIHByb3ZpZGVkIGNsYWltcy4KICogcmVxdWVzdGVkQ2xhaW1zIC0gTWFwPFN0cmluZywgU2V0PFN0cmluZz4+ICg1KS4KICogICAgICAgICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIG5vdCBlbXB0eSBpZiB0aGUgcmVxdWVzdCBjb250YWlucyB0aGUgY2xhaW1zIHBhcmFtZXRlciBhbmQgdGhlIHNlcnZlciBoYXMgZW5hYmxlZAogKiAgICAgICAgICAgICAgICAgICBjbGFpbXNfcGFyYW1ldGVyX3N1cHBvcnRlZC4gQSBtYXAgb2YgdGhlIHJlcXVlc3RlZCBjbGFpbXMgdG8gcG9zc2libGUgdmFsdWVzLCBvdGhlcndpc2UgZW1wdHk7CiAqICAgICAgICAgICAgICAgICAgIHJlcXVlc3RlZCBjbGFpbXMgd2l0aCBubyByZXF1ZXN0ZWQgdmFsdWVzIHdpbGwgaGF2ZSBhIGtleSBidXQgbm8gdmFsdWUgaW4gdGhlIG1hcC4gQSBrZXkgd2l0aAogKiAgICAgICAgICAgICAgICAgICBhIHNpbmdsZSB2YWx1ZSBpbiBpdHMgU2V0ICg2KSBpbmRpY2F0ZXMgdGhhdCB0aGlzIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgc2hvdWxkIGJlIHJldHVybmVkLgogKiByZXF1ZXN0ZWRUeXBlZENsYWltcyAtIExpc3Q8Q2xhaW0+ICg3LCAyKS4KICogICAgICAgICAgICAgICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIHJlcXVlc3RlZCBjbGFpbXMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgUmVxdWVzdGVkIGNsYWltcyB3aXRoIG5vIHJlcXVlc3RlZCB2YWx1ZXMgd2lsbCBoYXZlIGEgY2xhaW0gd2l0aCBubyB2YWx1ZXMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgQSBjbGFpbSB3aXRoIGEgc2luZ2xlIHZhbHVlIGluZGljYXRlcyB0aGlzIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgc2hvdWxkIGJlIHJldHVybmVkLgogKiBjbGFpbXNMb2NhbGVzIC0gTGlzdDxTdHJpbmc+ICg3KS4KICogICAgICAgICAgICAgICAgIFRoZSB2YWx1ZXMgZnJvbSB0aGUgJ2NsYWltc19sb2NhbGVzJyBwYXJhbWV0ZXIuCiAqICAgICAgICAgICAgICAgICBTZWUgaHR0cHM6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjQ2xhaW1zTGFuZ3VhZ2VzQW5kU2NyaXB0cyBmb3IgdGhlIE9JREMgc3BlY2lmaWNhdGlvbiBkZXRhaWxzLgogKiByZXF1ZXN0UHJvcGVydGllcyAtIFVubW9kaWZpYWJsZSBNYXAgKDUpLgogKiAgICAgICAgICAgICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCBjb250YWlucyBhIG1hcCBvZiByZXF1ZXN0IHByb3BlcnRpZXM6CiAqICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFVyaSAtIFRoZSByZXF1ZXN0IFVSSS4KICogICAgICAgICAgICAgICAgICAgICByZWFsbSAtIFRoZSByZWFsbSB0aGF0IHRoZSByZXF1ZXN0IHJlbGF0ZXMgdG8uCiAqICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFBhcmFtcyAtIEEgbWFwIG9mIHRoZSByZXF1ZXN0IHBhcmFtcyBhbmQvb3IgcG9zdGVkIGRhdGEuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVhY2ggdmFsdWUgaXMgYSBsaXN0IG9mIG9uZSBvciBtb3JlIHByb3BlcnRpZXMuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsZWFzZSBub3RlIHRoYXQgdGhlc2Ugc2hvdWxkIGJlIGhhbmRsZWQgaW4gYWNjb3JkYW5jZSB3aXRoIE9XQVNQIGJlc3QgcHJhY3RpY2VzOgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwczovL293YXNwLm9yZy93d3ctY29tbXVuaXR5L3Z1bG5lcmFiaWxpdGllcy9VbnNhZmVfdXNlX29mX1JlZmxlY3Rpb24uCiAqIGNsaWVudFByb3BlcnRpZXMgLSBVbm1vZGlmaWFibGUgTWFwICg1KS4KICogICAgICAgICAgICAgICAgICAgIFByZXNlbnQgaWYgdGhlIGNsaWVudCBzcGVjaWZpZWQgaW4gdGhlIHJlcXVlc3Qgd2FzIGlkZW50aWZpZWQsIGNvbnRhaW5zIGEgbWFwIG9mIGNsaWVudCBwcm9wZXJ0aWVzOgogKiAgICAgICAgICAgICAgICAgICAgY2xpZW50SWQgLSBUaGUgY2xpZW50J3MgVVJJIGZvciB0aGUgcmVxdWVzdCBsb2NhbGUuCiAqICAgICAgICAgICAgICAgICAgICBhbGxvd2VkR3JhbnRUeXBlcyAtIExpc3Qgb2YgdGhlIGFsbG93ZWQgZ3JhbnQgdHlwZXMgKG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuR3JhbnRUeXBlKSBmb3IgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgIGFsbG93ZWRSZXNwb25zZVR5cGVzIC0gTGlzdCBvZiB0aGUgYWxsb3dlZCByZXNwb25zZSB0eXBlcyBmb3IgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgIGFsbG93ZWRTY29wZXMgLSBMaXN0IG9mIHRoZSBhbGxvd2VkIHNjb3BlcyBmb3IgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgIGN1c3RvbVByb3BlcnRpZXMgLSBBIG1hcCBvZiB0aGUgY3VzdG9tIHByb3BlcnRpZXMgb2YgdGhlIGNsaWVudC4KICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0cyBvciBtYXBzIHdpbGwgYmUgaW5jbHVkZWQgYXMgc3ViLW1hcHM7IGZvciBleGFtcGxlOgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbU1hcFtLZXkxXT1WYWx1ZTEgd2lsbCBiZSByZXR1cm5lZCBhcyBjdXN0b21NYXAgLT4gS2V5MSAtPiBWYWx1ZTEuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVG8gYWRkIGN1c3RvbSBwcm9wZXJ0aWVzIHRvIGEgY2xpZW50LCB1cGRhdGUgdGhlIEN1c3RvbSBQcm9wZXJ0aWVzIGZpZWxkCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gQU0gQ29uc29sZSA+IFJlYWxtIE5hbWUgPiBBcHBsaWNhdGlvbnMgPiBPQXV0aCAyLjAgPiBDbGllbnRzID4gQ2xpZW50IElEID4gQWR2YW5jZWQuCiAqIGlkZW50aXR5IC0gQU1JZGVudGl0eSAoMykuCiAqICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBpZGVudGl0eSBvZiB0aGUgcmVzb3VyY2Ugb3duZXIuCiAqIHNlc3Npb24gLSBTU09Ub2tlbiAoNCkuCiAqICAgICAgICAgICBQcmVzZW50IGlmIHRoZSByZXF1ZXN0IGNvbnRhaW5zIHRoZSBzZXNzaW9uIGNvb2tpZSwgdGhlIHVzZXIncyBzZXNzaW9uIG9iamVjdC4KICogc2NyaXB0TmFtZSAtIFN0cmluZyAocHJpbWl0aXZlKS4KICogICAgICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgZGlzcGxheSBuYW1lIG9mIHRoZSBzY3JpcHQuCiAqIGxvZ2dlciAtIEFsd2F5cyBwcmVzZW50LCB0aGUgIk9BdXRoMlByb3ZpZGVyIiBkZWJ1ZyBsb2dnZXIgaW5zdGFuY2U6CiAqICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuaHRtbCNzY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuCiAqICAgICAgICAgIENvcnJlc3BvbmRpbmcgZmlsZXMgd2lsbCBiZSBwcmVmaXhlZCB3aXRoOiBzY3JpcHRzLk9JRENfQ0xBSU1TLgogKiBodHRwQ2xpZW50IC0gSFRUUCBDbGllbnQgKDgpLgogKiAgICAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIHRoZSBIVFRQIENsaWVudCBpbnN0YW5jZToKICogICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1odHRwLWNsaWVudC5odG1sI3NjcmlwdGluZy1hcGktZ2xvYmFsLWh0dHAtY2xpZW50LgogKiAgICAgICAgICAgICAgSW4gb3JkZXIgdG8gdXNlIHRoZSBjbGllbnQsIHlvdSBtYXkgbmVlZCB0byBhZGQKICogICAgICAgICAgICAgIG9yZy5mb3JnZXJvY2suaHR0cC5DbGllbnQsCiAqICAgICAgICAgICAgICBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuKiwKICogICAgICAgICAgICAgIGFuZCBvcmcuZm9yZ2Vyb2NrLnV0aWwucHJvbWlzZS5Qcm9taXNlSW1wbAogKiAgICAgICAgICAgICAgdG8gdGhlIGFsbG93ZWQgSmF2YSBjbGFzc2VzIGluIHRoZSBzY3JpcHRpbmcgZW5naW5lIGNvbmZpZ3VyYXRpb24sIGFzIGRlc2NyaWJlZCBpbjoKICogICAgICAgICAgICAgIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHQtZW5naW5lLXNlY3VyaXR5Lmh0bWwKICoKICogUmV0dXJuIC0gYSBuZXcgVXNlckluZm9DbGFpbXMoTWFwPFN0cmluZywgT2JqZWN0PiB2YWx1ZXMsIE1hcDxTdHJpbmcsIExpc3Q8U3RyaW5nPj4gY29tcG9zaXRlU2NvcGVzKSAoMSkgb2JqZWN0LgogKiAgICAgICAgICBUaGUgcmVzdWx0IG9mIHRoZSBsYXN0IHN0YXRlbWVudCBpbiB0aGUgc2NyaXB0IGlzIHJldHVybmVkIHRvIHRoZSBzZXJ2ZXIuCiAqICAgICAgICAgIEN1cnJlbnRseSwgdGhlIEltbWVkaWF0ZWx5IEludm9rZWQgRnVuY3Rpb24gRXhwcmVzc2lvbiAoYWxzbyBrbm93biBhcyBTZWxmLUV4ZWN1dGluZyBBbm9ueW1vdXMgRnVuY3Rpb24pCiAqICAgICAgICAgIGlzIHRoZSBsYXN0IChhbmQgb25seSkgc3RhdGVtZW50IGluIHRoaXMgc2NyaXB0LCBhbmQgaXRzIHJldHVybiB2YWx1ZSB3aWxsIGJlY29tZSB0aGUgc2NyaXB0IHJlc3VsdC4KICogICAgICAgICAgRG8gbm90IHVzZSAicmV0dXJuIHZhcmlhYmxlIiBzdGF0ZW1lbnQgb3V0c2lkZSBvZiBhIGZ1bmN0aW9uIGRlZmluaXRpb24uCiAqICAgICAgICAgIFNlZSBSRVNVTFRTIHNlY3Rpb24gZm9yIGFkZGl0aW9uYWwgZGV0YWlscy4KICoKICogQ2xhc3MgcmVmZXJlbmNlOgogKiAoMSkgVXNlckluZm9DbGFpbXMgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb2F1dGgyL2NvcmUvVXNlckluZm9DbGFpbXMuaHRtbC4KICogKDIpIENsYWltIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbCkuCiAqICAgICAgICAgQW4gaW5zdGFuY2Ugb2Ygb3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltIGhhcyBtZXRob2RzIHRvIGFjY2VzcwogKiAgICAgICAgIHRoZSBjbGFpbSBuYW1lLCByZXF1ZXN0ZWQgdmFsdWVzLCBsb2NhbGUsIGFuZCB3aGV0aGVyIHRoZSBjbGFpbSBpcyBlc3NlbnRpYWwuCiAqICgzKSBBTUlkZW50aXR5IC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L2lkbS9BTUlkZW50aXR5Lmh0bWwuCiAqICg0KSBTU09Ub2tlbiAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3MvY29tL2lwbGFuZXQvc3NvL1NTT1Rva2VuLmh0bWwuCiAqICg1KSBNYXAgLSBodHRwczovL2RvY3Mub3JhY2xlLmNvbS9lbi9qYXZhL2phdmFzZS8xMS9kb2NzL2FwaS9qYXZhLmJhc2UvamF2YS91dGlsL0hhc2hNYXAuaHRtbCwKICogICAgICAgICAgIG9yIGh0dHBzOi8vZG9jcy5vcmFjbGUuY29tL2VuL2phdmEvamF2YXNlLzExL2RvY3MvYXBpL2phdmEuYmFzZS9qYXZhL3V0aWwvTGlua2VkSGFzaE1hcC5odG1sLgogKiAoNikgU2V0IC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9IYXNoU2V0Lmh0bWwuCiAqICg3KSBMaXN0IC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9BcnJheUxpc3QuaHRtbC4KICogKDgpIENsaWVudCAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9odHRwL0NsaWVudC5odG1sLgoqLwoKKGZ1bmN0aW9uICgpIHsKICAgIC8vIFNFVFVQCgogICAgLyoqCiAgICAgKiBDbGFpbSBwcm9jZXNzaW5nIHV0aWxpdGllcy4KICAgICAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHJldXNhYmxlIGZ1bmN0aW9ucyBmb3IgcHJvY2Vzc2luZyBjbGFpbXMuCiAgICAgKiBAc2VlIENMQUlNIFBST0NFU1NJTkcgVVRJTElUSUVTIHNlY3Rpb24gZm9yIGRldGFpbHMuCiAgICAgKi8KICAgIHZhciB1dGlscyA9IGdldFV0aWxzKCk7CgogICAgLy8gQ09ORklHVVJBVElPTiBBTkQgQ1VTVE9NSVpBVElPTgoKICAgIC8qKgogICAgICogT0F1dGggMi4wIHNjb3BlIHZhbHVlcyAoc2NvcGVzKSBjYW4gYmUgdXNlZCBieSB0aGUgQ2xpZW50IHRvIHJlcXVlc3QgT0lEQyBjbGFpbXMuCiAgICAgKgogICAgICogQ2FsbCB0aGlzIGNvbmZpZ3VyYXRpb24gbWV0aG9kLCBhbmQgcGFzcyBpbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQKICAgICAqIGFuIG9iamVjdCB0aGF0IG1hcHMgYSBzY29wZSB2YWx1ZSB0byBhbiBhcnJheSBvZiBjbGFpbSBuYW1lcwogICAgICogdG8gc3BlY2lmeSB3aGljaCBjbGFpbXMgbmVlZCB0byBiZSBwcm9jZXNzZWQgYW5kIHJldHVybmVkIGZvciB0aGUgcmVxdWVzdGVkIHNjb3Blcy4KICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI1Njb3BlQ2xhaW1zfQogICAgICogZm9yIHRoZSBzY29wZSB2YWx1ZXMgdGhhdCBjb3VsZCBiZSB1c2VkIHRvIHJlcXVlc3QgY2xhaW1zIGFzIGRlZmluZWQgaW4gdGhlIE9JREMgc3BlY2lmaWNhdGlvbi4KICAgICAqCiAgICAgKiBCZWxvdywgZmluZCBhIGRlZmF1bHQgY29uZmlndXJhdGlvbiB0aGF0IGlzIGV4cGVjdGVkIHRvIHdvcmsgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuCiAgICAgKgogICAgICogQ1VTVE9NSVpBVElPTgogICAgICogWW91IGNhbiBjaG9vc2UgdGhlIGNsYWltIG5hbWVzIHJldHVybmVkIGZvciBhIHNjb3BlLgogICAgICovCiAgICB1dGlscy5zZXRTY29wZUNsYWltc01hcCh7CiAgICAgICAgcHJvZmlsZTogWwogICAgICAgICAgICAnbmFtZScsCiAgICAgICAgICAgICdmYW1pbHlfbmFtZScsCiAgICAgICAgICAgICdnaXZlbl9uYW1lJywKICAgICAgICAgICAgJ3pvbmVpbmZvJywKICAgICAgICAgICAgJ2xvY2FsZScKICAgICAgICBdLAogICAgICAgIGVtYWlsOiBbJ2VtYWlsJ10sCiAgICAgICAgYWRkcmVzczogWydhZGRyZXNzJ10sCiAgICAgICAgcGhvbmU6IFsncGhvbmVfbnVtYmVyJ10KICAgIH0pOwoKICAgIC8qKgogICAgICogSW4gdGhpcyBzY3JpcHQsIGVhY2ggY2xhaW0KICAgICAqIGRlcml2ZWQgZnJvbSB0aGUgcmVxdWVzdGVkIHNjb3BlcywKICAgICAqIHByb3ZpZGVkIGJ5IHRoZSBhdXRob3JpemF0aW9uIHNlcnZlciwgYW5kCiAgICAgKiByZXF1ZXN0ZWQgYnkgdGhlIGNsaWVudCB2aWEgdGhlIGNsYWltcyBwYXJhbWV0ZXIKICAgICAqIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IGEgZnVuY3Rpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBjbGFpbSBuYW1lLgogICAgICoKICAgICAqIENhbGwgdGhpcyBjb25maWd1cmF0aW9uIG1ldGhvZCwgYW5kIHBhc3MgaW4gYXMgdGhlIGZpcnN0IGFyZ3VtZW50CiAgICAgKiBhbiBvYmplY3QgdGhhdCBtYXBzIGEgY2xhaW0gbmFtZSB0byBhIHJlc29sdmVyIGZ1bmN0aW9uLAogICAgICogd2hpY2ggd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGV4ZWN1dGVkIGZvciBlYWNoIGNsYWltIHByb2Nlc3NlZCBieSB0aGUgc2NyaXB0LgogICAgICoKICAgICAqIFRoZSBjbGFpbSByZXNvbHZlciBmdW5jdGlvbiB3aWxsIHJlY2VpdmUgdGhlIHJlcXVlc3RlZCBjbGFpbSBpbmZvcm1hdGlvbgogICAgICogaW4gYW4gaW5zdGFuY2Ugb2Ygb3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltIGFzIHRoZSBmaXJzdCBhcmd1bWVudC4KICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vcGVuaWRjb25uZWN0L0NsYWltLmh0bWx9CiAgICAgKiBmb3IgZGV0YWlscyBvbiB0aGUgQ2xhaW0gY2xhc3MuCiAgICAgKgogICAgICogSWYgdGhlIGNsYWltIHJlc29sdmVyIGZ1bmN0aW9uIHJldHVybnMgYSB2YWx1ZSwKICAgICAqIG90aGVyIHRoYW4gdW5kZWZpbmVkIG9yIG51bGwsCiAgICAgKiB0aGUgY2xhaW0gd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgc2NyaXB0J3MgcmVzdWx0cy4KICAgICAqCiAgICAgKiBUaGUgQ2xhaW0gaW5zdGFuY2UgcHJvdmlkZXMgbWV0aG9kcyB0byBjaGVjawogICAgICogd2hhdCB0aGUgbmFtZSBvZiB0aGUgY2xhaW0gaXMsCiAgICAgKiB3aGljaCB2YWx1ZXMgdGhlIGNsYWltIHJlcXVlc3QgY29udGFpbnMsCiAgICAgKiB3aGV0aGVyIHRoZSBjbGFpbSBpcyBlc3NlbnRpYWwsIGFuZAogICAgICogd2hpY2ggbG9jYWxlIHRoZSBjbGFpbSBpcyBhc3NvY2lhdGVkIHdpdGguCiAgICAgKiBUaGUgcmVzb2x2ZXIgZnVuY3Rpb24gY2FuIGNvbnNpZGVyIHRoaXMgaW5mb3JtYXRpb24gd2hlbiBjb21wdXRpbmcgYW5kIHJldHVybmluZyB0aGUgY2xhaW0gdmFsdWUuCiAgICAgKgogICAgICogQmVsb3csIGZpbmQgYSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gdGhhdCBpcyBleHBlY3RlZCB0byB3b3JrIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LgogICAgICogQSByZXVzYWJsZSBmdW5jdGlvbiwgdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKFN0cmluZyBhdHRyaWJ1dGUtbmFtZSksCiAgICAgKiBpcyBjYWxsZWQgdG8gcmV0dXJuIGEgY2xhaW0gcmVzb2x2ZXIgZnVuY3Rpb24gYmFzZWQgb24gYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlLgogICAgICogQHNlZSBDTEFJTSBSRVNPTFZFUlMgc2VjdGlvbiBmb3IgdGhlIGltcGxlbWVudGF0aW9uIGRldGFpbHMgYW5kIGV4YW1wbGVzLgogICAgICogRm9yIHRoZSBhZGRyZXNzIGNsYWltLCBhbiBleGFtcGxlIG9mIGEgY2xhaW0gcmVzb2x2ZXIgdGhhdCB1c2VzIGFub3RoZXIgY2xhaW0gcmVzb2x2ZXIgaXMgcHJvdmlkZWQuCiAgICAgKgogICAgICogQ1VTVE9NSVpBVElPTgogICAgICogWW91IGNhbiByZXVzZSB0aGUgcHJlZGVmaW5lZCB1dGlscyBtZXRob2RzIHdpdGggeW91ciBjdXN0b20gYXJndW1lbnRzLgogICAgICogWW91IGNhbiBhbHNvIHNwZWNpZnkgYSBjdXN0b20gcmVzb2x2ZXIgZnVuY3Rpb24gZm9yIGEgY2xhaW0gbmFtZSwKICAgICAqIHRoYXQgd2lsbCBjb21wdXRlIGFuZCByZXR1cm4gdGhlIGNsYWltIHZhbHVl4oCUYXMgc2hvd24gaW4gdGhlIGNvbW1lbnRlZCBvdXQgZXhhbXBsZSBiZWxvdy4KICAgICAqLwogICAgdXRpbHMuc2V0Q2xhaW1SZXNvbHZlcnMoewogICAgICAgIC8qCiAgICAgICAgLy8gQW4gZXhhbXBsZSBvZiBhIHNpbXBsZSBjbGFpbSByZXNvbHZlciBmdW5jdGlvbiB0aGF0IGlzIGRlZmluZWQgZm9yIGEgY2xhaW0KICAgICAgICAvLyBkaXJlY3RseSBpbiB0aGUgY29uZmlndXJhdGlvbiBvYmplY3Q6CiAgICAgICAgY3VzdG9tLWNsYWltLW5hbWU6IGZ1bmN0aW9uIChyZXF1ZXN0ZWRDbGFpbSkgewogICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UsIGluaXRpYWxseSwgdGhlIGNsYWltIHZhbHVlIGNvbWVzIHN0cmFpZ2h0IGZyb20gYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlIHZhbHVlOgogICAgICAgICAgICB2YXIgY2xhaW1WYWx1ZSA9IGlkZW50aXR5LmdldEF0dHJpYnV0ZSgnY3VzdG9tLWF0dHJpYnV0ZS1uYW1lJykudG9BcnJheSgpWzBdCgogICAgICAgICAgICAvLyBPcHRpb25hbGx5LCBwcm92aWRlIGFkZGl0aW9uYWwgbG9naWMgZm9yIHByb2Nlc3NpbmcgKGZpbHRlcmluZywgZm9ybWF0dGluZywgZXRjLikgdGhlIGNsYWltIHZhbHVlLgogICAgICAgICAgICAvLyBZb3UgY2FuIHVzZToKICAgICAgICAgICAgLy8gcmVxdWVzdGVkQ2xhaW0uZ2V0TmFtZSgpCiAgICAgICAgICAgIC8vIHJlcXVlc3RlZENsYWltLmdldFZhbHVlcygpCiAgICAgICAgICAgIC8vIHJlcXVlc3RlZENsYWltLmdldExvY2FsZSgpCiAgICAgICAgICAgIC8vIHJlcXVlc3RlZENsYWltLmlzRXNzZW50aWFsKCkKCiAgICAgICAgICAgIHJldHVybiBjbGFpbVZhbHVlCiAgICAgICAgfSwKICAgICAgICAqLwogICAgICAgIC8qKgogICAgICAgICAqIFRoZSB1c2Ugb2YgdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyIHNob3dzIGhvdwogICAgICAgICAqIGFuIGFyZ3VtZW50IHBhc3NlZCB0byBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNsYWltIHJlc29sdmVyCiAgICAgICAgICogYmVjb21lcyBhdmFpbGFibGUgdG8gdGhlIHJlc29sdmVyIGZ1bmN0aW9uICh2aWEgaXRzIGxleGljYWwgY29udGV4dCkuCiAgICAgICAgICovCiAgICAgICAgbmFtZTogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdjbicpLAogICAgICAgIGZhbWlseV9uYW1lOiB1dGlscy5nZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXIoJ3NuJyksCiAgICAgICAgZ2l2ZW5fbmFtZTogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdnaXZlbm5hbWUnKSwKICAgICAgICB6b25laW5mbzogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdwcmVmZXJyZWR0aW1lem9uZScpLAogICAgICAgIGxvY2FsZTogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdwcmVmZXJyZWRsb2NhbGUnKSwKICAgICAgICBlbWFpbDogdXRpbHMuZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyKCdtYWlsJyksCiAgICAgICAgYWRkcmVzczogdXRpbHMuZ2V0QWRkcmVzc0NsYWltUmVzb2x2ZXIoCiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBUaGUgcGFzc2VkIGluIHVzZXIgcHJvZmlsZSBjbGFpbSByZXNvbHZlciBmdW5jdGlvbgogICAgICAgICAgICAgKiBjYW4gYmUgdXNlZCBieSB0aGUgYWRkcmVzcyBjbGFpbSByZXNvbHZlciBmdW5jdGlvbgogICAgICAgICAgICAgKiB0byBvYnRhaW4gdGhlIGNsYWltIHZhbHVlIHRvIGJlIGZvcm1hdHRlZCBhcyBwZXIgdGhlIE9JREMgc3BlY2lmaWNhdGlvbjoKICAgICAgICAgICAgICogQHNlZSBodHRwczovL29wZW5pZC5uZXQvc3BlY3Mvb3BlbmlkLWNvbm5lY3QtY29yZS0xXzAuaHRtbCNBZGRyZXNzQ2xhaW0uCiAgICAgICAgICAgICAqLwogICAgICAgICAgICB1dGlscy5nZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXIoJ3Bvc3RhbGFkZHJlc3MnKQogICAgICAgICksCiAgICAgICAgcGhvbmVfbnVtYmVyOiB1dGlscy5nZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXIoJ3RlbGVwaG9uZW51bWJlcicpCiAgICB9KTsKCiAgICAvLyBDTEFJTSBQUk9DRVNTSU5HIFVUSUxJVElFUwoKICAgIC8qKgogICAgICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgcmV1c2FibGUgY2xhaW0gcHJvY2Vzc2luZyB1dGlsaXRpZXMuCiAgICAgKiBAc2VlIFBVQkxJQyBNRVRIT0RTIHNlY3Rpb24gYW5kIHRoZSByZXR1cm4gc3RhdGVtZW50IGZvciB0aGUgbGlzdCBvZiBleHBvcnRlZCBmdW5jdGlvbnMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldFV0aWxzICgpIHsKICAgICAgICAvLyBJTVBPUlQgSkFWQQoKICAgICAgICAvKioKICAgICAgICAgKiBQcm92aWRlcyBKYXZhIHNjcmlwdGluZyBmdW5jdGlvbmFsaXR5LgogICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTW96aWxsYS9Qcm9qZWN0cy9SaGluby9TY3JpcHRpbmdfSmF2YSNqYXZhaW1wb3J0ZXJfY29uc3RydWN0b3J9LgogICAgICAgICAqLwogICAgICAgIHZhciBmckphdmEgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgICAgIG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuZXhjZXB0aW9ucy5JbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbiwKICAgICAgICAgICAgb3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5Vc2VySW5mb0NsYWltcywKICAgICAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltLAoKICAgICAgICAgICAgamF2YS51dGlsLkxpbmtlZEhhc2hNYXAsCiAgICAgICAgICAgIGphdmEudXRpbC5BcnJheUxpc3QKICAgICAgICApOwoKICAgICAgICAvLyBTRVQgVVAgQ09ORklHVVJBVElPTgoKICAgICAgICAvKioKICAgICAgICAgKiBQbGFjZWhvbGRlciBmb3IgYSBjb25maWd1cmF0aW9uIG9wdGlvbiB0aGF0IGNvbnRhaW5zCiAgICAgICAgICogYW4gb2JqZWN0IHRoYXQgbWFwcyB0aGUgc3VwcG9ydGVkIHNjb3BlIHZhbHVlcyAoc2NvcGVzKQogICAgICAgICAqIGFuZCB0aGUgY29ycmVzcG9uZGluZyBjbGFpbSBuYW1lcyBmb3IgZWFjaCBzY29wZSB2YWx1ZS4KICAgICAgICAgKi8KICAgICAgICB2YXIgc2NvcGVDbGFpbXNNYXA7CgogICAgICAgIC8qKgogICAgICAgICAqIFBsYWNlaG9sZGVyIGZvciBhIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHRoYXQgY29udGFpbnMKICAgICAgICAgKiBhbiBvYmplY3QgdGhhdCBtYXBzIHRoZSBzdXBwb3J0ZWQgY2xhaW0gbmFtZXMKICAgICAgICAgKiBhbmQgdGhlIHJlc29sdmVyIGZ1bmN0aW9ucyByZXR1cm5pbmcgdGhlIGNsYWltIHZhbHVlLgogICAgICAgICAqLwogICAgICAgIHZhciBjbGFpbVJlc29sdmVyczsKCiAgICAgICAgLyoqCiAgICAgICAgICogQSAocHVibGljKSBtZXRob2QgdGhhdCBhY2NlcHRzIGFuIG9iamVjdCB0aGF0IG1hcHMgdGhlIHN1cHBvcnRlZCBzY29wZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNsYWltIG5hbWVzLAogICAgICAgICAqIGFuZCBhc3NpZ25zIGl0IHRvIGEgKHByaXZhdGUpIHZhcmlhYmxlIHRoYXQgc2VydmVzIGFzIGEgY29uZmlndXJhdGlvbiBvcHRpb24uCiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyAtIEFuIG9iamVjdCB0aGF0IG1hcHMgZWFjaCBzdXBwb3J0ZWQgc2NvcGUgdmFsdWUgdG8gYW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMsCiAgICAgICAgICogaW4gb3JkZXIgdG8gc3BlY2lmeSB3aGljaCBjbGFpbXMgbmVlZCB0byBiZSBwcm9jZXNzZWQgZm9yIHRoZSByZXF1ZXN0ZWQgc2NvcGVzLgogICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI1Njb3BlQ2xhaW1zfSBmb3IgZGV0YWlscy4KICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbcGFyYW1zLnByb2ZpbGVdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIHByb2ZpbGUgc2NvcGUgaXMgcmVxdWVzdGVkLgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtwYXJhbXMuZW1haWxdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIGVtYWlsIHNjb3BlIGlzIHJlcXVlc3RlZC4KICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbcGFyYW1zLmFkZHJlc3NdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIGFkZHJlc3Mgc2NvcGUgaXMgcmVxdWVzdGVkLgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtwYXJhbXMucGhvbmVdIC0gQW4gYXJyYXkgb2YgY2xhaW0gbmFtZXMgdG8gYmUgcmV0dXJuZWQgaWYgdGhlIHBob25lIHNjb3BlIGlzIHJlcXVlc3RlZC4KICAgICAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHNldFNjb3BlQ2xhaW1zTWFwKHBhcmFtcykgewogICAgICAgICAgICBzY29wZUNsYWltc01hcCA9IHBhcmFtczsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIEEgKHB1YmxpYykgbWV0aG9kIHRoYXQgYWNjZXB0cyBhbiBvYmplY3QgdGhhdCBtYXBzIHRoZSBzdXBwb3J0ZWQgY2xhaW0gbmFtZXMKICAgICAgICAgKiBhbmQgdGhlIHJlc29sdmVyIGZ1bmN0aW9ucyByZXR1cm5pbmcgdGhlIGNsYWltIHZhbHVlLAogICAgICAgICAqIGFuZCBhc3NpZ25zIGl0IHRvIGEgKHByaXZhdGUpIHZhcmlhYmxlIHRoYXQgc2VydmVzIGFzIGEgY29uZmlndXJhdGlvbiBvcHRpb24uCiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyAtIEFuIG9iamVjdCB0aGF0IG1hcHMKICAgICAgICAgKiBlYWNoIHN1cHBvcnRlZCBjbGFpbSBuYW1lIHRvIGEgZnVuY3Rpb24gdGhhdCBjb21wdXRlcyBhbmQgcmV0dXJucyB0aGUgY2xhaW0gdmFsdWUuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gc2V0Q2xhaW1SZXNvbHZlcnMocGFyYW1zKSB7CiAgICAgICAgICAgIGNsYWltUmVzb2x2ZXJzID0gcGFyYW1zOwogICAgICAgIH0KCiAgICAgICAgLy8gQ0xBSU0gUkVTT0xWRVJTCgogICAgICAgIC8qKgogICAgICAgICAqIENsYWltIHJlc29sdmVycyBhcmUgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIGEgY2xhaW0gdmFsdWUuCiAgICAgICAgICogQHBhcmFtIHsqfQogICAgICAgICAqIEByZXR1cm5zIHsqfQogICAgICAgICAqLwoKICAgICAgICAvKioKICAgICAgICAgKiBEZWZpbmVzIGEgY2xhaW0gcmVzb2x2ZXIgYmFzZWQgb24gYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlLgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVOYW1lIC0gTmFtZSBvZiB0aGUgdXNlciBwcm9maWxlIGF0dHJpYnV0ZS4KICAgICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb259IEEgZnVuY3Rpb24gdGhhdCB3aWxsIGRldGVybWluZSB0aGUgY2xhaW0gdmFsdWUKICAgICAgICAgKiBiYXNlZCBvbiB0aGUgdXNlciBwcm9maWxlIGF0dHJpYnV0ZSBhbmQgdGhlIChyZXF1ZXN0ZWQpIGNsYWltIHByb3BlcnRpZXMuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlclByb2ZpbGVDbGFpbVJlc29sdmVyIChhdHRyaWJ1dGVOYW1lKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBSZXNvbHZlcyBhIGNsYWltIHdpdGggYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlIHZhbHVlLgogICAgICAgICAgICAgKiBSZXR1cm5zIHVuZGVmaW5lZCBpZiB0aGUgaWRlbnRpdHkgYXR0cmlidXRlIGlzIG5vdCBwb3B1bGF0ZWQsCiAgICAgICAgICAgICAqIE9SIGlmIHRoZSBjbGFpbSBoYXMgcmVxdWVzdGVkIHZhbHVlcyB0aGF0IGRvIG5vdCBjb250YWluIHRoZSBpZGVudGl0eSBhdHRyaWJ1dGUgdmFsdWUuCiAgICAgICAgICAgICAqIEFUVEVOVElPTjogdGhlIGFmb3JlbWVudGlvbmVkIGNvbXBhcmlzb24gaXMgY2FzZS1zZW5zaXRpdmUuCiAgICAgICAgICAgICAqIEBwYXJhbSB7b3JnLmZvcmdlcm9jay5vcGVuaWRjb25uZWN0LkNsYWltfSBjbGFpbQogICAgICAgICAgICAgKiBBbiBvYmplY3QgdGhhdCBwcm92aWRlcyBtZXRob2RzIHRvIG9idGFpbiBpbmZvcm1hdGlvbi9yZXF1aXJlbWVudHMgYXNzb2NpYXRlZCB3aXRoIGEgY2xhaW0uCiAgICAgICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vcGVuaWRjb25uZWN0L0NsYWltLmh0bWx9IGZvciBkZXRhaWxzLgogICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfEhhc2hTZXR8dW5kZWZpbmVkfQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZUNsYWltKGNsYWltKSB7CiAgICAgICAgICAgICAgICB2YXIgdXNlclByb2ZpbGVWYWx1ZTsKCiAgICAgICAgICAgICAgICBpZiAoaWRlbnRpdHkpIHsKICAgICAgICAgICAgICAgICAgICB1c2VyUHJvZmlsZVZhbHVlID0gZ2V0Q2xhaW1WYWx1ZUZyb21TZXQoY2xhaW0sIGlkZW50aXR5LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSk7CgogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyUHJvZmlsZVZhbHVlICYmICF1c2VyUHJvZmlsZVZhbHVlLmlzRW1wdHkoKSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNsYWltLmdldFZhbHVlcygpIHx8IGNsYWltLmdldFZhbHVlcygpLmlzRW1wdHkoKSB8fCBjbGFpbS5nZXRWYWx1ZXMoKS5jb250YWlucyh1c2VyUHJvZmlsZVZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJQcm9maWxlVmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiByZXNvbHZlQ2xhaW07CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBSZXR1cm5zIGFuIGFkZHJlc3MgY2xhaW0gcmVzb2x2ZXIgYmFzZWQgb24gYSBjbGFpbSB2YWx1ZSBvYnRhaW5lZCB3aXRoIGFub3RoZXIgY2xhaW0gcmVzb2x2ZXIuCiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcmVzb2x2ZUNsYWltIC0gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjbGFpbSB2YWx1ZS4KICAgICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb259IEEgZnVuY3Rpb24gdGhhdCB3aWxsIGFjY2VwdCBhIGNsYWltIGFzIGFuIGFyZ3VtZW50LAogICAgICAgICAqIHJ1biB0aGUgY2xhaW0gcmVzb2x2ZXIgZnVuY3Rpb24gZm9yIHRoZSBjbGFpbSBhbmQgb2J0YWluIHRoZSBjbGFpbSB2YWx1ZSwKICAgICAgICAgKiBhbmQgYXBwbHkgYWRkaXRpb25hbCBmb3JtYXR0aW5nIHRvIHRoZSB2YWx1ZSBiZWZvcmUgcmV0dXJuaW5nIGl0LgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGdldEFkZHJlc3NDbGFpbVJlc29sdmVyIChyZXNvbHZlQ2xhaW0pIHsKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIENyZWF0ZXMgYW4gYWRkcmVzcyBjbGFpbSBvYmplY3QgZnJvbSBhIHZhbHVlIHJldHVybmVkIGJ5IGEgY2xhaW0gcmVzb2x2ZXIsCiAgICAgICAgICAgICAqIGFuZCByZXR1cm5zIHRoZSBhZGRyZXNzIGNsYWltIG9iamVjdCBhcyB0aGUgY2xhaW0gdmFsdWUuCiAgICAgICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI0FkZHJlc3NDbGFpbX0uCiAgICAgICAgICAgICAqIFRoZSBjbGFpbSB2YWx1ZSBpcyBvYnRhaW5lZCB3aXRoIGEgY2xhaW0gcmVzb2x2aW5nIGZ1bmN0aW9uIGF2YWlsYWJsZSBmcm9tIHRoZSBjbG9zdXJlLgogICAgICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgICAgICogQW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgbWV0aG9kcyB0byBvYnRhaW4gaW5mb3JtYXRpb24vcmVxdWlyZW1lbnRzIGFzc29jaWF0ZWQgd2l0aCBhIGNsYWltLgogICAgICAgICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb3BlbmlkY29ubmVjdC9DbGFpbS5odG1sfSBmb3IgZGV0YWlscy4KICAgICAgICAgICAgICogQHJldHVybnMge2phdmEudXRpbC5MaW5rZWRIYXNoTWFwfHVuZGVmaW5lZH0gVGhlIGFkZHJlc3MgY2xhaW0gb2JqZWN0IGNyZWF0ZWQgZnJvbSBhIGNsYWltIHZhbHVlLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZUFkZHJlc3NDbGFpbShjbGFpbSkgewogICAgICAgICAgICAgICAgdmFyIGNsYWltVmFsdWUgPSByZXNvbHZlQ2xhaW0oY2xhaW0pOwogICAgICAgICAgICAgICAgdmFyIGFkZHJlc3NPYmplY3Q7CgogICAgICAgICAgICAgICAgaWYgKGlzQ2xhaW1WYWx1ZVZhbGlkKGNsYWltVmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgICAgYWRkcmVzc09iamVjdCA9IG5ldyBmckphdmEuTGlua2VkSGFzaE1hcCgpOwoKICAgICAgICAgICAgICAgICAgICBhZGRyZXNzT2JqZWN0LnB1dCgnZm9ybWF0dGVkJywgY2xhaW1WYWx1ZSk7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBhZGRyZXNzT2JqZWN0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUFkZHJlc3NDbGFpbTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIFJldHVybnMgYW4gZXNzZW50aWFsIGNsYWltIHJlc29sdmVyIGJhc2VkIG9uIGEgY2xhaW0gdmFsdWUgb2J0YWluZWQgd2l0aCBhbm90aGVyIGNsYWltIHJlc29sdmVyLgogICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHJlc29sdmVDbGFpbSAtIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY2xhaW0gdmFsdWUuCiAgICAgICAgICogQHJldHVybnMge2Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBhY2NlcHQgYSBjbGFpbSBhcyBhbiBhcmd1bWVudCwKICAgICAgICAgKiBydW4gdGhlIGNsYWltIHJlc29sdmVyIGZ1bmN0aW9uIGZvciB0aGUgY2xhaW0gYW5kIG9idGFpbiB0aGUgY2xhaW0gdmFsdWUsCiAgICAgICAgICogYW5kIGFwcGx5IGFkZGl0aW9uYWwgbG9naWMgZm9yIGVzc2VudGlhbCBjbGFpbXMuCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZ2V0RXNzZW50aWFsQ2xhaW1SZXNvbHZlciAocmVzb2x2ZUNsYWltKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBSZXR1cm5zIGEgY2xhaW0gdmFsdWUgb3IgdGhyb3dzIGFuIGVycm9yLgogICAgICAgICAgICAgKiBUaGUgY2xhaW0gdmFsdWUgaXMgb2J0YWluZWQgd2l0aCBhIGNsYWltIHJlc29sdmluZyBmdW5jdGlvbiBhdmFpbGFibGUgZnJvbSB0aGUgY2xvc3VyZS4KICAgICAgICAgICAgICogVGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiB0aGUgY2xhaW0gaXMgZXNzZW50aWFsIGFuZCBubyB2YWx1ZSBpcyByZXR1cm5lZCBmb3IgdGhlIGNsYWltLgogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiBVc2Ugb2YgdGhpcyByZXNvbHZlciBpcyBvcHRpb25hbC4KICAgICAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjSW5kaXZpZHVhbENsYWltc1JlcXVlc3RzfSBzdGF0aW5nOgogICAgICAgICAgICAgKiAiTm90ZSB0aGF0IGV2ZW4gaWYgdGhlIENsYWltcyBhcmUgbm90IGF2YWlsYWJsZSBiZWNhdXNlIHRoZSBFbmQtVXNlciBkaWQgbm90IGF1dGhvcml6ZSB0aGVpciByZWxlYXNlIG9yIHRoZXkgYXJlIG5vdCBwcmVzZW50LAogICAgICAgICAgICAgKiB0aGUgQXV0aG9yaXphdGlvbiBTZXJ2ZXIgTVVTVCBOT1QgZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiBDbGFpbXMgYXJlIG5vdCByZXR1cm5lZCwgd2hldGhlciB0aGV5IGFyZSBFc3NlbnRpYWwgb3IgVm9sdW50YXJ5LAogICAgICAgICAgICAgKiB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZCBpbiB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHNwZWNpZmljIGNsYWltLiIKICAgICAgICAgICAgICoKICAgICAgICAgICAgICogQHBhcmFtIHtvcmcuZm9yZ2Vyb2NrLm9wZW5pZGNvbm5lY3QuQ2xhaW19IGNsYWltCiAgICAgICAgICAgICAqIEFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIG1ldGhvZHMgdG8gb2J0YWluIGluZm9ybWF0aW9uL3JlcXVpcmVtZW50cyBhc3NvY2lhdGVkIHdpdGggYSBjbGFpbS4KICAgICAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbH0gZm9yIGRldGFpbHMuCiAgICAgICAgICAgICAqIEByZXR1cm5zIHsqfQogICAgICAgICAgICAgKiBAdGhyb3dzIHtvcmcuZm9yZ2Vyb2NrLm9hdXRoMi5jb3JlLmV4Y2VwdGlvbnMuSW52YWxpZFJlcXVlc3RFeGNlcHRpb259CiAgICAgICAgICAgICAqLwogICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlRXNzZW50aWFsQ2xhaW0oY2xhaW0pIHsKICAgICAgICAgICAgICAgIHZhciBjbGFpbVZhbHVlID0gcmVzb2x2ZUNsYWltKGNsYWltKTsKCiAgICAgICAgICAgICAgICBpZiAoY2xhaW0uaXNFc3NlbnRpYWwoKSAmJiAhaXNDbGFpbVZhbHVlVmFsaWQoY2xhaW1WYWx1ZSkpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZnJKYXZhLkludmFsaWRSZXF1ZXN0RXhjZXB0aW9uKCdDb3VsZCBub3QgcHJvdmlkZSB2YWx1ZSBmb3IgZXNzZW50aWFsIGNsYWltOiAnICsgY2xhaW0uZ2V0TmFtZSgpKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1WYWx1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVFc3NlbnRpYWxDbGFpbTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIFByb3ZpZGVzIGRlZmF1bHQgcmVzb2x1dGlvbiBmb3IgYSBjbGFpbS4KICAgICAgICAgKiBVc2UgaXQgaWYgYSBjbGFpbS1zcGVjaWZpYyByZXNvbHZlciBpcyBub3QgZGVmaW5lZCBpbiB0aGUgY29uZmlndXJhdGlvbi4KICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgKiBBbiBvYmplY3QgdGhhdCBwcm92aWRlcyBtZXRob2RzIHRvIG9idGFpbiBpbmZvcm1hdGlvbi9yZXF1aXJlbWVudHMgYXNzb2NpYXRlZCB3aXRoIGEgY2xhaW0uCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbH0gZm9yIGRldGFpbHMuCiAgICAgICAgICogQHJldHVybnMgeyp9IEEgc2luZ2xlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNsYWltLgogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIHJlc29sdmVBbnlDbGFpbSAoY2xhaW0pIHsKICAgICAgICAgICAgaWYgKGNsYWltLmdldFZhbHVlcygpLnNpemUoKSA9PT0gMSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGNsYWltLmdldFZhbHVlcygpLnRvQXJyYXkoKVswXTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gVVRJTElUSUVTCgogICAgICAgIC8qKgogICAgICAgICAqIFJldHVybnMgY2xhaW0gdmFsdWUgZnJvbSBhIHNldC4KICAgICAgICAgKiBJZiB0aGUgc2V0IGNvbnRhaW5zIGEgc2luZ2xlIHZhbHVlLCByZXR1cm5zIHRoZSB2YWx1ZS4KICAgICAgICAgKiBJZiB0aGUgc2V0IGNvbnRhaW5zIG11bHRpcGxlIHZhbHVlcywgcmV0dXJucyB0aGUgc2V0LgogICAgICAgICAqIE90aGVyd2lzZSwgcmV0dXJucyB1bmRlZmluZWQuCiAgICAgICAgICoKICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgKiBBbiBvYmplY3QgdGhhdCBwcm92aWRlcyBtZXRob2RzIHRvIG9idGFpbiBpbmZvcm1hdGlvbi9yZXF1aXJlbWVudHMgYXNzb2NpYXRlZCB3aXRoIGEgY2xhaW0uCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29wZW5pZGNvbm5lY3QvQ2xhaW0uaHRtbH0gZm9yIGRldGFpbHMuCiAgICAgICAgICogQHBhcmFtIHtqYXZhLnV0aWwuSGFzaFNldH0gc2V0IFRoZSBzZXTigJRmb3IgZXhhbXBsZSwgYSB1c2VyIHByb2ZpbGUgYXR0cmlidXRlIHZhbHVlLgogICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd8amF2YS51dGlsLkhhc2hTZXR8dW5kZWZpbmVkfQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGdldENsYWltVmFsdWVGcm9tU2V0IChjbGFpbSwgc2V0KSB7CiAgICAgICAgICAgIGlmIChzZXQgJiYgc2V0LnNpemUoKSkgewogICAgICAgICAgICAgICAgaWYgKHNldC5zaXplKCkgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2V0LnRvQXJyYXkoKVswXTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChsb2dnZXIud2FybmluZ0VuYWJsZWQoKSkgewogICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcoJ09JREMgQ2xhaW1zIHNjcmlwdC4gR290IGFuIGVtcHR5IHNldCBmb3IgY2xhaW06ICcgKyBjbGFpbS5nZXROYW1lKCkpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpc0NsYWltVmFsdWVWYWxpZCAoY2xhaW1WYWx1ZSkgewogICAgICAgICAgICBpZiAodHlwZW9mIGNsYWltVmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IGNsYWltVmFsdWUgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICAvLyBDTEFJTSBQUk9DRVNTSU5HCgogICAgICAgIC8qKgogICAgICAgICAqIENvbnN0cnVjdHMgYW5kIHJldHVybnMgYW4gb2JqZWN0IHBvcHVsYXRlZCB3aXRoIHRoZSBjb21wdXRlZCBjbGFpbSB2YWx1ZXMKICAgICAgICAgKiBhbmQgdGhlIHJlcXVlc3RlZCBzY29wZXMgbWFwcGVkIHRvIHRoZSBjbGFpbSBuYW1lcy4KICAgICAgICAgKiBAcmV0dXJucyB7b3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5Vc2VySW5mb0NsYWltc30gVGhlIG9iamVjdCB0byBiZSByZXR1cm5lZCB0byB0aGUgYXV0aG9yaXphdGlvbiBzZXJ2ZXIuCiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29hdXRoMi9jb3JlL1VzZXJJbmZvQ2xhaW1zLmh0bWx9LgogICAgICAgICAqIEBzZWUgUkVTVUxUUyBzZWN0aW9uIGZvciB0aGUgdXNlIG9mIHRoaXMgZnVuY3Rpb24uCiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gZ2V0VXNlckluZm9DbGFpbXMgKCkgewogICAgICAgICAgICByZXR1cm4gbmV3IGZySmF2YS5Vc2VySW5mb0NsYWltcyhnZXRDb21wdXRlZENsYWltcygpLCBnZXRDb21wb3NpdGVTY29wZXMoKSk7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBDcmVhdGVzIGEgbWFwIG9mIChyZXF1ZXN0ZWQpIGNsYWltIG5hbWVzIHBvcHVsYXRlZCB3aXRoIHRoZSBjb21wdXRlZCBjbGFpbSB2YWx1ZXMuCiAgICAgICAgICogQHJldHVybnMge2phdmEudXRpbC5MaW5rZWRIYXNoTWFwfQogICAgICAgICAqIEEgbWFwIG9mIHRoZSByZXF1ZXN0ZWQgY2xhaW0gbmFtZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNsYWltIHZhbHVlcy4KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBnZXRDb21wdXRlZENsYWltcyAoKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBDcmVhdGVzIGEgY29tcGxldGUgbGlzdCBvZiBjbGFpbSBvYmplY3RzIGZyb206CiAgICAgICAgICAgICAqIHRoZSBjbGFpbXMgZGVyaXZlZCBmcm9tIHRoZSBzY29wZXMsCiAgICAgICAgICAgICAqIHRoZSBjbGFpbXMgcHJvdmlkZWQgYnkgdGhlIGF1dGhvcml6YXRpb24gc2VydmVyLAogICAgICAgICAgICAgKiBhbmQgdGhlIGNsYWltcyByZXF1ZXN0ZWQgYnkgdGhlIGNsaWVudC4KICAgICAgICAgICAgICogQHJldHVybnMge2phdmEudXRpbC5BcnJheUxpc3R9CiAgICAgICAgICAgICAqIFJldHVybnMgYSBjb21wbGV0ZSBsaXN0IG9mIG9yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbSBvYmplY3RzIGF2YWlsYWJsZSB0byB0aGUgc2NyaXB0LgogICAgICAgICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb3BlbmlkY29ubmVjdC9DbGFpbS5odG1sfSBmb3IgdGhlIGNsYWltIG9iamVjdCBkZXRhaWxzLgogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q2xhaW1zKCkgewogICAgICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBjbGFpbSBvYmplY3RzIGZvciB0aGUgcmVxdWVzdGVkIHNjb3Blcy4KICAgICAgICAgICAgICAgICAqIFVzZXMgdGhlIHNjb3BlQ2xhaW1zTWFwIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHRvIGRlcml2ZSB0aGUgY2xhaW0gbmFtZXM7CiAgICAgICAgICAgICAgICAgKiBubyBvdGhlciBwcm9wZXJ0aWVzIG9mIGEgY2xhaW0gZGVyaXZlZCBmcm9tIGEgc2NvcGUgYXJlIHBvcHVsYXRlZC4KICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtqYXZhLnV0aWwuQXJyYXlMaXN0fQogICAgICAgICAgICAgICAgICogQSBsaXN0IG9mIG9yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbSBvYmplY3RzIGRlcml2ZWQgZnJvbSB0aGUgcmVxdWVzdGVkIHNjb3Blcy4KICAgICAgICAgICAgICAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9vcGVuaWRjb25uZWN0L0NsYWltLmh0bWx9IGZvciB0aGUgY2xhaW0gb2JqZWN0IGRldGFpbHMuCiAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRTY29wZVRvQ2xhaW1zKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBjbGFpbXMgPSBuZXcgZnJKYXZhLkFycmF5TGlzdCgpOwoKICAgICAgICAgICAgICAgICAgICBzY29wZXMudG9BcnJheSgpLmZvckVhY2goZnVuY3Rpb24gKHNjb3BlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTdHJpbmcoc2NvcGUpICE9PSAnb3BlbmlkJyAmJiBzY29wZUNsYWltc01hcFtzY29wZV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlQ2xhaW1zTWFwW3Njb3BlXS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFpbU5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFpbXMuYWRkKG5ldyBmckphdmEuQ2xhaW0oY2xhaW1OYW1lKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1zOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBjbGFpbXMgPSBuZXcgZnJKYXZhLkFycmF5TGlzdCgpOwoKICAgICAgICAgICAgICAgIGNsYWltcy5hZGRBbGwoY29udmVydFNjb3BlVG9DbGFpbXMoKSk7CiAgICAgICAgICAgICAgICBjbGFpbXMuYWRkQWxsKGNsYWltT2JqZWN0cyk7CiAgICAgICAgICAgICAgICBjbGFpbXMuYWRkQWxsKHJlcXVlc3RlZFR5cGVkQ2xhaW1zKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gY2xhaW1zOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogQ29tcHV0ZXMgYW5kIHJldHVybnMgYSBjbGFpbSB2YWx1ZS4KICAgICAgICAgICAgICogVG8gb2J0YWluIHRoZSBjbGFpbSB2YWx1ZSwgdXNlcyB0aGUgcmVzb2x2ZXIgZnVuY3Rpb24gc3BlY2lmaWVkIGZvciB0aGUgY2xhaW0gaW4gdGhlIGNsYWltUmVzb2x2ZXJzIGNvbmZpZ3VyYXRpb24gb2JqZWN0LgogICAgICAgICAgICAgKiBAc2VlIGNsYWltUmVzb2x2ZXJzCiAgICAgICAgICAgICAqIElmIG5vIHJlc29sdmVyIGZ1bmN0aW9uIGlzIGZvdW5kLCB1c2VzIHRoZSBkZWZhdWx0IGNsYWltIHJlc29sdmVyIGZ1bmN0aW9uLgogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiBAcGFyYW0ge29yZy5mb3JnZXJvY2sub3BlbmlkY29ubmVjdC5DbGFpbX0gY2xhaW0KICAgICAgICAgICAgICogQW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgbWV0aG9kcyB0byBvYnRhaW4gaW5mb3JtYXRpb24vcmVxdWlyZW1lbnRzIGFzc29jaWF0ZWQgd2l0aCBhIGNsYWltLgogICAgICAgICAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL29yZy9mb3JnZXJvY2svb3BlbmlkY29ubmVjdC9DbGFpbS5odG1sfSBmb3IgZGV0YWlscy4KICAgICAgICAgICAgICogQHJldHVybnMgeyp9IENsYWltIHZhbHVlLgogICAgICAgICAgICAgKiBAdGhyb3dzIHtvcmcuZm9yZ2Vyb2NrLm9hdXRoMi5jb3JlLmV4Y2VwdGlvbnMuSW52YWxpZFJlcXVlc3RFeGNlcHRpb259CiAgICAgICAgICAgICAqIFJldGhyb3dzIHRoaXMgZXhjZXB0aW9uIGlmIGEgY2xhaW0gcmVzb2x2ZXIgdGhyb3dzIGl0LgogICAgICAgICAgICAgKiBZb3UgY2FuIHRocm93IG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuZXhjZXB0aW9ucy5JbnZhbGlkUmVxdWVzdEV4Y2VwdGlvbiBmcm9tIHlvdXIgY3VzdG9tIGNsYWltIHJlc29sdmVyCiAgICAgICAgICAgICAqIGlmIHlvdSB3YW50IHRvIHRlcm1pbmF0ZSB0aGUgY2xhaW0gcHJvY2Vzc2luZy4KICAgICAgICAgICAgICovCiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXB1dGVDbGFpbShjbGFpbSkgewogICAgICAgICAgICAgICAgdmFyIHJlc29sdmVDbGFpbTsKICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlOwoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUNsYWltID0gY2xhaW1SZXNvbHZlcnNbY2xhaW0uZ2V0TmFtZSgpXSB8fCByZXNvbHZlQW55Q2xhaW07CgogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlQ2xhaW0oY2xhaW0pOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnT0lEQyBDbGFpbXMgc2NyaXB0IGV4Y2VwdGlvbi4gVW5hYmxlIHRvIHJlc29sdmUgT0lEQyBDbGFpbS4gJyArIGU7CgogICAgICAgICAgICAgICAgICAgIGlmIChTdHJpbmcoZSkuaW5kZXhPZignb3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5leGNlcHRpb25zLkludmFsaWRSZXF1ZXN0RXhjZXB0aW9uJykgIT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAobG9nZ2VyLndhcm5pbmdFbmFibGVkKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLndhcm5pbmcobWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgY29tcHV0ZWRDbGFpbXMgPSBuZXcgZnJKYXZhLkxpbmtlZEhhc2hNYXAoKTsKCiAgICAgICAgICAgIGdldENsYWltcygpLnRvQXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFpbSkgewogICAgICAgICAgICAgICAgdmFyIGNsYWltVmFsdWUgPSBjb21wdXRlQ2xhaW0oY2xhaW0pOwoKICAgICAgICAgICAgICAgIGlmIChpc0NsYWltVmFsdWVWYWxpZChjbGFpbVZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgIGNvbXB1dGVkQ2xhaW1zLnB1dChjbGFpbS5nZXROYW1lKCksIGNsYWltVmFsdWUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvKioKICAgICAgICAgICAgICAgICAgICAgKiBJZiBhIGNsYWltIGhhcyBiZWVuIHByb2Nlc3NlZCwgYnV0IGFwcGVhcnMgaW4gdGhlIGxpc3QgYWdhaW4sCiAgICAgICAgICAgICAgICAgICAgICogYW5kIGl0cyB2YWx1ZSBjYW5ub3QgYmUgY29tcHV0ZWQgdW5kZXIgdGhlIG5ldyBjb25kaXRpb25zLAogICAgICAgICAgICAgICAgICAgICAqIHRoZSBjbGFpbSBpcyByZW1vdmVkIGZyb20gdGhlIGZpbmFsIHJlc3VsdC4KICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAqIEZvciBleGFtcGxlLCBhIGNsYWltIGNvdWxkIGJlIG1hcHBlZCB0byBhIHNjb3BlIGFuZCBmb3VuZCBpbiB0aGUgdXNlciBwcm9maWxlLAogICAgICAgICAgICAgICAgICAgICAqIGJ1dCBhbHNvIHJlcXVlc3RlZCBieSB0aGUgY2xpZW50IHdpdGggcmVxdWlyZWQgdmFsdWVzIHRoYXQgZG9uJ3QgbWF0Y2ggdGhlIGNvbXB1dGVkIG9uZS4KICAgICAgICAgICAgICAgICAgICAgKiBAc2VlIHtsaW5rIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI0luZGl2aWR1YWxDbGFpbXNSZXF1ZXN0c30uCiAgICAgICAgICAgICAgICAgICAgICogZm9yIHRoZSByZWxldmFudCBPSURDIHNwZWNpZmljYXRpb24gZGV0YWlscy4KICAgICAgICAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgICAgICAgICBjb21wdXRlZENsYWltcy5yZW1vdmUoY2xhaW0uZ2V0TmFtZSgpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICByZXR1cm4gY29tcHV0ZWRDbGFpbXM7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBDcmVhdGVzIGEgbWFwIG9mIHJlcXVlc3RlZCBzY29wZXMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGNsYWltIG5hbWVzLgogICAgICAgICAqIEByZXR1cm5zIHtqYXZhLnV0aWwuTGlua2VkSGFzaE1hcH0KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBnZXRDb21wb3NpdGVTY29wZXMgKCkgewogICAgICAgICAgICB2YXIgY29tcG9zaXRlU2NvcGVzID0gbmV3IGZySmF2YS5MaW5rZWRIYXNoTWFwKCk7CgogICAgICAgICAgICBzY29wZXMudG9BcnJheSgpLmZvckVhY2goZnVuY3Rpb24gKHNjb3BlKSB7CiAgICAgICAgICAgICAgICB2YXIgc2NvcGVDbGFpbXMgPSBuZXcgZnJKYXZhLkFycmF5TGlzdCgpOwoKICAgICAgICAgICAgICAgIGlmIChzY29wZUNsYWltc01hcFtzY29wZV0pIHsKICAgICAgICAgICAgICAgICAgICBzY29wZUNsYWltc01hcFtzY29wZV0uZm9yRWFjaChmdW5jdGlvbiAoY2xhaW1OYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlQ2xhaW1zLmFkZChjbGFpbU5hbWUpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzY29wZUNsYWltcy5zaXplKCkpIHsKICAgICAgICAgICAgICAgICAgICBjb21wb3NpdGVTY29wZXMucHV0KHNjb3BlLCBzY29wZUNsYWltcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZVNjb3BlczsKICAgICAgICB9CgogICAgICAgIC8vIFBVQkxJQyBNRVRIT0RTCgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHNldFNjb3BlQ2xhaW1zTWFwOiBzZXRTY29wZUNsYWltc01hcCwKICAgICAgICAgICAgc2V0Q2xhaW1SZXNvbHZlcnM6IHNldENsYWltUmVzb2x2ZXJzLAogICAgICAgICAgICBnZXRVc2VyUHJvZmlsZUNsYWltUmVzb2x2ZXI6IGdldFVzZXJQcm9maWxlQ2xhaW1SZXNvbHZlciwKICAgICAgICAgICAgZ2V0QWRkcmVzc0NsYWltUmVzb2x2ZXI6IGdldEFkZHJlc3NDbGFpbVJlc29sdmVyLAogICAgICAgICAgICBnZXRFc3NlbnRpYWxDbGFpbVJlc29sdmVyOiBnZXRFc3NlbnRpYWxDbGFpbVJlc29sdmVyLAogICAgICAgICAgICBnZXRVc2VySW5mb0NsYWltczogZ2V0VXNlckluZm9DbGFpbXMKICAgICAgICB9OwogICAgfQoKICAgIC8vIFJFU1VMVFMKCiAgICAvKioKICAgICAqIFRoaXMgc2NyaXB0IHJldHVybnMgYW4gaW5zdGFuY2Ugb2YgdGhlIG9yZy5mb3JnZXJvY2sub2F1dGgyLmNvcmUuVXNlckluZm9DbGFpbXMgY2xhc3MKICAgICAqIHBvcHVsYXRlZCB3aXRoIHRoZSBjb21wdXRlZCBjbGFpbSB2YWx1ZXMgYW5kCiAgICAgKiB0aGUgcmVxdWVzdGVkIHNjb3BlcyBtYXBwZWQgdG8gdGhlIGNsYWltIG5hbWVzLgogICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXBpZG9jcy9vcmcvZm9yZ2Vyb2NrL29hdXRoMi9jb3JlL1VzZXJJbmZvQ2xhaW1zLmh0bWx9LgogICAgICoKICAgICAqIEFzc2lnbmluZyBpdCB0byBhIHZhcmlhYmxlIGdpdmVzIHlvdSBhbiBvcHBvcnR1bml0eQogICAgICogdG8gbG9nIHRoZSBjb250ZW50IG9mIHRoZSByZXR1cm5lZCB2YWx1ZSBkdXJpbmcgZGV2ZWxvcG1lbnQuCiAgICAgKi8KICAgIHZhciB1c2VySW5mb0NsYWltcyA9IHV0aWxzLmdldFVzZXJJbmZvQ2xhaW1zKCk7CgogICAgLyoKICAgIGxvZ2dlci5lcnJvcihzY3JpcHROYW1lICsgJyByZXN1bHRzOicpCiAgICBsb2dnZXIuZXJyb3IoJ1ZhbHVlczogJyArIHVzZXJJbmZvQ2xhaW1zLmdldFZhbHVlcygpKQogICAgbG9nZ2VyLmVycm9yKCdTY29wZXM6ICcgKyB1c2VySW5mb0NsYWltcy5nZXRDb21wb3NpdGVTY29wZXMoKSkKICAgICovCgogICAgcmV0dXJuIHVzZXJJbmZvQ2xhaW1zOwp9KCkpOwo=",
  },
  {
    "_id": "6325cf19-a49b-471e-8d26-7e4df76df0e2",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Normalizes raw profile data from GitHub",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Okta Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmxvZ2dlci53YXJuaW5nKCJPa3RhIHJhd1Byb2ZpbGU6ICIrcmF3UHJvZmlsZSkKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLm5hbWUpLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmZpcnN0X25hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5sYXN0X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGljdHVyZS5kYXRhLnVybCksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5wcmVmZXJyZWRfdXNlcm5hbWUpKSk=",
  },
  {
    "_id": "e1db8a0a-0329-4962-a5bf-ecffaca376ae",
    "context": "OIDC_CLAIMS",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Used by endUserUIClient",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Alpha endUserUIClient OIDC Claims Script",
    "script": "",
  },
  {
    "_id": "5dbd53c6-67ff-4a43-84c3-90c5cf5da35a",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Return TextOutputCallback indicating the provided OTP was valid.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "OTP Valid",
    "script": "LyogT1RQIFZhbGlkCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICogCiAqIFJldHVybiBUZXh0T3V0cHV0Q2FsbGJhY2sgaW5kaWNhdGluZyB0aGUgcHJvdmlkZWQgT1RQIHdhcyB2YWxpZC4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKi8Kb3V0Y29tZSA9ICJ0cnVlIjsKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjawopCmlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICBuZXcgZnIuVGV4dE91dHB1dENhbGxiYWNrKAogICAgICAgICAgICBmci5UZXh0T3V0cHV0Q2FsbGJhY2suSU5GT1JNQVRJT04sCiAgICAgICAgICAgICJWQUxJRCIKICAgICAgICApCiAgICApLmJ1aWxkKCkKfQplbHNlIHsKICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbyhvdXRjb21lKS5idWlsZCgpOwp9",
  },
  {
    "_id": "d2a41d85-d33a-42d9-a7dd-50dfbc9fa7c0",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check Applicant",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Onfido-CheckApplicant",
    "script": "bG9nZ2VyLmVycm9yKCJPbmZpZG8tQ2hlY2tBcHBsaWNhbnQ6IFN0YXJ0Iik7CgovKgogKiAhISEgRXh0ZW5kIHlvdXIgYXV0aGVudGljYXRpb24gc2Vzc2lvbiB0aW1lIHNvIHlvdXIgaWRlbnRpdHkgcHJvb2ZpbmcgZmxvd3MgZG9uJ3QgdGltZSBvdXQgISEhCiAqCiAqIEF1dGhlbnRpY2F0aW9uID4gU2V0dGluZ3MgPiBUcmVlcyA+IE1heCBEdXJhdGlvbiAoTWludXRlcykKICoKICogU2V0IHRvIDE1IG1pbnV0ZXMuCiAqCiAqLwoKLyoKICogQkVHSU4gU0NSSVBUIENPTkZJR1VSQVRJT04KICoKICogUkVQTEFDRSBXSVRIIFlPVVIgT1dOIE9ORklETyBBUEkgVE9LRU4KICovCi8vdmFyIE9ORklET19BUElfVE9LRU4gPSAiYXBpX2xpdmUuU3RVZGZ4ZGlDRmIuWXJ6YmFkeEJfUjItcUc1bEZVYzNsV2c2SkFjM0NucS0iCnZhciBPTkZJRE9fQVBJX1RPS0VOID0gImFwaV9saXZlLkg1eXNSdXNBb21ZLm5iYmtpbW9XYzkxY0RaQVdKWmtKdDBUa3Fkam0xUmpyIjsKLyoKICogRU5EIFNDUklQVCBDT05GSUdVUkFUSU9OCiAqLwoKdmFyIHJlcXVlc3RCb2R5SnNvbiA9IHsKICAgICJhcHBsaWNhbnRfaWQiOiBTdHJpbmcoc2hhcmVkU3RhdGUuZ2V0KCJvbmZpZG9BcHBsaWNhbnRJRCIpKSwKICAgICJyZXBvcnRfbmFtZXMiOiBbImRvY3VtZW50IiwgImZhY2lhbF9zaW1pbGFyaXR5X3Bob3RvIl0KfQovLyB2YXIgcmVxdWVzdEJvZHlKc29uID0gewovLyAgICAgImFwcGxpY2FudF9pZCI6IFN0cmluZyhzaGFyZWRTdGF0ZS5nZXQoIm9uZmlkb0FwcGxpY2FudElEIikpLAovLyAgICAgInJlcG9ydF9uYW1lcyI6IFsiZG9jdW1lbnQiXQovLyB9Cgp2YXIgZmFpbHVyZSA9IHRydWUKCnZhciBmciA9IEphdmFJbXBvcnRlcigKICAgIG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0CikKCnZhciByZXF1ZXN0ID0gbmV3IGZyLlJlcXVlc3QoKQpyZXF1ZXN0LnNldFVyaSgiaHR0cHM6Ly9hcGkub25maWRvLmNvbS92My9jaGVja3MiKQpyZXF1ZXN0LnNldE1ldGhvZCgiUE9TVCIpCnJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgiKQpyZXF1ZXN0LmdldEhlYWRlcnMoKS5hZGQoIkF1dGhvcml6YXRpb24iLCAiVG9rZW4gdG9rZW49IiArIE9ORklET19BUElfVE9LRU4pCnJlcXVlc3QuZ2V0RW50aXR5KCkuc2V0U3RyaW5nKEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5SnNvbikpCgp2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0KCkKbG9nZ2VyLmVycm9yKCJPbmZpZG8tQ2hlY2tBcHBsaWNhbnQ6IEluaXRpYXRlIGNoZWNrcyByZXNwb25zZTogIi5jb25jYXQocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpKTsKCmlmIChyZXNwb25zZS5nZXRTdGF0dXMoKS5nZXRDb2RlKCkgPT09IDIwMCkgewogICAgdmFyIGlkID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSkuaWQKICAgIGZhaWx1cmUgPSAhaWQKICAgIGlmICghZmFpbHVyZSkgc2hhcmVkU3RhdGUucHV0KCJvbmZpZG9BdXRoVG9rZW4iLCBpZCk7Cn0gZWxzZSB7CiAgICBmYWlsdXJlID0gdHJ1ZQp9CgpvdXRjb21lID0gZmFpbHVyZSA/ICJmYWxzZSIgOiAidHJ1ZSI7CmxvZ2dlci5lcnJvcigiT25maWRvLUNoZWNrQXBwbGljYW50OiBFbmQgKG91dGNvbWU9Ii5jb25jYXQob3V0Y29tZSkuY29uY2F0KCIpIikpOw==",
  },
  {
    "_id": "312e951f-70c5-49d2-a9ae-93aef909d5df",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Salesforce",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Salesforce Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnVzZXJfaWQpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIHJhd1Byb2ZpbGUubmFtZSksCiAgICAgICAgZmllbGQoImdpdmVuTmFtZSIsIHJhd1Byb2ZpbGUuZ2l2ZW5fbmFtZSksCiAgICAgICAgZmllbGQoImZhbWlseU5hbWUiLCByYXdQcm9maWxlLmZhbWlseV9uYW1lKSwKICAgICAgICBmaWVsZCgicGhvdG9VcmwiLCByYXdQcm9maWxlLnBpY3R1cmUpLAogICAgICAgIGZpZWxkKCJlbWFpbCIsIHJhd1Byb2ZpbGUuZW1haWwpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUuZW1haWwpLAogICAgICAgIGZpZWxkKCJsb2NhbGUiLCByYXdQcm9maWxlLnpvbmVJbmZvKSkp",
  },
  {
    "_id": "6b3cfd48-62d3-48ff-a96f-fe8f3a22ab30",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Amazon",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Amazon Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnVzZXJfaWQpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIHJhd1Byb2ZpbGUubmFtZSksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCkpKQ==",
  },
  {
    "_id": "740cf6fa-a173-4e9d-b17c-44758e9b19ec",
    "context": "CONFIG_PROVIDER_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "CP-InnerTreeEvaluator-static-inner2",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "CP-ITE-static-inner2",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoqCiAqIFRoZSBmb2xsb3dpbmcgc2NyaXB0IGlzIGEgc2ltcGxpZmllZCB0ZW1wbGF0ZSBmb3IgdW5kZXJzdGFuZGluZyBob3cgdG8gYnVpbGQKICogdXAgYSBjb25maWcgTWFwIG9iamVjdCB3aXRoIGN1c3RvbSB2YWx1ZXMuIFRoZSBDb25maWcgUHJvdmlkZXIgTm9kZSB3aWxsIHRoZW4KICogcHJvdmlkZSB0aGlzIGNvbmZpZyBNYXAgdG8gdGhlIGRlc2lyZWQgbm9kZSB0eXBlLiBJdCBpcyBpbXBvcnRhbnQgdGhhdCB0aGUgTWFwCiAqIHlvdSBidWlsZCBoZXJlIGlzIG5hbWVkICdjb25maWcnLgogKgogKiBEZWZpbmVkIHZhcmlhYmxlczoKICoKICogbm9kZVN0YXRlIC0gTm9kZSBTdGF0ZSAoMSkKICogICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGlzIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgdmFsdWVzIHN0b3JlZCBpbiB0aGUgbm9kZSBzdGF0ZS4KICoKICogaWRSZXBvc2l0b3J5IC0gUHJvZmlsZSBEYXRhICgyKQogKiAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIGEgcmVwb3NpdG9yeSB0byByZXRyaWV2ZSB1c2VyIGluZm9ybWF0aW9uLgogKgogKiBzZWNyZXRzIC0gQ3JlZGVudGlhbHMgYW5kIFNlY3JldHMgKDMpCiAqICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgYW4gaW50ZXJmYWNlIHRvIGFjY2VzcyB0aGUgU2VjcmV0cyBBUEkgZnJvbSBhIHNjcmlwdGluZyBjb250ZXh0LgogKgogKiByZXF1ZXN0SGVhZGVycyAoNCkgLSBNYXAgKDUpCiAqICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgYW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgbWV0aG9kcyBmb3IgYWNjZXNzaW5nIGhlYWRlcnMgaW4gdGhlIGxvZ2luIHJlcXVlc3QuCiAqCiAqIGxvZ2dlciAtIERlYnVnIExvZ2dpbmcgKDYpCiAqICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgZGVidWcgbG9nZ2VyIGluc3RhbmNlLgogKgogKiBodHRwQ2xpZW50IC0gSFRUUCBDbGllbnQgKDcpCiAqICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgSFRUUCBjbGllbnQgdGhhdCBjYW4gYmUgdXNlZCB0byBtYWtlIGV4dGVybmFsIEhUVFAgcmVxdWVzdHMuCiAqCiAqIHJlYWxtIC0gU3RyaW5nIChwcmltaXRpdmUpLgogKiAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIG5hbWUgb2YgdGhlIHJlYWxtIHRoZSB1c2VyIGlzIGF1dGhlbnRpY2F0aW5nIHRvLgogKgogKiBleGlzdGluZ1Nlc3Npb24gLSBNYXA8U3RyaW5nLCBTdHJpbmc+ICg1KQogKiAgICAgICAgICBQcmVzZW50IGlmIHRoZSByZXF1ZXN0IGNvbnRhaW5zIHRoZSBzZXNzaW9uIGNvb2tpZSwgdGhlIHVzZXIncyBzZXNzaW9uIG9iamVjdC4gVGhlIHJldHVybmVkIG1hcCBmcm9tCiAqICAgICAgICAgIFNTT1Rva2VuLmdldFByb3BlcnRpZXMoKSAoOCkKICoKICogcmVxdWVzdFBhcmFtZXRlcnMgLSBNYXAgKDUpCiAqICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QgcGFyYW1ldGVycy4KICoKICoKICogT3V0cHV0czoKICoKICogY29uZmlnIC0gTWFwICg1KQogKiAgICAgICAgICAgRGVmaW5lIGFuZCBmaWxsIGEgTWFwIG9iamVjdCBuYW1lZCAnY29uZmlnJyB3aXRoIGN1c3RvbSB2YWx1ZXMsIHRoaXMgd2lsbCBkZWZpbmUgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZQogKiAgICAgICAgICAgYXNzb2NpYXRlZCBub2RlIHNlbGVjdGVkIGluIHRoZSBDb25maWdQcm92aWRlck5vZGUuCiAqCiAqIFJlZmVyZW5jZToKICogKDEpIE5vZGUgU3RhdGUgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvaWRjbG91ZC1hbS9sYXRlc3QvYXV0aGVudGljYXRpb24tZ3VpZGUvc2NyaXB0aW5nLWFwaS1ub2RlLmh0bWwjc2NyaXB0aW5nLWFwaS1ub2RlLW5vZGVTdGF0ZQogKiAoMikgUHJvZmlsZSBEYXRhIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMS9hdXRoZW50aWNhdGlvbi1ndWlkZS9zY3JpcHRpbmctYXBpLW5vZGUuaHRtbCNzY3JpcHRpbmctYXBpLW5vZGUtaWQtcmVwbwogKiAoMykgQ3JlZGVudGlhbHMgYW5kIFNlY3JldHMgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4xL2F1dGhlbnRpY2F0aW9uLWd1aWRlL3NjcmlwdGluZy1hcGktbm9kZS5odG1sI3NjcmlwdGluZy1hcGktYXV0aG4tc2VjcmV0cwogKiAoNCkgUmVxdWVzdCBIZWFkZXJzIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXV0aGVudGljYXRpb24tZ3VpZGUvc2NyaXB0aW5nLWFwaS1ub2RlLmh0bWwjc2NyaXB0aW5nLWFwaS1ub2RlLXJlcXVlc3RIZWFkZXJzLgogKiAoNSkgTWFwIC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9NYXAuaHRtbAogKiAoNikgRGVidWcgTG9nZ2luZyAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuaHRtbCNzY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuCiAqICg3KSBIVFRQIENsaWVudCAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9odHRwL0NsaWVudC5odG1sLgogKiAoOCkgU1NPVG9rZW4gLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL2NvbS9pcGxhbmV0L3Nzby9TU09Ub2tlbi5odG1sLgogKi8KCmNvbmZpZyA9IHsKICB0cmVlOiAnaW5uZXIyJwp9Ow==",
  },
  {
    "_id": "4ee5b182-1b09-45cc-97a9-0e609f0a2915",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Resend OTP Option",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Resend OTP Option",
    "script": "LyogQ1Jlc2VuZCBPVFAgT3B0aW9uCiAqCiAqIEF1dGhvcjogam9uLmtuaWdodEBmb3JnZXJvY2suY29tLCB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ29sbGVjdCBPVFAgYW5kIHZhbGlkYXRlIHRoZSBjb2xsZWN0ZWQgT1RQLiBBbHNvIG9mZmVyIGEgcmVzZW5kIG9wdGlvbi4KICogUmV0dXJuICJ0cnVlIiBpZiBjb2xsZWN0ZWQgT1RQIGlzIHZhbGlkLCAiZmFsc2UiIGlmIGNvbGxlY3RlZCBPVFAgaXMgaW52YWxpZCwgCiAqIGFuZCByZXNlbmQgaWYgdGhlIHVzZXIgc2VsZWN0ZWQgdGhlIHJlc2VuZCBidXR0b24uCiAqIAogKiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICogLSBmYWxzZQogKiAtIHJlc2VuZAogKi8KKGZ1bmN0aW9uICgpIHsKICAvLyBob3cgbG9uZyB1bnRpbCB0aGUgInJlc2VuZCIgYnV0dG9uIGJlY29tZXMgZW5hYmxlZC4KICBERUxBWT0yMDsKICAKICAvLyBob3cgbG9uZyAoaW4gc2Vjb25kcykgc2hvdWxkIHRoZSBPVFAgYmUgYWNjZXB0ZWQgYXMgdmFsaWQKICBPVFBfVFRMID0gMzA7CgogIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICAgIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suTmFtZUNhbGxiYWNrLAogICAgICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2sKICApCgogIGZ1bmN0aW9uIGNyZWF0ZVNjcmlwdCgpIHsKICAgICAgcmV0dXJuIFN0cmluZygiIFxuXAogICAgICAgICAgdmFyIENPVU5UID0gIiArIERFTEFZICsgIjsgXG5cCiAgICAgICAgICBmdW5jdGlvbiBnbyhvYnMpIHsgXG5cCiAgICAgICAgICAgICAgY29uc3QgcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W2RhdGEtdnYtYXM9XCJPbmUgVGltZSBQYXNzY29kZVwiXScpWzBdOyBcblwKICAgICAgICAgICAgICBpZiAocCkgeyBcblwKICAgICAgICAgICAgICAgICAgdmFyIGIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsgXG5cCiAgICAgICAgICAgICAgICAgIGIuaWQgPSAncmVzZW5kQnV0dG9uJzsgXG5cCiAgICAgICAgICAgICAgICAgIGIuY2xhc3NMaXN0LmFkZChcImJ0blwiLCBcIm10LTNcIiwgXCJidG4tc2Vjb25kYXJ5XCIsIFwiYnRuLXNtXCIpOyBcblwKICAgICAgICAgICAgICAgICAgYi5vbmNsaWNrID0gZnVuY3Rpb24oKSB7IHAudmFsdWU9J19fX1JFU0VORF9fXyc7IHAuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2lucHV0JykpOyB9OyBcblwKICAgICAgICAgICAgICAgICAgYi5pbm5lckhUTUwgPSAnUmVzZW5kIENvZGUgLi4uICcgKyBDT1VOVCArICdzJzsgXG5cCiAgICAgICAgICAgICAgICAgIGIuZGlzYWJsZWQgPSB0cnVlOyBcblwKICAgICAgICAgICAgICAgICAgcC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShiLCBwLm5leHRTaWJsaW5nKTsgXG5cCiAgICAgICAgICAgICAgICAgIHZhciB0ID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7IFxuXAogICAgICAgICAgICAgICAgICAgICAgaWYgKENPVU5UID09IDEpIHsgXG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0KTsgXG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgYi5kaXNhYmxlZCA9IGZhbHNlOyBcblwKICAgICAgICAgICAgICAgICAgICAgICAgICBiLmlubmVySFRNTCA9ICdSZXNlbmQgQ29kZSc7IFxuXAogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgXG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgQ09VTlQtLTsgXG5cCiAgICAgICAgICAgICAgICAgICAgICAgICAgYi5pbm5lckhUTUwgPSAnUmVzZW5kIENvZGUgLi4uICcgKyBDT1VOVCArICdzJzsgXG5cCiAgICAgICAgICAgICAgICAgICAgICB9IFxuXAogICAgICAgICAgICAgICAgICB9LCAxMDAwICk7IFxuXAogICAgICAgICAgICAgICAgICBpZiAob2JzKSBvYnMuZGlzY29ubmVjdCgpOyBcblwKICAgICAgICAgICAgICAgICAgcmV0dXJuOyBcblwKICAgICAgICAgICAgICB9IFxuXAogICAgICAgICAgfSBcblwKICAgICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtkYXRhLXZ2LWFzPVwiT25lIFRpbWUgUGFzc2NvZGVcIl0nKVswXSkgZ28oKTsgXG5cCiAgICAgICAgICBlbHNlIHsgXG5cCiAgICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zLCBvYnMpID0+IHsgZ28ob2JzKTsgfSk7IFxuXAogICAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH0pOyBcblwKICAgICAgICAgIH0gXG5cCiAgICAgICIpOwogIH0KCiAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgICBuZXcgZnIuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrKGNyZWF0ZVNjcmlwdCgpKSwKICAgICAgICAgIG5ldyBmci5OYW1lQ2FsbGJhY2soIk9uZSBUaW1lIFBhc3Njb2RlIikKICAgICAgKS5idWlsZCgpCiAgfSBlbHNlIHsKICAgICAgdmFyIG90cFRpbWVzdGFtcCA9IE1hdGguZmxvb3IobmV3IGphdmEudXRpbC5EYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCk7CiAgICAgIHZhciBvdHAgPSBjYWxsYmFja3MuZ2V0KDEpLmdldE5hbWUoKTsKICAgICAgaWYgKG90cCA9PT0gIl9fX1JFU0VORF9fXyIpIHsKICAgICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKCJyZXNlbmQiKS5idWlsZCgpOwogICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIHNlbnRPdHAgPSBzaGFyZWRTdGF0ZS5nZXQoIm9uZVRpbWVQYXNzd29yZCIpOwogICAgICAgICAgdmFyIHNlbnRPdHBUaW1lc3RhbXAgPSBzaGFyZWRTdGF0ZS5nZXQoIm9uZVRpbWVQYXNzd29yZFRpbWVzdGFtcCIpOwogICAgICAgICAgaWYgKHNlbnRPdHAgPT0gb3RwICYmIG90cFRpbWVzdGFtcCAtIE9UUF9UVEwgPj0gc2VudE90cFRpbWVzdGFtcCkgewogICAgICAgICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKCJ0cnVlIikuYnVpbGQoKTsKICAgICAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKCJmYWxzZSIpLmJ1aWxkKCk7CiAgICAgICAgICB9CiAgICAgIH0KICB9Cn0oKSk7",
  },
  {
    "_id": "878816b3-2bb4-4b43-8001-10f926ddefff",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Switch Actors And Become Impersonatee.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Impersonate: Switch Actors And Become Impersonatee",
    "script": "LyogSW1wZXJzb25hdGU6IFN3aXRjaCBBY3RvcnMgQW5kIEJlY29tZSBJbXBlcnNvbmF0ZWUKICoKICogU3dpdGNoIEFjdG9ycyBBbmQgQmVjb21lIEltcGVyc29uYXRlZS4KICoKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICogLSBmYWxzZQogKi8KCihmdW5jdGlvbiAoKSB7CiAgICBsb2dnZXIud2FybmluZygiSW1wZXJzb25hdGU6IFN3aXRjaCBBY3RvcnM6IHN0YXJ0Iik7CiAgICBvdXRjb21lID0gImZhbHNlIjsKCiAgICB2YXIgaW1wZXJzb25hdGVlID0gc2hhcmVkU3RhdGUuZ2V0KCJpbXBlcnNvbmF0ZWUiKTsKICAgIHZhciBpbXBlcnNvbmF0b3IgPSBzaGFyZWRTdGF0ZS5nZXQoImltcGVyc29uYXRvciIpOwogICAgaWYgKGltcGVyc29uYXRlZSAmJiBpbXBlcnNvbmF0b3IpIHsKICAgICAgICBvdXRjb21lID0gInRydWUiOwogICAgICAgIHNoYXJlZFN0YXRlLnB1dCgidXNlcm5hbWUiLCBpbXBlcnNvbmF0ZWUpOwogICAgICAgIHNldFNoYXJlZE9iamVjdEF0dHJpYnV0ZSgidXNlck5hbWUiLCBpbXBlcnNvbmF0ZWUpOwogICAgfQoKICAgIGxvZ2dlci53YXJuaW5nKCJJbXBlcnNvbmF0ZTogU3dpdGNoIEFjdG9yczogZmluaXNoIFtvdXRjb21lPSIuY29uY2F0KG91dGNvbWUpLmNvbmNhdCgiXSIpKTsKICAKICAgIC8qCiAgICAgKiBTdG9yZSBhdHRyaWJ1dGVzIGluIHNoYXJlZCBzdGF0ZSBmb3IgdXNlIHdpdGggdGhlIENyZWF0ZS9QYXRjaCBPYmplY3Qgbm9kZXMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFNoYXJlZE9iamVjdEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkgewogICAgICAgICB2YXIgc3RvcmFnZSA9IHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpOwogICAgICAgIGlmIChzdG9yYWdlICYmIHZhbHVlKSB7CiAgICAgICAgICAgIGlmIChzdG9yYWdlLnB1dCkgewogICAgICAgICAgICAgICAgICBzdG9yYWdlLnB1dChuYW1lLCB2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBzdG9yYWdlW25hbWVdID0gdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAodmFsdWUpIHsKICAgICAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwgSlNPTi5wYXJzZSgie1wiIituYW1lKyJcIjpcIiIrdmFsdWUrIlwifSIpKTsKICAgICAgICB9CiAgICB9Cn0oKSk7",
  },
  {
    "_id": "ce6fbbcf-5d9a-471b-bcc1-448758a6374a",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Validate OTP in profile attribute",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "MobileOTP: Validate OTP In Profile Attribute",
    "script": "LyoKICogVmFsaWRhdGUgT1RQIGluIHVzZXIgcHJvZmlsZSBhdHRyaWJ1dGUgYWdhaW5zdCBPVFAgaW4gc2hhcmVkIHN0YXRlCiAqLwpvdXRjb21lID0gImZhbHNlIjsKdmFyIE9UUF9MRU5HVEggPSA4OwoKaWYgKHNoYXJlZFN0YXRlLmdldCgibW9iaWxlT1RQIikpIHsKICAJdmFyIHByb2ZpbGVPVFAgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHVzZXJuYW1lLCAiZnItYXR0ci1pbnQ1Iik7Cn0KCmZ1bmN0aW9uIGNoZWNrUGFzc3dvcmQocHJvZmlsZU9UUCwgcGFzc3dvcmQpIHsKCXZhciBvbmVUaW1lUGFzc3dvcmQgPSBwcm9maWxlT1RQLnN1YnN0cmluZygwLDcpOwoJdmFyIHBhc3N3b3JkVGltZXN0YW1wID0gTnVtYmVyKHByb2ZpbGVPVFAuc3Vic3RyaW5nKDgpKTsKCgl2YXIgcGFzc3dvcmRNYXRjaGVzID0gb25lVGltZVBhc3N3b3JkCiAgICAgICAgJiYgKG9uZVRpbWVQYXNzd29yZCA9PSBwYXNzd29yZCkKICAgICAgICAmJiBwYXNzd29yZFRpbWVzdGFtcCAhPSBudWxsCiAgICAgICAgJiYgaXNXaXRoaW5FeHBpcnlUaW1lKHBhc3N3b3JkVGltZXN0YW1wKTsKCXJldHVybiBwYXNzd29yZE1hdGNoZXM7Cn0KCmZ1bmN0aW9uIGlzV2l0aGluRXhwaXJ5VGltZShwYXNzd29yZFRpbWVzdGFtcCkgewogICAgICAgIEluc3RhbnQgcHJldmlvdXMgPSBJbnN0YW50Lm9mRXBvY2hTZWNvbmQocGFzc3dvcmRUaW1lc3RhbXApOwogICAgICAgIER1cmF0aW9uIHBhc3N3b3JkRXhwaXJ5ID0gRHVyYXRpb24ub2ZNaW51dGVzKGNvbmZpZy5wYXNzd29yZEV4cGlyeVRpbWUoKSk7CiAgICAgICAgSW5zdGFudCBub3cgPSBUaW1lLmdldENsb2NrKCkuaW5zdGFudCgpOwogICAgICAgIGxvZ2dlci5kZWJ1ZygicHJldmlvdXMge30gXG4gcGFzc3dvcmRFeHBpcnkge30gXG4gbm93IHt9IiwgcHJldmlvdXMsIHBhc3N3b3JkRXhwaXJ5LCBub3cpOwogICAgICAgIGJvb2xlYW4gd2l0aGluRXhwaXJ5VGltZSA9IER1cmF0aW9uLmJldHdlZW4ocHJldmlvdXMucGx1cyhwYXNzd29yZEV4cGlyeSksIG5vdykuaXNOZWdhdGl2ZSgpOwogICAgICAgIGxvZ2dlci5kZWJ1Zygid2l0aGluRXhwaXJ5VGltZSB7fSIsIHdpdGhpbkV4cGlyeVRpbWUpOwogICAgICAgIHJldHVybiB3aXRoaW5FeHBpcnlUaW1lOwp9CgovKgogICAgcHJpdmF0ZSBBY3Rpb24gY2hlY2tQYXNzd29yZChUcmVlQ29udGV4dCBjb250ZXh0LCBTdHJpbmcgcGFzc3dvcmQpIHsKICAgICAgICBKc29uVmFsdWUgb25lVGltZVBhc3N3b3JkID0gY29udGV4dC5nZXRTdGF0ZShPTkVfVElNRV9QQVNTV09SRCk7CiAgICAgICAgSnNvblZhbHVlIHBhc3N3b3JkVGltZXN0YW1wID0gY29udGV4dC5nZXRTdGF0ZShPTkVfVElNRV9QQVNTV09SRF9USU1FU1RBTVApOwoKICAgICAgICBib29sZWFuIHBhc3N3b3JkTWF0Y2hlcyA9IG9uZVRpbWVQYXNzd29yZCAhPSBudWxsICYmIG9uZVRpbWVQYXNzd29yZC5pc1N0cmluZygpCiAgICAgICAgICAgICAgICAmJiBvbmVUaW1lUGFzc3dvcmQuYXNTdHJpbmcoKS5lcXVhbHMocGFzc3dvcmQpCiAgICAgICAgICAgICAgICAmJiBwYXNzd29yZFRpbWVzdGFtcCAhPSBudWxsICYmIHBhc3N3b3JkVGltZXN0YW1wLmlzTnVtYmVyKCkKICAgICAgICAgICAgICAgICYmIGlzV2l0aGluRXhwaXJ5VGltZShwYXNzd29yZFRpbWVzdGFtcC5hc0xvbmcoKSk7CiAgICAgICAgbG9nZ2VyLmRlYnVnKCJwYXNzd29yZE1hdGNoZXMge30iLCBwYXNzd29yZE1hdGNoZXMpOwogICAgICAgIHJldHVybiBnb1RvKHBhc3N3b3JkTWF0Y2hlcykuYnVpbGQoKTsKICAgIH0KCiAgICBwcml2YXRlIGJvb2xlYW4gaXNXaXRoaW5FeHBpcnlUaW1lKGxvbmcgcGFzc3dvcmRUaW1lc3RhbXApIHsKICAgICAgICBJbnN0YW50IHByZXZpb3VzID0gSW5zdGFudC5vZkVwb2NoU2Vjb25kKHBhc3N3b3JkVGltZXN0YW1wKTsKICAgICAgICBEdXJhdGlvbiBwYXNzd29yZEV4cGlyeSA9IER1cmF0aW9uLm9mTWludXRlcyhjb25maWcucGFzc3dvcmRFeHBpcnlUaW1lKCkpOwogICAgICAgIEluc3RhbnQgbm93ID0gVGltZS5nZXRDbG9jaygpLmluc3RhbnQoKTsKICAgICAgICBsb2dnZXIuZGVidWcoInByZXZpb3VzIHt9IFxuIHBhc3N3b3JkRXhwaXJ5IHt9IFxuIG5vdyB7fSIsIHByZXZpb3VzLCBwYXNzd29yZEV4cGlyeSwgbm93KTsKICAgICAgICBib29sZWFuIHdpdGhpbkV4cGlyeVRpbWUgPSBEdXJhdGlvbi5iZXR3ZWVuKHByZXZpb3VzLnBsdXMocGFzc3dvcmRFeHBpcnkpLCBub3cpLmlzTmVnYXRpdmUoKTsKICAgICAgICBsb2dnZXIuZGVidWcoIndpdGhpbkV4cGlyeVRpbWUge30iLCB3aXRoaW5FeHBpcnlUaW1lKTsKICAgICAgICByZXR1cm4gd2l0aGluRXhwaXJ5VGltZTsKICAgIH0KICAgICov",
  },
  {
    "_id": "7e3d7067-d50f-4674-8c76-a3e13a810c33",
    "context": "AUTHENTICATION_SERVER_SIDE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for server side Scripted Authentication Module",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Scripted Module - Server Side",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTUtMjAxNyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgp2YXIgU1RBUlRfVElNRSA9IDk7ICAvLyA5YW0KdmFyIEVORF9USU1FICAgPSAxNzsgLy8gNXBtCnZhciBsb25naXR1ZGUsIGxhdGl0dWRlOwp2YXIgbG9jYWxUaW1lOwoKbG9nZ2VyLm1lc3NhZ2UoIlN0YXJ0aW5nIHNjcmlwdGVkIGF1dGhlbnRpY2F0aW9uIik7CmxvZ2dlci5tZXNzYWdlKCJVc2VyOiAiICsgdXNlcm5hbWUpOwoKdmFyIHVzZXJQb3N0YWxBZGRyZXNzID0gZ2V0VXNlclBvc3RhbEFkZHJlc3MoKTsKbG9nZ2VyLm1lc3NhZ2UoIlVzZXIgYWRkcmVzczogIiArIHVzZXJQb3N0YWxBZGRyZXNzKTsKCmdldExvbmdpdHVkZUxhdGl0dWRlRnJvbVVzZXJQb3N0YWxBZGRyZXNzKCk7CmdldExvY2FsVGltZSgpOwoKbG9nZ2VyLm1lc3NhZ2UoIkN1cnJlbnQgdGltZSBhdCB0aGUgdXNlcnMgbG9jYXRpb246ICIgKyBsb2NhbFRpbWUuZ2V0SG91cnMoKSk7CmlmIChsb2NhbFRpbWUuZ2V0SG91cnMoKSA8IFNUQVJUX1RJTUUgfHwgbG9jYWxUaW1lLmdldEhvdXJzKCkgPiBFTkRfVElNRSkgewogICAgbG9nZ2VyLmVycm9yKCJMb2dpbiBmb3JiaWRkZW4gb3V0c2lkZSB3b3JrIGhvdXJzISIpOwogICAgYXV0aFN0YXRlID0gRkFJTEVEOwp9IGVsc2UgewogICAgbG9nZ2VyLm1lc3NhZ2UoIkF1dGhlbnRpY2F0aW9uIGFsbG93ZWQhIik7CiAgICBhdXRoU3RhdGUgPSBTVUNDRVNTOwp9CgpmdW5jdGlvbiBnZXRMb25naXR1ZGVMYXRpdHVkZUZyb21Vc2VyUG9zdGFsQWRkcmVzcygpIHsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRVcmkoImh0dHA6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2dlb2NvZGUvanNvbj9hZGRyZXNzPSIgKyBlbmNvZGVVUklDb21wb25lbnQodXNlclBvc3RhbEFkZHJlc3MpKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwogICAgICAvL3RoZSBhYm92ZSBVUkkgaGFzIHRvIGJlIGV4dGVuZGVkIHdpdGggYW4gQVBJX0tFWSBpZiB1c2VkIGluIGEgZnJlcXVlbnQgbWFubmVyCiAgICAgIC8vc2VlIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi9nZW9jb2RpbmcvaW50cm8KCiAgICB2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0KCk7CiAgICBsb2dSZXNwb25zZShyZXNwb25zZSk7CgogICAgdmFyIGdlb2NvZGUgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKICAgIHZhciBpOwogICAgZm9yIChpID0gMDsgaSA8IGdlb2NvZGUucmVzdWx0cy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciByZXN1bHQgPSBnZW9jb2RlLnJlc3VsdHNbaV07CiAgICAgICAgbGF0aXR1ZGUgPSByZXN1bHQuZ2VvbWV0cnkubG9jYXRpb24ubGF0OwogICAgICAgIGxvbmdpdHVkZSA9IHJlc3VsdC5nZW9tZXRyeS5sb2NhdGlvbi5sbmc7CiAgICAgIAogICAgICAgICAgIGxvZ2dlci5tZXNzYWdlKCJsYXRpdHVkZToiICsgbGF0aXR1ZGUgKyAiIGxvbmdpdHVkZToiICsgbG9uZ2l0dWRlKTsKICAgIH0KfQoKZnVuY3Rpb24gZ2V0TG9jYWxUaW1lKCkgewoKICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDA7CiAgICB2YXIgbG9jYXRpb24gPSAibG9jYXRpb249IiArIGxhdGl0dWRlICsgIiwiICsgbG9uZ2l0dWRlOwogICAgdmFyIHRpbWVzdGFtcCA9ICJ0aW1lc3RhbXA9IiArIG5vdzsKICAgICAgICAKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldFVyaSgiaHR0cHM6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL3RpbWV6b25lL2pzb24/IiArIGxvY2F0aW9uICsgIiYiICsgdGltZXN0YW1wKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwogICAgICAvL3RoZSBhYm92ZSBVUkkgaGFzIHRvIGJlIGV4dGVuZGVkIHdpdGggYW4gQVBJX0tFWSBpZiB1c2VkIGluIGEgZnJlcXVlbnQgbWFubmVyCiAgICAgIC8vc2VlIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi90aW1lem9uZS9pbnRybwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKTsKCiAgICB2YXIgdGltZXpvbmUgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKICAgIHZhciBsb2NhbFRpbWVzdGFtcCA9IHBhcnNlSW50KG5vdykgKyBwYXJzZUludCh0aW1lem9uZS5kc3RPZmZzZXQpICsgcGFyc2VJbnQodGltZXpvbmUucmF3T2Zmc2V0KTsKICAgIGxvY2FsVGltZSA9IG5ldyBEYXRlKGxvY2FsVGltZXN0YW1wKjEwMDApOwp9CgpmdW5jdGlvbiBnZXRVc2VyUG9zdGFsQWRkcmVzcygpIHsKICAgIHZhciB1c2VyQWRkcmVzc1NldCA9IGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUodXNlcm5hbWUsICJwb3N0YWxBZGRyZXNzIik7CiAgICBpZiAodXNlckFkZHJlc3NTZXQgPT0gbnVsbCB8fCB1c2VyQWRkcmVzc1NldC5pc0VtcHR5KCkpIHsKICAgICAgICBsb2dnZXIud2FybmluZygiTm8gYWRkcmVzcyBzcGVjaWZpZWQgZm9yIHVzZXI6ICIgKyB1c2VybmFtZSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHVzZXJBZGRyZXNzU2V0Lml0ZXJhdG9yKCkubmV4dCgpCn0KCmZ1bmN0aW9uIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKSB7CiAgICBsb2dnZXIubWVzc2FnZSgiVXNlciBSRVNUIENhbGwuIFN0YXR1czogIiArIHJlc3BvbnNlLmdldFN0YXR1cygpICsgIiwgQm9keTogIiArIHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKfQ==",
  },
  {
    "_id": "48f17202-039f-4d40-b7fc-4ce380f1b929",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Collect all the configuration items required for the SAML2 Node to function properly.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Collect SAML2 Node Config",
    "script": "LyogQ29sbGVjdCBTQU1MMiBOb2RlIENvbmZpZwogKiAKICogQ29sbGVjdCBhbGwgdGhlIGNvbmZpZ3VyYXRpb24gaXRlbXMgcmVxdWlyZWQgZm9yIHRoZSBTQU1MMiBOb2RlIHRvIGZ1bmN0aW9uIHByb3Blcmx5LgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgICBvdXRjb21lID0gInRydWUiOwogICAgICB2YXIgY29uZmlnID0gewogICAgICAgICJtZXRhQWxpYXMiOiAiL2lTUEF6dXJlIiwKICAgICAgICAiYWxsb3dDcmVhdGUiOiBmYWxzZSwKICAgICAgICAic2xvRW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJhdXRobkNvbnRleHRDbGFzc1JlZiI6IFtdLAogICAgICAgICJhdXRobkNvbnRleHREZWNsUmVmIjogW10sCiAgICAgICAgImF1dGhDb21wYXJpc29uIjogIkVYQUNUIiwKICAgICAgICAibmFtZUlkRm9ybWF0IjogInVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIiwKICAgICAgICAicmVxdWVzdEJpbmRpbmciOiAiSFRUUF9SRURJUkVDVCIsCiAgICAgICAgImJpbmRpbmciOiAiSFRUUF9QT1NUIiwKICAgICAgICAiZm9yY2VBdXRobiI6IGZhbHNlLAogICAgICAgICJpZHBFbnRpdHlJZCI6ICJodHRwczovL3N0cy53aW5kb3dzLm5ldC83MTFmZmE5Yy01OTcyLTQ3MTMtYWNlMy02ODhjOTczMjYxNGEvIiwKICAgICAgICAiaXNQYXNzaXZlIjogZmFsc2UsCiAgICAgICAgInNsb1JlbGF5U3RhdGUiOiAiIgogICAgfTsKICAgICAgdmFyIHNjcmlwdCA9ICIiOwogICAgc2NyaXB0ICs9ICJBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCgiOwogICAgc2NyaXB0ICs9ICIgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0JykiOwogICAgc2NyaXB0ICs9ICIpLmZvckVhY2goIjsKICAgIHNjcmlwdCArPSAiICAgIGZ1bmN0aW9uIChpbnB1dCxpKSB7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICBjb25zb2xlLmxvZygnaW5wdXQgJytpKTsiCiAgICBzY3JpcHQgKz0gIiAgICAgICAgdmFyIGNvbmZpZyA9IEpTT04ucGFyc2UoJyIrSlNPTi5zdHJpbmdpZnkoY29uZmlnKSsiJyk7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGNvbmZpZyk7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3RleHQnKSB7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIGNvbmZpZ1trZXlzW2ldXSk7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICAgICAgaW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgS2V5Ym9hcmRFdmVudCggJ2lucHV0JyAsIHsna2V5JzonRW50ZXInfSApKTsiOwogICAgc2NyaXB0ICs9ICIgICAgICAgIH0iOwogICAgc2NyaXB0ICs9ICIgICAgfSI7CiAgICBzY3JpcHQgKz0gIik7IjsKICAgIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgICAgIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suTmFtZUNhbGxiYWNrLAogICAgICAgIGNvbS5zdW4uaWRlbnRpdHkuYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjawogICAgKQogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICAgICAgbmV3IGZyLk5hbWVDYWxsYmFjaygibWV0YUFsaWFzIiksCiAgICAgICAgICAgIG5ldyBmci5OYW1lQ2FsbGJhY2soImFsbG93Q3JlYXRlIiksCiAgICAgICAgICAgIG5ldyBmci5OYW1lQ2FsbGJhY2soInNsb0VuYWJsZWQiKSwKICAgICAgICAgICAgbmV3IGZyLk5hbWVDYWxsYmFjaygiYXV0aG5Db250ZXh0Q2xhc3NSZWYiKSwKICAgICAgICAgICAgbmV3IGZyLk5hbWVDYWxsYmFjaygiYXV0aG5Db250ZXh0RGVjbFJlZiIpLAogICAgICAgICAgICBuZXcgZnIuTmFtZUNhbGxiYWNrKCJhdXRoQ29tcGFyaXNvbiIpLAogICAgICAgICAgICBuZXcgZnIuTmFtZUNhbGxiYWNrKCJuYW1lSWRGb3JtYXQiKSwKICAgICAgICAgICAgbmV3IGZyLk5hbWVDYWxsYmFjaygicmVxdWVzdEJpbmRpbmciKSwKICAgICAgICAgICAgbmV3IGZyLk5hbWVDYWxsYmFjaygiYmluZGluZyIpLAogICAgICAgICAgICBuZXcgZnIuTmFtZUNhbGxiYWNrKCJmb3JjZUF1dGhuIiksCiAgICAgICAgICAgIG5ldyBmci5OYW1lQ2FsbGJhY2soImlkcEVudGl0eUlkIiksCiAgICAgICAgICAgIG5ldyBmci5OYW1lQ2FsbGJhY2soImlzUGFzc2l2ZSIpLAogICAgICAgICAgICBuZXcgZnIuTmFtZUNhbGxiYWNrKCJzbG9SZWxheVN0YXRlIiksCiAgICAgICAgICAgICAgbmV3IGZyLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICAgICAgKS5idWlsZCgpOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgICBjb25maWdbY2FsbGJhY2tzLmdldCgwKS5nZXRQcm9tcHQoKV0gPSBjYWxsYmFja3MuZ2V0KDApLmdldE5hbWUoKTsKICAgICAgICAgIGNvbmZpZ1tjYWxsYmFja3MuZ2V0KDEpLmdldFByb21wdCgpXSA9IChjYWxsYmFja3MuZ2V0KDEpLmdldE5hbWUoKSA9PT0gJ3RydWUnKTsKICAgICAgICAgIGNvbmZpZ1tjYWxsYmFja3MuZ2V0KDIpLmdldFByb21wdCgpXSA9IChjYWxsYmFja3MuZ2V0KDIpLmdldE5hbWUoKSA9PT0gJ3RydWUnKTsKICAgICAgICAgIGNvbmZpZ1tjYWxsYmFja3MuZ2V0KDMpLmdldFByb21wdCgpXSA9IFtjYWxsYmFja3MuZ2V0KDMpLmdldE5hbWUoKV07CiAgICAgICAgICBjb25maWdbY2FsbGJhY2tzLmdldCg0KS5nZXRQcm9tcHQoKV0gPSBbY2FsbGJhY2tzLmdldCg0KS5nZXROYW1lKCldOwogICAgICAgICAgY29uZmlnW2NhbGxiYWNrcy5nZXQoNSkuZ2V0UHJvbXB0KCldID0gY2FsbGJhY2tzLmdldCg1KS5nZXROYW1lKCk7CiAgICAgICAgICBjb25maWdbY2FsbGJhY2tzLmdldCg2KS5nZXRQcm9tcHQoKV0gPSBjYWxsYmFja3MuZ2V0KDYpLmdldE5hbWUoKTsKICAgICAgICAgIGNvbmZpZ1tjYWxsYmFja3MuZ2V0KDcpLmdldFByb21wdCgpXSA9IGNhbGxiYWNrcy5nZXQoNykuZ2V0TmFtZSgpOwogICAgICAgICAgY29uZmlnW2NhbGxiYWNrcy5nZXQoOCkuZ2V0UHJvbXB0KCldID0gY2FsbGJhY2tzLmdldCg4KS5nZXROYW1lKCk7CiAgICAgICAgICBjb25maWdbY2FsbGJhY2tzLmdldCg5KS5nZXRQcm9tcHQoKV0gPSAoY2FsbGJhY2tzLmdldCg5KS5nZXROYW1lKCkgPT09ICd0cnVlJyk7CiAgICAgICAgICBjb25maWdbY2FsbGJhY2tzLmdldCgxMCkuZ2V0UHJvbXB0KCldID0gY2FsbGJhY2tzLmdldCgxMCkuZ2V0TmFtZSgpOwogICAgICAgICAgY29uZmlnW2NhbGxiYWNrcy5nZXQoMTEpLmdldFByb21wdCgpXSA9IChjYWxsYmFja3MuZ2V0KDExKS5nZXROYW1lKCkgPT09ICd0cnVlJyk7CiAgICAgICAgICBjb25maWdbY2FsbGJhY2tzLmdldCgxMikuZ2V0UHJvbXB0KCldID0gY2FsbGJhY2tzLmdldCgxMikuZ2V0TmFtZSgpOwogICAgICAgICAgbm9kZVN0YXRlLnB1dFNoYXJlZCgibm9kZUNvbmZpZyIsIGNvbmZpZyk7CiAgICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKICAgIH0KfSgpKTs=",
  },
  {
    "_id": "6d6c2202-725b-4196-9436-92ec11a0b385",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Display sharedState and transientState.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Display States - imported (2)",
    "script": "LyogRGlzcGxheSBTdGF0ZXMKICogCiAqIERpc3BsYXkgc2hhcmVkU3RhdGUgYW5kIHRyYW5zaWVudFN0YXRlLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgICBvdXRjb21lID0gInRydWUiOwoKICAgIHZhciBhbmNob3IgPSAiYW5jaG9yLSIuY29uY2F0KGdlbmVyYXRlTnVtZXJpY1Rva2VuKCd4eHgnKSk7CiAgICB2YXIgaGFsaWduID0gImxlZnQiOwogICAgdmFyIG1lc3NhZ2UgPSAiPGg0PkN1cnJlbnQgU3RhdGUgVmFsdWVzPC9oND4iLmNvbmNhdCgKICAgICAgICAiPHA+PGI+U2hhcmVkIFN0YXRlPC9iPjo8YnIvPiIpLmNvbmNhdCgKICAgICAgICBzaGFyZWRTdGF0ZS50b1N0cmluZygpKS5jb25jYXQoIjwvcD4iKS5jb25jYXQoCiAgICAgICAgIjxwPjxiPlRyYW5zaWVudCBTdGF0ZTwvYj46PGJyLz4iKS5jb25jYXQoCiAgICAgICAgdHJhbnNpZW50U3RhdGUudG9TdHJpbmcoKSkuY29uY2F0KCI8L3A+IikKICAgIHZhciBzY3JpcHQgPSAiQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG4iLmNvbmNhdCgKICAgICAgImRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NhbGxiYWNrLWNvbXBvbmVudCcpKS5mb3JFYWNoKFxuIikuY29uY2F0KAogICAgICAiZnVuY3Rpb24gKGUpIHtcbiIpLmNvbmNhdCgKICAgICAgIiAgdmFyIG1lc3NhZ2UgPSBlLmZpcnN0RWxlbWVudENoaWxkO1xuIikuY29uY2F0KAogICAgICAiICBpZiAobWVzc2FnZS5maXJzdENoaWxkICYmIG1lc3NhZ2UuZmlyc3RDaGlsZC5ub2RlTmFtZSA9PSAnI3RleHQnICYmIG1lc3NhZ2UuZmlyc3RDaGlsZC5ub2RlVmFsdWUudHJpbSgpID09ICciKS5jb25jYXQoYW5jaG9yKS5jb25jYXQoIicpIHtcbiIpLmNvbmNhdCgKICAgICAgIiAgICBtZXNzYWdlLmNsYXNzTmFtZSA9IFwiXCI7XG4iKS5jb25jYXQoCiAgICAgICIgICAgbWVzc2FnZS5zdHlsZSA9IFwidGV4dC1hbGlnbjogbGVmdDsgaW5saW5lLXNpemU6IDQzMHB4OyBvdmVyZmxvdy13cmFwOiBicmVhay13b3JkO1wiO1xuIikuY29uY2F0KAogICAgICAiICAgIG1lc3NhZ2UuYWxpZ24gPSBcIiIpLmNvbmNhdChoYWxpZ24pLmNvbmNhdCgiXCI7XG4iKS5jb25jYXQoCiAgICAgICIgICAgbWVzc2FnZS5pbm5lckhUTUwgPSAnIikuY29uY2F0KG1lc3NhZ2UpLmNvbmNhdCgiJztcbiIpLmNvbmNhdCgKICAgICAgIiAgfVxuIikuY29uY2F0KAogICAgICAifSkiKQogICAgdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogICAgICAgIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suVGV4dE91dHB1dENhbGxiYWNrLAogICAgICAgIGNvbS5zdW4uaWRlbnRpdHkuYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjawogICAgKQogICAgaWYgKG1lc3NhZ2UubGVuZ3RoICYmIGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICAgICAgbmV3IGZyLlRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICAgICAgICAgIGZyLlRleHRPdXRwdXRDYWxsYmFjay5JTkZPUk1BVElPTiwKICAgICAgICAgICAgICAgIGFuY2hvcgogICAgICAgICAgICApLAogICAgICAgICAgICBuZXcgZnIuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrKHNjcmlwdCkKICAgICAgICApLmJ1aWxkKCkKICAgIH0KICAgIGVsc2UgewogICAgICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbyhvdXRjb21lKS5idWlsZCgpOwogICAgfQoKICAgICAvKgogICAgICAqIEdlbmVyYXRlIGEgdG9rZW4gaW4gdGhlIGRlc2lyZWQgZm9ybWF0LiBBbGwgJ3gnIGNoYXJhY3RlcnMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGEgcmFuZG9tIG51bWJlciAwLTkuCiAgICAgICogCiAgICAgICogRXhhbXBsZToKICAgICAgKiAneHh4eHgnIHByb2R1Y2VzICcyODUzNScKICAgICAgKiAneHh4LXh4eCcgcHJvZHVjZXMgJzQzMi01MjEnCiAgICAgICovCiAgICBmdW5jdGlvbiBnZW5lcmF0ZU51bWVyaWNUb2tlbihmb3JtYXQpIHsKICAgICAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1t4XS9nLCBmdW5jdGlvbihjKSB7CiAgICAgICAgICAgIHZhciByID0gTWF0aC5yYW5kb20oKSoxMHwwOwogICAgICAgICAgICB2YXIgdiA9IHI7CiAgICAgICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDEwKTsKICAgICAgICB9KTsKICAgIH0KfSgpKTs=",
  },
  {
    "_id": "403cf226-6051-4368-8b72-9ba14f9a5140",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from VKontakte",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "VKontakte Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLmZpcnN0X25hbWUpLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmZpcnN0X25hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5sYXN0X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGhvdG9fNTApLAogICAgICAgIGZpZWxkKCJlbWFpbCIsIHJhd1Byb2ZpbGUuZW1haWwpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUuZW1haWwpKSk=",
  },
  {
    "_id": "57807349-630f-496a-bccb-ea1011b8e945",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Extract username, password, and OTP from request headers and put them in shared state for validation.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "MobileOTP: Extract Username, Password, OTP",
    "script": "bG9nZ2VyLndhcm5pbmcoIk1vYmlsZU9UUDogRXh0cmFjdCBVc2VybmFtZSwgUGFzc3dvcmQsIE9UUDogc3RhcnQiKTsKCi8qCiAqIEJFR0lOIFNDUklQVCBDT05GSUdVUkFUSU9OCiAqLwp2YXIgVVNFUk5BTUVfSEVBREVSX05BTUUgPSAiWC1PcGVuQU0tVXNlcm5hbWUiOwp2YXIgUEFTU1dPUkRfSEVBREVSX05BTUUgPSAiWC1PcGVuQU0tUGFzc3dvcmQiOwp2YXIgT1RQX0hFQURFUl9OQU1FID0gIlgtT3BlbkFNLU1vYmlsZU9UUCI7Ci8qCiAqIEVORCBTQ1JJUFQgQ09ORklHVVJBVElPTgogKi8KCm91dGNvbWUgPSAiZmFsc2UiOwoKdmFyIHVzZXJuYW1lID0gZ2V0SGVhZGVyKFVTRVJOQU1FX0hFQURFUl9OQU1FKSB8fCBudWxsOwp2YXIgcGFzc3dvcmQgPSBnZXRIZWFkZXIoUEFTU1dPUkRfSEVBREVSX05BTUUpIHx8IG51bGw7CnZhciBtb2JpbGVPVFAgPSBnZXRIZWFkZXIoT1RQX0hFQURFUl9OQU1FKSB8fCBudWxsOwoKaWYgKHVzZXJuYW1lICYmIHBhc3N3b3JkICYmIG1vYmlsZU9UUCkgewogICAgICBzaGFyZWRTdGF0ZS5wdXQoInVzZXJuYW1lIiwgdXNlcm5hbWUpOwogICAgICB0cmFuc2llbnRTdGF0ZS5wdXQoInBhc3N3b3JkIiwgcGFzc3dvcmQpOwogICAgICB0cmFuc2llbnRTdGF0ZS5wdXQoIm1vYmlsZU9UUCIsIG1vYmlsZU9UUCk7CiAgICBvdXRjb21lID0gInRydWUiOwp9Cgpsb2dnZXIud2FybmluZygiTW9iaWxlT1RQOiBFeHRyYWN0IFVzZXJuYW1lLCBQYXNzd29yZCwgT1RQOiBmaW5pc2ggW291dGNvbWU9Ii5jb25jYXQob3V0Y29tZSkuY29uY2F0KCJdIikpOwoKLyoKICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIHJlcXVlc3RlZCBoZWFkZXIKICovCmZ1bmN0aW9uIGdldEhlYWRlcihoZWFkZXJOYW1lKSB7CiAgICAgIGlmIChyZXF1ZXN0SGVhZGVycy5nZXQoaGVhZGVyTmFtZSkgJiYgcmVxdWVzdEhlYWRlcnMuZ2V0KGhlYWRlck5hbWUpLmdldCgwKSkgewogICAgICAgIHJldHVybiByZXF1ZXN0SGVhZGVycy5nZXQoaGVhZGVyTmFtZSkuZ2V0KDApLnRvU3RyaW5nKCk7CiAgICB9CiAgICAgIHJldHVybiBudWxsOwp9",
  },
  {
    "_id": "e0ba741b-c952-4062-9899-0b1c19237ee4",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "FRAAS-7955 Workaround: Copy sharedState to transientState",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FRAAS-7955 Workaround",
    "script": "b3V0Y29tZSA9ICJ0cnVlIjsKdmFyIGF0dHJzID0gc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIik7CmlmIChhdHRycykgewogICAgICBzZXRUcmFuc2llbnRPYmplY3RBdHRyaWJ1dGUoImdpdmVuTmFtZSIsIGF0dHJzLmdldCgiZ2l2ZW5OYW1lIikuY29uY2F0KCItd29ya2Fyb3VuZCIpKTsKICAgICAgc2V0VHJhbnNpZW50T2JqZWN0QXR0cmlidXRlKCJzbiIsIGF0dHJzLmdldCgic24iKS5jb25jYXQoIi13b3JrYXJvdW5kIikpOwogICAgICBzZXRUcmFuc2llbnRPYmplY3RBdHRyaWJ1dGUoIm1haWwiLCBhdHRycy5nZXQoIm1haWwiKS5jb25jYXQoIi13b3JrYXJvdW5kIikpOwp9CgovKgogKiBTdG9yZSBhdHRyaWJ1dGVzIGluIHRyYW5zaWVudCBzdGF0ZSBmb3IgdXNlIHdpdGggdGhlIENyZWF0ZS9QYXRjaCBPYmplY3Qgbm9kZXMuCiAqLwpmdW5jdGlvbiBzZXRUcmFuc2llbnRPYmplY3RBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHsKICAgIHZhciB0cmFuc2llbnRTdG9yYWdlID0gdHJhbnNpZW50U3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIik7CiAgICBpZiAodHJhbnNpZW50U3RvcmFnZSAmJiB2YWx1ZSkgewogICAgICAgICAgaWYgKHRyYW5zaWVudFN0b3JhZ2UucHV0KSB7CiAgICAgICAgICAgIHRyYW5zaWVudFN0b3JhZ2UucHV0KG5hbWUsIHZhbHVlKTsKICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgdHJhbnNpZW50U3RvcmFnZVtuYW1lXSA9IHZhbHVlOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgaWYgKHZhbHVlKSB7CiAgICB0cmFuc2llbnRTdGF0ZS5wdXQoIm9iamVjdEF0dHJpYnV0ZXMiLCBKU09OLnBhcnNlKCJ7XCIiK25hbWUrIlwiOlwiIit2YWx1ZSsiXCJ9IikpOwogICAgfQp9",
  },
  {
    "_id": "d6469639-249f-4df1-9e03-335cd3e37b3d",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Get Email",
    "script": "bG9nZ2VyLmVycm9yKCJHZXQgRW1haWw6IHN0YXJ0Iik7Cm91dGNvbWUgPSAidHJ1ZSI7CmlmIChnZXRQcm9maWxlQXR0cmlidXRlKCJtYWlsIikpIHsKICBzZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUoIm1haWwiLCBnZXRQcm9maWxlQXR0cmlidXRlKCJtYWlsIikpOwp9CmxvZ2dlci5lcnJvcigiR2V0IEVtYWlsOiBlbmQiKTsKCi8qCiAqIEdldCBwcm9maWxlIGF0dHJpYnV0ZQogKi8KZnVuY3Rpb24gZ2V0UHJvZmlsZUF0dHJpYnV0ZShuYW1lKSB7CiAgICByZXR1cm4gaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZShzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpLCBuYW1lKS5pdGVyYXRvcigpLm5leHQoKTsKfQoKLyoKICogUHJvcGVybHkgc2V0IGF0dHJpYnV0ZXMgaW4gc2hhcmVkIHN0YXRlIGZvciB1c2Ugd2l0aCB0aGUgQ3JlYXRlL1BhdGNoIE9iamVjdCBub2Rlcy4KICovCmZ1bmN0aW9uIHNldFNoYXJlZE9iamVjdEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkgewogICAgaWYgKHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpKSB7CiAgICAgICAgc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikucHV0KG5hbWUsIHZhbHVlKTsKICAgIH0KICAgIGVsc2UgewogICAgICAgIHNoYXJlZFN0YXRlLnB1dCgib2JqZWN0QXR0cmlidXRlcyIsIEpTT04ucGFyc2UoIntcIiIrbmFtZSsiXCI6Iit2YWx1ZSsifSIpKTsKICAgIH0KfQ==",
  },
  {
    "_id": "36863ffb-40ec-48b9-94b1-9a99f71cc3b5",
    "context": "OIDC_CLAIMS",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for OIDC claims",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "OIDC Claims Script",
    "script": "",
  },
  {
    "_id": "5b3b2c47-0248-46f4-8a1c-8a495d249037",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Save/restore perpetrator",
    "script": "b3V0Y29tZSA9ICJ0cnVlIjsKaWYgKHNoYXJlZFN0YXRlLmdldCgicGVycGV0cmF0b3IiKSkKewogIHNoYXJlZFN0YXRlLnB1dCgidXNlcm5hbWUiLCBzaGFyZWRTdGF0ZS5nZXQoInBlcnBldHJhdG9yIikpOwovLyAgaWYgKHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpKSB7Ci8vICAgIHNoYXJlZFN0YXRlLnJlbW92ZSgib2JqZWN0QXR0cmlidXRlcyIpOwovLyAgfQogIHNoYXJlZFN0YXRlLnB1dCgib2JqZWN0QXR0cmlidXRlcyIsIHt9KTsKfQplbHNlCnsKICBzaGFyZWRTdGF0ZS5wdXQoInBlcnBldHJhdG9yIiwgc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKTsKICBpZiAoc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikgJiYgCiAgICAgIHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpLmdldCgidXNlck5hbWUiKSkgewogICAgc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikucmVtb3ZlKCJ1c2VyTmFtZSIpOwogIH0KfQ==",
  },
  {
    "_id": "50cde102-d4b6-44c4-9ba7-8564af05ae08",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Select and apply theme from query param in the request URL.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Select Theme from URL",
    "script": "LyogU2VsZWN0IFRoZW1lIGZyb20gVVJMCiAqIAogKiBTZWxlY3QgYW5kIGFwcGx5IHRoZW1lIGZyb20gcXVlcnkgcGFyYW0gaW4gdGhlIHJlcXVlc3QgVVJMLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgICAgIG91dGNvbWUgPSAidHJ1ZSI7CiAgICAgIHZhciB0aGVtZSA9ICIiOwogICAgICBpZiAocmVxdWVzdFBhcmFtZXRlcnMuZ2V0KCJ0aGVtZUlkIikpIHsKICAgICAgICAgIHRoZW1lID0gcmVxdWVzdFBhcmFtZXRlcnMuZ2V0KCJ0aGVtZUlkIikuZ2V0KDApOwogICAgfQoKICAgIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuUG9sbGluZ1dhaXRDYWxsYmFjawogICAgKQogICAgaWYgKHRoZW1lICYmIGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICB2YXIgc3RhZ2UgPSAidGhlbWVJZD0iK3RoZW1lOwogICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5zZW5kKAogICAgICAgICAgICAgIG5ldyBmci5Qb2xsaW5nV2FpdENhbGxiYWNrKCIxMDAiLCAiUGxlYXNlIHdhaXQgLi4uIikKICAgICAgICApLndpdGhTdGFnZShzdGFnZSkuYnVpbGQoKTsKICAgIH0gZWxzZSB7CiAgICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbyhvdXRjb21lKS5idWlsZCgpOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "779bb956-676d-4e44-b828-b9efa3c866d4",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ForgeRockVpnOnly",
    "script": "LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwoKdmFyIHZhbGlkSXBBZGRyZXNzZXMgPSBbCiAgIjM3LjcxLjE0OC45MiIsIC8vIEZSIEdyZW5vYmxlCiAgIjg0LjIxNC4xNTYuNTAiLCAvLyBGUiBPc2xvCiAgIjE4MC4yNTUuNjQuMjYiLCAvLyBGUiBTaW5nYXBvcmUKICAiMTI4LjEwNi4xMDUuMTM2IiwgLy8gRlIgU2luZ2Fwb3JlIFNhbGVzCiAgIjE4OC4zOS4yMzUuMTMwIiwgLy8gRlIgQnJpc3RvbAogICI3OC4zMy4yMi4xNjIiLCAvLyBGUiBCcmlzdG9sIE1hcnNoIFN0cmVldAogICI2NS4xMTMuOTguMTAiLCAvLyBGUiBTYW4gRnJhbmNpc2NvCiAgIjI0LjE1NS4xNDYuMTgiIC8vIEZSIEF1c3RpbgpdOwoKdHJ5IHsKICBvdXRjb21lID0gZnVuY3Rpb24oKSB7CiAgICBsb2dnZXIubWVzc2FnZShyZXF1ZXN0SGVhZGVycyk7CiAgICB2YXIgdnBuQnlwYXNzU2VjcmV0ID0gc3lzdGVtRW52LmdldFByb3BlcnR5KCdlc3YuYW1hZG1pbi52cG4uYnlwYXNzLnNlY3JldCcsICcnKSArICcnOwogICAgdmFyIGJ5cGFzc0hlYWRlciA9IHJlcXVlc3RIZWFkZXJzLmdldChuZXcgamF2YS5sYW5nLlN0cmluZygneC1mb3JnZXJvY2stdGVzdHMtYmVhcmVyJykpOwogICAgbG9nZ2VyLm1lc3NhZ2UoImNoZWNraW5nIGZvciBWUE4gYnlwYXNzIC0gaGVhZGVyIHt9IHRvIG1hdGNoIHNlY3JldCB7fSIsIGJ5cGFzc0hlYWRlciwgdnBuQnlwYXNzU2VjcmV0KTsKICAgIGlmICh2cG5CeXBhc3NTZWNyZXQgJiYgYnlwYXNzSGVhZGVyICYmIGJ5cGFzc0hlYWRlci5zaXplKCkgPT09IDEpIHsKICAgICAgbG9nZ2VyLm1lc3NhZ2UoImJ5cGFzcyBoZWFkZXIgaXMgcHJlc2VudCIpOwogICAgICBpZiAoYnlwYXNzSGVhZGVyLmdldCgwKSArICcnID09PSB2cG5CeXBhc3NTZWNyZXQgKyAnJykgewogICAgICAgIGxvZ2dlci53YXJuaW5nKCJieXBhc3NpbmcgVlBOIGNoZWNrIC0gcmVxdWVzdCBmcm9tIHRlc3RzIGF1dGhvcml6ZWQiKTsKICAgICAgICByZXR1cm4gJ1RydWUnOwogICAgICB9CiAgICB9CiAgICB2YXIgY2xpZW50SXBBZGRyZXNzZXMgPSByZXF1ZXN0SGVhZGVycy5nZXQobmV3IGphdmEubGFuZy5TdHJpbmcoJ3gtZm9yd2FyZGVkLWZvcicpKTsKICAgIGxvZ2dlci5tZXNzYWdlKGNsaWVudElwQWRkcmVzc2VzKTsKICAgIGlmICghY2xpZW50SXBBZGRyZXNzZXMpIHsKICAgICAgbG9nZ2VyLm1lc3NhZ2UoIk5vIGZvcndhcmRlZCBoZWFkZXIgLSBpbnRlcm5hbCBjbHVzdGVyIHJlcXVlc3QiKTsKICAgICAgcmV0dXJuICdUcnVlJzsKICAgIH0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xpZW50SXBBZGRyZXNzZXMuc2l6ZSgpOyBpKyspIHsKICAgICAgdmFyIGNsaWVudElwSGVhZGVyID0gY2xpZW50SXBBZGRyZXNzZXMuZ2V0KGkpOwogICAgICB2YXIgaXBBZGRyZXNzZXMgPSBjbGllbnRJcEhlYWRlci5zcGxpdCgnLCcpOwogICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGlwQWRkcmVzc2VzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgdmFyIGNsaWVudElwID0gaXBBZGRyZXNzZXNbal0udHJpbSgpOwogICAgICAgIGxvZ2dlci5tZXNzYWdlKCdDaGVja2luZyBjbGllbnQgSVAgJyArIGNsaWVudElwKTsKICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHZhbGlkSXBBZGRyZXNzZXMubGVuZ3RoOyBrKyspIHsKICAgICAgICAgIGlmIChjbGllbnRJcCArICcnID09PSB2YWxpZElwQWRkcmVzc2VzW2tdKSB7CiAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKCJyZXF1ZXN0IGZyb20gRm9yZ2VSb2NrIFZQTiBhdXRob3JpemVkIik7CiAgICAgICAgICAgIHJldHVybiAnVHJ1ZSc7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBsb2dnZXIud2FybmluZygicmVxdWVzdCBmcm9tIG91dHNpZGUgdGhlIGNsdXN0ZXIgYW5kIG5vdCBmcm9tIEZvcmdlUm9jayBWUE4gcmVqZWN0ZWQiKTsKICAgIHJldHVybiAnRmFsc2UnOwogIH0oKTsKCn0gY2F0Y2ggKGUpIHsKCiAgbG9nZ2VyLmVycm9yKCdGb3JnZVJvY2tWcG5Pbmx5IGZhaWxlZCB0byBjaGVjayBJUCcpOwogIGxvZ2dlci5lcnJvcihlKTsKICBvdXRjb21lID0gJ0Vycm9yJzsKCn0K",
  },
  {
    "_id": "91554b10-79a5-4aa8-aca1-59481a734c19",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Twilio SMS OTP Sender",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twilio SMS OTP Sender",
    "script": "LyogVHdpbGlvIFNNUyBPVFAgU2VuZGVyCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICogCiAqIFRoaXMgc2NyaXB0IHdpbGwgc2VuZCBhbiBTTVMgY29udGFpbmluZyB0aGUgT1RQIHRvIHRoZSBwaG9uZSBudW1iZXIgaW4gdGhlIHVzZXIncyBwcm9maWxlLgogKiAKICogVGhpcyBzY3JpcHQgbmVlZHMgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIG5vdCB3b3JrIHByb3Blcmx5IGFzIGlzLiAKICogSXQgcmVxdWlyZXMgdGhlIElkZW50aWZ5IEV4aXN0aW5nIFVzZXIgbm9kZSBhbmQgSE9UUCBHZW5lcmF0b3Igbm9kZSBiZWZvcmUgaXQgaXMgYmVpbmcgY2FsbGVkLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHNlbnQKICogLSBmYWlsZWQKICovCmxvZ2dlci53YXJuaW5nKCJUd2lsaW8gU01TIE9UUCBTZW5kZXI6IHN0YXJ0Iik7CgppZiAoc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKSAmJiBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHNoYXJlZFN0YXRlLmdldCgiX2lkIiksICJ0ZWxlcGhvbmVOdW1iZXIiKS5pdGVyYXRvcigpLmhhc05leHQoKSkgewogICAgdmFyIEJhc2U2ND17X2tleVN0cjoiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0iLGVuY29kZTpmdW5jdGlvbihpbnB1dCl7dmFyIG91dHB1dD0iIjt2YXIgY2hyMSxjaHIyLGNocjMsZW5jMSxlbmMyLGVuYzMsZW5jNDt2YXIgaT0wO2lucHV0PUJhc2U2NC5fdXRmOF9lbmNvZGUoaW5wdXQpO3doaWxlKGk8aW5wdXQubGVuZ3RoKXtjaHIxPWlucHV0LmNoYXJDb2RlQXQoaSsrKTtjaHIyPWlucHV0LmNoYXJDb2RlQXQoaSsrKTtjaHIzPWlucHV0LmNoYXJDb2RlQXQoaSsrKTtlbmMxPWNocjE+PjI7ZW5jMj0oY2hyMSYzKTw8NHxjaHIyPj40O2VuYzM9KGNocjImMTUpPDwyfGNocjM+PjY7ZW5jND1jaHIzJjYzO2lmKGlzTmFOKGNocjIpKXtlbmMzPWVuYzQ9NjR9ZWxzZSBpZihpc05hTihjaHIzKSl7ZW5jND02NH1vdXRwdXQ9b3V0cHV0K3RoaXMuX2tleVN0ci5jaGFyQXQoZW5jMSkrdGhpcy5fa2V5U3RyLmNoYXJBdChlbmMyKSt0aGlzLl9rZXlTdHIuY2hhckF0KGVuYzMpK3RoaXMuX2tleVN0ci5jaGFyQXQoZW5jNCl9cmV0dXJuIG91dHB1dH0sZGVjb2RlOmZ1bmN0aW9uKGlucHV0KXt2YXIgb3V0cHV0PSIiO3ZhciBjaHIxLGNocjIsY2hyMzt2YXIgZW5jMSxlbmMyLGVuYzMsZW5jNDt2YXIgaT0wO2lucHV0PWlucHV0LnJlcGxhY2UoL1teQS1aYS16MC05XCtcL1w9XS9nLCIiKTt3aGlsZShpPGlucHV0Lmxlbmd0aCl7ZW5jMT10aGlzLl9rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7ZW5jMj10aGlzLl9rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7ZW5jMz10aGlzLl9rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7ZW5jND10aGlzLl9rZXlTdHIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaSsrKSk7Y2hyMT1lbmMxPDwyfGVuYzI+PjQ7Y2hyMj0oZW5jMiYxNSk8PDR8ZW5jMz4+MjtjaHIzPShlbmMzJjMpPDw2fGVuYzQ7b3V0cHV0PW91dHB1dCtTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjEpO2lmKGVuYzMhPTY0KXtvdXRwdXQ9b3V0cHV0K1N0cmluZy5mcm9tQ2hhckNvZGUoY2hyMil9aWYoZW5jNCE9NjQpe291dHB1dD1vdXRwdXQrU3RyaW5nLmZyb21DaGFyQ29kZShjaHIzKX19b3V0cHV0PUJhc2U2NC5fdXRmOF9kZWNvZGUob3V0cHV0KTtyZXR1cm4gb3V0cHV0fSxfdXRmOF9lbmNvZGU6ZnVuY3Rpb24oc3RyaW5nKXtzdHJpbmc9c3RyaW5nLnJlcGxhY2UoL1xyXG4vZywiXG4iKTt2YXIgdXRmdGV4dD0iIjtmb3IodmFyIG49MDtuPHN0cmluZy5sZW5ndGg7bisrKXt2YXIgYz1zdHJpbmcuY2hhckNvZGVBdChuKTtpZihjPDEyOCl7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjKX1lbHNlIGlmKGM+MTI3JiZjPDIwNDgpe3V0ZnRleHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoYz4+NnwxOTIpO3V0ZnRleHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoYyY2M3wxMjgpfWVsc2V7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjPj4xMnwyMjQpO3V0ZnRleHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoYz4+NiY2M3wxMjgpO3V0ZnRleHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoYyY2M3wxMjgpfX1yZXR1cm4gdXRmdGV4dH0sX3V0ZjhfZGVjb2RlOmZ1bmN0aW9uKHV0ZnRleHQpe3ZhciBzdHJpbmc9IiI7dmFyIGk9MDt2YXIgYz1jMT1jMj0wO3doaWxlKGk8dXRmdGV4dC5sZW5ndGgpe2M9dXRmdGV4dC5jaGFyQ29kZUF0KGkpO2lmKGM8MTI4KXtzdHJpbmcrPVN0cmluZy5mcm9tQ2hhckNvZGUoYyk7aSsrfWVsc2UgaWYoYz4xOTEmJmM8MjI0KXtjMj11dGZ0ZXh0LmNoYXJDb2RlQXQoaSsxKTtzdHJpbmcrPVN0cmluZy5mcm9tQ2hhckNvZGUoKGMmMzEpPDw2fGMyJjYzKTtpKz0yfWVsc2V7YzI9dXRmdGV4dC5jaGFyQ29kZUF0KGkrMSk7YzM9dXRmdGV4dC5jaGFyQ29kZUF0KGkrMik7c3RyaW5nKz1TdHJpbmcuZnJvbUNoYXJDb2RlKChjJjE1KTw8MTJ8KGMyJjYzKTw8NnxjMyY2Myk7aSs9M319cmV0dXJuIHN0cmluZ319OwoKICAgICAgIC8qIEJFR0lOIFNDUklQVCBDT05GSUdVUkFUSU9OCiAgICAgKgogICAgICogUkVQTEFDRSBXSVRIIFlPVVIgT1dOIEFaVVJFIEFEIFNFVFRJTkdTCiAgICAgKi8KICAgIHZhciBUV0lMSU9fQVBJX1NJRCA9ICJBQzc1MDQxNWUzMTYzYTJlNTdiN2FlZWE3ZWVkODJkOTQ0IjsKICAgIHZhciBUV0lMSU9fQVBJX1RPS0VOID0gImQzNmE3MTljOTRiNGJlMDg1OTJkNjllYzRmODBhNWJiIjsKICAgIHZhciBUV0lMSU9fQVBJX0ZST00gPSAiKzEzMTc2NDQzMTA3IjsKICAgIC8qCiAgICAgKiBFTkQgU0NSSVBUIENPTkZJR1VSQVRJT04KICAgICAqLwogIAogICAgLy8gVHdpbGlvIFNNUyBNZXNzYWdlIEFQSSBDb25maWd1cmF0aW9uCiAgICB2YXIgVFdJTElPX0FQSV9VUkkgPSAiaHR0cHM6Ly9hcGkudHdpbGlvLmNvbS8yMDEwLTA0LTAxL0FjY291bnRzLyIuY29uY2F0KFRXSUxJT19BUElfU0lEKS5jb25jYXQoIi9NZXNzYWdlcy5qc29uIik7ICAgIAogICAgdmFyIFRXSUxJT19BUElfVE8gPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHNoYXJlZFN0YXRlLmdldCgiX2lkIiksICJ0ZWxlcGhvbmVOdW1iZXIiKS5pdGVyYXRvcigpLm5leHQoKTsKICAgIHZhciBUV0lMSU9fQVBJX0JPRFkgPSAiT1RQIGZvciBhY2NvdW50ICIuY29uY2F0KHNoYXJlZFN0YXRlLmdldCgidXNlcm5hbWUiKSkuY29uY2F0KCI6ICIpLmNvbmNhdChzaGFyZWRTdGF0ZS5nZXQoIm9uZVRpbWVQYXNzd29yZCIpKTsKICAgIC8vbG9nZ2VyLndhcm5pbmcoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogVG86ICIuY29uY2F0KFRXSUxJT19BUElfVE8pKTsKICAgIC8vbG9nZ2VyLndhcm5pbmcoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogTWVzc2FnZTogIi5jb25jYXQoVFdJTElPX0FQSV9CT0RZKSk7CgogICAgdmFyIEFVVEhaID0gIkJhc2ljICIuY29uY2F0KEJhc2U2NC5lbmNvZGUoVFdJTElPX0FQSV9TSUQuY29uY2F0KCc6JykuY29uY2F0KFRXSUxJT19BUElfVE9LRU4pKSk7CiAgICAvL2xvZ2dlci53YXJuaW5nKCJUd2lsaW8gU01TIE9UUCBTZW5kZXI6IEFVVEhaIC0gIi5jb25jYXQoQVVUSFopKTsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRNZXRob2QoJ1BPU1QnKTsKICAgIHJlcXVlc3Quc2V0VXJpKFRXSUxJT19BUElfVVJJKTsKICAgIHJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIpOwogICAgcmVxdWVzdC5nZXRIZWFkZXJzKCkuYWRkKCJBdXRob3JpemF0aW9uIiwgQVVUSFopOwogICAgdmFyIHBhcmFtcyA9IHJlcXVlc3QuZ2V0Rm9ybSgpOwogICAgcGFyYW1zLmFkZCgiRnJvbSIsIFRXSUxJT19BUElfRlJPTSk7CiAgICBwYXJhbXMuYWRkKCJCb2R5IiwgVFdJTElPX0FQSV9CT0RZKTsKICAgIHBhcmFtcy5hZGQoIlRvIiwgVFdJTElPX0FQSV9UTyk7CiAgICByZXF1ZXN0LmdldEVudGl0eSgpLnNldFN0cmluZyhwYXJhbXMudG9TdHJpbmcoKSk7CgogICAgdmFyIHJlc3BvbnNlID0gaHR0cENsaWVudC5zZW5kKHJlcXVlc3QpLmdldCgpOwogICAgdmFyIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpOwogICAgLy9sb2dnZXIud2FybmluZygiVHdpbGlvIFNNUyBPVFAgU2VuZGVyOiBKU09OIHJlc3VsdDogIiArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpOwoKICAgIGlmIChyZXN1bHRbImVycm9yX2NvZGUiXSkgewogICAgICAgIG91dGNvbWUgPSAiZmFpbGVkIjsKICAgICAgICBsb2dnZXIuZXJyb3IoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogZXJyb3JfY29kZSA9ICIuY29uY2F0KHJlc3VsdFsiZXJyb3JfY29kZSJdKSk7CiAgICAgICAgbG9nZ2VyLmVycm9yKCJUd2lsaW8gU01TIE9UUCBTZW5kZXI6IGVycm9yX21lc3NhZ2UgPSAiLmNvbmNhdChyZXN1bHRbImVycm9yX21lc3NhZ2UiXSkpOwogICAgICAgIGxvZ2dlci5lcnJvcigiVHdpbGlvIFNNUyBPVFAgU2VuZGVyOiBvdXRjb21lID0gZmFpbGVkIik7CiAgICB9IGVsc2UgaWYgKHJlc3VsdFsiY29kZSJdKSB7CiAgICAgICAgb3V0Y29tZSA9ICJmYWlsZWQiOwogICAgICAgIGxvZ2dlci5lcnJvcigiVHdpbGlvIFNNUyBPVFAgU2VuZGVyOiBjb2RlID0gIi5jb25jYXQocmVzdWx0WyJjb2RlIl0pKTsKICAgICAgICBsb2dnZXIuZXJyb3IoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogbWVzc2FnZSA9ICIuY29uY2F0KHJlc3VsdFsibWVzc2FnZSJdKSk7CiAgICB9IGVsc2UgewogICAgICAgIG91dGNvbWUgPSAic2VudCI7CiAgICAgICAgbG9nZ2VyLndhcm5pbmcoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogb3V0Y29tZSA9IHNlbnQiKTsKICAgIH0KfSBlbHNlIHsKICAgICAgb3V0Y29tZSA9ICJmYWlsZWQiOwogICAgICBsb2dnZXIuZXJyb3IoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogTm8gdXNlciBvciBwaG9uZSBudW1iZXIgZm91bmQhIFVzZSAnSWRlbnRpZnkgRXhpc3RpbmcgVXNlciBub2RlIGJlZm9yZSB0aGlzIHNjcmlwdCB0byBwb3B1bGF0ZSB0aGUgdXNlcidzIF9pZCBpbiBzaGFyZWQgc3RhdGUhJyIpOwogICAgICBsb2dnZXIuZXJyb3IoIlR3aWxpbyBTTVMgT1RQIFNlbmRlcjogb3V0Y29tZSA9IGZhaWxlZCIpOwp9",
  },
  {
    "_id": "c253a7ac-ebc9-4268-9e62-89f38f98e4ab",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "CopyIDToObjectAttributes",
    "script": "LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwoKc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikucHV0KCJfaWQiLCBzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpKTsKCm91dGNvbWUgPSAidHJ1ZSI7",
  },
  {
    "_id": "3d97c436-42c0-4dd0-a571-ea6f34f752b3",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Itsme",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Itsme Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAtMjAyMSBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgppbXBvcnQgc3RhdGljIG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUuZmllbGQKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmpzb24KaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLm9iamVjdAoKaW1wb3J0IG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUKCkpzb25WYWx1ZSBtYW5hZ2VkVXNlciA9IGpzb24ob2JqZWN0KAogICAgICAgIGZpZWxkKCJpZCIsIHJhd1Byb2ZpbGUuc3ViKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLm5hbWUpLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmdpdmVuX25hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5mYW1pbHlfbmFtZSksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCkpKQpyZXR1cm4gbWFuYWdlZFVzZXI=",
  },
  {
    "_id": "b6fce769-cf21-4963-a8dc-7c5370a4d15b",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "shared State Printer",
    "script": "dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGksCiAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2sKKTsKb3V0Y29tZSA9ICJ0cnVlIjsKd2l0aCAoZnIpIHsKICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgdmFyIGNhbGxiYWNrID0gbmV3IFRleHRPdXRwdXRDYWxsYmFjayhUZXh0T3V0cHV0Q2FsbGJhY2suSU5GT1JNQVRJT04sICJzaGFyZWRTdGF0ZTogIi5jb25jYXQoc2hhcmVkU3RhdGUudG9TdHJpbmcoKSkpOwogICAgYWN0aW9uID0gQWN0aW9uLnNlbmQoY2FsbGJhY2spLmJ1aWxkKCk7CiAgfSBlbHNlIHsKICAgIGFjdGlvbiA9IEFjdGlvbi5nb1RvKCJ0cnVlIikuYnVpbGQoKTsKICB9Cn0=",
  },
  {
    "_id": "fd536b1f-6ee4-4505-b148-71160414ddcc",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_AttributeCollectionWorkaroundCleanup",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKVGhpcyBpcyB0aGUgc2Vjb25kIHBhcnQgb2YgYSB3b3JrYXJvdW5kIGJlZ2FuIGluIEFkbWluX0F0dHJpYnV0ZUNvbGxlY3Rpb25Xb3JrYXJvdW5kLgoqLwoKdmFyIG9iakF0dHJzID0gc2hhcmVkU3RhdGUuZ2V0KCdvYmplY3RBdHRyaWJ1dGVzJykgfHwgbmV3IEhhc2hNYXAoKTsKCmlmIChvYmpBdHRycy5jb250YWluc0tleSgnZ3JvdXBzJykpIHsKICB2YXIgZ3JvdXBzID0gb2JqQXR0cnMuZ2V0KCdncm91cHMnKTsKICBpZiAoZ3JvdXBzLmxlbmd0aCA9PSAxICYmIGdyb3Vwc1swXSA9PSAnZmFrZScpIHsKICAgIG9iakF0dHJzLnJlbW92ZSgnZ3JvdXBzJyk7CiAgfQp9CgppZiAob2JqQXR0cnMuY29udGFpbnNLZXkoJ2ludml0ZURhdGUnKSAmJiBvYmpBdHRycy5nZXQoJ2ludml0ZURhdGUnKSA9PSAnZmFrZScpIHsKICAgb2JqQXR0cnMucmVtb3ZlKCdpbnZpdGVEYXRlJyk7Cn0KCnNoYXJlZFN0YXRlLnB1dCgnb2JqZWN0QXR0cmlidXRlcycsIG9iakF0dHJzKTsKCm91dGNvbWUgPSAnVHJ1ZSc7",
  },
  {
    "_id": "2a076e9e-75a9-46b5-b971-10ffafbdf652",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Return true if a goto param has been specified, false otherwise.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Goto Specified Decision",
    "script": "LyogR290byBTcGVjaWZpZWQgRGVjaXNpb24KICogCiAqIFJldHVybiB0cnVlIGlmIGEgZ290byBwYXJhbSBoYXMgYmVlbiBzcGVjaWZpZWQsIGZhbHNlIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IHJlcXVpcmUgY29uZmlndXJhdGlvbi4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICogLSBmYWxzZQogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqLwooZnVuY3Rpb24gKCkgewogICAgbG9nZ2VyLm1lc3NhZ2UoIkdvdG8gU3BlY2lmaWVkIERlY2lzaW9uOiBzdGFydCIpOwogICAgICBvdXRjb21lID0gImZhbHNlIjsKICAgICAgdmFyIHJlZmVyZXIgPSBwYXJzZVVybChyZXF1ZXN0SGVhZGVycy5nZXQoInJlZmVyZXIiKS5nZXQoMCkpOwogICAgICBpZiAocmVmZXJlci5zZWFyY2hQYXJhbS5nb3RvKSB7CiAgICAgICAgICBvdXRjb21lID0gInRydWUiOwogICAgfQogICAgbG9nZ2VyLm1lc3NhZ2UoIkdvdG8gU3BlY2lmaWVkIERlY2lzaW9uOiBlbmQgW291dGNvbWU9e31dIiwgb3V0Y29tZSk7CgogICAgLyoKICAgICAqIFBhcnNlIGEgVVJMIGludG8gaXRzIGNvbXBvbmVudHMgYW5kIG1ha2UgdGhlbSBlYXNpbHkgYWNjZXNzaWJsZSBieSBuYW1lCiAgICAgKgogICAgICogVXNlIGluIGEgU2NyaXB0ZSBEZWNpc2lvbiBOb2RlIFNjcmlwdCBhcyBmb2xsb3dzOgogICAgICogdmFyIHJlZmVyZXIgPSBwYXJzZVVybChyZXF1ZXN0SGVhZGVycy5nZXQoInJlZmVyZXIiKS5nZXQoMCkpOwogICAgICogdmFyIG9yaWdpbiA9IHJlZmVyZXIub3JpZ2luOwogICAgICogCiAgICAgKiBlLmcuOiBodHRwczovL29wZW5hbS12b2xrZXItZGV2LmZvcmdlYmxvY2tzLmNvbS9hbS9YVUkvP3JlYWxtPS9icmF2byZhdXRoSW5kZXhUeXBlPXNlcnZpY2UmYXV0aEluZGV4VmFsdWU9SW5pdGlhdGVPd25lckNsYWltIy8KICAgICAqIHsKICAgICAqICAgICBoYXNoOiAnIy8nLAogICAgICogICAgIGhvc3Q6ICdvcGVuYW0tdm9sa2VyLWRldi5mb3JnZWJsb2Nrcy5jb20nLAogICAgICogICAgIGhvc3RuYW1lOiAnb3BlbmFtLXZvbGtlci1kZXYuZm9yZ2VibG9ja3MuY29tJywKICAgICAqICAgICBocmVmOiAnaHR0cHM6Ly9vcGVuYW0tdm9sa2VyLWRldi5mb3JnZWJsb2Nrcy5jb20vYW0vWFVJLz9yZWFsbT0vYnJhdm8mYXV0aEluZGV4VHlwZT1zZXJ2aWNlJmF1dGhJbmRleFZhbHVlPUluaXRpYXRlT3duZXJDbGFpbSMvJywKICAgICAqICAgICBvcmlnaW46ICdodHRwczovL29wZW5hbS12b2xrZXItZGV2LmZvcmdlYmxvY2tzLmNvbScsCiAgICAgKiAgICAgcGF0aG5hbWU6ICcvYW0vWFVJLycsCiAgICAgKiAgICAgcG9ydDogJycsCiAgICAgKiAgICAgcHJvdG9jb2w6ICdodHRwcycsCiAgICAgKiAgICAgc2VhcmNoOiAnP3JlYWxtPS9icmF2byZhdXRoSW5kZXhUeXBlPXNlcnZpY2UmYXV0aEluZGV4VmFsdWU9SW5pdGlhdGVPd25lckNsYWltJywKICAgICAqICAgICB1c2VybmFtZTogJycsCiAgICAgKiAgICAgcGFzc3dvcmQ6ICcnLAogICAgICogICAgIHNlYXJjaFBhcmFtOiB7CiAgICAgKiAgICAgICAgIHJlYWxtOiAnL2JyYXZvJywKICAgICAqICAgICAgICAgYXV0aEluZGV4VHlwZTogJ3NlcnZpY2UnLAogICAgICogICAgICAgICBhdXRoSW5kZXhWYWx1ZTogJ0luaXRpYXRlT3duZXJDbGFpbScKICAgICAqICAgICB9CiAgICAgKiB9CiAgICAgKi8KICAgIGZ1bmN0aW9uIHBhcnNlVXJsKGhyZWYpIHsKICAgICAgICB2YXIgbSA9IGhyZWYubWF0Y2goL14oKFteOlwvPyNdKyk6Pyg/OlwvXC8oKD86KFteXC8/IzpdKik6KFteXC8/IzpdKilAKT8oW15cLz8jOl0qKSg/OjooW15cLz8jOl0qKSk/KSkpPyhbXj8jXSopKFw/W14jXSopPygjLiopPyQvKSwKICAgICAgICByID0gewogICAgICAgICAgICBoYXNoOiBtWzEwXSB8fCAiIiwgICAgICAgICAgICAgICAgICAgICAgLy8gIy8KICAgICAgICAgICAgaG9zdDogbVszXSB8fCAiIiwgICAgICAgICAgICAgICAgICAgICAgIC8vIG9wZW5hbS12b2xrZXItZGV2LmZvcmdlYmxvY2tzLmNvbQogICAgICAgICAgICBob3N0bmFtZTogbVs2XSB8fCAiIiwgICAgICAgICAgICAgICAgICAgLy8gb3BlbmFtLXZvbGtlci1kZXYuZm9yZ2VibG9ja3MuY29tCiAgICAgICAgICAgIGhyZWY6IG1bMF0gfHwgIiIsICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL29wZW5hbS12b2xrZXItZGV2LmZvcmdlYmxvY2tzLmNvbS9hbS9YVUkvP3JlYWxtPS9icmF2byZhdXRoSW5kZXhUeXBlPXNlcnZpY2UmYXV0aEluZGV4VmFsdWU9SW5pdGlhdGVPd25lckNsYWltIy8KICAgICAgICAgICAgb3JpZ2luOiBtWzFdIHx8ICIiLCAgICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vb3BlbmFtLXZvbGtlci1kZXYuZm9yZ2VibG9ja3MuY29tCiAgICAgICAgICAgIHBhdGhuYW1lOiBtWzhdIHx8IChtWzFdID8gIi8iIDogIiIpLCAgICAvLyAvYW0vWFVJLwogICAgICAgICAgICBwb3J0OiBtWzddIHx8ICIiLCAgICAgICAgICAgICAgICAgICAgICAgLy8gCiAgICAgICAgICAgIHByb3RvY29sOiBtWzJdIHx8ICIiLCAgICAgICAgICAgICAgICAgICAvLyBodHRwcwogICAgICAgICAgICBzZWFyY2g6IG1bOV0gfHwgIiIsICAgICAgICAgICAgICAgICAgICAgLy8gP3JlYWxtPS9icmF2byZhdXRoSW5kZXhUeXBlPXNlcnZpY2UmYXV0aEluZGV4VmFsdWU9SW5pdGlhdGVPd25lckNsYWltCiAgICAgICAgICAgIHVzZXJuYW1lOiBtWzRdIHx8ICIiLCAgICAgICAgICAgICAgICAgICAvLyAKICAgICAgICAgICAgcGFzc3dvcmQ6IG1bNV0gfHwgIiIsICAgICAgICAgICAgICAgICAgIC8vIAogICAgICAgICAgICBzZWFyY2hQYXJhbToge30gICAgICAgICAgICAgICAgICAgICAgICAgLy8geyByZWFsbTogJy9icmF2bycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGF1dGhJbmRleFR5cGU6ICdzZXJ2aWNlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgYXV0aEluZGV4VmFsdWU6ICdJbml0aWF0ZU93bmVyQ2xhaW0nIH0KICAgICAgICB9OwogICAgICAgIGlmIChyLnByb3RvY29sLmxlbmd0aCA9PSAyKSB7CiAgICAgICAgICAgIHIucHJvdG9jb2wgPSAiZmlsZTovLy8iICsgci5wcm90b2NvbC50b1VwcGVyQ2FzZSgpOwogICAgICAgICAgICByLm9yaWdpbiA9IHIucHJvdG9jb2wgKyAiLy8iICsgci5ob3N0OwogICAgICAgIH0KICAgICAgICBpZiAoci5zZWFyY2gubGVuZ3RoID4gMikgewogICAgICAgICAgICB2YXIgcXVlcnkgPSAoci5zZWFyY2guaW5kZXhPZignPycpID09PSAwKSA/IHIuc2VhcmNoLnN1YnN0cigxKSA6IHIuc2VhcmNoOwogICAgICAgICAgICB2YXIgdmFycyA9IHF1ZXJ5LnNwbGl0KCcmJyk7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgcGFpciA9IHZhcnNbaV0uc3BsaXQoJz0nKTsKICAgICAgICAgICAgci5zZWFyY2hQYXJhbVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHIuaHJlZiA9IHIub3JpZ2luICsgci5wYXRobmFtZSArIHIuc2VhcmNoICsgci5oYXNoOwogICAgICAgIHJldHVybiByOwogICAgfTsKfSgpKTs=",
  },
  {
    "_id": "b88ce1fe-2480-4fd5-8062-2bd1f4659e2e",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_LoadObjectByID",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKICogVGhpcyBpcyBhIHV0aWxpdHkgc2NyaXB0IHRvIHNpbXBsaWZ5IGFjY2VzcyB0byBhZG1pbiBpZGVudGl0eSBwcm9wZXJ0aWVzLiBJdAogKiByZXF1aXJlcyB0aGF0IGBzaGFyZWRTdGF0ZS5faWRgIGJlIHBvcHVsYXRlZCwgd2hpY2ggY2FuIGJlIGxvYWRlZCB1c2luZyBhbgogKiBJZGVudGlmeSBFeGlzdGluZyBVc2VyIG5vZGUuCiAqLwoKZnVuY3Rpb24gdmFsKGF0dHJzLCBuYW1lKSB7CiAgaWYgKGF0dHJzLmNvbnRhaW5zS2V5KG5hbWUpKSB7CiAgICByZXR1cm4gYXR0cnMuZ2V0KG5hbWUpLml0ZXJhdG9yKCkubmV4dCgpOwogIH0KICByZXR1cm4gJyc7Cn0KCihmdW5jdGlvbigpIHsKICB2YXIgZnIgPSBuZXcgSmF2YUltcG9ydGVyKAogICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlcywKICAgIG9yZy5mb3JnZXJvY2suZ3VpY2UuY29yZQogICk7CgogIHdpdGggKGZyKSB7CiAgICB0cnkgewoKICAgICAgb3V0Y29tZSA9ICdGYWxzZSc7CgogICAgICBpZiAoIXNoYXJlZFN0YXRlLmNvbnRhaW5zS2V5KCdfaWQnKSkgewogICAgICAgIHRocm93ICdSZXF1aXJlZCBzaGFyZWRTdGF0ZSBwcm9wZXJ0eSBfaWQgaXMgbWlzc2luZyc7CiAgICAgIH0gICAgICAKICAgICAgCiAgICAgIHZhciByZWFsbSA9IHNoYXJlZFN0YXRlLmdldCgncmVhbG0nKTsKICAgICAgdmFyIHV1aWQgPSBzaGFyZWRTdGF0ZS5nZXQoJ19pZCcpOwogICAgICAKICAgICAgdmFyIGlkZW50aXR5UHJvdmlkZXIgPSBJbmplY3RvckhvbGRlci5nZXRJbnN0YW5jZShJZGVudGl0eVByb3ZpZGVyKTsKICAgICAgdmFyIGlkZW50aXR5ID0gaWRlbnRpdHlQcm92aWRlci5nZXRJZGVudGl0eSh1dWlkLCByZWFsbSk7CiAgICAgIHZhciBhdHRycyA9IGlkZW50aXR5LmdldEF0dHJpYnV0ZXMoKTsKICAgICAgCiAgICAgIHNoYXJlZFN0YXRlLnB1dCgnYWRtaW5PYmplY3QnLCB7CiAgICAgICAgZ2l2ZW5OYW1lOiB2YWwoYXR0cnMsICdnaXZlbk5hbWUnKSwgICAgICAgIAogICAgICAgIHNuOiB2YWwoYXR0cnMsICdzbicpLAogICAgICAgIG1haWw6IHZhbChhdHRycywgJ21haWwnKSwKICAgICAgICBpbnZpdGVEYXRlOiB2YWwoYXR0cnMsICdmci1pZG0taW52aXRlRGF0ZScpLAogICAgICAgIG9uYm9hcmREYXRlOiB2YWwoYXR0cnMsICdmci1pZG0tb25ib2FyZERhdGUnKSAgICAgICAgCiAgICAgIH0pOwoKICAgICAgbG9nZ2VyLm1lc3NhZ2UoJ0xvYWRlZCBhZG1pbiBvYmplY3QgZm9yIGlkOiB7fScsIHV1aWQpOwoKICAgICAgb3V0Y29tZSA9ICdUcnVlJzsKCiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGxvYWQgYWRtaW4gb2JqZWN0OiB7fScsIGUpOwogICAgfQogIH0KfSgpKTs=",
  },
  {
    "_id": "d22f9a0c-426a-4466-b95e-d0f125b0d5fa",
    "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for OAuth2 Access Token Modification",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "OAuth2 Access Token Modification Script",
    "script": "",
  },
  {
    "_id": "e0666b8b-f625-4047-89d8-e7e91151027f",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Twilio Voice OTP Sender",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twilio Voice OTP Sender",
    "script": "LyogVHdpbGlvIFZvaWNlIE9UUCBTZW5kZXIKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogVGhpcyBzY3JpcHQgd2lsbCBkZWxpdmVyIHRoZSBPVFAgdmlhIHZvaWNlIHRvIHRoZSBwaG9uZSBudW1iZXIgaW4gdGhlIHVzZXIncyBwcm9maWxlLgogKiAKICogVGhpcyBzY3JpcHQgbmVlZHMgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIG5vdCB3b3JrIHByb3Blcmx5IGFzIGlzLiAKICogSXQgcmVxdWlyZXMgdGhlIElkZW50aWZ5IEV4aXN0aW5nIFVzZXIgbm9kZSBhbmQgSE9UUCBHZW5lcmF0b3Igbm9kZSBiZWZvcmUgaXQgaXMgYmVpbmcgY2FsbGVkLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHNlbnQKICogLSBmYWlsZWQKICovCmxvZ2dlci53YXJuaW5nKCJUd2lsaW8gVm9pY2UgT1RQIFNlbmRlcjogc3RhcnQiKTsKCmlmIChzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpICYmIGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUoc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKSwgInRlbGVwaG9uZU51bWJlciIpLml0ZXJhdG9yKCkuaGFzTmV4dCgpKSB7CiAgICB2YXIgQmFzZTY0PXtfa2V5U3RyOiJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSIsZW5jb2RlOmZ1bmN0aW9uKGlucHV0KXt2YXIgb3V0cHV0PSIiO3ZhciBjaHIxLGNocjIsY2hyMyxlbmMxLGVuYzIsZW5jMyxlbmM0O3ZhciBpPTA7aW5wdXQ9QmFzZTY0Ll91dGY4X2VuY29kZShpbnB1dCk7d2hpbGUoaTxpbnB1dC5sZW5ndGgpe2NocjE9aW5wdXQuY2hhckNvZGVBdChpKyspO2NocjI9aW5wdXQuY2hhckNvZGVBdChpKyspO2NocjM9aW5wdXQuY2hhckNvZGVBdChpKyspO2VuYzE9Y2hyMT4+MjtlbmMyPShjaHIxJjMpPDw0fGNocjI+PjQ7ZW5jMz0oY2hyMiYxNSk8PDJ8Y2hyMz4+NjtlbmM0PWNocjMmNjM7aWYoaXNOYU4oY2hyMikpe2VuYzM9ZW5jND02NH1lbHNlIGlmKGlzTmFOKGNocjMpKXtlbmM0PTY0fW91dHB1dD1vdXRwdXQrdGhpcy5fa2V5U3RyLmNoYXJBdChlbmMxKSt0aGlzLl9rZXlTdHIuY2hhckF0KGVuYzIpK3RoaXMuX2tleVN0ci5jaGFyQXQoZW5jMykrdGhpcy5fa2V5U3RyLmNoYXJBdChlbmM0KX1yZXR1cm4gb3V0cHV0fSxkZWNvZGU6ZnVuY3Rpb24oaW5wdXQpe3ZhciBvdXRwdXQ9IiI7dmFyIGNocjEsY2hyMixjaHIzO3ZhciBlbmMxLGVuYzIsZW5jMyxlbmM0O3ZhciBpPTA7aW5wdXQ9aW5wdXQucmVwbGFjZSgvW15BLVphLXowLTlcK1wvXD1dL2csIiIpO3doaWxlKGk8aW5wdXQubGVuZ3RoKXtlbmMxPXRoaXMuX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmMyPXRoaXMuX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmMzPXRoaXMuX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmM0PXRoaXMuX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtjaHIxPWVuYzE8PDJ8ZW5jMj4+NDtjaHIyPShlbmMyJjE1KTw8NHxlbmMzPj4yO2NocjM9KGVuYzMmMyk8PDZ8ZW5jNDtvdXRwdXQ9b3V0cHV0K1N0cmluZy5mcm9tQ2hhckNvZGUoY2hyMSk7aWYoZW5jMyE9NjQpe291dHB1dD1vdXRwdXQrU3RyaW5nLmZyb21DaGFyQ29kZShjaHIyKX1pZihlbmM0IT02NCl7b3V0cHV0PW91dHB1dCtTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjMpfX1vdXRwdXQ9QmFzZTY0Ll91dGY4X2RlY29kZShvdXRwdXQpO3JldHVybiBvdXRwdXR9LF91dGY4X2VuY29kZTpmdW5jdGlvbihzdHJpbmcpe3N0cmluZz1zdHJpbmcucmVwbGFjZSgvXHJcbi9nLCJcbiIpO3ZhciB1dGZ0ZXh0PSIiO2Zvcih2YXIgbj0wO248c3RyaW5nLmxlbmd0aDtuKyspe3ZhciBjPXN0cmluZy5jaGFyQ29kZUF0KG4pO2lmKGM8MTI4KXt1dGZ0ZXh0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGMpfWVsc2UgaWYoYz4xMjcmJmM8MjA0OCl7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjPj42fDE5Mik7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjJjYzfDEyOCl9ZWxzZXt1dGZ0ZXh0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGM+PjEyfDIyNCk7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjPj42JjYzfDEyOCk7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjJjYzfDEyOCl9fXJldHVybiB1dGZ0ZXh0fSxfdXRmOF9kZWNvZGU6ZnVuY3Rpb24odXRmdGV4dCl7dmFyIHN0cmluZz0iIjt2YXIgaT0wO3ZhciBjPWMxPWMyPTA7d2hpbGUoaTx1dGZ0ZXh0Lmxlbmd0aCl7Yz11dGZ0ZXh0LmNoYXJDb2RlQXQoaSk7aWYoYzwxMjgpe3N0cmluZys9U3RyaW5nLmZyb21DaGFyQ29kZShjKTtpKyt9ZWxzZSBpZihjPjE5MSYmYzwyMjQpe2MyPXV0ZnRleHQuY2hhckNvZGVBdChpKzEpO3N0cmluZys9U3RyaW5nLmZyb21DaGFyQ29kZSgoYyYzMSk8PDZ8YzImNjMpO2krPTJ9ZWxzZXtjMj11dGZ0ZXh0LmNoYXJDb2RlQXQoaSsxKTtjMz11dGZ0ZXh0LmNoYXJDb2RlQXQoaSsyKTtzdHJpbmcrPVN0cmluZy5mcm9tQ2hhckNvZGUoKGMmMTUpPDwxMnwoYzImNjMpPDw2fGMzJjYzKTtpKz0zfX1yZXR1cm4gc3RyaW5nfX07CgogICAgLyogQkVHSU4gU0NSSVBUIENPTkZJR1VSQVRJT04KICAgICAqCiAgICAgKiBSRVBMQUNFIFdJVEggWU9VUiBPV04gQVpVUkUgQUQgU0VUVElOR1MKICAgICAqLwogICAgdmFyIFRXSUxJT19BUElfU0lEID0gIkFDNzUwNDE1ZTMxNjNhMmU1N2I3YWVlYTdlZWQ4MmQ5NDQiOwogICAgdmFyIFRXSUxJT19BUElfVE9LRU4gPSAiZDM2YTcxOWM5NGI0YmUwODU5MmQ2OWVjNGY4MGE1YmIiOwogICAgdmFyIFRXSUxJT19BUElfRlJPTSA9ICIrMTMxNzY0NDMxMDciOwogICAgLyoKICAgICAqIEVORCBTQ1JJUFQgQ09ORklHVVJBVElPTgogICAgICovCiAgCiAgICAvLyBUd2lsaW8gU01TIE1lc3NhZ2UgQVBJIENvbmZpZ3VyYXRpb24KICAgIHZhciBUV0lMSU9fQVBJX1VSSSA9ICJodHRwczovL2FwaS50d2lsaW8uY29tLzIwMTAtMDQtMDEvQWNjb3VudHMvIi5jb25jYXQoVFdJTElPX0FQSV9TSUQpLmNvbmNhdCgiL0NhbGxzLmpzb24iKTsgICAgCiAgICB2YXIgVFdJTElPX0FQSV9UTyA9IGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUoc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKSwgInRlbGVwaG9uZU51bWJlciIpLml0ZXJhdG9yKCkubmV4dCgpOwogICAgICB2YXIgT1RQID0gc2hhcmVkU3RhdGUuZ2V0KCJvbmVUaW1lUGFzc3dvcmQiKS5zcGxpdCgiIikuam9pbigiOyAiKTsKICAgIHZhciBUV0lMSU9fQVBJX1RXSU1MID0gIjxSZXNwb25zZT48UGF1c2UgbGVuZ3RoPScxJy8+PFNheSB2b2ljZT0nYWxpY2UnPllvdXIgb25lLXRpbWUgcGFzc3dvcmQgaXMgIi5jb25jYXQoT1RQKS5jb25jYXQoIjwvU2F5PjxQYXVzZSBsZW5ndGg9JzEnLz48U2F5PllvdXIgb25lLXRpbWUgcGFzc3dvcmQgaXMgIikuY29uY2F0KE9UUCkuY29uY2F0KCI8L1NheT48UGF1c2UgbGVuZ3RoPScxJy8+PFNheT5Hb29kYnllPC9TYXk+PC9SZXNwb25zZT4iKTsKICAgIC8vbG9nZ2VyLndhcm5pbmcoIlR3aWxpbyBWb2ljZSBPVFAgU2VuZGVyOiBUbzogIi5jb25jYXQoVFdJTElPX0FQSV9UTykpOwogICAgLy9sb2dnZXIud2FybmluZygiVHdpbGlvIFZvaWNlIE9UUCBTZW5kZXI6IFR3aW1sOiAiLmNvbmNhdChUV0lMSU9fQVBJX1RXSU1MKSk7CgogICAgdmFyIEFVVEhaID0gIkJhc2ljICIuY29uY2F0KEJhc2U2NC5lbmNvZGUoVFdJTElPX0FQSV9TSUQuY29uY2F0KCc6JykuY29uY2F0KFRXSUxJT19BUElfVE9LRU4pKSk7CiAgICAvL2xvZ2dlci53YXJuaW5nKCJUd2lsaW8gU01TIE9UUCBTZW5kZXI6IEFVVEhaIC0gIi5jb25jYXQoQVVUSFopKTsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRNZXRob2QoJ1BPU1QnKTsKICAgIHJlcXVlc3Quc2V0VXJpKFRXSUxJT19BUElfVVJJKTsKICAgIHJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgiQ29udGVudC1UeXBlIiwgImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIpOwogICAgcmVxdWVzdC5nZXRIZWFkZXJzKCkuYWRkKCJBdXRob3JpemF0aW9uIiwgQVVUSFopOwogICAgdmFyIHBhcmFtcyA9IHJlcXVlc3QuZ2V0Rm9ybSgpOwogICAgcGFyYW1zLmFkZCgiRnJvbSIsIFRXSUxJT19BUElfRlJPTSk7CiAgICBwYXJhbXMuYWRkKCJUd2ltbCIsIFRXSUxJT19BUElfVFdJTUwpOwogICAgcGFyYW1zLmFkZCgiVG8iLCBUV0lMSU9fQVBJX1RPKTsKICAgIHJlcXVlc3QuZ2V0RW50aXR5KCkuc2V0U3RyaW5nKHBhcmFtcy50b1N0cmluZygpKTsKCiAgICB2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0KCk7CiAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICAvL2xvZ2dlci53YXJuaW5nKCJUd2lsaW8gU01TIE9UUCBTZW5kZXI6IEpTT04gcmVzdWx0OiAiICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7CgogICAgaWYgKHJlc3VsdFsic3RhdHVzIl09PSJxdWV1ZWQiKSB7CiAgICAgICAgb3V0Y29tZSA9IHJlc3VsdFsic3RhdHVzIl07CiAgICAgICAgbG9nZ2VyLmVycm9yKCJUd2lsaW8gVm9pY2UgT1RQIFNlbmRlcjogc3RhdHVzID0gIi5jb25jYXQocmVzdWx0WyJzdGF0dXMiXSkpOwogICAgICAgIGxvZ2dlci5lcnJvcigiVHdpbGlvIFZvaWNlIE9UUCBTZW5kZXI6IHN1YnJlc291cmNlX3VyaXMgPSAiLmNvbmNhdChyZXN1bHRbInN1YnJlc291cmNlX3VyaXMiXSkpOwogICAgICAgIGxvZ2dlci5lcnJvcigiVHdpbGlvIFZvaWNlIE9UUCBTZW5kZXI6IG91dGNvbWUgPSAiLmNvbmNhdChvdXRjb21lKSk7CiAgICB9IGVsc2UgewogICAgICAgIG91dGNvbWUgPSAiZmFpbGVkIjsKICAgICAgICBsb2dnZXIuZXJyb3IoIlR3aWxpbyBWb2ljZSBPVFAgU2VuZGVyOiBzdGF0dXMgPSAiLmNvbmNhdChyZXN1bHRbInN0YXR1cyJdKSk7CiAgICAgICAgbG9nZ2VyLmVycm9yKCJUd2lsaW8gVm9pY2UgT1RQIFNlbmRlcjogY29kZSA9ICIuY29uY2F0KHJlc3VsdFsiY29kZSJdKSk7CiAgICAgICAgbG9nZ2VyLmVycm9yKCJUd2lsaW8gVm9pY2UgT1RQIFNlbmRlcjogbW9yZV9pbmZvID0gIi5jb25jYXQocmVzdWx0WyJtb3JlX2luZm8iXSkpOwogICAgICAgIGxvZ2dlci5lcnJvcigiVHdpbGlvIFZvaWNlIE9UUCBTZW5kZXI6IG1lc3NhZ2UgPSAiLmNvbmNhdChyZXN1bHRbIm1lc3NhZ2UiXSkpOwogICAgICAgIGxvZ2dlci5lcnJvcigiVHdpbGlvIFZvaWNlIE9UUCBTZW5kZXI6IG91dGNvbWUgPSAiLmNvbmNhdChvdXRjb21lKSk7CiAgICB9Cn0gZWxzZSB7CiAgICAgIG91dGNvbWUgPSAiZmFpbGVkIjsKICAgICAgbG9nZ2VyLmVycm9yKCJUd2lsaW8gVm9pY2UgT1RQIFNlbmRlcjogTm8gdXNlciBvciBwaG9uZSBudW1iZXIgZm91bmQhIFVzZSAnSWRlbnRpZnkgRXhpc3RpbmcgVXNlciBub2RlIGJlZm9yZSB0aGlzIHNjcmlwdCB0byBwb3B1bGF0ZSB0aGUgdXNlcidzIF9pZCBpbiBzaGFyZWQgc3RhdGUhJyIpOwogICAgbG9nZ2VyLmVycm9yKCJUd2lsaW8gVm9pY2UgT1RQIFNlbmRlcjogb3V0Y29tZSA9ICIuY29uY2F0KG91dGNvbWUpKTsKfQ==",
  },
  {
    "_id": "0ab1dd57-eafd-4063-8e60-65bfac8108b7",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check existing session and set username",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Check Existing Session",
    "script": "aWYgKHR5cGVvZiBleGlzdGluZ1Nlc3Npb24gIT09ICd1bmRlZmluZWQnKQp7CiAgb3V0Y29tZSA9ICJoYXNTZXNzaW9uIjsKICBzaGFyZWRTdGF0ZS5wdXQoInVzZXJuYW1lIiwgZXhpc3RpbmdTZXNzaW9uLmdldCgiVXNlcklkIikpOwogIHNoYXJlZFN0YXRlLnB1dCgiX2lkIiwgZXhpc3RpbmdTZXNzaW9uLmdldCgiVXNlcklkIikpOwogIGlmIChzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKSkgewogICAgc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikucHV0KCJ1c2VyTmFtZSIsIGV4aXN0aW5nU2Vzc2lvbi5nZXQoIlVzZXJJZCIpKTsKICB9CiAgZWxzZSB7CiAgICBzaGFyZWRTdGF0ZS5wdXQoIm9iamVjdEF0dHJpYnV0ZXMiLCB7dXNlck5hbWU6IGV4aXN0aW5nU2Vzc2lvbi5nZXQoIlVzZXJJZCIpfSk7CiAgfQp9CmVsc2UKewogIG91dGNvbWUgPSAibm9TZXNzaW9uIjsKfQ==",
  },
  {
    "_id": "92edf2c7-0bab-412c-a0da-82ad4f04505b",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Collect Extra Fields",
    "script": "LyogQ29sbGVjdCBFeHRyYSBGaWVsZHMKICogCiAqIENvbGxlY3QgZXh0cmEgZmllbGRzIG5vdCBwYXJ0IG9mIHRoZSB1c2VyIHByb2ZpbGUuCiAqIAogKiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKi8KKGZ1bmN0aW9uICgpIHsKICAgIG91dGNvbWUgPSAndHJ1ZSc7CiAgICB2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICAgICAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLk5hbWVDYWxsYmFjawogICAgKQogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICAgICAgbmV3IGZyLk5hbWVDYWxsYmFjaygnbW9kYWxpdHknKSwKICAgICAgICAgICAgbmV3IGZyLk5hbWVDYWxsYmFjaygnand0VG9rZW4nKQogICAgICAgICkuYnVpbGQoKTsKICAgIH0KICAgIGVsc2UgewogICAgICAgICAgdmFyIG1vZGFsaXR5ID0gY2FsbGJhY2tzLmdldCgwKS5nZXROYW1lKCk7CiAgICAgICAgICB2YXIgand0VG9rZW4gPSBjYWxsYmFja3MuZ2V0KDEpLmdldE5hbWUoKTsKICAgICAgICAgIG5vZGVTdGF0ZS5wdXRTaGFyZWQoJ21vZGFsaXR5JywgbW9kYWxpdHkpOwogICAgICAgICAgbm9kZVN0YXRlLnB1dFNoYXJlZCgnand0VG9rZW4nLCBqd3RUb2tlbik7CiAgICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKICAgIH0KfSgpKTs=",
  },
  {
    "_id": "71b3c70b-920c-464b-a918-4c86eaaddccd",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Render a dropdown",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Dropdown",
    "script": "LyogRHJvcGRvd24KICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogUmVuZGVyIGEgZHJvcGRvd24gc2VsZWN0b3IKICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKi8KKGZ1bmN0aW9uICgpIHsKICBvdXRjb21lID0gInRydWUiOwogIHZhciBjaG9pY2VzID0gWyIgIiwgIlJlZCBwaWxsIiwgIkJsdWUgcGlsbCIsICJTdGVhayIsICJSYWJiaXQgaG9sZSJdOwogIAogIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5DaG9pY2VDYWxsYmFjawogICkKCiAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5zZW5kKFsKICAgICAgbmV3IGZyLkNob2ljZUNhbGxiYWNrKCJNYWtlIHlvdXIgY2hvaWNlIiwgY2hvaWNlcywgMCwgZmFsc2UpCiAgICBdKS5idWlsZCgpOwogIH0gZWxzZSB7CiAgICB2YXIgY2hvaWNlID0gcGFyc2VJbnQoY2FsbGJhY2tzLmdldCgwKS5nZXRTZWxlY3RlZEluZGV4ZXMoKVswXSk7CiAgICBub2RlU3RhdGUucHV0U2hhcmVkKCJjaG9pY2UiLCBjaG9pY2VzW2Nob2ljZV0pOwogICAgYWN0aW9uID0gZnIuQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKICB9Cn0oKSk7",
  },
  {
    "_id": "cf3515f0-8278-4ee3-a530-1bad7424c416",
    "context": "OIDC_CLAIMS",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Default alpha realm script for OIDC claims",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Alpha OIDC Claims Script",
    "script": "",
  },
  {
    "_id": "5b553f58-16bd-42b7-a782-4a981a66dbd4",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Branch based on the IDP setting.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Routed IDP Persist Decision",
    "script": "LyogUm91dGVkIElEUCBQZXJzaXN0IERlY2lzaW9uCiAqIAogKiBCcmFuY2ggYmFzZWQgb24gdGhlIElEUCBzZXR0aW5nLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqIC0gZmFsc2UKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKi8KKGZ1bmN0aW9uICgpIHsKICAgICAgbG9nZ2VyLm1lc3NhZ2UoIlJvdXRlZCBJRFAgUGVyc2lzdCBEZWNpc2lvbjogU3RhcnQiKTsKICAgICAgb3V0Y29tZSA9ICJmYWxzZSI7CiAgICAgIHZhciByb3V0ZWRJRFAgPSBzaGFyZWRTdGF0ZS5nZXQoInJvdXRlZElEUHMiKS5nZXQoMCk7CiAgICAgIGlmIChyb3V0ZWRJRFApIHsKICAgICAgICBvdXRjb21lID0gIiIuY29uY2F0KHJvdXRlZElEUC5nZXQoImlkcFBlcnNpc3QiKSk7CiAgICB9CiAgICAgIGxvZ2dlci5tZXNzYWdlKCJSb3V0ZWQgSURQIFBlcnNpc3QgRGVjaXNpb246IERvbmUgW291dGNvbWU9e31dIiwgb3V0Y29tZSk7Cn0oKSk7",
  },
  {
    "_id": "424da748-82cc-4b54-be6f-82bd64d82a74",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Yahoo",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Yahoo Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnN1YiksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uYW1lKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5naXZlbl9uYW1lKSwKICAgICAgICBmaWVsZCgiZmFtaWx5TmFtZSIsIHJhd1Byb2ZpbGUuZmFtaWx5X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGljdHVyZSksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoImxvY2FsZSIsIHJhd1Byb2ZpbGUubG9jYWxlKSkp",
  },
  {
    "_id": "653b70b0-a23d-403a-933b-911371cf84c0",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Returns privacy policy collection",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_PrivacyPolicy",
    "script": "dmFyIGp1cmlzZGljdGlvbnMgPSBbCiAgewogICAgbmFtZTogJ0F1c3RyYWxpYScsCiAgICB1cmw6ICdodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2tub3dsZWRnZS9pZGVudGl0eS1jbG91ZC9hcnRpY2xlL2E5MjQ3MjU3OCcKICB9LAogIHsKICAgIG5hbWU6ICdCcmF6aWwnLAogICAgdXJsOiAnaHR0cHM6Ly93d3cuZm9yZ2Vyb2NrLmNvbS9wcml2YWN5LXBvbGljeScKICB9LAogIHsKICAgIG5hbWU6ICdDYWxpZm9ybmlhJywKICAgIHVybDogJ2h0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20va25vd2xlZGdlL2lkZW50aXR5LWNsb3VkL2FydGljbGUvYTY3NTUyODQzJwogIH0sCiAgewogICAgbmFtZTogJ0NhbmFkYScsCiAgICB1cmw6ICdodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2tub3dsZWRnZS9pZGVudGl0eS1jbG91ZC9hcnRpY2xlL2E5MjQ3MjU3OCcKICB9LAogIHsKICAgIG5hbWU6ICdFdXJvcGVhbiBVbmlvbicsCiAgICB1cmw6ICdodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2tub3dsZWRnZS9pZGVudGl0eS1jbG91ZC9hcnRpY2xlL2EyODU4MDgyOCcKICB9LAogIHsKICAgIG5hbWU6ICdIb25nIEtvbmcnLAogICAgdXJsOiAnaHR0cHM6Ly93d3cuZm9yZ2Vyb2NrLmNvbS9yZXNvdXJjZXMvdmlldy8xMDk4Mjc0NjIvb3ZlcnZpZXcvaWRlbnRpdHktY2xvdWQtcHJpdmFjeS5wZGYnCiAgfSwKICB7CiAgICBuYW1lOiAnSW5kb25lc2lhJywKICAgIHVybDogJ2h0dHBzOi8vd3d3LmZvcmdlcm9jay5jb20vcmVzb3VyY2VzL3ZpZXcvMTA5ODI3NDYyL292ZXJ2aWV3L2lkZW50aXR5LWNsb3VkLXByaXZhY3kucGRmJwogIH0sCiAgewogICAgbmFtZTogJ05ldyBaZWFsYW5kJywKICAgIHVybDogJ2h0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20va25vd2xlZGdlL2lkZW50aXR5LWNsb3VkL2FydGljbGUvYTkyNDcyNTc4JwogIH0sCiAgewogICAgbmFtZTogJ1NpbmdhcG9yZScsCiAgICB1cmw6ICdodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2tub3dsZWRnZS9pZGVudGl0eS1jbG91ZC9hcnRpY2xlL2E5MjQ3MjU3OCcKICB9LAogIHsKICAgIG5hbWU6ICdVbml0ZWQgS2luZ2RvbScsCiAgICB1cmw6ICdodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2tub3dsZWRnZS9pZGVudGl0eS1jbG91ZC9hcnRpY2xlL2EyODU4MDgyOCcKICB9LAogIHsKICAgIG5hbWU6ICdVbml0ZWQgU3RhdGVzJywKICAgIHVybDogJ2h0dHBzOi8vd3d3LmZvcmdlcm9jay5jb20vcHJpdmFjeS1wb2xpY3knCiAgfSwKICB7CiAgICBuYW1lOiAnUmVzdCBvZiB0aGUgV29ybGQnLAogICAgdXJsOiAnaHR0cHM6Ly93d3cuZm9yZ2Vyb2NrLmNvbS9wcml2YWN5LXBvbGljeScKICB9Cl07Cgp2YXIgdG9rZW4gPSBnZW5lcmF0ZU51bWVyaWNUb2tlbigneHh4Jyk7CnZhciBpbnB1dElkID0gJ2p1cmlzZGljdGlvbi1pbnB1dC0nLmNvbmNhdCh0b2tlbik7CnZhciBzZWxlY3RJZCA9ICdqdXJpc2RpY3Rpb24tc2VsZWN0LScuY29uY2F0KHRva2VuKTsKCi8vIEJ1aWxkIHRoZSBoZWFkZXIgYW5kIGluc3RydWN0aW9ucwp2YXIgbWVzc2FnZSA9ICI8aDIgY2xhc3M9J2gyJz5BY2NlcHQgUHJpdmFjeSBQb2xpY3k8L2gyPjxkaXYgc3R5bGU9J21hcmdpbi1ib3R0b206MWVtJz5TZWxlY3QgeW91ciByZWdpb24gb2YgcmVzaWRlbmNlIHRvIHJldmlldyB0aGUgYXBwbGljYWJsZSBwcml2YWN5IHBvbGljeS48L2Rpdj4iOwoKLy8gQnVpbGQgdGhlIGp1cmlzZGljdGlvbiBkcm9wZG93bgp2YXIgZHJvcGRvd24gPSAiPHNlbGVjdCBpZD0nIi5jb25jYXQoc2VsZWN0SWQpLmNvbmNhdCgiJyBjbGFzcz0nY3VzdG9tLXNlbGVjdCcgb25jaGFuZ2U9J2RvY3VtZW50Ll9vbkp1cmlzZGljdGlvbkNoYW5nZSgpJz48b3B0aW9uIHZhbHVlPScnPlJlZ2lvbiBvZiByZXNpZGVuY2U8L29wdGlvbj4iKTsKZm9yICh2YXIgaSA9IDA7IGkgPCBqdXJpc2RpY3Rpb25zLmxlbmd0aDsgaSsrKSB7CiAgdmFyIGogPSBqdXJpc2RpY3Rpb25zW2ldOwogIGRyb3Bkb3duID0gZHJvcGRvd24uY29uY2F0KCI8b3B0aW9uIHZhbHVlPSciKS5jb25jYXQoai5uYW1lKS5jb25jYXQoIicgZGF0YS11cmw9JyIpLmNvbmNhdChqLnVybCkuY29uY2F0KCInPiIpLmNvbmNhdChqLm5hbWUpLmNvbmNhdCgiPC9vcHRpb24+Iik7Cn0KZHJvcGRvd24gPSBkcm9wZG93bi5jb25jYXQoIjwvc2VsZWN0PiIpOwoKLy8gQnVpbGQgdGhlIGNvbmZpcm1hdGlvbiBjaGVja2JveCB3aXRoIHBvbGljeSBsaW5rCnZhciBjb25maXJtID0gIjxkaXYgaWQ9J2NvbmZpcm0td3JhcHBlcicgY2xhc3M9J2N1c3RvbS1jb250cm9sIGN1c3RvbS1jaGVja2JveCcgc3R5bGU9J3BhZGRpbmc6MXJlbTt2aXNpYmlsaXR5OmhpZGRlbic+Ii5jb25jYXQoCiAgIjxpbnB1dCBpZD0nY29uZmlybS1jaGVjaycgdHlwZT0nY2hlY2tib3gnIGNsYXNzPSdjdXN0b20tY29udHJvbC1pbnB1dCcgb25jaGFuZ2U9J2RvY3VtZW50Ll9zZXROZXh0QnV0dG9uKCknPiIpLmNvbmNhdCgKICAiPGxhYmVsIGNsYXNzPSdjdXN0b20tY29udHJvbC1sYWJlbCcgZm9yPSdjb25maXJtLWNoZWNrJz4iKS5jb25jYXQoCiAgIkkgYWdyZWUgdG8gRm9yZ2VSb2NrJ3MgPGEgaWQ9J3BvbGljeS1saW5rJyB0YXJnZXQ9X2JsYW5rIGhyZWY9JyIgKyBqdXJpc2RpY3Rpb25zWzBdLnVybCArICInPlByaXZhY3kgUG9saWN5PC9hPiIpLmNvbmNhdCgKICAiPC9sYWJlbD4iKS5jb25jYXQoCiI8L2Rpdj4iKTsKCnZhciBodG1sID0gbWVzc2FnZSArIGRyb3Bkb3duICsgY29uZmlybTsKCnZhciBzY3JpcHQgPQogICdkb2N1bWVudC5fb25KdXJpc2RpY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbigpIHsnLmNvbmNhdCgKICAnICB2YXIganVyaXNkaWN0aW9uID0gZ2V0SnVyaXNkaWN0aW9uKCk7JykuY29uY2F0KAogICcgIGNvbnNvbGUubG9nKGp1cmlzZGljdGlvbik7JykuY29uY2F0KAogICcgIGlmIChqdXJpc2RpY3Rpb24pIHsnKS5jb25jYXQoCiAgJyAgICBzZXRQb2xpY3lMaW5rKGp1cmlzZGljdGlvbi51cmwpOycpLmNvbmNhdCgKICAnICAgIHNldEp1cmlzZGljdGlvbihqdXJpc2RpY3Rpb24ubmFtZSk7JykuY29uY2F0KAogICcgICAgc2V0Q29uZmlybVZpc2liaWxpdHkodHJ1ZSk7JykuY29uY2F0KAogICcgIH0gZWxzZSB7JykuY29uY2F0KAogICcgICAgc2V0SnVyaXNkaWN0aW9uKCIiKTsnKS5jb25jYXQoCiAgJyAgICBzZXRDb25maXJtVmlzaWJpbGl0eShmYWxzZSk7JykuY29uY2F0KAogICcgIH0nKS5jb25jYXQoCiAgJyAgZG9jdW1lbnQuX3NldE5leHRCdXR0b24oKTsnKS5jb25jYXQoCiAgJ307JykuY29uY2F0KAogICAgCiAgJ2RvY3VtZW50Ll9zZXROZXh0QnV0dG9uID0gZnVuY3Rpb24oKSB7JykuY29uY2F0KAogICcgIHZhciBqdXJpc2RpY3Rpb24gPSBnZXRKdXJpc2RpY3Rpb24oKTsnKS5jb25jYXQoCiAgJyAgdmFyIGNiID0gZ2V0Q2hlY2tib3goKTsnKS5jb25jYXQoCiAgJyAgbG9naW5IZWxwZXJzLmRpc2FibGVOZXh0QnV0dG9uKCFqdXJpc2RpY3Rpb24gfHwgIWNiLmNoZWNrZWQpOycpLmNvbmNhdCgKICAnfTsnKS5jb25jYXQoCiAgICAKICAndmFyIGdldEp1cmlzZGljdGlvbiA9IGZ1bmN0aW9uKCkgeycpLmNvbmNhdCgKICAnICB2YXIgc2VsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIicpLmNvbmNhdChzZWxlY3RJZCkuY29uY2F0KCciKTsnKS5jb25jYXQoCiAgJyAgdmFyIG9wdCA9IHNlbC5vcHRpb25zW3NlbC5zZWxlY3RlZEluZGV4XTsnKS5jb25jYXQoCiAgJyAgcmV0dXJuIG9wdC52YWx1ZSA/IHsgbmFtZTogb3B0LnZhbHVlLCB1cmw6IG9wdC5nZXRBdHRyaWJ1dGUoImRhdGEtdXJsIikgfSA6IG51bGw7JykuY29uY2F0KAogICd9OycpLmNvbmNhdCgKICAgIAogICd2YXIgZ2V0Q2hlY2tib3ggPSBmdW5jdGlvbigpIHsnKS5jb25jYXQoCiAgJyAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjb25maXJtLWNoZWNrIik7JykuY29uY2F0KAogICd9OycpLmNvbmNhdCgKICAgIAogICd2YXIgc2V0Q29uZmlybVZpc2liaWxpdHkgPSBmdW5jdGlvbihzaG93KSB7JykuY29uY2F0KAogICcgIHZhciBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjb25maXJtLXdyYXBwZXIiKTsnKS5jb25jYXQoCiAgJyAgZWwuc3R5bGUudmlzaWJpbGl0eSA9IHNob3cgPyAidmlzaWJsZSIgOiAiaGlkZGVuIjsnKS5jb25jYXQoCiAgJ307JykuY29uY2F0KAogICAgCiAgJ3ZhciBzZXRQb2xpY3lMaW5rID0gZnVuY3Rpb24odXJsKSB7JykuY29uY2F0KAogICcgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwb2xpY3ktbGluayIpLnNldEF0dHJpYnV0ZSgiaHJlZiIsIHVybCk7JykuY29uY2F0KAogICd9OycpLmNvbmNhdCgKCiAgJ3ZhciBzZXRKdXJpc2RpY3Rpb24gPSBmdW5jdGlvbihuYW1lKSB7JykuY29uY2F0KAogICcgIGxvZ2luSGVscGVycy5zZXRIaWRkZW5DYWxsYmFjaygiJykuY29uY2F0KGlucHV0SWQpLmNvbmNhdCgnIiwgbmFtZSk7JykuY29uY2F0KAogICd9OycpLmNvbmNhdCgKICAgIAogICd2YXIgaXNQYWdlUmVhZHkgPSBmdW5jdGlvbigpIHsnKS5jb25jYXQoCiAgJyAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjYWxsYmFja18wIikgIT0gbnVsbDsnKS5jb25jYXQoCiAgJ307JykuY29uY2F0KAogICAgCiAgJ3ZhciBzZXR1cFBhZ2UgPSBmdW5jdGlvbigpIHsnKS5jb25jYXQoCiAgJyAgaWYgKCFpc1BhZ2VSZWFkeSgpKSB7JykuY29uY2F0KAogICcgICAgcmV0dXJuIHNldFRpbWVvdXQoc2V0dXBQYWdlLCAxMDApOycpLmNvbmNhdCgKICAnICB9JykuY29uY2F0KAogICcgIGxvZ2luSGVscGVycy5kaXNhYmxlTmV4dEJ1dHRvbih0cnVlKTsnKS5jb25jYXQoCiAgJyAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjYWxsYmFja18wIik7JykuY29uY2F0KAogICcgIGNvbnRhaW5lci5pbnNlcnRBZGphY2VudEhUTUwoImJlZm9yZWVuZCIsICInKS5jb25jYXQoaHRtbCkuY29uY2F0KCciKTsnKS5jb25jYXQoCiAgJ307JykuY29uY2F0KAogICAgCiAgJ3NldHVwUGFnZSgpOycpOwoKZnVuY3Rpb24gaXNWYWxpZEp1cmlzZGljdGlvbihuYW1lKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBqdXJpc2RpY3Rpb25zLmxlbmd0aDsgaSsrKSB7CiAgICBpZiAoanVyaXNkaWN0aW9uc1tpXS5uYW1lID09IG5hbWUpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfQogIHJldHVybiBmYWxzZTsKfQoKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogIGNvbS5zdW4uaWRlbnRpdHkuYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLkhpZGRlblZhbHVlQ2FsbGJhY2ssCiAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrLAogIGphdmEudXRpbC5IYXNoTWFwCikKCndpdGggKGZyKSB7CiAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkgfHwgIWlzVmFsaWRKdXJpc2RpY3Rpb24oY2FsbGJhY2tzLmdldCgwKS5nZXRWYWx1ZSgpKSkgewogICAgYWN0aW9uID0gQWN0aW9uLnNlbmQoCiAgICAgIG5ldyBIaWRkZW5WYWx1ZUNhbGxiYWNrKGlucHV0SWQsICcnKSwKICAgICAgbmV3IFNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICApLmJ1aWxkKCk7CiAgfSBlbHNlIHsKICAgIHZhciBPQkpfQVRUUlMgPSAnb2JqZWN0QXR0cmlidXRlcyc7CiAgICB2YXIgYXR0cnMgPSBzaGFyZWRTdGF0ZS5jb250YWluc0tleShPQkpfQVRUUlMpID8gc2hhcmVkU3RhdGUuZ2V0KE9CSl9BVFRSUykgOiBuZXcgSGFzaE1hcCgpOwogICAgYXR0cnMucHV0KCdqdXJpc2RpY3Rpb24nLCBjYWxsYmFja3MuZ2V0KDApLmdldFZhbHVlKCkpOwogICAgc2hhcmVkU3RhdGUucHV0KE9CSl9BVFRSUywgYXR0cnMpOwogICAgYWN0aW9uID0gQWN0aW9uLmdvVG8oJ1RydWUnKS5idWlsZCgpOwogIH0KfQoKIC8qCiAgKiBHZW5lcmF0ZSBhIHRva2VuIGluIHRoZSBkZXNpcmVkIGZvcm1hdC4gQWxsICd4JyBjaGFyYWN0ZXJzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBhIHJhbmRvbSBudW1iZXIgMC05LgogICogCiAgKiBFeGFtcGxlOgogICogJ3h4eHh4JyBwcm9kdWNlcyAnMjg1MzUnCiAgKiAneHh4LXh4eCcgcHJvZHVjZXMgJzQzMi01MjEnCiAgKi8KZnVuY3Rpb24gZ2VuZXJhdGVOdW1lcmljVG9rZW4oZm9ybWF0KSB7CiAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC9beF0vZywgZnVuY3Rpb24oYykgewogICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpKjEwfDA7CiAgICB2YXIgdiA9IHI7CiAgICByZXR1cm4gdi50b1N0cmluZygxMCk7CiAgfSk7Cn0=",
  },
  {
    "_id": "a316aedd-8b3b-4f68-b6e8-65859f1e87be",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_LocalRegistrationPrep",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKV2hlbiBhbiBhZG1pbiBtYW5hZ2VkIG9iamVjdCBpcyBjcmVhdGVkIGF0IHRoZSB0aW1lIG9mIGludml0YXRpb24sIHRoZSBlbWFpbCBhZGRyZXNzCmlzIHVzZWQgdG8gcG9wdWxhdGUgdGhlIHJlcXVpcmVkIGZpcnN0L2xhc3QgbmFtZXMuICBUaGlzIHNjcmlwdCBjbGVhcnMgdGhvc2UgYXR0cmlidXRlcwooaWYgc2V0IHRvIHRoZSBlbWFpbCBhZGRyZXNzKSBzbyB0aGUgVUkgZG9lc24ndCBkaXNwbGF5IHRoZSBlbWFpbCBhZGRyZXNzIGluIHRoZSBmaXJzdC9sYXN0Cm5hbWUgaW5wdXQgZmllbGRzLgoKSXQgYWxzbyBwb3B1bGF0ZXMgb3RoZXIgcmVxdWlyZWQgYXR0cmlidXRlcyB3aXRoIGZha2UgdmFsdWVzIHRvIGVuc3VyZSBwYXNzd29yZCBwb2xpY3kKdmFsaWRhdGlvbiB3b3JrcyBjb3JyZWN0bHkgd2hlbiBBTSBjYWxscyBJRE0uCiovCgp2YXIgb2JqQXR0cnMgPSBzaGFyZWRTdGF0ZS5nZXQoJ29iamVjdEF0dHJpYnV0ZXMnKSB8fCBuZXcgamF2YS51dGlsLkhhc2hNYXAoKTsKb2JqQXR0cnMucHV0KCdnaXZlbk5hbWUnLCAnJyk7Cm9iakF0dHJzLnB1dCgnc24nLCAnJyk7Cm9iakF0dHJzLnB1dCgnZ3JvdXBzJywgWydmYWtlJ10pOwpvYmpBdHRycy5wdXQoJ2ludml0ZURhdGUnLCAnZmFrZScpOwpzaGFyZWRTdGF0ZS5wdXQoJ29iamVjdEF0dHJpYnV0ZXMnLCBvYmpBdHRycyk7CgpvdXRjb21lID0gJ1RydWUnOwo=",
  },
  {
    "_id": "b703581a-e112-42b9-bc24-6db8bced5a13",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Display sharedState and transientState.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Display States",
    "script": "LyogRGlzcGxheSBTdGF0ZXMKICogCiAqIERpc3BsYXkgc2hhcmVkU3RhdGUgYW5kIHRyYW5zaWVudFN0YXRlLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgICBvdXRjb21lID0gInRydWUiOwoKICAgIHZhciBhbmNob3IgPSAiYW5jaG9yLSIuY29uY2F0KGdlbmVyYXRlTnVtZXJpY1Rva2VuKCd4eHgnKSk7CiAgICB2YXIgaGFsaWduID0gImxlZnQiOwogICAgdmFyIG1lc3NhZ2UgPSAiPGg0PkN1cnJlbnQgU3RhdGUgVmFsdWVzPC9oND4iLmNvbmNhdCgKICAgICAgICAiPHA+PGI+U2hhcmVkIFN0YXRlPC9iPjo8YnIvPiIpLmNvbmNhdCgKICAgICAgICBzaGFyZWRTdGF0ZS50b1N0cmluZygpKS5jb25jYXQoIjwvcD4iKS5jb25jYXQoCiAgICAgICAgIjxwPjxiPlRyYW5zaWVudCBTdGF0ZTwvYj46PGJyLz4iKS5jb25jYXQoCiAgICAgICAgdHJhbnNpZW50U3RhdGUudG9TdHJpbmcoKSkuY29uY2F0KCI8L3A+IikuY29uY2F0KAogICAgICAgICI8cD48Yj5SZXF1ZXN0IEhlYWRlcnM8L2I+Ojxici8+IikuY29uY2F0KAogICAgICAgIHJlcXVlc3RIZWFkZXJzLnRvU3RyaW5nKCkpLmNvbmNhdCgiPC9wPiIpCiAgICB2YXIgc2NyaXB0ID0gIkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFxuIi5jb25jYXQoCiAgICAgICJkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYWxsYmFjay1jb21wb25lbnQnKSkuZm9yRWFjaChcbiIpLmNvbmNhdCgKICAgICAgImZ1bmN0aW9uIChlKSB7XG4iKS5jb25jYXQoCiAgICAgICIgIHZhciBtZXNzYWdlID0gZS5maXJzdEVsZW1lbnRDaGlsZDtcbiIpLmNvbmNhdCgKICAgICAgIiAgaWYgKG1lc3NhZ2UuZmlyc3RDaGlsZCAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZU5hbWUgPT0gJyN0ZXh0JyAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZVZhbHVlLnRyaW0oKSA9PSAnIikuY29uY2F0KGFuY2hvcikuY29uY2F0KCInKSB7XG4iKS5jb25jYXQoCiAgICAgICIgICAgbWVzc2FnZS5jbGFzc05hbWUgPSBcIlwiO1xuIikuY29uY2F0KAogICAgICAiICAgIG1lc3NhZ2Uuc3R5bGUgPSBcInRleHQtYWxpZ246IGxlZnQ7IGlubGluZS1zaXplOiA0MzBweDsgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcIjtcbiIpLmNvbmNhdCgKICAgICAgIiAgICBtZXNzYWdlLmFsaWduID0gXCIiKS5jb25jYXQoaGFsaWduKS5jb25jYXQoIlwiO1xuIikuY29uY2F0KAogICAgICAiICAgIG1lc3NhZ2UuaW5uZXJIVE1MID0gJyIpLmNvbmNhdChtZXNzYWdlKS5jb25jYXQoIic7XG4iKS5jb25jYXQoCiAgICAgICIgIH1cbiIpLmNvbmNhdCgKICAgICAgIn0pIikKICAgIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjaywKICAgICAgICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2sKICAgICkKICAgIGlmIChtZXNzYWdlLmxlbmd0aCAmJiBjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgICAgIG5ldyBmci5UZXh0T3V0cHV0Q2FsbGJhY2soCiAgICAgICAgICAgICAgICBmci5UZXh0T3V0cHV0Q2FsbGJhY2suSU5GT1JNQVRJT04sCiAgICAgICAgICAgICAgICBhbmNob3IKICAgICAgICAgICAgKSwKICAgICAgICAgICAgbmV3IGZyLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICAgICAgKS5idWlsZCgpCiAgICB9CiAgICBlbHNlIHsKICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKICAgIH0KCiAgICAgLyoKICAgICAgKiBHZW5lcmF0ZSBhIHRva2VuIGluIHRoZSBkZXNpcmVkIGZvcm1hdC4gQWxsICd4JyBjaGFyYWN0ZXJzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBhIHJhbmRvbSBudW1iZXIgMC05LgogICAgICAqIAogICAgICAqIEV4YW1wbGU6CiAgICAgICogJ3h4eHh4JyBwcm9kdWNlcyAnMjg1MzUnCiAgICAgICogJ3h4eC14eHgnIHByb2R1Y2VzICc0MzItNTIxJwogICAgICAqLwogICAgZnVuY3Rpb24gZ2VuZXJhdGVOdW1lcmljVG9rZW4oZm9ybWF0KSB7CiAgICAgICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC9beF0vZywgZnVuY3Rpb24oYykgewogICAgICAgICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkqMTB8MDsKICAgICAgICAgICAgdmFyIHYgPSByOwogICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxMCk7CiAgICAgICAgfSk7CiAgICB9Cn0oKSk7",
  },
  {
    "_id": "7dd80834-e7b2-4737-85a7-40434bb19dde",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Store the impersontor and impersonatee profile information in session properties.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Impersonate: Update Session Properties",
    "script": "LyogSW1wZXJzb25hdGU6IFVwZGF0ZSBTZXNzaW9uIFByb3BlcnRpZXMKICogCiAqIFN0b3JlIHRoZSBpbXBlcnNvbnRvciBhbmQgaW1wZXJzb25hdGVlIHByb2ZpbGUgaW5mb3JtYXRpb24gaW4gc2Vzc2lvbiBwcm9wZXJ0aWVzLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqCiAqIEF1dGhvcjogamFrZS5mZWFzZWxAZm9yZ2Vyb2NrLmNvbSwgdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgICAgIGxvZ2dlci5tZXNzYWdlKCJJbXBlcnNvbmF0ZTogVXBkYXRlIFNlc3Npb24gUHJvcGVydGllczogc3RhcnQiKTsKICAgICAgb3V0Y29tZSA9ICJ0cnVlIjsKICAKICAgIHZhciBnb1RvID0gb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24uZ29UbzsKICAgIG15R290byA9IGdvVG8ob3V0Y29tZSk7CiAgICBteUdvdG8ucHV0U2Vzc2lvblByb3BlcnR5KCJ1c2VyTmFtZSIsIHNoYXJlZFN0YXRlLmdldCgidXNlcm5hbWUiKSk7CiAgICBteUdvdG8ucHV0U2Vzc2lvblByb3BlcnR5KCJpbXBlcnNvbmF0b3IiLCBzaGFyZWRTdGF0ZS5nZXQoImltcGVyc29uYXRvciIpKTsKCiAgICAgIGxvZ2dlci5tZXNzYWdlKCJJbXBlcnNvbmF0ZTogVXBkYXRlIFNlc3Npb24gUHJvcGVydGllczogZG9uZSBbb3V0Y29tZT17fV0iLCBvdXRjb21lKTsKICAgIGFjdGlvbiA9IG15R290by5idWlsZCgpOwp9KCkpOw==",
  },
  {
    "_id": "9de3eb62-f131-4fac-a294-7bd170fd4acb",
    "context": "POLICY_CONDITION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for Scripted Policy Conditions",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Scripted Policy Condition",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTUtMjAxNyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCi8qKgogKiBUaGlzIGlzIGEgUG9saWN5IENvbmRpdGlvbiBleGFtcGxlIHNjcmlwdC4gSXQgZGVtb25zdHJhdGVzIGhvdyB0byBhY2Nlc3MgYSB1c2VyJ3MgaW5mb3JtYXRpb24sCiAqIHVzZSB0aGF0IGluZm9ybWF0aW9uIGluIGV4dGVybmFsIEhUVFAgY2FsbHMgYW5kIG1ha2UgYSBwb2xpY3kgZGVjaXNpb24gYmFzZWQgb24gdGhlIG91dGNvbWUuCiAqLwoKdmFyIHVzZXJBZGRyZXNzLCB1c2VySVAsIHJlc291cmNlSG9zdDsKCmlmICh2YWxpZGF0ZUFuZEluaXRpYWxpemVQYXJhbWV0ZXJzKCkpIHsKCiAgICB2YXIgY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9IGdldENvdW50cnlGcm9tVXNlckFkZHJlc3MoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJDb3VudHJ5IHJldHJpZXZlZCBmcm9tIHVzZXIncyBhZGRyZXNzOiAiICsgY291bnRyeUZyb21Vc2VyQWRkcmVzcyk7CiAgICB2YXIgY291bnRyeUZyb21Vc2VySVAgPSBnZXRDb3VudHJ5RnJvbVVzZXJJUCgpOwogICAgbG9nZ2VyLm1lc3NhZ2UoIkNvdW50cnkgcmV0cmlldmVkIGZyb20gdXNlcidzIElQOiAiICsgY291bnRyeUZyb21Vc2VySVApOwogICAgdmFyIGNvdW50cnlGcm9tUmVzb3VyY2VVUkkgPSBnZXRDb3VudHJ5RnJvbVJlc291cmNlVVJJKCk7CiAgICBsb2dnZXIubWVzc2FnZSgiQ291bnRyeSByZXRyaWV2ZWQgZnJvbSByZXNvdXJjZSBVUkk6ICIgKyBjb3VudHJ5RnJvbVJlc291cmNlVVJJKTsKCiAgICBpZiAoY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9PT0gY291bnRyeUZyb21Vc2VySVAgJiYgY291bnRyeUZyb21Vc2VyQWRkcmVzcyA9PT0gY291bnRyeUZyb21SZXNvdXJjZVVSSSkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJBdXRob3JpemF0aW9uIFN1Y2NlZWRlZCIpOwogICAgICAgIHJlc3BvbnNlQXR0cmlidXRlcy5wdXQoImNvdW50cnlPZk9yaWdpbiIsIFtjb3VudHJ5RnJvbVVzZXJBZGRyZXNzXSk7CiAgICAgICAgYXV0aG9yaXplZCA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJBdXRob3JpemF0aW9uIEZhaWxlZCIpOwogICAgICAgIGF1dGhvcml6ZWQgPSBmYWxzZTsKICAgIH0KCn0gZWxzZSB7CiAgICBsb2dnZXIubWVzc2FnZSgiUmVxdWlyZWQgcGFyYW1ldGVycyBub3QgZm91bmQuIEF1dGhvcml6YXRpb24gRmFpbGVkLiIpOwogICAgYXV0aG9yaXplZCA9IGZhbHNlOwp9CgovKioKICogVXNlIHRoZSB1c2VyJ3MgYWRkcmVzcyB0byBsb29rdXAgdGhlaXIgY291bnRyeSBvZiByZXNpZGVuY2UuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgdXNlcidzIGNvdW50cnkgb2YgcmVzaWRlbmNlLgogKi8KZnVuY3Rpb24gZ2V0Q291bnRyeUZyb21Vc2VyQWRkcmVzcygpIHsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRVcmkoImh0dHA6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2dlb2NvZGUvanNvbj9hZGRyZXNzPSIgKyBlbmNvZGVVUklDb21wb25lbnQodXNlckFkZHJlc3MpKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKTsKCiAgICB2YXIgZ2VvY29kZSA9IEpTT04ucGFyc2UocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpOwogICAgdmFyIGk7CiAgICBmb3IgKGkgPSAwOyBpIDwgZ2VvY29kZS5yZXN1bHRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IGdlb2NvZGUucmVzdWx0c1tpXTsKICAgICAgICB2YXIgajsKICAgICAgICBmb3IgKGogPSAwOyBqIDwgcmVzdWx0LmFkZHJlc3NfY29tcG9uZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAocmVzdWx0LmFkZHJlc3NfY29tcG9uZW50c1tpXS50eXBlc1swXSA9PSAiY291bnRyeSIpIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuYWRkcmVzc19jb21wb25lbnRzW2ldLmxvbmdfbmFtZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKLyoqCiAqIFVzZSB0aGUgdXNlcidzIElQIHRvIGxvb2t1cCB0aGUgY291bnRyeSBmcm9tIHdoaWNoIHRoZSByZXF1ZXN0IG9yaWdpbmF0ZWQuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgY291bnRyeSBmcm9tIHdoaWNoIHRoZSByZXF1ZXN0IG9yaWdpbmF0ZWQuCiAqLwpmdW5jdGlvbiBnZXRDb3VudHJ5RnJvbVVzZXJJUCgpIHsKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldFVyaSgiaHR0cDovL2lwLWFwaS5jb20vanNvbi8iICsgdXNlcklQKTsKICAgICAgcmVxdWVzdC5zZXRNZXRob2QoIkdFVCIpOwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIGxvZ1Jlc3BvbnNlKHJlc3BvbnNlKTsKCiAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIHJlc3VsdC5jb3VudHJ5OwogICAgfQp9CgovKioKICogVXNlIHRoZSByZXF1ZXN0ZWQgcmVzb3VyY2UncyBob3N0IG5hbWUgdG8gbG9va3VwIHRoZSBjb3VudHJ5IHdoZXJlIHRoZSByZXNvdXJjZSBpcyBob3N0ZWQuCiAqCiAqIEByZXR1cm5zIHsqfSBUaGUgY291bnRyeSBpbiB3aGljaCB0aGUgcmVzb3VyY2UgaXMgaG9zdGVkLgogKi8KZnVuY3Rpb24gZ2V0Q291bnRyeUZyb21SZXNvdXJjZVVSSSgpIHsKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldFVyaSgiaHR0cDovL2lwLWFwaS5jb20vanNvbi8iICsgZW5jb2RlVVJJQ29tcG9uZW50KHJlc291cmNlSG9zdCkpOwogICAgICByZXF1ZXN0LnNldE1ldGhvZCgiR0VUIik7CgogICAgdmFyIHJlc3BvbnNlID0gaHR0cENsaWVudC5zZW5kKHJlcXVlc3QpLmdldCgpOwogICAgbG9nUmVzcG9uc2UocmVzcG9uc2UpOwoKICAgIHZhciByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKICAgIGlmIChyZXN1bHQpIHsKICAgICAgICByZXR1cm4gcmVzdWx0LmNvdW50cnk7CiAgICB9Cn0KCi8qKgogKiBSZXRyaWV2ZSBhbmQgdmFsaWRhdGUgdGhlIHZhcmlhYmxlcyByZXF1aXJlZCB0byBtYWtlIHRoZSBleHRlcm5hbCBIVFRQIGNhbGxzLgogKgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2lsbCBiZSB0cnVlIGlmIHZhbGlkYXRpb24gd2FzIHN1Y2Nlc3NmdWwuCiAqLwpmdW5jdGlvbiB2YWxpZGF0ZUFuZEluaXRpYWxpemVQYXJhbWV0ZXJzKCkgewogICAgdmFyIHVzZXJBZGRyZXNzU2V0ID0gaWRlbnRpdHkuZ2V0QXR0cmlidXRlKCJwb3N0YWxBZGRyZXNzIik7CiAgICBpZiAodXNlckFkZHJlc3NTZXQgPT0gbnVsbCB8fCB1c2VyQWRkcmVzc1NldC5pc0VtcHR5KCkpIHsKICAgICAgICBsb2dnZXIud2FybmluZygiTm8gYWRkcmVzcyBzcGVjaWZpZWQgZm9yIHVzZXI6ICIgKyB1c2VybmFtZSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgdXNlckFkZHJlc3MgPSB1c2VyQWRkcmVzc1NldC5pdGVyYXRvcigpLm5leHQoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJVc2VyIGFkZHJlc3M6ICIgKyB1c2VyQWRkcmVzcyk7CgogICAgaWYgKCFlbnZpcm9ubWVudCkgewogICAgICAgIGxvZ2dlci53YXJuaW5nKCJObyBlbnZpcm9ubWVudCBwYXJhbWV0ZXJzIHNwZWNpZmllZCBpbiB0aGUgZXZhbHVhdGlvbiByZXF1ZXN0LiIpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICB2YXIgaXBTZXQgPSBlbnZpcm9ubWVudC5nZXQoIklQIik7CiAgICBpZiAoaXBTZXQgPT0gbnVsbCB8fCBpcFNldC5pc0VtcHR5KCkpIHsKICAgICAgICBsb2dnZXIud2FybmluZygiTm8gSVAgc3BlY2lmaWVkIGluIHRoZSBldmFsdWF0aW9uIHJlcXVlc3QgZW52aXJvbm1lbnQgcGFyYW1ldGVycy4iKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgICB1c2VySVAgPSBpcFNldC5pdGVyYXRvcigpLm5leHQoKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJVc2VyIElQOiAiICsgdXNlcklQKTsKCiAgICBpZiAoIXJlc291cmNlVVJJKSB7CiAgICAgICAgbG9nZ2VyLndhcm5pbmcoIk5vIHJlc291cmNlIFVSSSBzcGVjaWZpZWQuIik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmVzb3VyY2VIb3N0ID0gcmVzb3VyY2VVUkkubWF0Y2goL14oLio6XC9cLykod3d3XC4pPyhbQS1aYS16MC05XC1cLl0rKSg6WzAtOV0rKT8oLiopJC8pWzNdOwogICAgbG9nZ2VyLm1lc3NhZ2UoIlJlc291cmNlIGhvc3Q6ICIgKyByZXNvdXJjZUhvc3QpOwoKICAgIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBsb2dSZXNwb25zZShyZXNwb25zZSkgewogICAgbG9nZ2VyLm1lc3NhZ2UoIlVzZXIgUkVTVCBDYWxsLiBTdGF0dXM6ICIgKyByZXNwb25zZS5nZXRTdGF0dXMoKSArICIsIEJvZHk6ICIgKyByZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7Cn0=",
  },
  {
    "_id": "4855aac0-1efd-49c0-a153-3b9aadc911a6",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Populate Username From Email",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Populate Username From Email",
    "script": "b3V0Y29tZSA9ICJ0cnVlIjsKCnNoYXJlZFN0YXRlLnB1dCgidXNlcm5hbWUiLCBnZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUoIm1haWwiKSkKc2V0U2hhcmVkT2JqZWN0QXR0cmlidXRlKCJ1c2VyTmFtZSIsIGdldFNoYXJlZE9iamVjdEF0dHJpYnV0ZSgibWFpbCIpKQoKLyoKICogU3RvcmUgYXR0cmlidXRlcyBpbiBzaGFyZWQgc3RhdGUgZm9yIHVzZSB3aXRoIHRoZSBDcmVhdGUvUGF0Y2ggT2JqZWN0IG5vZGVzLgogKi8KZnVuY3Rpb24gc2V0U2hhcmVkT2JqZWN0QXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7CiAgICAgICB2YXIgc3RvcmFnZSA9IHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpOwogICAgaWYgKHN0b3JhZ2UgJiYgdmFsdWUpIHsKICAgICAgICAgIGlmIChzdG9yYWdlLnB1dCkgewogICAgICAgICAgICAgIHN0b3JhZ2UucHV0KG5hbWUsIHZhbHVlKTsKICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICBzdG9yYWdlW25hbWVdID0gdmFsdWU7CiAgICAgICAgfQogICAgfQogICAgZWxzZSBpZiAodmFsdWUpIHsKICAgICAgICBzaGFyZWRTdGF0ZS5wdXQoIm9iamVjdEF0dHJpYnV0ZXMiLCBKU09OLnBhcnNlKCJ7XCIiK25hbWUrIlwiOlwiIit2YWx1ZSsiXCJ9IikpOwogICAgfQp9CgovKgogKiBSZWFkIGF0dHJpYnV0ZXMgaW4gc2hhcmVkIHN0YXRlIGZvciB1c2Ugd2l0aCB0aGUgQ3JlYXRlL1BhdGNoIE9iamVjdCBub2Rlcy4KICovCmZ1bmN0aW9uIGdldFNoYXJlZE9iamVjdEF0dHJpYnV0ZShuYW1lKSB7CiAgICB2YXIgc3RvcmFnZSA9IHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpOwogICAgaWYgKHN0b3JhZ2UpIHsKICAgICAgICAgIGlmIChzdG9yYWdlLmdldCkgewogICAgICAgICAgICByZXR1cm4gc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikuZ2V0KG5hbWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHJldHVybiBzdG9yYWdlLm5hbWU7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn0=",
  },
  {
    "_id": "ed685f9f-5909-4726-86e8-22bd38b47663",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Converts a normalized social profile into an Identity",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Normalized Profile to Identity",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmltcG9ydCBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlCgpKc29uVmFsdWUgaWRlbnRpdHkgPSBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lKSwKICAgICAgICBmaWVsZCgic24iLCBub3JtYWxpemVkUHJvZmlsZS5mYW1pbHlOYW1lKSwKICAgICAgICBmaWVsZCgibWFpbCIsIG5vcm1hbGl6ZWRQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgiY24iLCBub3JtYWxpemVkUHJvZmlsZS5kaXNwbGF5TmFtZSksCiAgICAgICAgZmllbGQoInVzZXJOYW1lIiwgbm9ybWFsaXplZFByb2ZpbGUudXNlcm5hbWUpLAogICAgICAgIGZpZWxkKCJpcGxhbmV0LWFtLXVzZXItYWxpYXMtbGlzdCIsIHNlbGVjdGVkSWRwICsgJy0nICsgbm9ybWFsaXplZFByb2ZpbGUuaWQuYXNTdHJpbmcoKSkpKQoKcmV0dXJuIGlkZW50aXR5",
  },
  {
    "_id": "b7ce17a1-e41d-42b0-bedc-f88a4d5e1c3a",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Prepares onboarding check if not amadmin",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_AmadminCheck",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKdmFyIGZyID0gbmV3IEphdmFJbXBvcnRlcigKICBqYXZhLnV0aWwuSGFzaE1hcAopOwoKd2l0aCAoZnIpIHsKICB0cnkgewogICAgCiAgICBpZiAoc2hhcmVkU3RhdGUuZ2V0KCd1c2VybmFtZScpLnRvTG93ZXJDYXNlKCkgPT0gJ2FtYWRtaW4nKSB7CiAgICAgIG91dGNvbWUgPSAnVHJ1ZSc7CiAgICB9IGVsc2UgewogICAgICBvdXRjb21lID0gJ0ZhbHNlJzsKICAgIH0KICAgIAogIH0gY2F0Y2ggKGUpIHsKCiAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBkZXRlcm1pbmUgaWYgdXNlciBpcyBhbWFkbWluOiB7fScsIGUpOwogICAgb3V0Y29tZSA9ICdFcnJvcic7CgogIH0KfQ==",
  },
  {
    "_id": "80c3e733-ae51-4851-a01d-1cbf193c80e9",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Activates the admin's account",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_SetOnboardingAttributes",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKZnVuY3Rpb24gdXRjTm93KCkgewogIHJldHVybiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7Cn0KCnRyeSB7CiAgCiAgdmFyIE9CSkVDVF9BVFRSUyA9ICdvYmplY3RBdHRyaWJ1dGVzJzsKCiAgLy8gU3RhcnQgYnkgZ2V0dGluZyBvYmplY3QgYXR0cmlidXRlcyBmcm9tIHNoYXJlZCBzdGF0ZQogIHZhciBzaGFyZWRPYmpBdHRycyA9IHNoYXJlZFN0YXRlLmdldChPQkpFQ1RfQVRUUlMpOwogIHNoYXJlZE9iakF0dHJzLnB1dCgnYWNjb3VudFN0YXR1cycsICdBY3RpdmUnKTsKICBzaGFyZWRPYmpBdHRycy5wdXQoJ29uYm9hcmREYXRlJywgdXRjTm93KCkpOwogIAogIC8vIENvcHkgYXR0cmlidXRlcyBmcm9tIHRyYW5zaWVudCBzdGF0ZQogIHZhciB0cmFuc2llbnRPYmpBdHRycyA9IG5vZGVTdGF0ZS5nZXQoT0JKRUNUX0FUVFJTKTsKICB2YXIgYXR0cnMgPSBbJ2FsaWFzTGlzdCcsICdnaXZlbk5hbWUnLCAncGFzc3dvcmQnLCAnc24nXTsKICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgdmFsID0gdHJhbnNpZW50T2JqQXR0cnMuZ2V0KGF0dHJzW2ldKTsKICAgIGlmICh2YWwuaXNOb3ROdWxsKCkpIHsKICAgICAgc2hhcmVkT2JqQXR0cnMucHV0KGF0dHJzW2ldLCB2YWwpOwogICAgfQogIH0KICAKICAvLyBFbnN1cmUgb2JqZWN0IGF0dHJpYnV0ZXMgbWF0Y2ggaW4gYm90aCBzaGFyZWQgYW5kIHRyYW5zaWVudCBzdGF0ZQogIG5vZGVTdGF0ZS5wdXRUcmFuc2llbnQoT0JKRUNUX0FUVFJTLCBzaGFyZWRPYmpBdHRycyk7CiAgc2hhcmVkU3RhdGUucHV0KE9CSkVDVF9BVFRSUywgc2hhcmVkT2JqQXR0cnMpOwogIG91dGNvbWUgPSAnU3VjY2Vzcyc7Cgp9IGNhdGNoIChlKSB7CgogIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHNldCBhdHRyaWJ1dGVzIHRvIGNvbXBsZXRlIG9uYm9hcmRpbmc6IHt9JywgZSk7CiAgb3V0Y29tZSA9ICdFcnJvcic7Cgp9Cg==",
  },
  {
    "_id": "1d475815-72cb-42eb-aafd-4026989d28a7",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for Social Identity Provider Profile Transformation",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Social Identity Provider Profile Transformation Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyogRGVmYXVsdCBTb2NpYWwgSWRlbnRpdHkgUHJvdmlkZXIgUHJvZmlsZSBUcmFuc2Zvcm1hdGlvbiBzY3JpcHQgdG8gdXNlIGFzIGEgdGVtcGxhdGUgZm9yIG5ldyBzY3JpcHRzICov",
  },
  {
    "_id": "bae1d54a-e97d-4997-aa5d-c027f21af82c",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Facebook",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Facebook Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLm5hbWUpLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmZpcnN0X25hbWUpLAogICAgICAgIGZpZWxkKCJmYW1pbHlOYW1lIiwgcmF3UHJvZmlsZS5sYXN0X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGljdHVyZS5kYXRhLnVybCksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCkpKQ==",
  },
  {
    "_id": "c9fa3899-c3ce-4833-af83-64d709202600",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Verify security PIN",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twilio IVR: Verify Security PIN",
    "script": "LyogVHdpbGlvIElWUjogVmVyaWZ5IFNlY3VyaXR5IFBJTgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICogLSBmYWxzZQogKiAKICogRGVwZW5kaW5nIG9uIHRoZSBhbW91bnQgb2YgZGF0YSBjb2xsZWN0ZWQgdGhyb3VnaCBjYWxsYmFja3MgYW5kIGhvdyBtYW55IG9mIHRoZSBjYWxsUGFyYW1zCiAqIHlvdSBhY3RpdmF0ZSBiZWxvdywgeW91IHdpbGwgbmVlZCB0byBjaGFuZ2UgeW91ciBhdXRoZW50aWNhdGlvbiBzZXNzaW9uIGZyb20gSldUIHRvIENUUyBvcgogKiBNZW1vcnkuCiAqLwpsb2dnZXIud2FybmluZygiVHdpbGlvIElWUjogVmVyaWZ5IFNlY3VyaXR5IFBJTjogc3RhcnQiKTsKb3V0Y29tZSA9ICJmYWxzZSI7CgovKiBCZWdpbiBDb25maWd1cmF0aW9uCiAqLwoKLy8gRm9yIElEIENsb3VkIHVzZSAiX2lkIiwgZm9yIGNsYXNzaWMgZGVwbG95bWVudHMgdXNlICJ1c2VybmFtZSIKdmFyIHVzZXJpZCA9IHNoYXJlZFN0YXRlLmdldCgiX2lkIikKCi8vIFJldHJpZXZlIHRoZSBpZGVudGlmaWVkIGNhbGxlcidzIFBJTiAoaW4gSURNOiBmclVuaW5kZXhlZEludGVnZXI1LCBpbiBBTTogZnItYXR0ci1pbnQ1KQp2YXIgc2VjdXJpdHlQSU4gPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHVzZXJpZCwgImZyLWF0dHItaW50NSIpLml0ZXJhdG9yKCkubmV4dCgpOwoKLy8gQnVpbGQgb3V0IHRoZSB2ZXJpZmljYXRpb24gcHJvbXB0CnZhciBwcm9tcHQgPSAiVG8gdmVyaWZ5IEkgaGF2ZSB0aGUgcmlnaHQgYWNjb3VudCwgcGxlYXNlIGVudGVyIHlvdXIgNC1kaWdpdCBzZWN1cml0eSBQSU4uIjsKCi8qIEVuZCBDb25maWd1cmF0aW9uCiAqLwoKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLAogICAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRJbnB1dENhbGxiYWNrCik7CiAgCndpdGggKGZyKSB7CiAgICAgIGlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICAgICAgdmFyIGlucHV0ID0gbmV3IFRleHRJbnB1dENhbGxiYWNrKHByb21wdCk7CiAgICAgICAgYWN0aW9uID0gQWN0aW9uLnNlbmQoaW5wdXQpLmJ1aWxkKCk7CiAgICAgIH0gCiAgICAgIGVsc2UgewogICAgICAgICAgdmFyIGFuc3dlciA9IG5ldyBTdHJpbmcoY2FsbGJhY2tzLmdldCgwKS5nZXRUZXh0KCkpLnJlcGxhY2UoL1teMC05XS9nLCAiIik7CiAgICAgICAgbG9nZ2VyLndhcm5pbmcoIlR3aWxpbyBJVlI6IFZlcmlmeSBTZWN1cml0eSBQSU46IGNhbGxiYWNrcyByZWNlaXZlZCIpOwogICAgICAgIGlmIChhbnN3ZXIgPT0gc2VjdXJpdHlQSU4pIHsKICAgICAgICAgICAgICBvdXRjb21lID0gInRydWUiOwogICAgICAgIH0KICAgICAgICBsb2dnZXIud2FybmluZygiVHdpbGlvIElWUjogVmVyaWZ5IFNlY3VyaXR5IFBJTjogZmluaXNoIFtvdXRjb21lPSIuY29uY2F0KG91dGNvbWUpLmNvbmNhdCgiXSIpKTsKICAgICAgICBhY3Rpb24gPSBBY3Rpb24uZ29UbyhvdXRjb21lKS5idWlsZCgpOwogICAgICB9Cn0=",
  },
  {
    "_id": "3369037a-7a49-4aed-a1dc-7aab7608812b",
    "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Service Account - Token Modification",
    "script": "KGZ1bmN0aW9uICgpIHsKICB2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICBqYXZhLmxhbmcuU3RyaW5nLAogICAgamF2YS5zZWN1cml0eS5NZXNzYWdlRGlnZXN0LAogICAgamF2YS51dGlsLkFycmF5cywKICAgIGphdmF4LmNyeXB0by5DaXBoZXIsCiAgICBqYXZheC5jcnlwdG8uc3BlYy5TZWNyZXRLZXlTcGVjLAogICAgb3JnLmZvcmdlcm9jay5odHRwLnByb3RvY29sLlJlcXVlc3QsCiAgICBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVzcG9uc2UsCiAgICBvcmcuZm9yZ2Vyb2NrLnV0aWwuZW5jb2RlLkJhc2U2NAogICk7CiAgCiAgdmFyIHNlY3JldCA9ICdGdXd3VktwUEVSOXRQU01ZVWlJa1k3SWFQenY4NWFHVSc7CiAgCiAgZnVuY3Rpb24gZW5jcnlwdChzdHIpIHsKICAgIHRyeSB7CiAgICAgIHZhciBrZXkgPSBuZXcgZnIuU3RyaW5nKHNlY3JldCkuZ2V0Qnl0ZXMoJ1VURi04Jyk7CiAgICAgIHZhciBzaGEgPSBmci5NZXNzYWdlRGlnZXN0LmdldEluc3RhbmNlKCdTSEEtMjU2Jyk7CiAgICAgIGtleSA9IHNoYS5kaWdlc3Qoa2V5KTsKICAgICAga2V5ID0gZnIuQXJyYXlzLmNvcHlPZihrZXksIDMyKTsKICAgICAgdmFyIHNlY3JldEtleSA9IG5ldyBmci5TZWNyZXRLZXlTcGVjKGtleSwgJ0FFUycpOwogICAgICB2YXIgY2lwaGVyID0gZnIuQ2lwaGVyLmdldEluc3RhbmNlKCdBRVMvRUNCL1BLQ1M1UGFkZGluZycpOwogICAgICBjaXBoZXIuaW5pdChmci5DaXBoZXIuRU5DUllQVF9NT0RFLCBzZWNyZXRLZXkpOwogICAgICB2YXIgZmluYWxCeXRlcyA9IGNpcGhlci5kb0ZpbmFsKG5ldyBmci5TdHJpbmcoc3RyKS5nZXRCeXRlcygnVVRGLTgnKSk7CiAgICAgIHJldHVybiBmci5CYXNlNjQuZW5jb2RlKGZpbmFsQnl0ZXMpOwogICAgfSBjYXRjaCAoZSkgewogICAgICBsb2dnZXIuZXJyb3IoJ3t9OiBmYWlsZWQgdG8gZW5jcnlwdDoge30nLCBzY3JpcHROYW1lLCBlKTsKICAgICAgdGhyb3cgZTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGhhc0FtU2NvcGUoc2NvcGUpIHsKICAgIGlmICghc2NvcGUpIHJldHVybiBmYWxzZTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NvcGUubGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKHNjb3BlW2ldLmluZGV4T2YoJ2ZyOmFtOicpID4gLTEpIHJldHVybiB0cnVlOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgdHJ5IHsKICAgIHZhciB1cmkgPSAnaHR0cDovL2FtLmZyLXBsYXRmb3JtOjgwL2FtL2pzb24vYXV0aGVudGljYXRlP2F1dGhJbmRleFR5cGU9c2VydmljZSZhdXRoSW5kZXhWYWx1ZT1GUlNlcnZpY2VBY2NvdW50SW50ZXJuYWwnOwogICAgdmFyIHJlcXVlc3RQYXJhbXMgPSByZXF1ZXN0UHJvcGVydGllcy5nZXQoJ3JlcXVlc3RQYXJhbXMnKTsKCiAgICB2YXIgc2NvcGUgPSByZXF1ZXN0UGFyYW1zLmdldCgnc2NvcGUnKTsKICAgIGlmICghaGFzQW1TY29wZShzY29wZSkpIHsKICAgICAgbG9nZ2VyLm1lc3NhZ2UoJ0FNIHNjb3BlIG5vdCByZXF1ZXN0ZWQnKTsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgdmFyIGp3dHMgPSByZXF1ZXN0UGFyYW1zLmdldCgnYXNzZXJ0aW9uJyk7CiAgICBpZiAoIWp3dHMgfHwgand0cy5pc0VtcHR5KCkpIHsKICAgICAgbG9nZ2VyLm1lc3NhZ2UoJ05vIGp3dCBhc3NlcnRpb24nKTsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgdmFyIGp3dCA9IGp3dHNbMF07CiAgICB2YXIgdXVpZCA9IGlkZW50aXR5LmdldEF0dHJpYnV0ZSgnX2lkJykuaXRlcmF0b3IoKS5uZXh0KCk7CgogICAgdmFyIHJlcXVlc3QgPSBuZXcgZnIuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5nZXRIZWFkZXJzKCkuYWRkKCdhdXRob3JpemF0aW9uJywgJ3N2Y2FjY3QgJyArIHV1aWQgKyAnICcgKyBqd3QpOwogICAgcmVxdWVzdC5nZXRIZWFkZXJzKCkuYWRkKCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpOwogICAgcmVxdWVzdAogICAgICAuc2V0VXJpKHVyaSkKICAgICAgLnNldE1ldGhvZCgnUE9TVCcpCiAgICAgIC5zZXRFbnRpdHkoJ3t9Jyk7CgogICAgdmFyIHJlc3BvbnNlID0gaHR0cENsaWVudC5zZW5kKHJlcXVlc3QpLmdldE9yVGhyb3coKTsKICAgIGlmIChyZXNwb25zZS5nZXRTdGF0dXMoKSA9PT0gb3JnLmZvcmdlcm9jay5odHRwLnByb3RvY29sLlN0YXR1cy5PSykgewogICAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICAgIHZhciBlbmNyeXB0ZWRUb2tlbklkID0gZW5jcnlwdChyZXN1bHQudG9rZW5JZCk7CiAgICAgIGFjY2Vzc1Rva2VuLnNldEZpZWxkKCdzZXNzaW9uVG9rZW4nLCBlbmNyeXB0ZWRUb2tlbklkKTsKICAgIH0gZWxzZSB7CiAgICAgIGxvZ2dlci5tZXNzYWdlKCdGYWlsZWQgdG8gZ2V0IHNlc3Npb24gZnJvbSBzZXJ2aWNlIGFjY291bnQgdHJlZSAoc3RhdHVzOiAnICsgcmVzcG9uc2UuZ2V0U3RhdHVzKCkgKyAnKScpOwogICAgfQogIH0gY2F0Y2ggKGUpIHsKICAgIHRocm93ICgnRmFpbGVkIHRvIG1vZGlmeSBzZXJ2aWNlIGFjY291bnQgdG9rZW46ICcgKyBlKTsKICB9Cn0oKSk7Cg==",
  },
  {
    "_id": "dedbc9f6-7fc9-4332-a330-55f7aeb95e78",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "FRAAS-7955 Shared State Only",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FRAAS-7955 Shared State Only",
    "script": "b3V0Y29tZSA9ICJ0cnVlIjsKCnNldFNoYXJlZE9iamVjdEF0dHJpYnV0ZSgidXNlck5hbWUiLCAiRlJBQVMtNzk1NSIpOwpzZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUoImdpdmVuTmFtZSIsICJGaXJzdC1zaGFyZWQiKTsKc2V0U2hhcmVkT2JqZWN0QXR0cmlidXRlKCJzbiIsICJMYXN0LXNoYXJlZCIpOwpzZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUoIm1haWwiLCAiZmlyc3QubGFzdC1zaGFyZWRAY29tcGFueS5jb20iKTsKCi8qCiAqIFN0b3JlIGF0dHJpYnV0ZXMgaW4gc2hhcmVkIHN0YXRlIGZvciB1c2Ugd2l0aCB0aGUgQ3JlYXRlL1BhdGNoIE9iamVjdCBub2Rlcy4KICovCmZ1bmN0aW9uIHNldFNoYXJlZE9iamVjdEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkgewogICAgICAgdmFyIHN0b3JhZ2UgPSBzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKTsKICAgIGlmIChzdG9yYWdlICYmIHZhbHVlKSB7CiAgICAgICAgICBpZiAoc3RvcmFnZS5wdXQpIHsKICAgICAgICAgICAgICBzdG9yYWdlLnB1dChuYW1lLCB2YWx1ZSk7CiAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgc3RvcmFnZVtuYW1lXSA9IHZhbHVlOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgaWYgKHZhbHVlKSB7CiAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwgSlNPTi5wYXJzZSgie1wiIituYW1lKyJcIjpcIiIrdmFsdWUrIlwifSIpKTsKICAgIH0KfQ==",
  },
  {
    "_id": "f26cc0de-ee31-4114-8a32-27799bb49357",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Setup MFA Choice",
    "script": "LyoKICogQWRhcHQgdGhlIGNvbmZpZ3VyYXRpb24gdmFsdWVzIGJlbG93CiAqLwoKLy8gZG8gbm90IGNoYW5nZSwgbXVzdCBiZSBhIHJhbmRvbSBpZGVudGlmaWVyCnZhciBhbmNob3IgPSBnZW5lcmF0ZU51bWVyaWNUb2tlbigneHh4Jyk7CgovLyBzcGVjaWZ5IHRoZSBob3Jpem9udGFsIGFsaWdubWVudCBvZiB0aGUgbWVzc2FnZTogbGVmdCwgY2VudGVyLCByaWdodAp2YXIgaGFsaWduID0gImNlbnRlciI7CgovLyBzcGVjaWZ5IHRoZSBzdHlsZSB0byBhcHBseSB0byB0aGUgYnV0dG9uIGluIHRoZSBtZXNzYWdlIHRvIG1ha2UgaXQgbG9vayBsaWtlIGEgbGluawp2YXIgbGlua0J1dHRvblN0eWxlID0gImJvcmRlcjogMDsgY29sb3I6ICMxMDlDRjE7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IjsKCi8vIHNwZWNpZnkgdGhlIGxpbmsgYnV0dG9uIEhUTUwgZWxlbWVudC4gb25seSBtb2RpZnkgdGhlIHRleHQgYmV0d2VlbiB0aGUgPGJ1dHRvbj4gYW5kIDwvYnV0dG9uPiB0YWdzLgp2YXIgbGlua0J1dHRvbiA9ICI8YnV0dG9uIGlkPVwic2tpcC1saW5rLSIuY29uY2F0KGFuY2hvcikuY29uY2F0KCJcIiB0eXBlPVwic3VibWl0XCIgc3R5bGU9XCIiKS5jb25jYXQobGlua0J1dHRvblN0eWxlKS5jb25jYXQoIlwiPnNraXAgZm9yIG5vdy48L2J1dHRvbj4iKTsKCi8vIHNwZWNpZnkgdGhlIG1lc3NhZ2UgeW91IHdhbnQgdG8gZGlzcGxheSBhbmQgcGxhY2UgdGhlIGxpbmtCdXR0b24gYW55d2hlcmUKdmFyIG1lc3NhZ2UgPSAiUGxlYXNlIHNlbGVjdCB5b3VyIHByZWZlcmVkIGZhY3RvciBvciIuY29uY2F0KGxpbmtCdXR0b24pOwoKLy8gc3BlY2lmeSB0aGUgY2hvaWNlcyB5b3Ugd2FudCB0byBvZmZlciB0aGUgdXNlci4KdmFyIGNob2ljZXMgPSBbIlNNUyIsIkZpZG8iLCJQdXNoIl07CgovLyBzcGVjaWZ5IHRoZSBkZWZhdWx0IGNob2ljZS4gdGhpcyBzZXR0aW5nIG11c3QgYmUgYSB2YWxpZCAwLWJhc2VkIGluZGV4IG9mIHRoZSBjaG9pY2VzIGFycmF5IGFib3ZlLgp2YXIgZGVmYXVsdENob2ljZSA9IDA7CgovKgogKiBBbGwgdGhlIGNvbmZpZ3VyYXRpb24gdmFsdWVzIGFyZSBhYm92ZSB0aGlzIGNvbW1lbnQuCiAqCiAqIERPIE5PVCBNQUtFIEFOWSBDSEFOR0VTIEJFTE9XIQogKi8KCi8vIGZpbmQgdGhlIFRleHRPdXRwdXRDYWxsYmFjayB3aXRoIHRoZSBtZXNzYWdlX2FuY2hvcgovLyBhbmQgcmVwbGFjZSB0aGUgbWVzc2FnZV9hbmNob3Igd2l0aCB0aGUgbWVzc2FnZQp2YXIgZGlzcGxheU1lc3NhZ2VTY3JpcHQgPSAiIi5jb25jYXQoCiAgIkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFxuIikuY29uY2F0KAogICIgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NhbGxiYWNrLWNvbXBvbmVudCcpXG4iKS5jb25jYXQoCiAgIikuZm9yRWFjaChcbiIpLmNvbmNhdCgKICAiICBmdW5jdGlvbiAoZSkge1xuIikuY29uY2F0KAogICIgICAgdmFyIG1lc3NhZ2UgPSBlLmZpcnN0RWxlbWVudENoaWxkO1xuIikuY29uY2F0KAogICIgICAgaWYgKG1lc3NhZ2UuZmlyc3RDaGlsZCAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZU5hbWUgPT0gJyN0ZXh0JyAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZVZhbHVlLnRyaW0oKSA9PSAnbWVzc2FnZS0iKS5jb25jYXQoYW5jaG9yKS5jb25jYXQoIicpIHtcbiIpLmNvbmNhdCgKICAiICAgICAgbWVzc2FnZS5hbGlnbiA9IFwiIikuY29uY2F0KGhhbGlnbikuY29uY2F0KCJcIjtcbiIpLmNvbmNhdCgKICAiICAgICAgbWVzc2FnZS5pbm5lckhUTUwgPSAnIikuY29uY2F0KG1lc3NhZ2UpLmNvbmNhdCgiJztcbiIpLmNvbmNhdCgKICAiICAgIH1cbiIpLmNvbmNhdCgKICAiICB9XG4iKS5jb25jYXQoCiAgIikiKQoKLy8gaGlqYWNrIHRoZSBsaW5rIGJ1dHRvbiBpbiB0aGUgbWVzc2FnZSBhbmQ6Ci8vIC0gZmluZCB0aGUgSGlkZGVuVmFsdWVDYWxsYmFjayBhbmQgc2V0IGl0cyB2YWx1ZSB0byAiU2tpcCIKLy8gLSB0aGVuIHNpbXVsYXRlIGEgbG9naW4gYnV0dG9uIGNsaWNrCnZhciBza2lwT3B0aW9uU2NyaXB0ID0gIiIuY29uY2F0KAogICJkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNraXAtbGluay0iKS5jb25jYXQoYW5jaG9yKS5jb25jYXQoIlwiKS5vbmNsaWNrID0gZnVuY3Rpb24oKXtcbiIpLmNvbmNhdCgKICAiICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNraXAtaW5wdXQtIikuY29uY2F0KGFuY2hvcikuY29uY2F0KCJcIikudmFsdWUgPSBcIlNraXBcIjtcbiIpLmNvbmNhdCgKICAiICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvZ2luQnV0dG9uXzBcIikuY2xpY2soKTtcbiIpLmNvbmNhdCgKICAiICByZXR1cm4gZmFsc2U7XG4iKS5jb25jYXQoCiAgIn0iKQoKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLkNvbmZpcm1hdGlvbkNhbGxiYWNrLAogICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2ssCiAgICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5IaWRkZW5WYWx1ZUNhbGxiYWNrLAogICAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrCikKCmlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICBuZXcgZnIuVGV4dE91dHB1dENhbGxiYWNrKAogICAgICAgICAgICBmci5UZXh0T3V0cHV0Q2FsbGJhY2suSU5GT1JNQVRJT04sCiAgICAgICAgICAgICJtZXNzYWdlLSIuY29uY2F0KGFuY2hvcikKICAgICAgICApLAogICAgICAgIG5ldyBmci5Db25maXJtYXRpb25DYWxsYmFjaygKICAgICAgICAgICAgZnIuQ29uZmlybWF0aW9uQ2FsbGJhY2suSU5GT1JNQVRJT04sCiAgICAgICAgICAgIGNob2ljZXMsCiAgICAgICAgICAgIGRlZmF1bHRDaG9pY2UKICAgICAgICApLAogICAgICAgIG5ldyBmci5IaWRkZW5WYWx1ZUNhbGxiYWNrKCJza2lwLWlucHV0LSIuY29uY2F0KGFuY2hvciksICJmYWxzZSIpLAogICAgICAgIG5ldyBmci5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2soZGlzcGxheU1lc3NhZ2VTY3JpcHQpLAogICAgICAgIG5ldyBmci5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2soc2tpcE9wdGlvblNjcmlwdCkKICAgICkuYnVpbGQoKQp9CmVsc2UgewogIC8vIGRpZCB0aGUgdXNlciBza2lwPwogIGlmIChjYWxsYmFja3MuZ2V0KDIpLmdldFZhbHVlKCkgPT0gIlNraXAiKSB7CiAgICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbygiU2tpcCIpLmJ1aWxkKCk7CiAgfQogIC8vIHVzZXIgZGlkbid0IHNraXAsIHBpY2sgdGhlIHJpZ2h0IG91dGNvbWUKICBlbHNlIHsKICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKGNob2ljZXNbY2FsbGJhY2tzLmdldCgxKS5nZXRTZWxlY3RlZEluZGV4KCldKS5idWlsZCgpOwogIH0KfQoKIC8qCiAgKiBHZW5lcmF0ZSBhIHRva2VuIGluIHRoZSBkZXNpcmVkIGZvcm1hdC4gQWxsICd4JyBjaGFyYWN0ZXJzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBhIHJhbmRvbSBudW1iZXIgMC05LgogICogCiAgKiBFeGFtcGxlOgogICogJ3h4eHh4JyBwcm9kdWNlcyAnMjg1MzUnCiAgKiAneHh4LXh4eCcgcHJvZHVjZXMgJzQzMi01MjEnCiAgKi8KZnVuY3Rpb24gZ2VuZXJhdGVOdW1lcmljVG9rZW4oZm9ybWF0KSB7CiAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1t4XS9nLCBmdW5jdGlvbihjKSB7CiAgICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpKjEwfDA7CiAgICAgICAgdmFyIHYgPSByOwogICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDEwKTsKICAgIH0pOwp9",
  },
  {
    "_id": "aef262d0-7a42-4a34-9826-e7dbc2ea6eb9",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Route users to their organization's IDP of type saml, oidc, local, or custom and apply the organization's theme, if specified",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "IDP Router",
    "script": "LyogSURQIFJvdXRlcgogKiAKICogUm91dGUgdXNlcnMgdG8gdGhlaXIgb3JnYW5pemF0aW9uJ3MgSURQIG9mIHR5cGUgc2FtbCwgb2lkYywgbG9jYWwsIAogKiBvciBjdXN0b20gYW5kIGFwcGx5IHRoZSBvcmdhbml6YXRpb24ncyB0aGVtZSwgaWYgc3BlY2lmaWVkLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSBzYW1sCiAqIC0gb2lkYwogKiAtIGxvY2FsCiAqIC0gY3VzdG9tCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgICAgIGxvZ2dlci5tZXNzYWdlKCJJRFAgUm91dGVyOiBTdGFydCIpOwogICAgb3V0Y29tZSA9ICJsb2NhbCI7CiAgICAgIHZhciByZWZlcmVyID0gcGFyc2VVcmwocmVxdWVzdEhlYWRlcnMuZ2V0KCJyZWZlcmVyIikuZ2V0KDApKTsKICAgICAgdmFyIHJvdXRlZElEUCA9IHNoYXJlZFN0YXRlLmdldCgicm91dGVkSURQcyIpLmdldCgwKTsKICAgICAgaWYgKHJvdXRlZElEUCkgewogICAgICAgIG91dGNvbWUgPSByb3V0ZWRJRFAuZ2V0KCJpZHBUeXBlIik7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIklEUCBSb3V0ZXI6IFJvdXRlZCBJRFA6ICIgKyByb3V0ZWRJRFApOwogICAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJzZWxlY3RlZElkcCIsIHJvdXRlZElEUC5nZXQoImlkcE5hbWUiKSk7CiAgICAgICAgdmFyIG5vZGVDb25maWcgPSB7fTsKICAgICAgICAgIC8vIGxvYWQgc2FtbENvbmZpZwogICAgICAgICAgaWYgKHJvdXRlZElEUC5nZXQoInNhbWxDb25maWciKSkgewogICAgICAgICAgICAgIG5vZGVDb25maWcgPSBKU09OLnBhcnNlKHJvdXRlZElEUC5nZXQoInNhbWxDb25maWciKSk7CiAgICAgICAgfQogICAgICAgICAgLy8gcm91dGUgdG8gYSBjdXN0b20gam91cm5leQogICAgICAgIGlmIChyb3V0ZWRJRFAuZ2V0KCJpZHBKb3VybmV5IikpIHsKICAgICAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIklEUCBSb3V0ZXI6IFJvdXRlIHRvIGN1c3RvbSBJRFAge30sIGpvdXJuZXk6IHt9Iiwgcm91dGVkSURQLmdldCgiaWRwTmFtZSIpLCByb3V0ZWRJRFAuZ2V0KCJpZHBKb3VybmV5IikpOwogICAgICAgICAgICAgIG5vZGVDb25maWcudHJlZSA9IHJvdXRlZElEUC5nZXQoImlkcEpvdXJuZXkiKTsKICAgICAgICAgICAgICBvdXRjb21lID0gImN1c3RvbSI7CiAgICAgICAgfQogICAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJub2RlQ29uZmlnIiwgbm9kZUNvbmZpZyk7CiAgICAgICAgICAvLyBvbmx5IHNlbmQgY2FsbGJhY2sgaWYgdGhlIG9yZy9pZHAgcmVxdWlyZXMgYSBjdXN0b20gdGhlbWUKICAgICAgICBpZiAocm91dGVkSURQLmdldCgiaWRwVGhlbWUiKSAmJiBjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICAgICAgICAgIHZhciBzdGFnZSA9ICJ0aGVtZUlkPSIrcm91dGVkSURQLmdldCgiaWRwVGhlbWUiKTsKICAgICAgICAgICAgdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICAgICAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICAgICAgICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuUG9sbGluZ1dhaXRDYWxsYmFjawogICAgICAgICAgICApCiAgICAgICAgICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgICAgICAgICAgIG5ldyBmci5Qb2xsaW5nV2FpdENhbGxiYWNrKCIwIiwgIlBsZWFzZSB3YWl0IC4uLiIpCiAgICAgICAgICAgICkud2l0aFN0YWdlKHN0YWdlKS5idWlsZCgpOwogICAgICAgICAgfQogICAgfQogICAgICBsb2dnZXIubWVzc2FnZSgiSURQIFJvdXRlcjogRG9uZSBbb3V0Y29tZT17fV0iLCBvdXRjb21lKTsKCiAgICAvKgogICAgICogUGFyc2UgYSBVUkwgaW50byBpdHMgY29tcG9uZW50cyBhbmQgbWFrZSB0aGVtIGVhc2lseSBhY2Nlc3NpYmxlIGJ5IG5hbWUKICAgICAqCiAgICAgKiBVc2UgaW4gYSBTY3JpcHRlIERlY2lzaW9uIE5vZGUgU2NyaXB0IGFzIGZvbGxvd3M6CiAgICAgKiB2YXIgcmVmZXJlciA9IHBhcnNlVXJsKHJlcXVlc3RIZWFkZXJzLmdldCgicmVmZXJlciIpLmdldCgwKSk7CiAgICAgKiB2YXIgb3JpZ2luID0gcmVmZXJlci5vcmlnaW47CiAgICAgKiAKICAgICAqIGUuZy46IGh0dHBzOi8vb3BlbmFtLXZvbGtlci1kZXYuZm9yZ2VibG9ja3MuY29tL2FtL1hVSS8/cmVhbG09L2JyYXZvJmF1dGhJbmRleFR5cGU9c2VydmljZSZhdXRoSW5kZXhWYWx1ZT1Jbml0aWF0ZU93bmVyQ2xhaW0jLwogICAgICogewogICAgICogICAgIGhhc2g6ICcjLycsCiAgICAgKiAgICAgaG9zdDogJ29wZW5hbS12b2xrZXItZGV2LmZvcmdlYmxvY2tzLmNvbScsCiAgICAgKiAgICAgaG9zdG5hbWU6ICdvcGVuYW0tdm9sa2VyLWRldi5mb3JnZWJsb2Nrcy5jb20nLAogICAgICogICAgIGhyZWY6ICdodHRwczovL29wZW5hbS12b2xrZXItZGV2LmZvcmdlYmxvY2tzLmNvbS9hbS9YVUkvP3JlYWxtPS9icmF2byZhdXRoSW5kZXhUeXBlPXNlcnZpY2UmYXV0aEluZGV4VmFsdWU9SW5pdGlhdGVPd25lckNsYWltIy8nLAogICAgICogICAgIG9yaWdpbjogJ2h0dHBzOi8vb3BlbmFtLXZvbGtlci1kZXYuZm9yZ2VibG9ja3MuY29tJywKICAgICAqICAgICBwYXRobmFtZTogJy9hbS9YVUkvJywKICAgICAqICAgICBwb3J0OiAnJywKICAgICAqICAgICBwcm90b2NvbDogJ2h0dHBzJywKICAgICAqICAgICBzZWFyY2g6ICc/cmVhbG09L2JyYXZvJmF1dGhJbmRleFR5cGU9c2VydmljZSZhdXRoSW5kZXhWYWx1ZT1Jbml0aWF0ZU93bmVyQ2xhaW0nLAogICAgICogICAgIHVzZXJuYW1lOiAnJywKICAgICAqICAgICBwYXNzd29yZDogJycsCiAgICAgKiAgICAgc2VhcmNoUGFyYW06IHsKICAgICAqICAgICAgICAgcmVhbG06ICcvYnJhdm8nLAogICAgICogICAgICAgICBhdXRoSW5kZXhUeXBlOiAnc2VydmljZScsCiAgICAgKiAgICAgICAgIGF1dGhJbmRleFZhbHVlOiAnSW5pdGlhdGVPd25lckNsYWltJwogICAgICogICAgIH0KICAgICAqIH0KICAgICAqLwogICAgZnVuY3Rpb24gcGFyc2VVcmwoaHJlZikgewogICAgICAgIHZhciBtID0gaHJlZi5tYXRjaCgvXigoW146XC8/I10rKTo/KD86XC9cLygoPzooW15cLz8jOl0qKTooW15cLz8jOl0qKUApPyhbXlwvPyM6XSopKD86OihbXlwvPyM6XSopKT8pKSk/KFtePyNdKikoXD9bXiNdKik/KCMuKik/JC8pLAogICAgICAgIHIgPSB7CiAgICAgICAgICAgIGhhc2g6IG1bMTBdIHx8ICIiLCAgICAgICAgICAgICAgICAgICAgICAvLyAjLwogICAgICAgICAgICBob3N0OiBtWzNdIHx8ICIiLCAgICAgICAgICAgICAgICAgICAgICAgLy8gb3BlbmFtLXZvbGtlci1kZXYuZm9yZ2VibG9ja3MuY29tCiAgICAgICAgICAgIGhvc3RuYW1lOiBtWzZdIHx8ICIiLCAgICAgICAgICAgICAgICAgICAvLyBvcGVuYW0tdm9sa2VyLWRldi5mb3JnZWJsb2Nrcy5jb20KICAgICAgICAgICAgaHJlZjogbVswXSB8fCAiIiwgICAgICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vb3BlbmFtLXZvbGtlci1kZXYuZm9yZ2VibG9ja3MuY29tL2FtL1hVSS8/cmVhbG09L2JyYXZvJmF1dGhJbmRleFR5cGU9c2VydmljZSZhdXRoSW5kZXhWYWx1ZT1Jbml0aWF0ZU93bmVyQ2xhaW0jLwogICAgICAgICAgICBvcmlnaW46IG1bMV0gfHwgIiIsICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9vcGVuYW0tdm9sa2VyLWRldi5mb3JnZWJsb2Nrcy5jb20KICAgICAgICAgICAgcGF0aG5hbWU6IG1bOF0gfHwgKG1bMV0gPyAiLyIgOiAiIiksICAgIC8vIC9hbS9YVUkvCiAgICAgICAgICAgIHBvcnQ6IG1bN10gfHwgIiIsICAgICAgICAgICAgICAgICAgICAgICAvLyAKICAgICAgICAgICAgcHJvdG9jb2w6IG1bMl0gfHwgIiIsICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzCiAgICAgICAgICAgIHNlYXJjaDogbVs5XSB8fCAiIiwgICAgICAgICAgICAgICAgICAgICAvLyA/cmVhbG09L2JyYXZvJmF1dGhJbmRleFR5cGU9c2VydmljZSZhdXRoSW5kZXhWYWx1ZT1Jbml0aWF0ZU93bmVyQ2xhaW0KICAgICAgICAgICAgdXNlcm5hbWU6IG1bNF0gfHwgIiIsICAgICAgICAgICAgICAgICAgIC8vIAogICAgICAgICAgICBwYXNzd29yZDogbVs1XSB8fCAiIiwgICAgICAgICAgICAgICAgICAgLy8gCiAgICAgICAgICAgIHNlYXJjaFBhcmFtOiB7fSAgICAgICAgICAgICAgICAgICAgICAgICAvLyB7IHJlYWxtOiAnL2JyYXZvJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgYXV0aEluZGV4VHlwZTogJ3NlcnZpY2UnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBhdXRoSW5kZXhWYWx1ZTogJ0luaXRpYXRlT3duZXJDbGFpbScgfQogICAgICAgIH07CiAgICAgICAgaWYgKHIucHJvdG9jb2wubGVuZ3RoID09IDIpIHsKICAgICAgICAgICAgci5wcm90b2NvbCA9ICJmaWxlOi8vLyIgKyByLnByb3RvY29sLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgICAgIHIub3JpZ2luID0gci5wcm90b2NvbCArICIvLyIgKyByLmhvc3Q7CiAgICAgICAgfQogICAgICAgIGlmIChyLnNlYXJjaC5sZW5ndGggPiAyKSB7CiAgICAgICAgICAgIHZhciBxdWVyeSA9IChyLnNlYXJjaC5pbmRleE9mKCc/JykgPT09IDApID8gci5zZWFyY2guc3Vic3RyKDEpIDogci5zZWFyY2g7CiAgICAgICAgICAgIHZhciB2YXJzID0gcXVlcnkuc3BsaXQoJyYnKTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBwYWlyID0gdmFyc1tpXS5zcGxpdCgnPScpOwogICAgICAgICAgICByLnNlYXJjaFBhcmFtW2RlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgci5ocmVmID0gci5vcmlnaW4gKyByLnBhdGhuYW1lICsgci5zZWFyY2ggKyByLmhhc2g7CiAgICAgICAgcmV0dXJuIHI7CiAgICB9Owp9KCkpOw==",
  },
  {
    "_id": "dc0c9905-4a58-4f61-8562-337514e610a7",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_IdPNormalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKICogVGhpcyBzY3JpcHQgbWFwcyB0b2tlbiBjbGFpbSB2YWx1ZXMgdG8gbWFuYWdlZCBvYmplY3QgYXR0cmlidXRlcy4gSXQgdXNlcyBhICJjbGFpbSBtYXAiIHRoYXQgZGVmaW5lcwogKiBzZXZlcmFsIGNvbW1vbiBjbGFpbSBuYW1lcyBmb3IgYSBnaXZlbiBhdHRyaWJ1dGUgc28gdGhhdCB0aGlzIHNhbWUgc2NyaXB0IGNhbiBiZSB1c2VkIGZvciBhbGwgSWRQcy4KICogRm9yIGV4YW1wbGUsIHRoZSBhdHRyaWJ1dGUgYGZhbWlseU5hbWVgIGNhbiBiZSBwb3B1bGF0ZWQgZnJvbSBjbGFpbXMgYGZhbWlseU5hbWVgLCBgZmFtaWx5X25hbWVgLCBvciBgc25gLgogKiAKICogQWxzbywgaWYgY3VzdG9tIElkUCBjb25maWcgZXhpc3RzIGluIHNoYXJlZCBzdGF0ZSBhbmQgZGVmaW5lcyBJZFAtdG8tSURDIGdyb3VwIG1lbWJlcnNoaXAgbWFwcGluZ3MsCiAqIHRob3NlIHdpbGwgYmUgYXBwbGllZC9lbmZvcmNlZCBieSB0aGlzIHNjcmlwdC4gCiAqLwoKdmFyIFNIQVJFRF9TVEFURV9LRVkgPSAnaWRwQ3VzdG9tQ29uZmlnJzsKCi8vIEhlbHBlciB0byBhdm9pZCBzdHJpY3QgY29tcGFyaXNvbiBvZiBzdHJpbmcgb2JqZWN0cwpmdW5jdGlvbiBjb250YWluc0dyb3VwKGpzQXJyYXksIGphdmFTdHJpbmcpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IGpzQXJyYXkubGVuZ3RoOyBpKyspIHsKICAgIGlmIChqc0FycmF5W2ldID09IGphdmFTdHJpbmcpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfQogIHJldHVybiBmYWxzZTsKfQoKKGZ1bmN0aW9uICgpIHsKICB2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICBqYXZhLmxhbmcuU3RyaW5nLAogICAgamF2YS51dGlsLkFycmF5TGlzdCwKICAgIG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUKICApOwogIAogIHZhciBub3JtYWxpemVkUHJvZmlsZURhdGEgPSBmci5Kc29uVmFsdWUuanNvbihmci5Kc29uVmFsdWUub2JqZWN0KCkpOwogIHZhciBpZHBDb25maWcgPSBzaGFyZWRTdGF0ZS5nZXQoU0hBUkVEX1NUQVRFX0tFWSk7CgogIC8vIElmIHdlIGhhdmUgY29uZmlnIHRoYXQgZGVmaW5lcyBhIGdyb3VwcyBjbGFpbSBtYXAgZm9yIHRoaXMgSWRQLCBlbnN1cmUgdGhlIGNsYWltIHZhbHVlIG1hdGNoZXMgb25lIHRoYXQncyBpbiB0aGUgbWFwCiAgaWYgKGlkcENvbmZpZyAmJiBpZHBDb25maWcuZ3JvdXBzKSB7CgogICAgbG9nZ2VyLm1lc3NhZ2UoJ2VuZm9yY2luZyBncm91cHMgY2xhaW0gY29uZmlnJyk7CgogICAgLy8gR2V0IHRoZSBncm91cHMgY2xhaW0gZnJvbSB0aGUgSWRQIHByb2ZpbGUKICAgIHZhciBncm91cHNDbGFpbSA9IHJhd1Byb2ZpbGUuZ2V0KGlkcENvbmZpZy5ncm91cHMuY2xhaW0pOwogICAgaWYgKGdyb3Vwc0NsYWltLmlzTnVsbCgpKSB7CiAgICAgIGxvZ2dlci5lcnJvcignZ3JvdXBzIGNsYWltIG1hcCB3YXMgZW5hYmxlZCBmb3IgInt9IiwgYnV0IGNsYWltICJ7fSIgd2FzIG5vdCBmb3VuZCBpbiB0aGUgcmF3IHByb2ZpbGUnLCBzZWxlY3RlZElkcCwgaWRwQ29uZmlnLmdyb3Vwcy5jbGFpbSk7CiAgICAgIHRocm93ICdSZXF1aXJlZCBncm91cHMgY2xhaW0gaXMgbWlzc2luZyBmcm9tIHJhdyBwcm9maWxlJzsKICAgIH0KCiAgICBsb2dnZXIubWVzc2FnZSgncmVjZWl2ZWQgZ3JvdXAgY2xhaW0gdmFsdWUge30nLCBncm91cHNDbGFpbSk7CgogICAgLy8gVmFsaWRhdGUgdGhlIGNsYWltIHR5cGUgYW5kIGNvbnZlcnQgc3RyaW5ncyB0byBzaW5nbGUtdmFsdWUgY29sbGVjdGlvbgogICAgdmFyIGdyb3Vwc0NsYWltTGlzdDsKICAgIGlmIChncm91cHNDbGFpbS5pc0NvbGxlY3Rpb24oKSkgewogICAgICBncm91cHNDbGFpbUxpc3QgPSBncm91cHNDbGFpbTsKICAgIH0gZWxzZSBpZiAoZ3JvdXBzQ2xhaW0uaXNTdHJpbmcoKSkgewogICAgICBncm91cHNDbGFpbUxpc3QgPSBuZXcgZnIuQXJyYXlMaXN0KCk7CiAgICAgIGdyb3Vwc0NsYWltTGlzdC5hZGQoZ3JvdXBzQ2xhaW0pOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgJ0dyb3VwcyBjbGFpbSB3YXMgbm90IGEgc3RyaW5nIG9yIGNvbGxlY3Rpb24nOwogICAgfQogICAgCiAgICAvLyBBc3NlcnQgdGhlIGNsYWltIGNvbnRhaW5zIGF0IGxlYXN0IG9uZSBncm91cAogICAgdmFyIGdyb3Vwc0NsYWltTGVuID0gZ3JvdXBzQ2xhaW1MaXN0LnNpemUoKTsKICAgIGlmIChncm91cHNDbGFpbUxlbiA8IDEpIHsKICAgICAgdGhyb3cgJ0FuIGVtcHR5IGdyb3VwcyBjbGFpbSB3YXMgZm91bmQgaW4gcmF3IHByb2ZpbGUnOwogICAgfQoKICAgIC8vIExvb3AgdGhyb3VnaCBlYWNoIElEQyBncm91cCBuYW1lIGluIHRoZSBtYXAuIElmIHRoZSByYXcgcHJvZmlsZSBncm91cHMgY2xhaW0gY29udGFpbnMKICAgIC8vIGEgdmFsdWUgdGhhdCBtYXRjaGVzIHRoZSBtYXAgZm9yIHRoYXQgSURDIGdyb3VwLCBhZGQgdGhhdCBJREMgZ3JvdXAgdG8gdGhlIGxpc3QgZm9yIHRoaXMgYWRtaW4uCiAgICB2YXIgZ3JvdXBzID0gW107CiAgICBmb3IgKHZhciBpZGNHcm91cE5hbWUgaW4gaWRwQ29uZmlnLmdyb3Vwcy5tYXBwaW5ncykgewogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwc0NsYWltTGVuOyBpKyspIHsKICAgICAgICB2YXIgY2xhaW1Hcm91cElkID0gZ3JvdXBzQ2xhaW1MaXN0LmdldChpKS5hc1N0cmluZygpOwoKICAgICAgICBsb2dnZXIubWVzc2FnZSgnY2hlY2tpbmcgaWYgbWFwcGluZyBmb3IgSURDIGdyb3VwICJ7fSIgY29udGFpbnMgY2xhaW0gdmFsdWUgInt9IicsIGlkY0dyb3VwTmFtZSwgY2xhaW1Hcm91cElkKTsKCiAgICAgICAgaWYgKGNvbnRhaW5zR3JvdXAoaWRwQ29uZmlnLmdyb3Vwcy5tYXBwaW5nc1tpZGNHcm91cE5hbWVdLCBjbGFpbUdyb3VwSWQpKSB7CiAgICAgICAgICBncm91cHMucHVzaChpZGNHcm91cE5hbWUpOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIC8vIEFzc2VydCBhdCBsZWFzdCBvbmUgZ3JvdXAgd2FzIG1hcHBlZCB0byB0aGUgY2xhaW0KICAgIGlmIChncm91cHMubGVuZ3RoID09IDApIHsKICAgICAgbG9nZ2VyLmVycm9yKCdncm91cHMgY2xhaW0gbWFwIHdhcyBlbmFibGVkIGZvciAie30iLCBidXQgdGhlIHZhbHVlIG9mIGNsYWltICJ7fSIgZGlkIG5vdCBtYXRjaCBhIGdyb3VwIG1hcHBpbmcnLCBzZWxlY3RlZElkcCwgaWRwQ29uZmlnLmdyb3Vwcy5jbGFpbSk7CiAgICAgIHRocm93ICdSYXcgcHJvZmlsZSBncm91cHMgY2xhaW0gdmFsdWUgZG9lcyBub3QgbWF0Y2ggYSBjb25maWd1cmVkIG1hcHBpbmcnOwogICAgfQoKICAgIG5vcm1hbGl6ZWRQcm9maWxlRGF0YS5wdXQoJ2dyb3VwcycsIGdyb3Vwcyk7CiAgICBzaGFyZWRTdGF0ZS5wdXQoJ2dyb3VwcycsIGdyb3Vwcyk7CiAgfSBlbHNlIHsKICAgIGxvZ2dlci5tZXNzYWdlKCdubyBlbmFibGVkIGdyb3VwcyBjbGFpbSBjb25maWcgdG8gZW5mb3JjZScpOwogIH0KCiAgLy8gTWFwcyBub3JtYWxpemVkIHByb2ZpbGUga2V5cyB0byB0aGUgcG9zc2libGUgcmF3IHByb2ZpbGUga2V5cyB0aGF0IHZhbHVlcyBjYW4gY29tZSBmcm9tCiAgdmFyIGNsYWltTWFwID0gewogICAgZW1haWw6IFsnZW1haWwnLCAnbWFpbCddLAogICAgZmFtaWx5TmFtZTogWydmYW1pbHlOYW1lJywgJ2ZhbWlseV9uYW1lJywgJ3NuJ10sCiAgICBnaXZlbk5hbWU6IFsnZ2l2ZW5OYW1lJywgJ2dpdmVuX25hbWUnXQogIH07CgogIC8vIFRyeSB0byBwb3B1bGF0ZSBlYWNoIG5vcm1hbGl6ZWQgcHJvZmlsZSBwcm9wZXJ0eQogIHZhciBrZXlzID0gT2JqZWN0LmtleXMoY2xhaW1NYXApOwogIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgewogICAgdmFyIG5vcm1hbGl6ZWRQcm9wID0ga2V5c1tpXTsKICAgIC8vIFRyeSBlYWNoIG1hcHBlZCByYXcgcHJvZmlsZSBrZXkgdW50aWwgYSB2YWx1ZSBpcyBmb3VuZAogICAgZm9yICh2YXIgaiA9IDA7IGogPCBjbGFpbU1hcFtub3JtYWxpemVkUHJvcF0ubGVuZ3RoOyBqKyspIHsKICAgICAgdmFyIHJhd1Byb3AgPSBjbGFpbU1hcFtub3JtYWxpemVkUHJvcF1bal07CiAgICAgIGlmICghcmF3UHJvZmlsZS5nZXQocmF3UHJvcCkuaXNOdWxsKCkpIHsKICAgICAgICBub3JtYWxpemVkUHJvZmlsZURhdGEucHV0KG5vcm1hbGl6ZWRQcm9wLCByYXdQcm9maWxlLmdldChyYXdQcm9wKSk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBub3JtYWxpemVkUHJvZmlsZURhdGE7Cn0oKSk7",
  },
  {
    "_id": "847aab1b-c739-4d64-b26c-180f96cba02b",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Select and apply theme from based on the browser language in the request.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Select Theme by Browser Language",
    "script": "LyogU2VsZWN0IFRoZW1lIGJ5IEJyb3dzZXIgTGFuZ3VhZ2UKICogCiAqIFNlbGVjdCBhbmQgYXBwbHkgdGhlbWUgZnJvbSBiYXNlZCBvbiB0aGUgYnJvd3NlciBsYW5ndWFnZSBpbiB0aGUgcmVxdWVzdC4KICogCiAqIFRoaXMgc2NyaXB0IG5lZWRzIHRvIGJlIHBhcmFtZXRyaXplZCEKICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogICAgLyogQmVnaW4gU2NyaXB0IENvbmZpZ3VyYXRpb24gKi8KCiAgICAvLyB0aGUgc2NyaXB0IGV4cGVjdHMgdGhlIHRoZW1lcyB0byBiZSBuYW1lZCA8YmFzZVRoZW1lPl88bGFuZ3VhZ2U+LCBlLmcuICJaYXJkb3pfZW4iCiAgICB2YXIgYmFzZVRoZW1lID0gIlphcmRveiI7CgogICAgLy8gYWRkIGFsbCB0aGUgbGFuZ3VhZ2UgY29kZXMgeW91IHdhbnQgdG8gc3VwcG9ydAogICAgdmFyIHN1cHBvcnRlZExhbmd1YWdlcyA9IFsiZGUiLCAiZW4iLCAiZnIiXTsKCiAgICAvLyBzcGVjaWZ5IHRoZSBkZWZhdWx0IGxhbmd1YWdlIHRvIGZhbGwgYmFjayBvbiBpZiB0aGUgYnJvd3NlciBsYW5ndWFnZSBpcyBub3QgYSBzdXBwb3J0ZWQgbGFuZ3VhZ2UKICAgIHZhciBkZWZhdWx0TGFuZ3VhZ2UgPSAiZW4iOwoKICAgIC8qIEVuZCBTY3JpcHQgQ29uZmlndXJhdGlvbiAgICovCiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoKICAgIG91dGNvbWUgPSAidHJ1ZSI7CiAgICB2YXIgdGhlbWUgPSBnZXRUaGVtZUJ5TGFuZ3VhZ2UoYmFzZVRoZW1lKTsKICAgIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuUG9sbGluZ1dhaXRDYWxsYmFjawogICAgKQogICAgaWYgKHRoZW1lICYmIGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICB2YXIgc3RhZ2UgPSAidGhlbWVJZD0iICsgdGhlbWU7CiAgICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgICAgIG5ldyBmci5Qb2xsaW5nV2FpdENhbGxiYWNrKCIxMDAiLCAiUGxlYXNlIHdhaXQgLi4uIikKICAgICAgICApLndpdGhTdGFnZShzdGFnZSkuYnVpbGQoKTsKICAgIH0gZWxzZSB7CiAgICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKICAgIH0KCiAgICAvKgogICAgICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgdGhlbWUgdG8gc2VsZWN0IGJhc2VkIG9uIGJyb3dzZXIgbGFuZ3VhZ2UKICAgICAqLwogICAgZnVuY3Rpb24gZ2V0VGhlbWVCeUxhbmd1YWdlKHRoZW1lKSB7CiAgICAgICAgdmFyIGxhbmd1YWdlSGVhZGVyID0gZ2V0SGVhZGVyKCJhY2NlcHQtbGFuZ3VhZ2UiKTsKICAgICAgICB2YXIgbGFuZ3VhZ2UgPSBsYW5ndWFnZUhlYWRlci5zcGxpdCgnOycpWzBdLnNwbGl0KCcsJylbMF0uc3BsaXQoJy0nKVswXTsKICAgICAgICBpZiAoc3VwcG9ydGVkTGFuZ3VhZ2VzLmluZGV4T2YobGFuZ3VhZ2UpIDwgMCkgewogICAgICAgICAgICBsYW5ndWFnZSA9IGRlZmF1bHRMYW5ndWFnZTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRoZW1lICsgIl8iICsgbGFuZ3VhZ2U7CiAgICB9CgogICAgLyoKICAgICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSByZXF1ZXN0ZWQgaGVhZGVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldEhlYWRlcihoZWFkZXJOYW1lKSB7CiAgICAgICAgcmV0dXJuIHJlcXVlc3RIZWFkZXJzLmdldChoZWFkZXJOYW1lKS5nZXQoMCkgKyAiIjsKICAgIH0KfSgpKTs=",
  },
  {
    "_id": "164fe425-01e7-4b0b-9f60-fb41f6bf362b",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "FRAAS-7955 Display sharedState and transientState.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FRAAS-7955 Display States",
    "script": "LyogZGVidWcKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogRGlzcGxheSBzaGFyZWRTdGF0ZSBhbmQgdHJhbnNpZW50U3RhdGUuCiAqIAogKiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICovCnZhciBvdXRwdXQgPSB0cnVlOwoKdmFyIGFuY2hvciA9ICJhbmNob3ItIi5jb25jYXQoZ2VuZXJhdGVOdW1lcmljVG9rZW4oJ3h4eCcpKTsKdmFyIGhhbGlnbiA9ICJsZWZ0IjsKdmFyIG1lc3NhZ2UgPSAiPGg0PkN1cnJlbnQgU3RhdGUgVmFsdWVzPC9oND4iLmNvbmNhdCgKICAgICI8cD48Yj5TaGFyZWQgU3RhdGU8L2I+Ojxici8+IikuY29uY2F0KAogICAgICBzaGFyZWRTdGF0ZS50b1N0cmluZygpKS5jb25jYXQoIjwvcD4iKS5jb25jYXQoCiAgICAiPHA+PGI+VHJhbnNpZW50IFN0YXRlPC9iPjo8YnIvPiIpLmNvbmNhdCgKICAgICAgdHJhbnNpZW50U3RhdGUudG9TdHJpbmcoKSkuY29uY2F0KCI8L3A+IikKdmFyIHNjcmlwdCA9ICJBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcbiIuY29uY2F0KAogICJkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYWxsYmFjay1jb21wb25lbnQnKSkuZm9yRWFjaChcbiIpLmNvbmNhdCgKICAiZnVuY3Rpb24gKGUpIHtcbiIpLmNvbmNhdCgKICAiICB2YXIgbWVzc2FnZSA9IGUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4iKS5jb25jYXQoCiAgIiAgaWYgKG1lc3NhZ2UuZmlyc3RDaGlsZCAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZU5hbWUgPT0gJyN0ZXh0JyAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZVZhbHVlLnRyaW0oKSA9PSAnIikuY29uY2F0KGFuY2hvcikuY29uY2F0KCInKSB7XG4iKS5jb25jYXQoCiAgIiAgICBtZXNzYWdlLmNsYXNzTmFtZSA9IFwiXCI7XG4iKS5jb25jYXQoCiAgIiAgICBtZXNzYWdlLnN0eWxlID0gXCJ0ZXh0LWFsaWduOiBsZWZ0OyBpbmxpbmUtc2l6ZTogNDMwcHg7IG92ZXJmbG93LXdyYXA6IGJyZWFrLXdvcmQ7XCI7XG4iKS5jb25jYXQoCiAgIiAgICBtZXNzYWdlLmFsaWduID0gXCIiKS5jb25jYXQoaGFsaWduKS5jb25jYXQoIlwiO1xuIikuY29uY2F0KAogICIgICAgbWVzc2FnZS5pbm5lckhUTUwgPSAnIikuY29uY2F0KG1lc3NhZ2UpLmNvbmNhdCgiJztcbiIpLmNvbmNhdCgKICAiICB9XG4iKS5jb25jYXQoCiAgIn0pIikKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjaywKICAgIGNvbS5zdW4uaWRlbnRpdHkuYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjawopCmlmIChtZXNzYWdlLmxlbmd0aCAmJiBjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICBuZXcgZnIuVGV4dE91dHB1dENhbGxiYWNrKAogICAgICAgICAgICBmci5UZXh0T3V0cHV0Q2FsbGJhY2suSU5GT1JNQVRJT04sCiAgICAgICAgICAgIGFuY2hvcgogICAgICAgICksCiAgICAgICAgbmV3IGZyLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICApLmJ1aWxkKCkKfQplbHNlIHsKICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbygidHJ1ZSIpLmJ1aWxkKCk7Cn0KCiAvKgogICogR2VuZXJhdGUgYSB0b2tlbiBpbiB0aGUgZGVzaXJlZCBmb3JtYXQuIEFsbCAneCcgY2hhcmFjdGVycyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggYSByYW5kb20gbnVtYmVyIDAtOS4KICAqIAogICogRXhhbXBsZToKICAqICd4eHh4eCcgcHJvZHVjZXMgJzI4NTM1JwogICogJ3h4eC14eHgnIHByb2R1Y2VzICc0MzItNTIxJwogICovCmZ1bmN0aW9uIGdlbmVyYXRlTnVtZXJpY1Rva2VuKGZvcm1hdCkgewogICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC9beF0vZywgZnVuY3Rpb24oYykgewogICAgICAgIHZhciByID0gTWF0aC5yYW5kb20oKSoxMHwwOwogICAgICAgIHZhciB2ID0gcjsKICAgICAgICByZXR1cm4gdi50b1N0cmluZygxMCk7CiAgICB9KTsKfQ==",
  },
  {
    "_id": "fe5e303b-9ed7-4853-84fe-0ae43e2254d5",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Display the username in an HTML dialog.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Display Username",
    "script": "LyogRGlzcGxheSBVc2VybmFtZQogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBEaXNwbGF5IHRoZSB1c2VybmFtZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKi8KKGZ1bmN0aW9uICgpIHsKICB0cnkgewogICAgdmFyIG91dGNvbWUgPSAndHJ1ZSc7CiAgICB2YXIgdXNlcm5hbWUgPSBub2RlU3RhdGUuZ2V0KCd1c2VybmFtZScpLmFzU3RyaW5nKCk7CgogICAgLy8gU3BlY2lmeSB0aGUgbWVzc2FnZSB5b3Ugd2FudCB0byBkaXNwbGF5LiBZb3UgbWF5IHVzZSBIVE1MIGZvciBmb3JtYXR0aW5nLiBBdm9pZCBsaW5lIGJyZWFrcyEgVXNlIDxicj4gaW5zdGVhZC4KICAgIHZhciBtZXNzYWdlID0gJzxoNT4nK3VzZXJuYW1lKyc8L2g1Pic7CgogICAgdmFyIGFuY2hvciA9ICdhbmNob3ItJytnZW5lcmF0ZU51bWVyaWNUb2tlbigneHh4Jyk7CiAgICB2YXIgc2NyaXB0ID0gIkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFxuIFwKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2FsbGJhY2stY29tcG9uZW50JykpLmZvckVhY2goXG4gXAogICAgICBmdW5jdGlvbiAoZSkge1xuIFwKICAgICAgICB2YXIgbWVzc2FnZSA9IGUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gXAogICAgICAgIGlmIChtZXNzYWdlLmZpcnN0Q2hpbGQgJiYgbWVzc2FnZS5maXJzdENoaWxkLm5vZGVOYW1lID09ICcjdGV4dCcgJiYgbWVzc2FnZS5maXJzdENoaWxkLm5vZGVWYWx1ZS50cmltKCkgPT0gJyIrYW5jaG9yKyInKSB7XG4gXAogICAgICAgICAgbWVzc2FnZS5pbm5lckhUTUwgPSAnIittZXNzYWdlKyInO1xuIFwKICAgICAgICB9XG4gXAogICAgICB9KSI7CiAgICB2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICAgICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2ssCiAgICAgICAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrCiAgICApCiAgICBpZiAobWVzc2FnZS5sZW5ndGggJiYgY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5zZW5kKAogICAgICAgICAgICBuZXcgZnIuVGV4dE91dHB1dENhbGxiYWNrKAogICAgICAgICAgICAgICAgZnIuVGV4dE91dHB1dENhbGxiYWNrLklORk9STUFUSU9OLAogICAgICAgICAgICAgICAgYW5jaG9yCiAgICAgICAgICAgICksCiAgICAgICAgICAgIG5ldyBmci5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2soc2NyaXB0KQogICAgICAgICkuYnVpbGQoKQogICAgfQogICAgZWxzZSB7CiAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKG91dGNvbWUpLmJ1aWxkKCk7CiAgICB9CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIGxvZ2dlci5lcnJvcignRXJyb3I6ICcgKyBlcnJvcik7CiAgICBub2RlU3RhdGUucHV0U2hhcmVkKCdlcnJvcicsIGVycm9yLm1lc3NhZ2UpOwogIH0KCiAgIC8qCiAgICAqIEdlbmVyYXRlIGEgdG9rZW4gaW4gdGhlIGRlc2lyZWQgZm9ybWF0LiBBbGwgJ3gnIGNoYXJhY3RlcnMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGEgcmFuZG9tIG51bWJlciAwLTkuCiAgICAqIAogICAgKiBFeGFtcGxlOgogICAgKiAneHh4eHgnIHByb2R1Y2VzICcyODUzNScKICAgICogJ3h4eC14eHgnIHByb2R1Y2VzICc0MzItNTIxJwogICAgKi8KICBmdW5jdGlvbiBnZW5lcmF0ZU51bWVyaWNUb2tlbihmb3JtYXQpIHsKICAgICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC9beF0vZywgZnVuY3Rpb24oYykgewogICAgICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpKjEwfDA7CiAgICAgICAgICB2YXIgdiA9IHI7CiAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxMCk7CiAgICAgIH0pOwogIH0KfSgpKTs=",
  },
  {
    "_id": "37bf200a-158f-4a45-8ee5-81516e4593f8",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Display session info.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Display Session Info",
    "script": "LyogRGlzcGxheSBTZXNzaW9uIEluZm8KICogCiAqIERpc3BsYXkgU2Vzc2lvbiBJbmZvLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgICBvdXRjb21lID0gInRydWUiOwoKICAgIHZhciBhbmNob3IgPSAiYW5jaG9yLSIuY29uY2F0KGdlbmVyYXRlTnVtZXJpY1Rva2VuKCd4eHgnKSk7CiAgICB2YXIgaGFsaWduID0gImxlZnQiOwoKICAgIHZhciBjaG9pY2VzID0gW107CiAgICAgIHZhciBkZWZhdWx0Q2hvaWNlID0gMDsKICAKICAgICAgdmFyIGluY2x1ZGUgPSBbIm9yZyIsImlkcCIsInNhYXMiLCJwcm9maWxlVHlwZSIsImdpdmVuTmFtZSIsInNuIiwibWFpbCIsInJvbGVzIiwidXNlck5hbWUiLCJVc2VySWQiLCJMb2NhbGUiLCJhdXRoSW5zdGFudCIsIkF1dGhMZXZlbCIsIkhvc3QiLCJTZXJ2aWNlIl07CiAgICB2YXIgbWVzc2FnZSA9ICIiOwogICAgaWYgKHR5cGVvZiBleGlzdGluZ1Nlc3Npb24gIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICBtZXNzYWdlID0gIjxoND5TZXNzaW9uIEluZm88L2g0PjxwIHN0eWxlPVwiZm9udC1mYW1pbHk6Y291cmllcjtcIj4iOwogICAgICAgICAgaW5jbHVkZS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgICAgICBtZXNzYWdlICs9ICI8Yj4iICsga2V5ICsgIjwvYj46ICIgKyBleGlzdGluZ1Nlc3Npb24uZ2V0KGtleSkgKyAiPGJyLz4iOwogICAgICAgIH0pOwogICAgICAgICBtZXNzYWdlICs9ICI8L3A+PHAgc3R5bGU9XCJmb250LXNpemU6NzAlO2ZvbnQtZmFtaWx5OmNvdXJpZXI7XCI+IgogICAgICAgICAgdmFyIGVudHJpZXMgPSBleGlzdGluZ1Nlc3Npb24ua2V5U2V0KCkudG9BcnJheSgpOwogICAgICAgIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAgICAgaWYgKGluY2x1ZGUuaW5kZXhPZigiIitrZXkpPT09LTEpIHsKICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gIjxiPiIgKyBrZXkgKyAiPC9iPjogIiArIGV4aXN0aW5nU2Vzc2lvbi5nZXQoa2V5KSArICI8YnIvPiI7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICAgbWVzc2FnZSArPSAiPC9wPiIKICAgICAgICAgIGNob2ljZXMucHVzaCgiR290byBTQU1MIEFwcCIpOwogICAgICAgICAgY2hvaWNlcy5wdXNoKCJHb3RvIE9JREMgQXBwIik7CiAgICAgICAgICBpZiAoIiIrZXhpc3RpbmdTZXNzaW9uLmdldCgicHJvZmlsZVR5cGUiKSA9PT0gInBlcnNpc3RlbnQiKSB7CiAgICAgICAgICAgICAgY2hvaWNlcy5wdXNoKCJHb3RvIFByb2ZpbGUgUGFnZSIpOwogICAgICAgIH0KICAgICAgICAgIGNob2ljZXMucHVzaCgiTG9nb3V0Iik7CiAgICB9IGVsc2UgewogICAgICAgICAgbWVzc2FnZSA9ICI8aDQ+Tm8gU2Vzc2lvbiE8L2g0PjxwPiIKICAgICAgICAgIGNob2ljZXMucHVzaCgiTG9naW4iKTsKICAgIH0KICAgIHZhciBzY3JpcHQgPSAiQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG4iLmNvbmNhdCgKICAgICAgImRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NhbGxiYWNrLWNvbXBvbmVudCcpKS5mb3JFYWNoKFxuIikuY29uY2F0KAogICAgICAiZnVuY3Rpb24gKGUpIHtcbiIpLmNvbmNhdCgKICAgICAgIiAgdmFyIG1lc3NhZ2UgPSBlLmZpcnN0RWxlbWVudENoaWxkO1xuIikuY29uY2F0KAogICAgICAiICBpZiAobWVzc2FnZS5maXJzdENoaWxkICYmIG1lc3NhZ2UuZmlyc3RDaGlsZC5ub2RlTmFtZSA9PSAnI3RleHQnICYmIG1lc3NhZ2UuZmlyc3RDaGlsZC5ub2RlVmFsdWUudHJpbSgpID09ICciKS5jb25jYXQoYW5jaG9yKS5jb25jYXQoIicpIHtcbiIpLmNvbmNhdCgKICAgICAgIiAgICBtZXNzYWdlLmNsYXNzTmFtZSA9IFwiXCI7XG4iKS5jb25jYXQoCiAgICAgICIgICAgbWVzc2FnZS5zdHlsZSA9IFwidGV4dC1hbGlnbjogbGVmdDsgaW5saW5lLXNpemU6IDQzMHB4OyBvdmVyZmxvdy13cmFwOiBicmVhay13b3JkO1wiO1xuIikuY29uY2F0KAogICAgICAiICAgIG1lc3NhZ2UuYWxpZ24gPSBcIiIpLmNvbmNhdChoYWxpZ24pLmNvbmNhdCgiXCI7XG4iKS5jb25jYXQoCiAgICAgICIgICAgbWVzc2FnZS5pbm5lckhUTUwgPSAnIikuY29uY2F0KG1lc3NhZ2UpLmNvbmNhdCgiJztcbiIpLmNvbmNhdCgKICAgICAgIiAgfVxuIikuY29uY2F0KAogICAgICAifSkiKQogIAogICAgdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogICAgICAgIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suVGV4dE91dHB1dENhbGxiYWNrLAogICAgICAgIGNvbS5zdW4uaWRlbnRpdHkuYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjaywKICAgICAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLkNvbmZpcm1hdGlvbkNhbGxiYWNrCiAgICApCiAgICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5zZW5kKAogICAgICAgICAgICBuZXcgZnIuVGV4dE91dHB1dENhbGxiYWNrKAogICAgICAgICAgICAgICAgZnIuVGV4dE91dHB1dENhbGxiYWNrLklORk9STUFUSU9OLAogICAgICAgICAgICAgICAgYW5jaG9yCiAgICAgICAgICAgICksCiAgICAgICAgICAgIG5ldyBmci5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2soc2NyaXB0KSwKICAgICAgICAgICAgbmV3IGZyLkNvbmZpcm1hdGlvbkNhbGxiYWNrKAogICAgICAgICAgICAgICAgZnIuQ29uZmlybWF0aW9uQ2FsbGJhY2suSU5GT1JNQVRJT04sCiAgICAgICAgICAgICAgICBjaG9pY2VzLAogICAgICAgICAgICAgICAgZGVmYXVsdENob2ljZQogICAgICAgICAgICApCiAgICAgICAgKS5idWlsZCgpCiAgICB9CiAgICBlbHNlIHsKICAgICAgb3V0Y29tZSA9IGNob2ljZXNbY2FsbGJhY2tzLmdldCgyKS5nZXRTZWxlY3RlZEluZGV4KCldOwogICAgICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbyhvdXRjb21lKS5idWlsZCgpOwogICAgfQoKICAgICAvKgogICAgICAqIEdlbmVyYXRlIGEgdG9rZW4gaW4gdGhlIGRlc2lyZWQgZm9ybWF0LiBBbGwgJ3gnIGNoYXJhY3RlcnMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGEgcmFuZG9tIG51bWJlciAwLTkuCiAgICAgICogCiAgICAgICogRXhhbXBsZToKICAgICAgKiAneHh4eHgnIHByb2R1Y2VzICcyODUzNScKICAgICAgKiAneHh4LXh4eCcgcHJvZHVjZXMgJzQzMi01MjEnCiAgICAgICovCiAgICBmdW5jdGlvbiBnZW5lcmF0ZU51bWVyaWNUb2tlbihmb3JtYXQpIHsKICAgICAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1t4XS9nLCBmdW5jdGlvbihjKSB7CiAgICAgICAgICAgIHZhciByID0gTWF0aC5yYW5kb20oKSoxMHwwOwogICAgICAgICAgICB2YXIgdiA9IHI7CiAgICAgICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDEwKTsKICAgICAgICB9KTsKICAgIH0KfSgpKTsKCi8qCkxvY2FsZTogZW5fVVMKYXV0aEluc3RhbnQ6IDIwMjEtMDktMjVUMTc6Mjg6MzhaCk9yZ2FuaXphdGlvbjogbz1hbHBoYSxvdT1zZXJ2aWNlcyxvdT1hbS1jb25maWcKbWFpbDogdm9sa2VyQHNjaGV1YmVyLm5hbWUKUHJpbmNpcGFsczogdm9sa2VyQHNjaGV1YmVyLm5hbWUKVXNlclByb2ZpbGU6IElnbm9yZQpDaGFyU2V0OiBVVEYtOApGdWxsTG9naW5VUkw6IC9hbS9VSS9Mb2dpbj9jb2RlPTQlMkYwQVg0WGZXamlFZmJyZklzdHNGVUtvYWliUENRbVRidVBvbkxmdWhwWWhqZmotTjVRRWU5dTJQNU9zOXdOYWRHYVBzUVZCQSZzY29wZT1lbWFpbCtwcm9maWxlK2h0dHBzJTNBJTJGJTJGd3d3Lmdvb2dsZWFwaXMuY29tJTJGYXV0aCUyRnVzZXJpbmZvLmVtYWlsK2h0dHBzJTNBJTJGJTJGd3d3Lmdvb2dsZWFwaXMuY29tJTJGYXV0aCUyRnVzZXJpbmZvLnByb2ZpbGUrb3BlbmlkJnJlYWxtPSUyRmFscGhhJnN0YXRlPWZ5a3BydGZtZWNscmd3c3ptb212cXhubGlycmVoY3MmaGQ9c2NoZXViZXIubmFtZSZwcm9tcHQ9bm9uZSZhdXRodXNlcj0yCmNsaWVudFR5cGU6IGdlbmVyaWNIVE1MCmdvdG86IC9hbS9YVUkvP3JlYWxtPS9hbHBoYSZhdXRoSW5kZXhUeXBlPXNlcnZpY2UmYXV0aEluZGV4VmFsdWU9U2Vzc2lvbkluZm8mRm9yY2VBdXRoPXRydWUjLwpBTUN0eElkOiBkMzE4ODkzOC1kMDdlLTQxMzQtOTVkYi1mMWNjOTdmYzZjNDAtNTAzMjc1CmxvZ2luVVJMOiAvYW0vVUkvTG9naW4Kc246IFNjaGV1YmVyCmFtbGJjb29raWU6IDAxCkhvc3ROYW1lOiA5OS43Mi4yOC4xODIKVXNlclRva2VuOiB2b2xrZXJAc2NoZXViZXIubmFtZQpnaXZlbk5hbWU6IFZvbGtlcgpzdWNjZXNzVVJMOiAvYW0vWFVJLz9yZWFsbT0vYWxwaGEmYXV0aEluZGV4VHlwZT1zZXJ2aWNlJmF1dGhJbmRleFZhbHVlPVNlc3Npb25JbmZvJkZvcmNlQXV0aD10cnVlIy8KU2VydmljZTogUm91dGVyCkhvc3Q6IDk5LjcyLjI4LjE4MgpBdXRoTGV2ZWw6IDAKaWRwOiBnb29nbGUKVXNlcklkOiB2b2xrZXJAc2NoZXViZXIubmFtZQpzdW4uYW0uVW5pdmVyc2FsSWRlbnRpZmllcjogaWQ9dm9sa2VyQHNjaGV1YmVyLm5hbWUsb3U9dXNlcixvPWFscGhhLG91PXNlcnZpY2VzLG91PWFtLWNvbmZpZwpPaWRjU2lkOiBBQ3VUUUlPYmowdGFqUFloTE9qTWxXYzJ1ck0KUHJpbmNpcGFsOiBpZD12b2xrZXJAc2NoZXViZXIubmFtZSxvdT11c2VyLG89YWxwaGEsb3U9c2VydmljZXMsb3U9YW0tY29uZmlnCiAqLw==",
  },
  {
    "_id": "ab917dad-6fdb-46c2-8c8c-42f094ebeea1",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Perform IDP re-lookup based on the Organization ID from the initial lookup. Set users' external IDP in shared state for further processing.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "IDP Re-Lookup",
    "script": "LyogSURQIFJlLUxvb2t1cAogKiAKICogUGVyZm9ybSBJRFAgcmUtbG9va3VwIGJhc2VkIG9uIHRoZSBPcmdhbml6YXRpb24gSUQgZnJvbSB0aGUgaW5pdGlhbCBsb29rdXAuIAogKiBTZXQgdXNlcnMnIGV4dGVybmFsIElEUCBpbiBzaGFyZWQgc3RhdGUgZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZy4KICogCiAqIFRoaXMgc2NyaXB0IHJlcXVpcmVzIHBhcmFtZXRyaXphdGlvbi4gTWFrZSBzdXJlIHlvdSBjYXJlZnVsbHkgcmV2aWV3IHRoZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKiAtIGZhbHNlCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgICBsb2dnZXIubWVzc2FnZSgiSURQIFJlLUxvb2t1cDogc3RhcnQiKTsKICAgICAgb3V0Y29tZSA9ICJmYWxzZSI7CiAgICAgIHZhciByZWZlcmVyID0gcGFyc2VVcmwocmVxdWVzdEhlYWRlcnMuZ2V0KCJyZWZlcmVyIikuZ2V0KDApKTsKICAgICAgdmFyIG9yZ0lkID0gcmVmZXJlci5zZWFyY2hQYXJhbS5vOwogICAgICBzaGFyZWRTdGF0ZS5wdXQoInVzZXJuYW1lIiwgcmVmZXJlci5zZWFyY2hQYXJhbS51KTsKCiAgICAgIC8qIEJlZ2luIENvbmZpZ3VyYXRpb24gKi8KICAKICAgIC8vIGxvbmctbGl2ZWQgdG9rZW4sIGV4cGlyZXM6IEZyaWRheSwgSmFudWFyeSAxNiwgMjAzMiA5OjQ1OjE0IFBNIEdNVC0wNjowMAogICAgdmFyIElETV9BUElfVE9LRU4gPSAiZXlKMGVYQWlPaUpLVjFRaUxDSmhiR2NpT2lKSVV6STFOaUo5LmV5SnpkV0lpT2lKbE1XRTFZelU1T0MwNE1HVXlMVFJoWkdNdFlqTTBOUzB6TVdRd01tVXlPVGhqTkdJaUxDSmpkSE1pT2lKUFFWVlVTREpmUjFKQlRsUmZVMFZVSWl3aVlYVjBhRjlzWlhabGJDSTZNQ3dpWVhWa2FYUlVjbUZqYTJsdVowbGtJam9pTkdZek1Ea3hZVGt0WmpVME5pMDBNRGRpTFRrek5qTXRNMlJpWkdKaVpqWXpNRGMwTFRNMU56Y3dPU0lzSW5OMVltNWhiV1VpT2lKbE1XRTFZelU1T0MwNE1HVXlMVFJoWkdNdFlqTTBOUzB6TVdRd01tVXlPVGhqTkdJaUxDSnBjM01pT2lKb2RIUndjem92TDI5d1pXNWhiUzEyYjJ4clpYSXRaR1YyTG1admNtZGxZbXh2WTJ0ekxtTnZiVG8wTkRNdllXMHZiMkYxZEdneUwyRnNjR2hoSWl3aWRHOXJaVzVPWVcxbElqb2lZV05qWlhOelgzUnZhMlZ1SWl3aWRHOXJaVzVmZEhsd1pTSTZJa0psWVhKbGNpSXNJbUYxZEdoSGNtRnVkRWxrSWpvaUxVSXhRbFJVTTNGcU5pMDRaa2QzYTJkNmJ6Z3pOemxTUmpWSkxqQTROa05KZFRGeU9VTkNObFJPY0VJd1YzUTVPRkV5TlRKWWN5SXNJbUYxWkNJNklqWTVaREExWXpFeExXVTRabVV0TkdGbE5TMWhOMk01TFRJeU5USmhOR1E0TldSbU5DSXNJbTVpWmlJNk1UWTBNalUyTXpreE5Dd2laM0poYm5SZmRIbHdaU0k2SW5CaGMzTjNiM0prSWl3aWMyTnZjR1VpT2xzaVpuSTZhV1J0T2lvaVhTd2lZWFYwYUY5MGFXMWxJam94TmpReU5UWXpPVEUwTENKeVpXRnNiU0k2SWk5aGJIQm9ZU0lzSW1WNGNDSTZNVGsxTnpreU16a3hOQ3dpYVdGMElqb3hOalF5TlRZek9URTBMQ0psZUhCcGNtVnpYMmx1SWpvek1UVXpOakF3TURBc0ltcDBhU0k2SWkxQ01VSlVWRE54YWpZdE9HWkhkMnRuZW04NE16YzVVa1kxU1M1Q1NIRlpOVnAzYzBsR05WcE1iRXR2Y0dOdlVsVkdWSE5MVWpBaUxDSnRZWGxmWVdOMElqcDdJbU5zYVdWdWRGOXBaQ0k2V3lJMk9XUXdOV014TVMxbE9HWmxMVFJoWlRVdFlUZGpPUzB5TWpVeVlUUmtPRFZrWmpRaVhYMTkuZjJObXdIVnRla0g5M2pPNy1qTTZta0ZSY3V2RU4zV3pjS3NILVJBUG5sYyI7CgogICAgLy8gSURNIEFQSSBDb25maWd1cmF0aW9uCiAgICB2YXIgSURNX0FQSV9VUkkgPSByZWZlcmVyLm9yaWdpbiArICIvb3BlbmlkbS9tYW5hZ2VkL2FscGhhX29yZ2FuaXphdGlvbi8iKyBvcmdJZCArICI/X2ZpZWxkcz1uYW1lLGRlc2NyaXB0aW9uLGlkcE5hbWUsaWRwVHlwZSxpZHBEb21haW5zLGlkcEpvdXJuZXksaWRwVGhlbWUsaWRwUGVyc2lzdCI7CgogICAgICAvKiBFbmQgQ29uZmlndXJhdGlvbiAqLwoKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldE1ldGhvZCgnR0VUJyk7CiAgICByZXF1ZXN0LnNldFVyaShJRE1fQVBJX1VSSSk7CiAgICByZXF1ZXN0LmdldEhlYWRlcnMoKS5hZGQoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04Iik7CiAgICByZXF1ZXN0LmdldEhlYWRlcnMoKS5hZGQoIkF1dGhvcml6YXRpb24iLCAiQmVhcmVyICIgKyBJRE1fQVBJX1RPS0VOKTsKCiAgICB2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0KCk7CiAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICBsb2dnZXIubWVzc2FnZSgiSURQIFJlLUxvb2t1cDogSlNPTiByZXN1bHQ6ICIgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQpKTsKICAgIAogICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgICBvdXRjb21lID0gInRydWUiOwogICAgICAgIHZhciByb3V0ZWRJRFBzID0gW3Jlc3VsdF07CiAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJyb3V0ZWRJRFBzIiwgcm91dGVkSURQcyk7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIklEUCBSZS1Mb29rdXA6IEZvdW5kIElEUCIpOwogICAgfQogICAgbG9nZ2VyLm1lc3NhZ2UoIklEUCBSZS1Mb29rdXA6IGVuZCBbb3V0Y29tZT17fV0iLCBvdXRjb21lKTsKCiAgICAvKgogICAgICogUGFyc2UgYSBVUkwgaW50byBpdHMgY29tcG9uZW50cyBhbmQgbWFrZSB0aGVtIGVhc2lseSBhY2Nlc3NpYmxlIGJ5IG5hbWUKICAgICAqCiAgICAgKiBVc2UgaW4gYSBTY3JpcHRlIERlY2lzaW9uIE5vZGUgU2NyaXB0IGFzIGZvbGxvd3M6CiAgICAgKiB2YXIgcmVmZXJlciA9IHBhcnNlVXJsKHJlcXVlc3RIZWFkZXJzLmdldCgicmVmZXJlciIpLmdldCgwKSk7CiAgICAgKiB2YXIgb3JpZ2luID0gcmVmZXJlci5vcmlnaW47CiAgICAgKiAKICAgICAqIGUuZy46IGh0dHBzOi8vb3BlbmFtLXZvbGtlci1kZXYuZm9yZ2VibG9ja3MuY29tL2FtL1hVSS8/cmVhbG09L2JyYXZvJmF1dGhJbmRleFR5cGU9c2VydmljZSZhdXRoSW5kZXhWYWx1ZT1Jbml0aWF0ZU93bmVyQ2xhaW0jLwogICAgICogewogICAgICogICAgIGhhc2g6ICcjLycsCiAgICAgKiAgICAgaG9zdDogJ29wZW5hbS12b2xrZXItZGV2LmZvcmdlYmxvY2tzLmNvbScsCiAgICAgKiAgICAgaG9zdG5hbWU6ICdvcGVuYW0tdm9sa2VyLWRldi5mb3JnZWJsb2Nrcy5jb20nLAogICAgICogICAgIGhyZWY6ICdodHRwczovL29wZW5hbS12b2xrZXItZGV2LmZvcmdlYmxvY2tzLmNvbS9hbS9YVUkvP3JlYWxtPS9icmF2byZhdXRoSW5kZXhUeXBlPXNlcnZpY2UmYXV0aEluZGV4VmFsdWU9SW5pdGlhdGVPd25lckNsYWltIy8nLAogICAgICogICAgIG9yaWdpbjogJ2h0dHBzOi8vb3BlbmFtLXZvbGtlci1kZXYuZm9yZ2VibG9ja3MuY29tJywKICAgICAqICAgICBwYXRobmFtZTogJy9hbS9YVUkvJywKICAgICAqICAgICBwb3J0OiAnJywKICAgICAqICAgICBwcm90b2NvbDogJ2h0dHBzJywKICAgICAqICAgICBzZWFyY2g6ICc/cmVhbG09L2JyYXZvJmF1dGhJbmRleFR5cGU9c2VydmljZSZhdXRoSW5kZXhWYWx1ZT1Jbml0aWF0ZU93bmVyQ2xhaW0nLAogICAgICogICAgIHVzZXJuYW1lOiAnJywKICAgICAqICAgICBwYXNzd29yZDogJycsCiAgICAgKiAgICAgc2VhcmNoUGFyYW06IHsKICAgICAqICAgICAgICAgcmVhbG06ICcvYnJhdm8nLAogICAgICogICAgICAgICBhdXRoSW5kZXhUeXBlOiAnc2VydmljZScsCiAgICAgKiAgICAgICAgIGF1dGhJbmRleFZhbHVlOiAnSW5pdGlhdGVPd25lckNsYWltJwogICAgICogICAgIH0KICAgICAqIH0KICAgICAqLwogICAgZnVuY3Rpb24gcGFyc2VVcmwoaHJlZikgewogICAgICAgIHZhciBtID0gaHJlZi5tYXRjaCgvXigoW146XC8/I10rKTo/KD86XC9cLygoPzooW15cLz8jOl0qKTooW15cLz8jOl0qKUApPyhbXlwvPyM6XSopKD86OihbXlwvPyM6XSopKT8pKSk/KFtePyNdKikoXD9bXiNdKik/KCMuKik/JC8pLAogICAgICAgIHIgPSB7CiAgICAgICAgICAgIGhhc2g6IG1bMTBdIHx8ICIiLCAgICAgICAgICAgICAgICAgICAgICAvLyAjLwogICAgICAgICAgICBob3N0OiBtWzNdIHx8ICIiLCAgICAgICAgICAgICAgICAgICAgICAgLy8gb3BlbmFtLXZvbGtlci1kZXYuZm9yZ2VibG9ja3MuY29tCiAgICAgICAgICAgIGhvc3RuYW1lOiBtWzZdIHx8ICIiLCAgICAgICAgICAgICAgICAgICAvLyBvcGVuYW0tdm9sa2VyLWRldi5mb3JnZWJsb2Nrcy5jb20KICAgICAgICAgICAgaHJlZjogbVswXSB8fCAiIiwgICAgICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vb3BlbmFtLXZvbGtlci1kZXYuZm9yZ2VibG9ja3MuY29tL2FtL1hVSS8/cmVhbG09L2JyYXZvJmF1dGhJbmRleFR5cGU9c2VydmljZSZhdXRoSW5kZXhWYWx1ZT1Jbml0aWF0ZU93bmVyQ2xhaW0jLwogICAgICAgICAgICBvcmlnaW46IG1bMV0gfHwgIiIsICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9vcGVuYW0tdm9sa2VyLWRldi5mb3JnZWJsb2Nrcy5jb20KICAgICAgICAgICAgcGF0aG5hbWU6IG1bOF0gfHwgKG1bMV0gPyAiLyIgOiAiIiksICAgIC8vIC9hbS9YVUkvCiAgICAgICAgICAgIHBvcnQ6IG1bN10gfHwgIiIsICAgICAgICAgICAgICAgICAgICAgICAvLyAKICAgICAgICAgICAgcHJvdG9jb2w6IG1bMl0gfHwgIiIsICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzCiAgICAgICAgICAgIHNlYXJjaDogbVs5XSB8fCAiIiwgICAgICAgICAgICAgICAgICAgICAvLyA/cmVhbG09L2JyYXZvJmF1dGhJbmRleFR5cGU9c2VydmljZSZhdXRoSW5kZXhWYWx1ZT1Jbml0aWF0ZU93bmVyQ2xhaW0KICAgICAgICAgICAgdXNlcm5hbWU6IG1bNF0gfHwgIiIsICAgICAgICAgICAgICAgICAgIC8vIAogICAgICAgICAgICBwYXNzd29yZDogbVs1XSB8fCAiIiwgICAgICAgICAgICAgICAgICAgLy8gCiAgICAgICAgICAgIHNlYXJjaFBhcmFtOiB7fSAgICAgICAgICAgICAgICAgICAgICAgICAvLyB7IHJlYWxtOiAnL2JyYXZvJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgYXV0aEluZGV4VHlwZTogJ3NlcnZpY2UnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBhdXRoSW5kZXhWYWx1ZTogJ0luaXRpYXRlT3duZXJDbGFpbScgfQogICAgICAgIH07CiAgICAgICAgaWYgKHIucHJvdG9jb2wubGVuZ3RoID09IDIpIHsKICAgICAgICAgICAgci5wcm90b2NvbCA9ICJmaWxlOi8vLyIgKyByLnByb3RvY29sLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgICAgIHIub3JpZ2luID0gci5wcm90b2NvbCArICIvLyIgKyByLmhvc3Q7CiAgICAgICAgfQogICAgICAgIGlmIChyLnNlYXJjaC5sZW5ndGggPiAyKSB7CiAgICAgICAgICAgIHZhciBxdWVyeSA9IChyLnNlYXJjaC5pbmRleE9mKCc/JykgPT09IDApID8gci5zZWFyY2guc3Vic3RyKDEpIDogci5zZWFyY2g7CiAgICAgICAgICAgIHZhciB2YXJzID0gcXVlcnkuc3BsaXQoJyYnKTsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBwYWlyID0gdmFyc1tpXS5zcGxpdCgnPScpOwogICAgICAgICAgICByLnNlYXJjaFBhcmFtW2RlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgci5ocmVmID0gci5vcmlnaW4gKyByLnBhdGhuYW1lICsgci5zZWFyY2ggKyByLmhhc2g7CiAgICAgICAgcmV0dXJuIHI7CiAgICB9Owp9KCkpOw==",
  },
  {
    "_id": "4a9aefc4-be0e-4625-95c3-ee8f354bce35",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_ClearCurrentYear",
    "script": "aWYgKHNoYXJlZFN0YXRlLmNvbnRhaW5zS2V5KCdvYmplY3RBdHRyaWJ1dGVzJykpIHsKICBzaGFyZWRTdGF0ZS5nZXQoJ29iamVjdEF0dHJpYnV0ZXMnKS5yZW1vdmUoJ2N1cnJlbnRZZWFyJyk7Cn0KCm91dGNvbWUgPSAnVHJ1ZSc7Cg==",
  },
  {
    "_id": "021e434f-89b6-45fb-9d67-5147bc1650c3",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Show Password Policy",
    "script": "dmFyIG91dHB1dCA9IHRydWU7CnZhciBhbmNob3IgPSAiYW5jaG9yLSIuY29uY2F0KGdlbmVyYXRlTnVtZXJpY1Rva2VuKCd4eHgnKSk7CnZhciBoYWxpZ24gPSAibGVmdCI7CnZhciBtZXNzYWdlID0gIjx1bD48bGk+TXVzdCBiZSBhdCBsZWFzdCA4IGNoYXJhY3RlcnMgbG9uZzwvbGk+Ii5jb25jYXQoCiAgICAiPGxpPk11c3QgYmUgbGVzcyB0aGFuIDY0IGNoYXJhY3RlcnMgbG9uZzwvbGk+IikuY29uY2F0KAogICAgIjxsaT5NdXN0IG5vdCBzaGFyZSBjaGFyYWN0ZXJzIHdpdGggZW1haWwsIHVzZXJuYW1lLCBmaXJzdCBuYW1lLCBsYXN0IG5hbWU8L2xpPiIpLmNvbmNhdCgKICAgICI8bGk+TXVzdCBoYXZlIGF0IGxlYXN0IDEgbG93ZXJjYXNlIGxldHRlcihzKTwvbGk+IikuY29uY2F0KAogICAgIjxsaT5NdXN0IGhhdmUgYXQgbGVhc3QgMSBjYXBpdGFsIGxldHRlcihzKTwvbGk+IikuY29uY2F0KAogICAgIjxsaT5NdXN0IGhhdmUgYXQgbGVhc3QgMSBudW1iZXIocyk8L2xpPiIpLmNvbmNhdCgKICAgICI8bGk+TXVzdCBoYXZlIGF0IGxlYXN0IDEgc3ltYm9sKHMpPC9saT48L3VsPiIpCnZhciBzY3JpcHQgPSAiQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG4iLmNvbmNhdCgKICAiZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2FsbGJhY2stY29tcG9uZW50JykpLmZvckVhY2goXG4iKS5jb25jYXQoCiAgImZ1bmN0aW9uIChlKSB7XG4iKS5jb25jYXQoCiAgIiAgdmFyIG1lc3NhZ2UgPSBlLmZpcnN0RWxlbWVudENoaWxkO1xuIikuY29uY2F0KAogICIgIGlmIChtZXNzYWdlLmZpcnN0Q2hpbGQgJiYgbWVzc2FnZS5maXJzdENoaWxkLm5vZGVOYW1lID09ICcjdGV4dCcgJiYgbWVzc2FnZS5maXJzdENoaWxkLm5vZGVWYWx1ZS50cmltKCkgPT0gJyIpLmNvbmNhdChhbmNob3IpLmNvbmNhdCgiJykge1xuIikuY29uY2F0KAogICIgICAgbWVzc2FnZS5jbGFzc05hbWUgPSBcInRleHQtbGVmdFwiO1xuIikuY29uY2F0KAogICIgICAgbWVzc2FnZS5hbGlnbiA9IFwiIikuY29uY2F0KGhhbGlnbikuY29uY2F0KCJcIjtcbiIpLmNvbmNhdCgKICAiICAgIG1lc3NhZ2UuaW5uZXJIVE1MID0gJyIpLmNvbmNhdChtZXNzYWdlKS5jb25jYXQoIic7XG4iKS5jb25jYXQoCiAgIiAgfVxuIikuY29uY2F0KAogICJ9KSIpCnZhciBmciA9IEphdmFJbXBvcnRlcigKICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2ssCiAgICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2sKKQppZiAobWVzc2FnZS5sZW5ndGggJiYgY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgbmV3IGZyLlRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICAgICAgZnIuVGV4dE91dHB1dENhbGxiYWNrLklORk9STUFUSU9OLAogICAgICAgICAgICBhbmNob3IKICAgICAgICApLAogICAgICAgIG5ldyBmci5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2soc2NyaXB0KQogICAgKS5idWlsZCgpCn0KZWxzZSB7CiAgYWN0aW9uID0gZnIuQWN0aW9uLmdvVG8oInRydWUiKS5idWlsZCgpOwp9CgogLyoKICAqIEdlbmVyYXRlIGEgdG9rZW4gaW4gdGhlIGRlc2lyZWQgZm9ybWF0LiBBbGwgJ3gnIGNoYXJhY3RlcnMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGEgcmFuZG9tIG51bWJlciAwLTkuCiAgKiAKICAqIEV4YW1wbGU6CiAgKiAneHh4eHgnIHByb2R1Y2VzICcyODUzNScKICAqICd4eHgteHh4JyBwcm9kdWNlcyAnNDMyLTUyMScKICAqLwpmdW5jdGlvbiBnZW5lcmF0ZU51bWVyaWNUb2tlbihmb3JtYXQpIHsKICAgIHJldHVybiBmb3JtYXQucmVwbGFjZSgvW3hdL2csIGZ1bmN0aW9uKGMpIHsKICAgICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkqMTB8MDsKICAgICAgICB2YXIgdiA9IHI7CiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTApOwogICAgfSk7Cn0=",
  },
  {
    "_id": "27f1b5a3-9446-4e5c-b965-f195a99fa666",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_PasswordFixEnd",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKVGhpcyByZXN0b3JlcyBzaGFyZWRTdGF0ZS5vYmplY3RBdHRyaWJ1dGVzIHRlbXBvcmFyaWx5IG92ZXJ3cml0dGVuIHRvIGZpeCBhbiBpc3N1ZSB3aXRoIHBhc3N3b3JkIHBvbGljeS4KKi8KCi8vdmFyIHBhc3N3b3JkID0gJyc7Ci8vdmFyIG9iakF0dHJzID0gc2hhcmVkU3RhdGUuZ2V0KCdvYmplY3RBdHRyaWJ1dGVzJyk7Ci8vaWYgKG9iakF0dHJzICYmIG9iakF0dHJzLmNvbnRhaW5zS2V5KCdwYXNzd29yZCcpKSB7Ci8vICBwYXNzd29yZCA9IG9iakF0dHJzLmdldCgncGFzc3dvcmQnKTsKLy99CgovLyBSZXN0b3JlIG9yaWdpbmFsIG9iamVjdCBhdHRyaWJ1dGVzCnZhciBvcmlnT2JqQXR0cnMgPSBzaGFyZWRTdGF0ZS5nZXQoJ29yaWdpbmFsT2JqZWN0QXR0cmlidXRlcycpOwppZiAob3JpZ09iakF0dHJzKSB7Ci8vICBpZiAocGFzc3dvcmQpIHsKLy8gICAgb3JpZ09iakF0dHJzLnB1dCgncGFzc3dvcmQnLCBwYXNzd29yZCk7Ci8vICB9CiAgc2hhcmVkU3RhdGUucHV0KCdvYmplY3RBdHRyaWJ1dGVzJywgb3JpZ09iakF0dHJzKTsKfQoKb3V0Y29tZSA9ICdUcnVlJzsK",
  },
  {
    "_id": "472534ec-a25f-468d-a606-3fb1935190df",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from WeChat",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "WeChat Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLm9wZW5pZCksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uaWNrbmFtZSksCiAgICAgICAgZmllbGQoInBob3RvVXJsIiwgcmF3UHJvZmlsZS5oZWFkaW1ndXJsKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLm5pY2tuYW1lKSkp",
  },
  {
    "_id": "89eff37a-2e1e-47c2-8d62-5f7417fbb6b4",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Return TextOutputCallback indicating the provided OTP was invalid.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "OTP Invalid",
    "script": "LyogT1RQIEludmFsaWQKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogUmV0dXJuIFRleHRPdXRwdXRDYWxsYmFjayBpbmRpY2F0aW5nIHRoZSBwcm92aWRlZCBPVFAgd2FzIGludmFsaWQuCiAqIAogKiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICovCm91dGNvbWUgPSAidHJ1ZSI7CnZhciBmciA9IEphdmFJbXBvcnRlcigKICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2sKKQppZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgbmV3IGZyLlRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICAgICAgZnIuVGV4dE91dHB1dENhbGxiYWNrLklORk9STUFUSU9OLAogICAgICAgICAgICAiSU5WQUxJRCIKICAgICAgICApCiAgICApLmJ1aWxkKCkKfQplbHNlIHsKICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbyhvdXRjb21lKS5idWlsZCgpOwp9",
  },
  {
    "_id": "2ada53cd-5d37-4592-9c7f-5711271229c2",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Has Profile Changed",
    "script": "bG9nZ2VyLmVycm9yKCJIYXMgUHJvZmlsZSBDaGFuZ2VkOiBzdGFydCIpOwpvdXRjb21lID0gInVuY2hhbmdlZCI7CmlmIChnZXRPYmplY3RBdHRyaWJ1dGUoIm9sZF9naXZlbk5hbWUiKSB8fAogICAgZ2V0T2JqZWN0QXR0cmlidXRlKCJvbGRfc24iKSB8fAogICAgZ2V0T2JqZWN0QXR0cmlidXRlKCJmclVuaW5kZXhlZFN0cmluZzUiKSB8fAogICAgZ2V0T2JqZWN0QXR0cmlidXRlKCJvbGRfdGVsZXBob25lTnVtYmVyIikpIHsKICBvdXRjb21lID0gImNoYW5nZWQiOwp9CmxvZ2dlci5lcnJvcigiSGFzIFByb2ZpbGUgQ2hhbmdlZDogZW5kIFtvdXRjb21lPSIuY29uY2F0KG91dGNvbWUpLmNvbmNhdCgiXSIpKTsKCi8qCiAqIEdldCBvYmplY3RBdHRyaWJ1dGUgdmFsdWUKICovCmZ1bmN0aW9uIGdldE9iamVjdEF0dHJpYnV0ZShuYW1lKSB7CiAgICBpZiAoc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikgJiYgc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikuZ2V0KG5hbWUpKSB7CiAgICAgICAgcmV0dXJuIHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpLmdldChuYW1lKS50b1N0cmluZygpOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9Cn0=",
  },
  {
    "_id": "743351b3-001a-4ec8-b3ac-a674ddb8de22",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Enrich user session with UOP class ID.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "UOP Enrich Session",
    "script": "LyogVU9QIEVucmljaCBTZXNzaW9uCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICogCiAqIEFkZCBjdXJyZW50IGNsYXNzIElEIHRvIHVzZXIgc2Vzc2lvbi4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuIAogKiBJdCByZXF1aXJlcyB0aGUgSWRlbnRpZnkgRXhpc3RpbmcgVXNlciBub2RlIGJlZm9yZSBpdCBpcyBiZWluZyBjYWxsZWQuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKiAtIGZhbHNlCiAqLwpsb2dnZXIud2FybmluZygiVU9QIEVucmljaCBTZXNzaW9uOiBzdGFydCIpOwpvdXRjb21lID0gImZhbHNlIjsKCmlmIChzaGFyZWRTdGF0ZS5nZXQoInVvcEN1cnJlbnRDbGFzc0lEIikpIHsKICAgIG91dGNvbWUgPSAidHJ1ZSI7CiAgICBsb2dnZXIud2FybmluZygiVU9QIEVucmljaCBTZXNzaW9uOiBnb2luZyB0byBlbnJpY2ggc2Vzc2lvbiB3aXRoIGNsYXNzIGlkOiAiLmNvbmNhdChzaGFyZWRTdGF0ZS5nZXQoInVvcEN1cnJlbnRDbGFzc0lEIikpKTsKICAKICAgIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaQogICAgKTsKCiAgICB3aXRoIChmcikgewogICAgICAgIGxvZ2dlci53YXJuaW5nKCJVT1AgRW5yaWNoIFNlc3Npb246IEVuZCAob3V0Y29tZT0iLmNvbmNhdChvdXRjb21lKS5jb25jYXQoIikiKSk7CiAgICAgICAgYWN0aW9uID0gQWN0aW9uLmdvVG8ob3V0Y29tZSkucHV0U2Vzc2lvblByb3BlcnR5KCJVT1BDbGFzc0lEIiwgc2hhcmVkU3RhdGUuZ2V0KCJ1b3BDdXJyZW50Q2xhc3NJRCIpKS5idWlsZCgpOwogICAgfQogIAp9IGVsc2UgewogICAgbG9nZ2VyLmVycm9yKCJVT1AgRW5yaWNoIFNlc3Npb246IG5vIGNsYXNzZXMhIik7CiAgICBsb2dnZXIud2FybmluZygiVU9QIEVucmljaCBTZXNzaW9uOiBFbmQgKG91dGNvbWU9Ii5jb25jYXQob3V0Y29tZSkuY29uY2F0KCIpIikpOwp9",
  },
  {
    "_id": "db854830-a069-471f-875a-8dc67d45ea2d",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_SetInviteMailVars",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKdmFyIG9iakF0dHJzID0gc2hhcmVkU3RhdGUuZ2V0KCdvYmplY3RBdHRyaWJ1dGVzJykgfHwgbmV3IEhhc2hNYXAoKTsKb2JqQXR0cnMucHV0KCdjdXJyZW50WWVhcicsIG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpKTsKc2hhcmVkU3RhdGUucHV0KCdvYmplY3RBdHRyaWJ1dGVzJywgb2JqQXR0cnMpOwoKb3V0Y29tZSA9ICdUcnVlJzsK",
  },
  {
    "_id": "7dce8f07-d9fe-4752-94b9-ff99dfd0433b",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Parse parameters of the incoming call.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twilio IVR: Parse Call Parameters",
    "script": "LyogVHdpbGlvIElWUiBJbnRlZ3JhdGlvbgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICogLSBmYWxzZQogKiAKICogRGVwZW5kaW5nIG9uIHRoZSBhbW91bnQgb2YgZGF0YSBjb2xsZWN0ZWQgdGhyb3VnaCBjYWxsYmFja3MgYW5kIGhvdyBtYW55IG9mIHRoZSBjYWxsUGFyYW1zCiAqIHlvdSBhY3RpdmF0ZSBiZWxvdywgeW91IHdpbGwgbmVlZCB0byBjaGFuZ2UgeW91ciBhdXRoZW50aWNhdGlvbiBzZXNzaW9uIGZyb20gSldUIHRvIENUUyBvcgogKiBNZW1vcnkuCiAqLwoKbG9nZ2VyLndhcm5pbmcoIlR3aWxpbyBJVlI6IFBhcnNlIENhbGwgUGFyYW1ldGVyczogc3RhcnQiKTsKb3V0Y29tZSA9ICJmYWxzZSI7CgovKiBCZWdpbiBUd2lsaW8gSVZSIENvbmZpZ3VyYXRpb24gUGFyYW1ldGVycwogKgogKiBUaGVzZSBhcmUgdXNlZCB0byBwcm90ZWN0IHRoaXMgam91cm5leSBzbyBpdCBpcyBvbmx5IGJlaW5nIGV4ZWN1dGVkIGJ5IHlvdXIgVHdpbGlvIGFjY291bnQuCiAqLwp2YXIgVFdJTElPX0FDQ09VTlRfU0lEID0gIkFDNzUwNDE1ZTMxNjNhMmU1N2I3YWVlYTdlZWQ4MmQ5NDQiOwp2YXIgVFdJTElPX1BIT05FX05VTUJFUiA9ICIrMTMxNzY0NDMxMDciOwoKLy8ga2VlcCB0aGUgcGFyYW1zIHRvIGEgbWluaW11bSB0byBtaW5pbWl6ZSBhdXRoZW50aWNhdGlvbiBzZXNzaW9uIHNpemUKdmFyIGNhbGxQYXJhbXMgPSB7CiAgLy8iQ2FsbFNpZCIgOiBkZWNvZGVVUklDb21wb25lbnQocmVxdWVzdFBhcmFtZXRlcnMuZ2V0KCJDYWxsU2lkIikuZ2V0KDApKSwKICAiQWNjb3VudFNpZCIgOiBkZWNvZGVVUklDb21wb25lbnQocmVxdWVzdFBhcmFtZXRlcnMuZ2V0KCJBY2NvdW50U2lkIikuZ2V0KDApKSwKICAiRnJvbSIgOiBkZWNvZGVVUklDb21wb25lbnQocmVxdWVzdFBhcmFtZXRlcnMuZ2V0KCJGcm9tIikuZ2V0KDApKSwKICAiVG8iIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlcXVlc3RQYXJhbWV0ZXJzLmdldCgiVG8iKS5nZXQoMCkpLAogIC8vIkNhbGxTdGF0dXMiIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlcXVlc3RQYXJhbWV0ZXJzLmdldCgiQ2FsbFN0YXR1cyIpLmdldCgwKSksCiAgLy8iQXBpVmVyc2lvbiIgOiBkZWNvZGVVUklDb21wb25lbnQocmVxdWVzdFBhcmFtZXRlcnMuZ2V0KCJBcGlWZXJzaW9uIikuZ2V0KDApKSwKICAvLyJEaXJlY3Rpb24iIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlcXVlc3RQYXJhbWV0ZXJzLmdldCgiRGlyZWN0aW9uIikuZ2V0KDApKSwKICAvLyJGb3J3YXJkZWRGcm9tIiA6IGRlY29kZVVSSUNvbXBvbmVudChyZXF1ZXN0UGFyYW1ldGVycy5nZXQoIkZvcndhcmRlZEZyb20iKS5nZXQoMCkpLAogIC8vIkNhbGxlck5hbWUiIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlcXVlc3RQYXJhbWV0ZXJzLmdldCgiQ2FsbGVyTmFtZUNhbGxlck5hbWUiKS5nZXQoMCkpLAogIC8vIlBhcmVudENhbGxTaWQiIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlcXVlc3RQYXJhbWV0ZXJzLmdldCgiUGFyZW50Q2FsbFNpZCIpLmdldCgwKSksCiAgLy8iRnJvbUNpdHkiIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlcXVlc3RQYXJhbWV0ZXJzLmdldCgiRnJvbUNpdHkiKS5nZXQoMCkpLAogIC8vIkZyb21TdGF0ZSIgOiBkZWNvZGVVUklDb21wb25lbnQocmVxdWVzdFBhcmFtZXRlcnMuZ2V0KCJGcm9tU3RhdGUiKS5nZXQoMCkpLAogIC8vIkZyb21aaXAiIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlcXVlc3RQYXJhbWV0ZXJzLmdldCgiRnJvbVppcCIpLmdldCgwKSksCiAgLy8iRnJvbUNvdW50cnkiIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlcXVlc3RQYXJhbWV0ZXJzLmdldCgiRnJvbUNvdW50cnkiKS5nZXQoMCkpLAogIC8vIlRvQ2l0eSIgOiBkZWNvZGVVUklDb21wb25lbnQocmVxdWVzdFBhcmFtZXRlcnMuZ2V0KCJUb0NpdHkiKS5nZXQoMCkpLAogIC8vIlRvU3RhdGUiIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlcXVlc3RQYXJhbWV0ZXJzLmdldCgiVG9TdGF0ZSIpLmdldCgwKSksCiAgLy8iVG9aaXAiIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlcXVlc3RQYXJhbWV0ZXJzLmdldCgiVG9aaXAiKS5nZXQoMCkpLAogIC8vIlRvQ291bnRyeSIgOiBkZWNvZGVVUklDb21wb25lbnQocmVxdWVzdFBhcmFtZXRlcnMuZ2V0KCJUb0NvdW50cnkiKS5nZXQoMCkpLAp9OwoKLyogRW5kIFR3aWxpbyBJVlIgQ29uZmlndXJhdGlvbiBQYXJhbWV0ZXJzIAogKi8KCmlmIChjYWxsUGFyYW1zLkFjY291bnRTaWQgPT0gVFdJTElPX0FDQ09VTlRfU0lEICYmCiAgICBjYWxsUGFyYW1zLlRvID09IFRXSUxJT19QSE9ORV9OVU1CRVIpIAp7CiAgICAgIG91dGNvbWUgPSAidHJ1ZSI7CiAgICBzaGFyZWRTdGF0ZS5wdXQoIlR3aWxpb0lWUkNhbGxQYXJhbXMiLCBjYWxsUGFyYW1zKTsKICAgIHNldFNoYXJlZE9iamVjdEF0dHJpYnV0ZSgidGVsZXBob25lTnVtYmVyIiwgY2FsbFBhcmFtcy5Gcm9tKTsKfQoKbG9nZ2VyLndhcm5pbmcoIlR3aWxpbyBJVlI6IFBhcnNlIENhbGwgUGFyYW1ldGVyczogZmluaXNoIFtvdXRjb21lPSIuY29uY2F0KG91dGNvbWUpLmNvbmNhdCgiXSIpKTsKCi8qCiAqIFN0b3JlIGF0dHJpYnV0ZXMgaW4gc2hhcmVkIHN0YXRlIGZvciB1c2Ugd2l0aCB0aGUgQ3JlYXRlL1BhdGNoIE9iamVjdCBub2Rlcy4KICovCmZ1bmN0aW9uIHNldFNoYXJlZE9iamVjdEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkgewogICAgICAgdmFyIHN0b3JhZ2UgPSBzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKTsKICAgIGlmIChzdG9yYWdlICYmIHZhbHVlKSB7CiAgICAgICAgICBpZiAoc3RvcmFnZS5wdXQpIHsKICAgICAgICAgICAgICBzdG9yYWdlLnB1dChuYW1lLCB2YWx1ZSk7CiAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgc3RvcmFnZVtuYW1lXSA9IHZhbHVlOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgaWYgKHZhbHVlKSB7CiAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwgSlNPTi5wYXJzZSgie1wiIituYW1lKyJcIjpcIiIrdmFsdWUrIlwifSIpKTsKICAgIH0KfQ==",
  },
  {
    "_id": "d82a4ad6-cd8a-437b-af55-7373e50d685b",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Collect Replay Password (frUnindexedString2).",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Collect Replay Password (frUnindexedString2)",
    "script": "LyogQ29sbGVjdCBBbmQgRW5jcnlwdCBDdXN0b20gUGFzc3dvcmQKICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqIAogKiBTZWUgY29weXJpZ2h0IG5vdGljZXMsIGNvbmRpdGlvbnMsIGFuZCBkaXNjbGFpbWVycyBhdCB0aGUgYm90dG9tIG9mIHRoaXMgc2NyaXB0LgogKiAKICogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgICAidXNlIHN0cmljdCI7dmFyIHNqY2w9e2NpcGhlcjp7fSxoYXNoOnt9LGtleWV4Y2hhbmdlOnt9LG1vZGU6e30sbWlzYzp7fSxjb2RlYzp7fSxleGNlcHRpb246e2NvcnJ1cHQ6ZnVuY3Rpb24obWVzc2FnZSl7dGhpcy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiJDT1JSVVBUOiAiK3RoaXMubWVzc2FnZX07dGhpcy5tZXNzYWdlPW1lc3NhZ2V9LGludmFsaWQ6ZnVuY3Rpb24obWVzc2FnZSl7dGhpcy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiJJTlZBTElEOiAiK3RoaXMubWVzc2FnZX07dGhpcy5tZXNzYWdlPW1lc3NhZ2V9LGJ1ZzpmdW5jdGlvbihtZXNzYWdlKXt0aGlzLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIkJVRzogIit0aGlzLm1lc3NhZ2V9O3RoaXMubWVzc2FnZT1tZXNzYWdlfSxub3RSZWFkeTpmdW5jdGlvbihtZXNzYWdlKXt0aGlzLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIk5PVCBSRUFEWTogIit0aGlzLm1lc3NhZ2V9O3RoaXMubWVzc2FnZT1tZXNzYWdlfX19O3NqY2wuY2lwaGVyLmFlcz1mdW5jdGlvbihrZXkpe2lmKCF0aGlzLl90YWJsZXNbMF1bMF1bMF0pe3RoaXMuX3ByZWNvbXB1dGUoKX12YXIgaSxqLHRtcCxlbmNLZXksZGVjS2V5LHNib3g9dGhpcy5fdGFibGVzWzBdWzRdLGRlY1RhYmxlPXRoaXMuX3RhYmxlc1sxXSxrZXlMZW49a2V5Lmxlbmd0aCxyY29uPTE7aWYoa2V5TGVuIT09NCYma2V5TGVuIT09NiYma2V5TGVuIT09OCl7dGhyb3cgbmV3IHNqY2wuZXhjZXB0aW9uLmludmFsaWQoImludmFsaWQgYWVzIGtleSBzaXplIil9dGhpcy5fa2V5PVtlbmNLZXk9a2V5LnNsaWNlKDApLGRlY0tleT1bXV07Zm9yKGk9a2V5TGVuO2k8NCprZXlMZW4rMjg7aSsrKXt0bXA9ZW5jS2V5W2ktMV07aWYoaSVrZXlMZW49PT0wfHxrZXlMZW49PT04JiZpJWtleUxlbj09PTQpe3RtcD1zYm94W3RtcD4+PjI0XTw8MjRec2JveFt0bXA+PjE2JjI1NV08PDE2XnNib3hbdG1wPj44JjI1NV08PDhec2JveFt0bXAmMjU1XTtpZihpJWtleUxlbj09PTApe3RtcD10bXA8PDhedG1wPj4+MjRecmNvbjw8MjQ7cmNvbj1yY29uPDwxXihyY29uPj43KSoyODN9fWVuY0tleVtpXT1lbmNLZXlbaS1rZXlMZW5dXnRtcH1mb3Ioaj0wO2k7aisrLGktLSl7dG1wPWVuY0tleVtqJjM/aTppLTRdO2lmKGk8PTR8fGo8NCl7ZGVjS2V5W2pdPXRtcH1lbHNle2RlY0tleVtqXT1kZWNUYWJsZVswXVtzYm94W3RtcD4+PjI0XV1eZGVjVGFibGVbMV1bc2JveFt0bXA+PjE2JjI1NV1dXmRlY1RhYmxlWzJdW3Nib3hbdG1wPj44JjI1NV1dXmRlY1RhYmxlWzNdW3Nib3hbdG1wJjI1NV1dfX19O3NqY2wuY2lwaGVyLmFlcy5wcm90b3R5cGU9e2VuY3J5cHQ6ZnVuY3Rpb24oZGF0YSl7cmV0dXJuIHRoaXMuX2NyeXB0KGRhdGEsMCl9LGRlY3J5cHQ6ZnVuY3Rpb24oZGF0YSl7cmV0dXJuIHRoaXMuX2NyeXB0KGRhdGEsMSl9LF90YWJsZXM6W1tbXSxbXSxbXSxbXSxbXV0sW1tdLFtdLFtdLFtdLFtdXV0sX3ByZWNvbXB1dGU6ZnVuY3Rpb24oKXt2YXIgZW5jVGFibGU9dGhpcy5fdGFibGVzWzBdLGRlY1RhYmxlPXRoaXMuX3RhYmxlc1sxXSxzYm94PWVuY1RhYmxlWzRdLHNib3hJbnY9ZGVjVGFibGVbNF0saSx4LHhJbnYsZD1bXSx0aD1bXSx4Mix4NCx4OCxzLHRFbmMsdERlYztmb3IoaT0wO2k8MjU2O2krKyl7dGhbKGRbaV09aTw8MV4oaT4+NykqMjgzKV5pXT1pfWZvcih4PXhJbnY9MDshc2JveFt4XTt4Xj14Mnx8MSx4SW52PXRoW3hJbnZdfHwxKXtzPXhJbnZeeEludjw8MV54SW52PDwyXnhJbnY8PDNeeEludjw8NDtzPXM+PjhecyYyNTVeOTk7c2JveFt4XT1zO3Nib3hJbnZbc109eDt4OD1kW3g0PWRbeDI9ZFt4XV1dO3REZWM9eDgqMTY4NDMwMDleeDQqNjU1MzdeeDIqMjU3XngqMTY4NDMwMDg7dEVuYz1kW3NdKjI1N15zKjE2ODQzMDA4O2ZvcihpPTA7aTw0O2krKyl7ZW5jVGFibGVbaV1beF09dEVuYz10RW5jPDwyNF50RW5jPj4+ODtkZWNUYWJsZVtpXVtzXT10RGVjPXREZWM8PDI0XnREZWM+Pj44fX1mb3IoaT0wO2k8NTtpKyspe2VuY1RhYmxlW2ldPWVuY1RhYmxlW2ldLnNsaWNlKDApO2RlY1RhYmxlW2ldPWRlY1RhYmxlW2ldLnNsaWNlKDApfX0sX2NyeXB0OmZ1bmN0aW9uKGlucHV0LGRpcil7aWYoaW5wdXQubGVuZ3RoIT09NCl7dGhyb3cgbmV3IHNqY2wuZXhjZXB0aW9uLmludmFsaWQoImludmFsaWQgYWVzIGJsb2NrIHNpemUiKX12YXIga2V5PXRoaXMuX2tleVtkaXJdLGE9aW5wdXRbMF1ea2V5WzBdLGI9aW5wdXRbZGlyPzM6MV1ea2V5WzFdLGM9aW5wdXRbMl1ea2V5WzJdLGQ9aW5wdXRbZGlyPzE6M11ea2V5WzNdLGEyLGIyLGMyLG5Jbm5lclJvdW5kcz1rZXkubGVuZ3RoLzQtMixpLGtJbmRleD00LG91dD1bMCwwLDAsMF0sdGFibGU9dGhpcy5fdGFibGVzW2Rpcl0sdDA9dGFibGVbMF0sdDE9dGFibGVbMV0sdDI9dGFibGVbMl0sdDM9dGFibGVbM10sc2JveD10YWJsZVs0XTtmb3IoaT0wO2k8bklubmVyUm91bmRzO2krKyl7YTI9dDBbYT4+PjI0XV50MVtiPj4xNiYyNTVdXnQyW2M+PjgmMjU1XV50M1tkJjI1NV1ea2V5W2tJbmRleF07YjI9dDBbYj4+PjI0XV50MVtjPj4xNiYyNTVdXnQyW2Q+PjgmMjU1XV50M1thJjI1NV1ea2V5W2tJbmRleCsxXTtjMj10MFtjPj4+MjRdXnQxW2Q+PjE2JjI1NV1edDJbYT4+OCYyNTVdXnQzW2ImMjU1XV5rZXlba0luZGV4KzJdO2Q9dDBbZD4+PjI0XV50MVthPj4xNiYyNTVdXnQyW2I+PjgmMjU1XV50M1tjJjI1NV1ea2V5W2tJbmRleCszXTtrSW5kZXgrPTQ7YT1hMjtiPWIyO2M9YzJ9Zm9yKGk9MDtpPDQ7aSsrKXtvdXRbZGlyPzMmLWk6aV09c2JveFthPj4+MjRdPDwyNF5zYm94W2I+PjE2JjI1NV08PDE2XnNib3hbYz4+OCYyNTVdPDw4XnNib3hbZCYyNTVdXmtleVtrSW5kZXgrK107YTI9YTthPWI7Yj1jO2M9ZDtkPWEyfXJldHVybiBvdXR9fTtzamNsLmJpdEFycmF5PXtiaXRTbGljZTpmdW5jdGlvbihhLGJzdGFydCxiZW5kKXthPXNqY2wuYml0QXJyYXkuX3NoaWZ0UmlnaHQoYS5zbGljZShic3RhcnQvMzIpLDMyLShic3RhcnQmMzEpKS5zbGljZSgxKTtyZXR1cm4gYmVuZD09PXVuZGVmaW5lZD9hOnNqY2wuYml0QXJyYXkuY2xhbXAoYSxiZW5kLWJzdGFydCl9LGV4dHJhY3Q6ZnVuY3Rpb24oYSxic3RhcnQsYmxlbmd0aCl7dmFyIHgsc2g9TWF0aC5mbG9vcigtYnN0YXJ0LWJsZW5ndGgmMzEpO2lmKChic3RhcnQrYmxlbmd0aC0xXmJzdGFydCkmLTMyKXt4PWFbYnN0YXJ0LzMyfDBdPDwzMi1zaF5hW2JzdGFydC8zMisxfDBdPj4+c2h9ZWxzZXt4PWFbYnN0YXJ0LzMyfDBdPj4+c2h9cmV0dXJuIHgmKDE8PGJsZW5ndGgpLTF9LGNvbmNhdDpmdW5jdGlvbihhMSxhMil7aWYoYTEubGVuZ3RoPT09MHx8YTIubGVuZ3RoPT09MCl7cmV0dXJuIGExLmNvbmNhdChhMil9dmFyIGxhc3Q9YTFbYTEubGVuZ3RoLTFdLHNoaWZ0PXNqY2wuYml0QXJyYXkuZ2V0UGFydGlhbChsYXN0KTtpZihzaGlmdD09PTMyKXtyZXR1cm4gYTEuY29uY2F0KGEyKX1lbHNle3JldHVybiBzamNsLmJpdEFycmF5Ll9zaGlmdFJpZ2h0KGEyLHNoaWZ0LGxhc3R8MCxhMS5zbGljZSgwLGExLmxlbmd0aC0xKSl9fSxiaXRMZW5ndGg6ZnVuY3Rpb24oYSl7dmFyIGw9YS5sZW5ndGgseDtpZihsPT09MCl7cmV0dXJuIDB9eD1hW2wtMV07cmV0dXJuKGwtMSkqMzIrc2pjbC5iaXRBcnJheS5nZXRQYXJ0aWFsKHgpfSxjbGFtcDpmdW5jdGlvbihhLGxlbil7aWYoYS5sZW5ndGgqMzI8bGVuKXtyZXR1cm4gYX1hPWEuc2xpY2UoMCxNYXRoLmNlaWwobGVuLzMyKSk7dmFyIGw9YS5sZW5ndGg7bGVuPWxlbiYzMTtpZihsPjAmJmxlbil7YVtsLTFdPXNqY2wuYml0QXJyYXkucGFydGlhbChsZW4sYVtsLTFdJjIxNDc0ODM2NDg+Pmxlbi0xLDEpfXJldHVybiBhfSxwYXJ0aWFsOmZ1bmN0aW9uKGxlbix4LF9lbmQpe2lmKGxlbj09PTMyKXtyZXR1cm4geH1yZXR1cm4oX2VuZD94fDA6eDw8MzItbGVuKStsZW4qMTA5OTUxMTYyNzc3Nn0sZ2V0UGFydGlhbDpmdW5jdGlvbih4KXtyZXR1cm4gTWF0aC5yb3VuZCh4LzEwOTk1MTE2Mjc3NzYpfHwzMn0sZXF1YWw6ZnVuY3Rpb24oYSxiKXtpZihzamNsLmJpdEFycmF5LmJpdExlbmd0aChhKSE9PXNqY2wuYml0QXJyYXkuYml0TGVuZ3RoKGIpKXtyZXR1cm4gZmFsc2V9dmFyIHg9MCxpO2ZvcihpPTA7aTxhLmxlbmd0aDtpKyspe3h8PWFbaV1eYltpXX1yZXR1cm4geD09PTB9LF9zaGlmdFJpZ2h0OmZ1bmN0aW9uKGEsc2hpZnQsY2Fycnksb3V0KXt2YXIgaSxsYXN0Mj0wLHNoaWZ0MjtpZihvdXQ9PT11bmRlZmluZWQpe291dD1bXX1mb3IoO3NoaWZ0Pj0zMjtzaGlmdC09MzIpe291dC5wdXNoKGNhcnJ5KTtjYXJyeT0wfWlmKHNoaWZ0PT09MCl7cmV0dXJuIG91dC5jb25jYXQoYSl9Zm9yKGk9MDtpPGEubGVuZ3RoO2krKyl7b3V0LnB1c2goY2Fycnl8YVtpXT4+PnNoaWZ0KTtjYXJyeT1hW2ldPDwzMi1zaGlmdH1sYXN0Mj1hLmxlbmd0aD9hW2EubGVuZ3RoLTFdOjA7c2hpZnQyPXNqY2wuYml0QXJyYXkuZ2V0UGFydGlhbChsYXN0Mik7b3V0LnB1c2goc2pjbC5iaXRBcnJheS5wYXJ0aWFsKHNoaWZ0K3NoaWZ0MiYzMSxzaGlmdCtzaGlmdDI+MzI/Y2Fycnk6b3V0LnBvcCgpLDEpKTtyZXR1cm4gb3V0fSxfeG9yNDpmdW5jdGlvbih4LHkpe3JldHVyblt4WzBdXnlbMF0seFsxXV55WzFdLHhbMl1eeVsyXSx4WzNdXnlbM11dfSxieXRlc3dhcE06ZnVuY3Rpb24oYSl7dmFyIGksdixtPTY1MjgwO2ZvcihpPTA7aTxhLmxlbmd0aDsrK2kpe3Y9YVtpXTthW2ldPXY+Pj4yNHx2Pj4+OCZtfCh2Jm0pPDw4fHY8PDI0fXJldHVybiBhfX07c2pjbC5jb2RlYy51dGY4U3RyaW5nPXtmcm9tQml0czpmdW5jdGlvbihhcnIpe3ZhciBvdXQ9IiIsYmw9c2pjbC5iaXRBcnJheS5iaXRMZW5ndGgoYXJyKSxpLHRtcDtmb3IoaT0wO2k8YmwvODtpKyspe2lmKChpJjMpPT09MCl7dG1wPWFycltpLzRdfW91dCs9U3RyaW5nLmZyb21DaGFyQ29kZSh0bXA+Pj44Pj4+OD4+PjgpO3RtcDw8PTh9cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUob3V0KSl9LHRvQml0czpmdW5jdGlvbihzdHIpe3N0cj11bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7dmFyIG91dD1bXSxpLHRtcD0wO2ZvcihpPTA7aTxzdHIubGVuZ3RoO2krKyl7dG1wPXRtcDw8OHxzdHIuY2hhckNvZGVBdChpKTtpZigoaSYzKT09PTMpe291dC5wdXNoKHRtcCk7dG1wPTB9fWlmKGkmMyl7b3V0LnB1c2goc2pjbC5iaXRBcnJheS5wYXJ0aWFsKDgqKGkmMyksdG1wKSl9cmV0dXJuIG91dH19O3NqY2wuY29kZWMuYmFzZTY0PXtfY2hhcnM6IkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8iLGZyb21CaXRzOmZ1bmN0aW9uKGFycixfbm9FcXVhbHMsX3VybCl7dmFyIG91dD0iIixpLGJpdHM9MCxjPXNqY2wuY29kZWMuYmFzZTY0Ll9jaGFycyx0YT0wLGJsPXNqY2wuYml0QXJyYXkuYml0TGVuZ3RoKGFycik7aWYoX3VybCl7Yz1jLnN1YnN0cigwLDYyKSsiLV8ifWZvcihpPTA7b3V0Lmxlbmd0aCo2PGJsOyl7b3V0Kz1jLmNoYXJBdCgodGFeYXJyW2ldPj4+Yml0cyk+Pj4yNik7aWYoYml0czw2KXt0YT1hcnJbaV08PDYtYml0cztiaXRzKz0yNjtpKyt9ZWxzZXt0YTw8PTY7Yml0cy09Nn19d2hpbGUob3V0Lmxlbmd0aCYzJiYhX25vRXF1YWxzKXtvdXQrPSI9In1yZXR1cm4gb3V0fSx0b0JpdHM6ZnVuY3Rpb24oc3RyLF91cmwpe3N0cj1zdHIucmVwbGFjZSgvXHN8PS9nLCIiKTt2YXIgb3V0PVtdLGksYml0cz0wLGM9c2pjbC5jb2RlYy5iYXNlNjQuX2NoYXJzLHRhPTAseDtpZihfdXJsKXtjPWMuc3Vic3RyKDAsNjIpKyItXyJ9Zm9yKGk9MDtpPHN0ci5sZW5ndGg7aSsrKXt4PWMuaW5kZXhPZihzdHIuY2hhckF0KGkpKTtpZih4PDApe3Rocm93IG5ldyBzamNsLmV4Y2VwdGlvbi5pbnZhbGlkKCJ0aGlzIGlzbid0IGJhc2U2NCEiKX1pZihiaXRzPjI2KXtiaXRzLT0yNjtvdXQucHVzaCh0YV54Pj4+Yml0cyk7dGE9eDw8MzItYml0c31lbHNle2JpdHMrPTY7dGFePXg8PDMyLWJpdHN9fWlmKGJpdHMmNTYpe291dC5wdXNoKHNqY2wuYml0QXJyYXkucGFydGlhbChiaXRzJjU2LHRhLDEpKX1yZXR1cm4gb3V0fX07c2pjbC5jb2RlYy5iYXNlNjR1cmw9e2Zyb21CaXRzOmZ1bmN0aW9uKGFycil7cmV0dXJuIHNqY2wuY29kZWMuYmFzZTY0LmZyb21CaXRzKGFyciwxLDEpfSx0b0JpdHM6ZnVuY3Rpb24oc3RyKXtyZXR1cm4gc2pjbC5jb2RlYy5iYXNlNjQudG9CaXRzKHN0ciwxKX19O3NqY2wuaGFzaC5zaGEyNTY9ZnVuY3Rpb24oaGFzaCl7aWYoIXRoaXMuX2tleVswXSl7dGhpcy5fcHJlY29tcHV0ZSgpfWlmKGhhc2gpe3RoaXMuX2g9aGFzaC5faC5zbGljZSgwKTt0aGlzLl9idWZmZXI9aGFzaC5fYnVmZmVyLnNsaWNlKDApO3RoaXMuX2xlbmd0aD1oYXNoLl9sZW5ndGh9ZWxzZXt0aGlzLnJlc2V0KCl9fTtzamNsLmhhc2guc2hhMjU2Lmhhc2g9ZnVuY3Rpb24oZGF0YSl7cmV0dXJuKG5ldyBzamNsLmhhc2guc2hhMjU2KS51cGRhdGUoZGF0YSkuZmluYWxpemUoKX07c2pjbC5oYXNoLnNoYTI1Ni5wcm90b3R5cGU9e2Jsb2NrU2l6ZTo1MTIscmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oPXRoaXMuX2luaXQuc2xpY2UoMCk7dGhpcy5fYnVmZmVyPVtdO3RoaXMuX2xlbmd0aD0wO3JldHVybiB0aGlzfSx1cGRhdGU6ZnVuY3Rpb24oZGF0YSl7aWYodHlwZW9mIGRhdGE9PT0ic3RyaW5nIil7ZGF0YT1zamNsLmNvZGVjLnV0ZjhTdHJpbmcudG9CaXRzKGRhdGEpfXZhciBpLGI9dGhpcy5fYnVmZmVyPXNqY2wuYml0QXJyYXkuY29uY2F0KHRoaXMuX2J1ZmZlcixkYXRhKSxvbD10aGlzLl9sZW5ndGgsbmw9dGhpcy5fbGVuZ3RoPW9sK3NqY2wuYml0QXJyYXkuYml0TGVuZ3RoKGRhdGEpO2lmKG5sPjkwMDcxOTkyNTQ3NDA5OTEpe3Rocm93IG5ldyBzamNsLmV4Y2VwdGlvbi5pbnZhbGlkKCJDYW5ub3QgaGFzaCBtb3JlIHRoYW4gMl41MyAtIDEgYml0cyIpfWlmKHR5cGVvZiBVaW50MzJBcnJheSE9PSJ1bmRlZmluZWQiKXt2YXIgYz1uZXcgVWludDMyQXJyYXkoYik7dmFyIGo9MDtmb3IoaT01MTIrb2wtKDUxMitvbCY1MTEpO2k8PW5sO2krPTUxMil7dGhpcy5fYmxvY2soYy5zdWJhcnJheSgxNipqLDE2KihqKzEpKSk7ais9MX1iLnNwbGljZSgwLDE2KmopfWVsc2V7Zm9yKGk9NTEyK29sLSg1MTIrb2wmNTExKTtpPD1ubDtpKz01MTIpe3RoaXMuX2Jsb2NrKGIuc3BsaWNlKDAsMTYpKX19cmV0dXJuIHRoaXN9LGZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGksYj10aGlzLl9idWZmZXIsaD10aGlzLl9oO2I9c2pjbC5iaXRBcnJheS5jb25jYXQoYixbc2pjbC5iaXRBcnJheS5wYXJ0aWFsKDEsMSldKTtmb3IoaT1iLmxlbmd0aCsyO2kmMTU7aSsrKXtiLnB1c2goMCl9Yi5wdXNoKE1hdGguZmxvb3IodGhpcy5fbGVuZ3RoLzQyOTQ5NjcyOTYpKTtiLnB1c2godGhpcy5fbGVuZ3RofDApO3doaWxlKGIubGVuZ3RoKXt0aGlzLl9ibG9jayhiLnNwbGljZSgwLDE2KSl9dGhpcy5yZXNldCgpO3JldHVybiBofSxfaW5pdDpbXSxfa2V5OltdLF9wcmVjb21wdXRlOmZ1bmN0aW9uKCl7dmFyIGk9MCxwcmltZT0yLGZhY3Rvcixpc1ByaW1lO2Z1bmN0aW9uIGZyYWMoeCl7cmV0dXJuKHgtTWF0aC5mbG9vcih4KSkqNDI5NDk2NzI5NnwwfWZvcig7aTw2NDtwcmltZSsrKXtpc1ByaW1lPXRydWU7Zm9yKGZhY3Rvcj0yO2ZhY3RvcipmYWN0b3I8PXByaW1lO2ZhY3RvcisrKXtpZihwcmltZSVmYWN0b3I9PT0wKXtpc1ByaW1lPWZhbHNlO2JyZWFrfX1pZihpc1ByaW1lKXtpZihpPDgpe3RoaXMuX2luaXRbaV09ZnJhYyhNYXRoLnBvdyhwcmltZSwxLzIpKX10aGlzLl9rZXlbaV09ZnJhYyhNYXRoLnBvdyhwcmltZSwxLzMpKTtpKyt9fX0sX2Jsb2NrOmZ1bmN0aW9uKHcpe3ZhciBpLHRtcCxhLGIsaD10aGlzLl9oLGs9dGhpcy5fa2V5LGgwPWhbMF0saDE9aFsxXSxoMj1oWzJdLGgzPWhbM10saDQ9aFs0XSxoNT1oWzVdLGg2PWhbNl0saDc9aFs3XTtmb3IoaT0wO2k8NjQ7aSsrKXtpZihpPDE2KXt0bXA9d1tpXX1lbHNle2E9d1tpKzEmMTVdO2I9d1tpKzE0JjE1XTt0bXA9d1tpJjE1XT0oYT4+PjdeYT4+PjE4XmE+Pj4zXmE8PDI1XmE8PDE0KSsoYj4+PjE3XmI+Pj4xOV5iPj4+MTBeYjw8MTVeYjw8MTMpK3dbaSYxNV0rd1tpKzkmMTVdfDB9dG1wPXRtcCtoNysoaDQ+Pj42Xmg0Pj4+MTFeaDQ+Pj4yNV5oNDw8MjZeaDQ8PDIxXmg0PDw3KSsoaDZeaDQmKGg1Xmg2KSkra1tpXTtoNz1oNjtoNj1oNTtoNT1oNDtoND1oMyt0bXB8MDtoMz1oMjtoMj1oMTtoMT1oMDtoMD10bXArKGgxJmgyXmgzJihoMV5oMikpKyhoMT4+PjJeaDE+Pj4xM15oMT4+PjIyXmgxPDwzMF5oMTw8MTleaDE8PDEwKXwwfWhbMF09aFswXStoMHwwO2hbMV09aFsxXStoMXwwO2hbMl09aFsyXStoMnwwO2hbM109aFszXStoM3wwO2hbNF09aFs0XStoNHwwO2hbNV09aFs1XStoNXwwO2hbNl09aFs2XStoNnwwO2hbN109aFs3XStoN3wwfX07c2pjbC5tb2RlLmNjbT17bmFtZToiY2NtIixfcHJvZ3Jlc3NMaXN0ZW5lcnM6W10sbGlzdGVuUHJvZ3Jlc3M6ZnVuY3Rpb24oY2Ipe3NqY2wubW9kZS5jY20uX3Byb2dyZXNzTGlzdGVuZXJzLnB1c2goY2IpfSx1bkxpc3RlblByb2dyZXNzOmZ1bmN0aW9uKGNiKXt2YXIgaW5kZXg9c2pjbC5tb2RlLmNjbS5fcHJvZ3Jlc3NMaXN0ZW5lcnMuaW5kZXhPZihjYik7aWYoaW5kZXg+LTEpe3NqY2wubW9kZS5jY20uX3Byb2dyZXNzTGlzdGVuZXJzLnNwbGljZShpbmRleCwxKX19LF9jYWxsUHJvZ3Jlc3NMaXN0ZW5lcjpmdW5jdGlvbih2YWwpe3ZhciBwPXNqY2wubW9kZS5jY20uX3Byb2dyZXNzTGlzdGVuZXJzLnNsaWNlKCksaTtmb3IoaT0wO2k8cC5sZW5ndGg7aSs9MSl7cFtpXSh2YWwpfX0sZW5jcnlwdDpmdW5jdGlvbihwcmYscGxhaW50ZXh0LGl2LGFkYXRhLHRsZW4pe3ZhciBMLG91dD1wbGFpbnRleHQuc2xpY2UoMCksdGFnLHc9c2pjbC5iaXRBcnJheSxpdmw9dy5iaXRMZW5ndGgoaXYpLzgsb2w9dy5iaXRMZW5ndGgob3V0KS84O3RsZW49dGxlbnx8NjQ7YWRhdGE9YWRhdGF8fFtdO2lmKGl2bDw3KXt0aHJvdyBuZXcgc2pjbC5leGNlcHRpb24uaW52YWxpZCgiY2NtOiBpdiBtdXN0IGJlIGF0IGxlYXN0IDcgYnl0ZXMiKX1mb3IoTD0yO0w8NCYmb2w+Pj44Kkw7TCsrKXt9aWYoTDwxNS1pdmwpe0w9MTUtaXZsfWl2PXcuY2xhbXAoaXYsOCooMTUtTCkpO3RhZz1zamNsLm1vZGUuY2NtLl9jb21wdXRlVGFnKHByZixwbGFpbnRleHQsaXYsYWRhdGEsdGxlbixMKTtvdXQ9c2pjbC5tb2RlLmNjbS5fY3RyTW9kZShwcmYsb3V0LGl2LHRhZyx0bGVuLEwpO3JldHVybiB3LmNvbmNhdChvdXQuZGF0YSxvdXQudGFnKX0sZGVjcnlwdDpmdW5jdGlvbihwcmYsY2lwaGVydGV4dCxpdixhZGF0YSx0bGVuKXt0bGVuPXRsZW58fDY0O2FkYXRhPWFkYXRhfHxbXTt2YXIgTCx3PXNqY2wuYml0QXJyYXksaXZsPXcuYml0TGVuZ3RoKGl2KS84LG9sPXcuYml0TGVuZ3RoKGNpcGhlcnRleHQpLG91dD13LmNsYW1wKGNpcGhlcnRleHQsb2wtdGxlbiksdGFnPXcuYml0U2xpY2UoY2lwaGVydGV4dCxvbC10bGVuKSx0YWcyO29sPShvbC10bGVuKS84O2lmKGl2bDw3KXt0aHJvdyBuZXcgc2pjbC5leGNlcHRpb24uaW52YWxpZCgiY2NtOiBpdiBtdXN0IGJlIGF0IGxlYXN0IDcgYnl0ZXMiKX1mb3IoTD0yO0w8NCYmb2w+Pj44Kkw7TCsrKXt9aWYoTDwxNS1pdmwpe0w9MTUtaXZsfWl2PXcuY2xhbXAoaXYsOCooMTUtTCkpO291dD1zamNsLm1vZGUuY2NtLl9jdHJNb2RlKHByZixvdXQsaXYsdGFnLHRsZW4sTCk7dGFnMj1zamNsLm1vZGUuY2NtLl9jb21wdXRlVGFnKHByZixvdXQuZGF0YSxpdixhZGF0YSx0bGVuLEwpO2lmKCF3LmVxdWFsKG91dC50YWcsdGFnMikpe3Rocm93IG5ldyBzamNsLmV4Y2VwdGlvbi5jb3JydXB0KCJjY206IHRhZyBkb2Vzbid0IG1hdGNoIil9cmV0dXJuIG91dC5kYXRhfSxfbWFjQWRkaXRpb25hbERhdGE6ZnVuY3Rpb24ocHJmLGFkYXRhLGl2LHRsZW4sb2wsTCl7dmFyIG1hYyx0bXAsaSxtYWNEYXRhPVtdLHc9c2pjbC5iaXRBcnJheSx4b3I9dy5feG9yNDttYWM9W3cucGFydGlhbCg4LChhZGF0YS5sZW5ndGg/MTw8NjowKXx0bGVuLTI8PDJ8TC0xKV07bWFjPXcuY29uY2F0KG1hYyxpdik7bWFjWzNdfD1vbDttYWM9cHJmLmVuY3J5cHQobWFjKTtpZihhZGF0YS5sZW5ndGgpe3RtcD13LmJpdExlbmd0aChhZGF0YSkvODtpZih0bXA8PTY1Mjc5KXttYWNEYXRhPVt3LnBhcnRpYWwoMTYsdG1wKV19ZWxzZSBpZih0bXA8PTQyOTQ5NjcyOTUpe21hY0RhdGE9dy5jb25jYXQoW3cucGFydGlhbCgxNiw2NTUzNCldLFt0bXBdKX1tYWNEYXRhPXcuY29uY2F0KG1hY0RhdGEsYWRhdGEpO2ZvcihpPTA7aTxtYWNEYXRhLmxlbmd0aDtpKz00KXttYWM9cHJmLmVuY3J5cHQoeG9yKG1hYyxtYWNEYXRhLnNsaWNlKGksaSs0KS5jb25jYXQoWzAsMCwwXSkpKX19cmV0dXJuIG1hY30sX2NvbXB1dGVUYWc6ZnVuY3Rpb24ocHJmLHBsYWludGV4dCxpdixhZGF0YSx0bGVuLEwpe3ZhciBtYWMsaSx3PXNqY2wuYml0QXJyYXkseG9yPXcuX3hvcjQ7dGxlbi89ODtpZih0bGVuJTJ8fHRsZW48NHx8dGxlbj4xNil7dGhyb3cgbmV3IHNqY2wuZXhjZXB0aW9uLmludmFsaWQoImNjbTogaW52YWxpZCB0YWcgbGVuZ3RoIil9aWYoYWRhdGEubGVuZ3RoPjQyOTQ5NjcyOTV8fHBsYWludGV4dC5sZW5ndGg+NDI5NDk2NzI5NSl7dGhyb3cgbmV3IHNqY2wuZXhjZXB0aW9uLmJ1ZygiY2NtOiBjYW4ndCBkZWFsIHdpdGggNEdpQiBvciBtb3JlIGRhdGEiKX1tYWM9c2pjbC5tb2RlLmNjbS5fbWFjQWRkaXRpb25hbERhdGEocHJmLGFkYXRhLGl2LHRsZW4sdy5iaXRMZW5ndGgocGxhaW50ZXh0KS84LEwpO2ZvcihpPTA7aTxwbGFpbnRleHQubGVuZ3RoO2krPTQpe21hYz1wcmYuZW5jcnlwdCh4b3IobWFjLHBsYWludGV4dC5zbGljZShpLGkrNCkuY29uY2F0KFswLDAsMF0pKSl9cmV0dXJuIHcuY2xhbXAobWFjLHRsZW4qOCl9LF9jdHJNb2RlOmZ1bmN0aW9uKHByZixkYXRhLGl2LHRhZyx0bGVuLEwpe3ZhciBlbmMsaSx3PXNqY2wuYml0QXJyYXkseG9yPXcuX3hvcjQsY3RyLGw9ZGF0YS5sZW5ndGgsYmw9dy5iaXRMZW5ndGgoZGF0YSksbj1sLzUwLHA9bjtjdHI9dy5jb25jYXQoW3cucGFydGlhbCg4LEwtMSldLGl2KS5jb25jYXQoWzAsMCwwXSkuc2xpY2UoMCw0KTt0YWc9dy5iaXRTbGljZSh4b3IodGFnLHByZi5lbmNyeXB0KGN0cikpLDAsdGxlbik7aWYoIWwpe3JldHVybnt0YWc6dGFnLGRhdGE6W119fWZvcihpPTA7aTxsO2krPTQpe2lmKGk+bil7c2pjbC5tb2RlLmNjbS5fY2FsbFByb2dyZXNzTGlzdGVuZXIoaS9sKTtuKz1wfWN0clszXSsrO2VuYz1wcmYuZW5jcnlwdChjdHIpO2RhdGFbaV1ePWVuY1swXTtkYXRhW2krMV1ePWVuY1sxXTtkYXRhW2krMl1ePWVuY1syXTtkYXRhW2krM11ePWVuY1szXX1yZXR1cm57dGFnOnRhZyxkYXRhOncuY2xhbXAoZGF0YSxibCl9fX07c2pjbC5taXNjLmhtYWM9ZnVuY3Rpb24oa2V5LEhhc2gpe3RoaXMuX2hhc2g9SGFzaD1IYXNofHxzamNsLmhhc2guc2hhMjU2O3ZhciBleEtleT1bW10sW11dLGksYnM9SGFzaC5wcm90b3R5cGUuYmxvY2tTaXplLzMyO3RoaXMuX2Jhc2VIYXNoPVtuZXcgSGFzaCxuZXcgSGFzaF07aWYoa2V5Lmxlbmd0aD5icyl7a2V5PUhhc2guaGFzaChrZXkpfWZvcihpPTA7aTxicztpKyspe2V4S2V5WzBdW2ldPWtleVtpXV45MDk1MjI0ODY7ZXhLZXlbMV1baV09a2V5W2ldXjE1NDk1NTY4Mjh9dGhpcy5fYmFzZUhhc2hbMF0udXBkYXRlKGV4S2V5WzBdKTt0aGlzLl9iYXNlSGFzaFsxXS51cGRhdGUoZXhLZXlbMV0pO3RoaXMuX3Jlc3VsdEhhc2g9bmV3IEhhc2godGhpcy5fYmFzZUhhc2hbMF0pfTtzamNsLm1pc2MuaG1hYy5wcm90b3R5cGUuZW5jcnlwdD1zamNsLm1pc2MuaG1hYy5wcm90b3R5cGUubWFjPWZ1bmN0aW9uKGRhdGEpe2lmKCF0aGlzLl91cGRhdGVkKXt0aGlzLnVwZGF0ZShkYXRhKTtyZXR1cm4gdGhpcy5kaWdlc3QoZGF0YSl9ZWxzZXt0aHJvdyBuZXcgc2pjbC5leGNlcHRpb24uaW52YWxpZCgiZW5jcnlwdCBvbiBhbHJlYWR5IHVwZGF0ZWQgaG1hYyBjYWxsZWQhIil9fTtzamNsLm1pc2MuaG1hYy5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLl9yZXN1bHRIYXNoPW5ldyB0aGlzLl9oYXNoKHRoaXMuX2Jhc2VIYXNoWzBdKTt0aGlzLl91cGRhdGVkPWZhbHNlfTtzamNsLm1pc2MuaG1hYy5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKGRhdGEpe3RoaXMuX3VwZGF0ZWQ9dHJ1ZTt0aGlzLl9yZXN1bHRIYXNoLnVwZGF0ZShkYXRhKX07c2pjbC5taXNjLmhtYWMucHJvdG90eXBlLmRpZ2VzdD1mdW5jdGlvbigpe3ZhciB3PXRoaXMuX3Jlc3VsdEhhc2guZmluYWxpemUoKSxyZXN1bHQ9bmV3IHRoaXMuX2hhc2godGhpcy5fYmFzZUhhc2hbMV0pLnVwZGF0ZSh3KS5maW5hbGl6ZSgpO3RoaXMucmVzZXQoKTtyZXR1cm4gcmVzdWx0fTtzamNsLm1pc2MucGJrZGYyPWZ1bmN0aW9uKHBhc3N3b3JkLHNhbHQsY291bnQsbGVuZ3RoLFByZmYpe2NvdW50PWNvdW50fHwxZTQ7aWYobGVuZ3RoPDB8fGNvdW50PDApe3Rocm93IG5ldyBzamNsLmV4Y2VwdGlvbi5pbnZhbGlkKCJpbnZhbGlkIHBhcmFtcyB0byBwYmtkZjIiKX1pZih0eXBlb2YgcGFzc3dvcmQ9PT0ic3RyaW5nIil7cGFzc3dvcmQ9c2pjbC5jb2RlYy51dGY4U3RyaW5nLnRvQml0cyhwYXNzd29yZCl9aWYodHlwZW9mIHNhbHQ9PT0ic3RyaW5nIil7c2FsdD1zamNsLmNvZGVjLnV0ZjhTdHJpbmcudG9CaXRzKHNhbHQpfVByZmY9UHJmZnx8c2pjbC5taXNjLmhtYWM7dmFyIHByZj1uZXcgUHJmZihwYXNzd29yZCksdSx1aSxpLGosayxvdXQ9W10sYj1zamNsLmJpdEFycmF5O2ZvcihrPTE7MzIqb3V0Lmxlbmd0aDwobGVuZ3RofHwxKTtrKyspe3U9dWk9cHJmLmVuY3J5cHQoYi5jb25jYXQoc2FsdCxba10pKTtmb3IoaT0xO2k8Y291bnQ7aSsrKXt1aT1wcmYuZW5jcnlwdCh1aSk7Zm9yKGo9MDtqPHVpLmxlbmd0aDtqKyspe3Vbal1ePXVpW2pdfX1vdXQ9b3V0LmNvbmNhdCh1KX1pZihsZW5ndGgpe291dD1iLmNsYW1wKG91dCxsZW5ndGgpfXJldHVybiBvdXR9O3NqY2wucHJuZz1mdW5jdGlvbihkZWZhdWx0UGFyYW5vaWEpe3RoaXMuX3Bvb2xzPVtuZXcgc2pjbC5oYXNoLnNoYTI1Nl07dGhpcy5fcG9vbEVudHJvcHk9WzBdO3RoaXMuX3Jlc2VlZENvdW50PTA7dGhpcy5fcm9iaW5zPXt9O3RoaXMuX2V2ZW50SWQ9MDt0aGlzLl9jb2xsZWN0b3JJZHM9e307dGhpcy5fY29sbGVjdG9ySWROZXh0PTA7dGhpcy5fc3RyZW5ndGg9MDt0aGlzLl9wb29sU3RyZW5ndGg9MDt0aGlzLl9uZXh0UmVzZWVkPTA7dGhpcy5fa2V5PVswLDAsMCwwLDAsMCwwLDBdO3RoaXMuX2NvdW50ZXI9WzAsMCwwLDBdO3RoaXMuX2NpcGhlcj11bmRlZmluZWQ7dGhpcy5fZGVmYXVsdFBhcmFub2lhPWRlZmF1bHRQYXJhbm9pYTt0aGlzLl9jb2xsZWN0b3JzU3RhcnRlZD1mYWxzZTt0aGlzLl9jYWxsYmFja3M9e3Byb2dyZXNzOnt9LHNlZWRlZDp7fX07dGhpcy5fY2FsbGJhY2tJPTA7dGhpcy5fTk9UX1JFQURZPTA7dGhpcy5fUkVBRFk9MTt0aGlzLl9SRVFVSVJFU19SRVNFRUQ9Mjt0aGlzLl9NQVhfV09SRFNfUEVSX0JVUlNUPTY1NTM2O3RoaXMuX1BBUkFOT0lBX0xFVkVMUz1bMCw0OCw2NCw5NiwxMjgsMTkyLDI1NiwzODQsNTEyLDc2OCwxMDI0XTt0aGlzLl9NSUxMSVNFQ09ORFNfUEVSX1JFU0VFRD0zZTQ7dGhpcy5fQklUU19QRVJfUkVTRUVEPTgwfTtzamNsLnBybmcucHJvdG90eXBlPXtyYW5kb21Xb3JkczpmdW5jdGlvbihud29yZHMscGFyYW5vaWEpe3ZhciBvdXQ9W10saSxyZWFkaW5lc3M9dGhpcy5pc1JlYWR5KHBhcmFub2lhKSxnO2lmKHJlYWRpbmVzcz09PXRoaXMuX05PVF9SRUFEWSl7dGhyb3cgbmV3IHNqY2wuZXhjZXB0aW9uLm5vdFJlYWR5KCJnZW5lcmF0b3IgaXNuJ3Qgc2VlZGVkIil9ZWxzZSBpZihyZWFkaW5lc3MmdGhpcy5fUkVRVUlSRVNfUkVTRUVEKXt0aGlzLl9yZXNlZWRGcm9tUG9vbHMoIShyZWFkaW5lc3MmdGhpcy5fUkVBRFkpKX1mb3IoaT0wO2k8bndvcmRzO2krPTQpe2lmKChpKzEpJXRoaXMuX01BWF9XT1JEU19QRVJfQlVSU1Q9PT0wKXt0aGlzLl9nYXRlKCl9Zz10aGlzLl9nZW40d29yZHMoKTtvdXQucHVzaChnWzBdLGdbMV0sZ1syXSxnWzNdKX10aGlzLl9nYXRlKCk7cmV0dXJuIG91dC5zbGljZSgwLG53b3Jkcyl9LHNldERlZmF1bHRQYXJhbm9pYTpmdW5jdGlvbihwYXJhbm9pYSxhbGxvd1plcm9QYXJhbm9pYSl7aWYocGFyYW5vaWE9PT0wJiZhbGxvd1plcm9QYXJhbm9pYSE9PSJTZXR0aW5nIHBhcmFub2lhPTAgd2lsbCBydWluIHlvdXIgc2VjdXJpdHk7IHVzZSBpdCBvbmx5IGZvciB0ZXN0aW5nIil7dGhyb3cgbmV3IHNqY2wuZXhjZXB0aW9uLmludmFsaWQoIlNldHRpbmcgcGFyYW5vaWE9MCB3aWxsIHJ1aW4geW91ciBzZWN1cml0eTsgdXNlIGl0IG9ubHkgZm9yIHRlc3RpbmciKX10aGlzLl9kZWZhdWx0UGFyYW5vaWE9cGFyYW5vaWF9LGFkZEVudHJvcHk6ZnVuY3Rpb24oZGF0YSxlc3RpbWF0ZWRFbnRyb3B5LHNvdXJjZSl7c291cmNlPXNvdXJjZXx8InVzZXIiO3ZhciBpZCxpLHRtcCx0PShuZXcgRGF0ZSkudmFsdWVPZigpLHJvYmluPXRoaXMuX3JvYmluc1tzb3VyY2VdLG9sZFJlYWR5PXRoaXMuaXNSZWFkeSgpLGVycj0wLG9iak5hbWU7aWQ9dGhpcy5fY29sbGVjdG9ySWRzW3NvdXJjZV07aWYoaWQ9PT11bmRlZmluZWQpe2lkPXRoaXMuX2NvbGxlY3Rvcklkc1tzb3VyY2VdPXRoaXMuX2NvbGxlY3RvcklkTmV4dCsrfWlmKHJvYmluPT09dW5kZWZpbmVkKXtyb2Jpbj10aGlzLl9yb2JpbnNbc291cmNlXT0wfXRoaXMuX3JvYmluc1tzb3VyY2VdPSh0aGlzLl9yb2JpbnNbc291cmNlXSsxKSV0aGlzLl9wb29scy5sZW5ndGg7c3dpdGNoKHR5cGVvZiBkYXRhKXtjYXNlIm51bWJlciI6aWYoZXN0aW1hdGVkRW50cm9weT09PXVuZGVmaW5lZCl7ZXN0aW1hdGVkRW50cm9weT0xfXRoaXMuX3Bvb2xzW3JvYmluXS51cGRhdGUoW2lkLHRoaXMuX2V2ZW50SWQrKywxLGVzdGltYXRlZEVudHJvcHksdCwxLGRhdGF8MF0pO2JyZWFrO2Nhc2Uib2JqZWN0IjpvYmpOYW1lPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRhKTtpZihvYmpOYW1lPT09IltvYmplY3QgVWludDMyQXJyYXldIil7dG1wPVtdO2ZvcihpPTA7aTxkYXRhLmxlbmd0aDtpKyspe3RtcC5wdXNoKGRhdGFbaV0pfWRhdGE9dG1wfWVsc2V7aWYob2JqTmFtZSE9PSJbb2JqZWN0IEFycmF5XSIpe2Vycj0xfWZvcihpPTA7aTxkYXRhLmxlbmd0aCYmIWVycjtpKyspe2lmKHR5cGVvZiBkYXRhW2ldIT09Im51bWJlciIpe2Vycj0xfX19aWYoIWVycil7aWYoZXN0aW1hdGVkRW50cm9weT09PXVuZGVmaW5lZCl7ZXN0aW1hdGVkRW50cm9weT0wO2ZvcihpPTA7aTxkYXRhLmxlbmd0aDtpKyspe3RtcD1kYXRhW2ldO3doaWxlKHRtcD4wKXtlc3RpbWF0ZWRFbnRyb3B5Kys7dG1wPXRtcD4+PjF9fX10aGlzLl9wb29sc1tyb2Jpbl0udXBkYXRlKFtpZCx0aGlzLl9ldmVudElkKyssMixlc3RpbWF0ZWRFbnRyb3B5LHQsZGF0YS5sZW5ndGhdLmNvbmNhdChkYXRhKSl9YnJlYWs7Y2FzZSJzdHJpbmciOmlmKGVzdGltYXRlZEVudHJvcHk9PT11bmRlZmluZWQpe2VzdGltYXRlZEVudHJvcHk9ZGF0YS5sZW5ndGh9dGhpcy5fcG9vbHNbcm9iaW5dLnVwZGF0ZShbaWQsdGhpcy5fZXZlbnRJZCsrLDMsZXN0aW1hdGVkRW50cm9weSx0LGRhdGEubGVuZ3RoXSk7dGhpcy5fcG9vbHNbcm9iaW5dLnVwZGF0ZShkYXRhKTticmVhaztkZWZhdWx0OmVycj0xfWlmKGVycil7dGhyb3cgbmV3IHNqY2wuZXhjZXB0aW9uLmJ1ZygicmFuZG9tOiBhZGRFbnRyb3B5IG9ubHkgc3VwcG9ydHMgbnVtYmVyLCBhcnJheSBvZiBudW1iZXJzIG9yIHN0cmluZyIpfXRoaXMuX3Bvb2xFbnRyb3B5W3JvYmluXSs9ZXN0aW1hdGVkRW50cm9weTt0aGlzLl9wb29sU3RyZW5ndGgrPWVzdGltYXRlZEVudHJvcHk7aWYob2xkUmVhZHk9PT10aGlzLl9OT1RfUkVBRFkpe2lmKHRoaXMuaXNSZWFkeSgpIT09dGhpcy5fTk9UX1JFQURZKXt0aGlzLl9maXJlRXZlbnQoInNlZWRlZCIsTWF0aC5tYXgodGhpcy5fc3RyZW5ndGgsdGhpcy5fcG9vbFN0cmVuZ3RoKSl9dGhpcy5fZmlyZUV2ZW50KCJwcm9ncmVzcyIsdGhpcy5nZXRQcm9ncmVzcygpKX19LGlzUmVhZHk6ZnVuY3Rpb24ocGFyYW5vaWEpe3ZhciBlbnRyb3B5UmVxdWlyZWQ9dGhpcy5fUEFSQU5PSUFfTEVWRUxTW3BhcmFub2lhIT09dW5kZWZpbmVkP3BhcmFub2lhOnRoaXMuX2RlZmF1bHRQYXJhbm9pYV07aWYodGhpcy5fc3RyZW5ndGgmJnRoaXMuX3N0cmVuZ3RoPj1lbnRyb3B5UmVxdWlyZWQpe3JldHVybiB0aGlzLl9wb29sRW50cm9weVswXT50aGlzLl9CSVRTX1BFUl9SRVNFRUQmJihuZXcgRGF0ZSkudmFsdWVPZigpPnRoaXMuX25leHRSZXNlZWQ/dGhpcy5fUkVRVUlSRVNfUkVTRUVEfHRoaXMuX1JFQURZOnRoaXMuX1JFQURZfWVsc2V7cmV0dXJuIHRoaXMuX3Bvb2xTdHJlbmd0aD49ZW50cm9weVJlcXVpcmVkP3RoaXMuX1JFUVVJUkVTX1JFU0VFRHx0aGlzLl9OT1RfUkVBRFk6dGhpcy5fTk9UX1JFQURZfX0sZ2V0UHJvZ3Jlc3M6ZnVuY3Rpb24ocGFyYW5vaWEpe3ZhciBlbnRyb3B5UmVxdWlyZWQ9dGhpcy5fUEFSQU5PSUFfTEVWRUxTW3BhcmFub2lhP3BhcmFub2lhOnRoaXMuX2RlZmF1bHRQYXJhbm9pYV07aWYodGhpcy5fc3RyZW5ndGg+PWVudHJvcHlSZXF1aXJlZCl7cmV0dXJuIDF9ZWxzZXtyZXR1cm4gdGhpcy5fcG9vbFN0cmVuZ3RoPmVudHJvcHlSZXF1aXJlZD8xOnRoaXMuX3Bvb2xTdHJlbmd0aC9lbnRyb3B5UmVxdWlyZWR9fSxzdGFydENvbGxlY3RvcnM6ZnVuY3Rpb24oKXtpZih0aGlzLl9jb2xsZWN0b3JzU3RhcnRlZCl7cmV0dXJufXRoaXMuX2V2ZW50TGlzdGVuZXI9e2xvYWRUaW1lQ29sbGVjdG9yOnRoaXMuX2JpbmQodGhpcy5fbG9hZFRpbWVDb2xsZWN0b3IpLG1vdXNlQ29sbGVjdG9yOnRoaXMuX2JpbmQodGhpcy5fbW91c2VDb2xsZWN0b3IpLGtleWJvYXJkQ29sbGVjdG9yOnRoaXMuX2JpbmQodGhpcy5fa2V5Ym9hcmRDb2xsZWN0b3IpLGFjY2VsZXJvbWV0ZXJDb2xsZWN0b3I6dGhpcy5fYmluZCh0aGlzLl9hY2NlbGVyb21ldGVyQ29sbGVjdG9yKSx0b3VjaENvbGxlY3Rvcjp0aGlzLl9iaW5kKHRoaXMuX3RvdWNoQ29sbGVjdG9yKX07aWYod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJsb2FkIix0aGlzLl9ldmVudExpc3RlbmVyLmxvYWRUaW1lQ29sbGVjdG9yLGZhbHNlKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibW91c2Vtb3ZlIix0aGlzLl9ldmVudExpc3RlbmVyLm1vdXNlQ29sbGVjdG9yLGZhbHNlKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigia2V5cHJlc3MiLHRoaXMuX2V2ZW50TGlzdGVuZXIua2V5Ym9hcmRDb2xsZWN0b3IsZmFsc2UpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJkZXZpY2Vtb3Rpb24iLHRoaXMuX2V2ZW50TGlzdGVuZXIuYWNjZWxlcm9tZXRlckNvbGxlY3RvcixmYWxzZSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoInRvdWNobW92ZSIsdGhpcy5fZXZlbnRMaXN0ZW5lci50b3VjaENvbGxlY3RvcixmYWxzZSl9ZWxzZSBpZihkb2N1bWVudC5hdHRhY2hFdmVudCl7ZG9jdW1lbnQuYXR0YWNoRXZlbnQoIm9ubG9hZCIsdGhpcy5fZXZlbnRMaXN0ZW5lci5sb2FkVGltZUNvbGxlY3Rvcik7ZG9jdW1lbnQuYXR0YWNoRXZlbnQoIm9ubW91c2Vtb3ZlIix0aGlzLl9ldmVudExpc3RlbmVyLm1vdXNlQ29sbGVjdG9yKTtkb2N1bWVudC5hdHRhY2hFdmVudCgia2V5cHJlc3MiLHRoaXMuX2V2ZW50TGlzdGVuZXIua2V5Ym9hcmRDb2xsZWN0b3IpfWVsc2V7dGhyb3cgbmV3IHNqY2wuZXhjZXB0aW9uLmJ1ZygiY2FuJ3QgYXR0YWNoIGV2ZW50Iil9dGhpcy5fY29sbGVjdG9yc1N0YXJ0ZWQ9dHJ1ZX0sc3RvcENvbGxlY3RvcnM6ZnVuY3Rpb24oKXtpZighdGhpcy5fY29sbGVjdG9yc1N0YXJ0ZWQpe3JldHVybn1pZih3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcil7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoImxvYWQiLHRoaXMuX2V2ZW50TGlzdGVuZXIubG9hZFRpbWVDb2xsZWN0b3IsZmFsc2UpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCJtb3VzZW1vdmUiLHRoaXMuX2V2ZW50TGlzdGVuZXIubW91c2VDb2xsZWN0b3IsZmFsc2UpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCJrZXlwcmVzcyIsdGhpcy5fZXZlbnRMaXN0ZW5lci5rZXlib2FyZENvbGxlY3RvcixmYWxzZSk7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoImRldmljZW1vdGlvbiIsdGhpcy5fZXZlbnRMaXN0ZW5lci5hY2NlbGVyb21ldGVyQ29sbGVjdG9yLGZhbHNlKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigidG91Y2htb3ZlIix0aGlzLl9ldmVudExpc3RlbmVyLnRvdWNoQ29sbGVjdG9yLGZhbHNlKX1lbHNlIGlmKGRvY3VtZW50LmRldGFjaEV2ZW50KXtkb2N1bWVudC5kZXRhY2hFdmVudCgib25sb2FkIix0aGlzLl9ldmVudExpc3RlbmVyLmxvYWRUaW1lQ29sbGVjdG9yKTtkb2N1bWVudC5kZXRhY2hFdmVudCgib25tb3VzZW1vdmUiLHRoaXMuX2V2ZW50TGlzdGVuZXIubW91c2VDb2xsZWN0b3IpO2RvY3VtZW50LmRldGFjaEV2ZW50KCJrZXlwcmVzcyIsdGhpcy5fZXZlbnRMaXN0ZW5lci5rZXlib2FyZENvbGxlY3Rvcil9dGhpcy5fY29sbGVjdG9yc1N0YXJ0ZWQ9ZmFsc2V9LGFkZEV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24obmFtZSxjYWxsYmFjayl7dGhpcy5fY2FsbGJhY2tzW25hbWVdW3RoaXMuX2NhbGxiYWNrSSsrXT1jYWxsYmFja30scmVtb3ZlRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbihuYW1lLGNiKXt2YXIgaSxqLGNicz10aGlzLl9jYWxsYmFja3NbbmFtZV0sanNUZW1wPVtdO2ZvcihqIGluIGNicyl7aWYoY2JzLmhhc093blByb3BlcnR5KGopJiZjYnNbal09PT1jYil7anNUZW1wLnB1c2goail9fWZvcihpPTA7aTxqc1RlbXAubGVuZ3RoO2krKyl7aj1qc1RlbXBbaV07ZGVsZXRlIGNic1tqXX19LF9iaW5kOmZ1bmN0aW9uKGZ1bmMpe3ZhciB0aGF0PXRoaXM7cmV0dXJuIGZ1bmN0aW9uKCl7ZnVuYy5hcHBseSh0aGF0LGFyZ3VtZW50cyl9fSxfZ2VuNHdvcmRzOmZ1bmN0aW9uKCl7Zm9yKHZhciBpPTA7aTw0O2krKyl7dGhpcy5fY291bnRlcltpXT10aGlzLl9jb3VudGVyW2ldKzF8MDtpZih0aGlzLl9jb3VudGVyW2ldKXticmVha319cmV0dXJuIHRoaXMuX2NpcGhlci5lbmNyeXB0KHRoaXMuX2NvdW50ZXIpfSxfZ2F0ZTpmdW5jdGlvbigpe3RoaXMuX2tleT10aGlzLl9nZW40d29yZHMoKS5jb25jYXQodGhpcy5fZ2VuNHdvcmRzKCkpO3RoaXMuX2NpcGhlcj1uZXcgc2pjbC5jaXBoZXIuYWVzKHRoaXMuX2tleSl9LF9yZXNlZWQ6ZnVuY3Rpb24oc2VlZFdvcmRzKXt0aGlzLl9rZXk9c2pjbC5oYXNoLnNoYTI1Ni5oYXNoKHRoaXMuX2tleS5jb25jYXQoc2VlZFdvcmRzKSk7dGhpcy5fY2lwaGVyPW5ldyBzamNsLmNpcGhlci5hZXModGhpcy5fa2V5KTtmb3IodmFyIGk9MDtpPDQ7aSsrKXt0aGlzLl9jb3VudGVyW2ldPXRoaXMuX2NvdW50ZXJbaV0rMXwwO2lmKHRoaXMuX2NvdW50ZXJbaV0pe2JyZWFrfX19LF9yZXNlZWRGcm9tUG9vbHM6ZnVuY3Rpb24oZnVsbCl7dmFyIHJlc2VlZERhdGE9W10sc3RyZW5ndGg9MCxpO3RoaXMuX25leHRSZXNlZWQ9cmVzZWVkRGF0YVswXT0obmV3IERhdGUpLnZhbHVlT2YoKSt0aGlzLl9NSUxMSVNFQ09ORFNfUEVSX1JFU0VFRDtmb3IoaT0wO2k8MTY7aSsrKXtyZXNlZWREYXRhLnB1c2goTWF0aC5yYW5kb20oKSo0Mjk0OTY3Mjk2fDApfWZvcihpPTA7aTx0aGlzLl9wb29scy5sZW5ndGg7aSsrKXtyZXNlZWREYXRhPXJlc2VlZERhdGEuY29uY2F0KHRoaXMuX3Bvb2xzW2ldLmZpbmFsaXplKCkpO3N0cmVuZ3RoKz10aGlzLl9wb29sRW50cm9weVtpXTt0aGlzLl9wb29sRW50cm9weVtpXT0wO2lmKCFmdWxsJiZ0aGlzLl9yZXNlZWRDb3VudCYxPDxpKXticmVha319aWYodGhpcy5fcmVzZWVkQ291bnQ+PTE8PHRoaXMuX3Bvb2xzLmxlbmd0aCl7dGhpcy5fcG9vbHMucHVzaChuZXcgc2pjbC5oYXNoLnNoYTI1Nik7dGhpcy5fcG9vbEVudHJvcHkucHVzaCgwKX10aGlzLl9wb29sU3RyZW5ndGgtPXN0cmVuZ3RoO2lmKHN0cmVuZ3RoPnRoaXMuX3N0cmVuZ3RoKXt0aGlzLl9zdHJlbmd0aD1zdHJlbmd0aH10aGlzLl9yZXNlZWRDb3VudCsrO3RoaXMuX3Jlc2VlZChyZXNlZWREYXRhKX0sX2tleWJvYXJkQ29sbGVjdG9yOmZ1bmN0aW9uKCl7dGhpcy5fYWRkQ3VycmVudFRpbWVUb0VudHJvcHkoMSl9LF9tb3VzZUNvbGxlY3RvcjpmdW5jdGlvbihldil7dmFyIHgseTt0cnl7eD1ldi54fHxldi5jbGllbnRYfHxldi5vZmZzZXRYfHwwO3k9ZXYueXx8ZXYuY2xpZW50WXx8ZXYub2Zmc2V0WXx8MH1jYXRjaChlcnIpe3g9MDt5PTB9aWYoeCE9MCYmeSE9MCl7dGhpcy5hZGRFbnRyb3B5KFt4LHldLDIsIm1vdXNlIil9dGhpcy5fYWRkQ3VycmVudFRpbWVUb0VudHJvcHkoMCl9LF90b3VjaENvbGxlY3RvcjpmdW5jdGlvbihldil7dmFyIHRvdWNoPWV2LnRvdWNoZXNbMF18fGV2LmNoYW5nZWRUb3VjaGVzWzBdO3ZhciB4PXRvdWNoLnBhZ2VYfHx0b3VjaC5jbGllbnRYLHk9dG91Y2gucGFnZVl8fHRvdWNoLmNsaWVudFk7dGhpcy5hZGRFbnRyb3B5KFt4LHldLDEsInRvdWNoIik7dGhpcy5fYWRkQ3VycmVudFRpbWVUb0VudHJvcHkoMCl9LF9sb2FkVGltZUNvbGxlY3RvcjpmdW5jdGlvbigpe3RoaXMuX2FkZEN1cnJlbnRUaW1lVG9FbnRyb3B5KDIpfSxfYWRkQ3VycmVudFRpbWVUb0VudHJvcHk6ZnVuY3Rpb24oZXN0aW1hdGVkRW50cm9weSl7aWYodHlwZW9mIHdpbmRvdyE9PSJ1bmRlZmluZWQiJiZ3aW5kb3cucGVyZm9ybWFuY2UmJnR5cGVvZiB3aW5kb3cucGVyZm9ybWFuY2Uubm93PT09ImZ1bmN0aW9uIil7dGhpcy5hZGRFbnRyb3B5KHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSxlc3RpbWF0ZWRFbnRyb3B5LCJsb2FkdGltZSIpfWVsc2V7dGhpcy5hZGRFbnRyb3B5KChuZXcgRGF0ZSkudmFsdWVPZigpLGVzdGltYXRlZEVudHJvcHksImxvYWR0aW1lIil9fSxfYWNjZWxlcm9tZXRlckNvbGxlY3RvcjpmdW5jdGlvbihldil7dmFyIGFjPWV2LmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueHx8ZXYuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS55fHxldi5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5Lno7aWYod2luZG93Lm9yaWVudGF0aW9uKXt2YXIgb3I9d2luZG93Lm9yaWVudGF0aW9uO2lmKHR5cGVvZiBvcj09PSJudW1iZXIiKXt0aGlzLmFkZEVudHJvcHkob3IsMSwiYWNjZWxlcm9tZXRlciIpfX1pZihhYyl7dGhpcy5hZGRFbnRyb3B5KGFjLDIsImFjY2VsZXJvbWV0ZXIiKX10aGlzLl9hZGRDdXJyZW50VGltZVRvRW50cm9weSgwKX0sX2ZpcmVFdmVudDpmdW5jdGlvbihuYW1lLGFyZyl7dmFyIGosY2JzPXNqY2wucmFuZG9tLl9jYWxsYmFja3NbbmFtZV0sY2JzVGVtcD1bXTtmb3IoaiBpbiBjYnMpe2lmKGNicy5oYXNPd25Qcm9wZXJ0eShqKSl7Y2JzVGVtcC5wdXNoKGNic1tqXSl9fWZvcihqPTA7ajxjYnNUZW1wLmxlbmd0aDtqKyspe2Nic1RlbXBbal0oYXJnKX19fTtzamNsLnJhbmRvbT1uZXcgc2pjbC5wcm5nKDYpOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGdldENyeXB0b01vZHVsZSgpe3RyeXtyZXR1cm4gcmVxdWlyZSgiY3J5cHRvIil9Y2F0Y2goZSl7cmV0dXJuIG51bGx9fXRyeXt2YXIgYnVmLGNyeXB0LGFiO2lmKHR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIiYmbW9kdWxlLmV4cG9ydHMmJihjcnlwdD1nZXRDcnlwdG9Nb2R1bGUoKSkmJmNyeXB0LnJhbmRvbUJ5dGVzKXtidWY9Y3J5cHQucmFuZG9tQnl0ZXMoMTAyNC84KTtidWY9bmV3IFVpbnQzMkFycmF5KG5ldyBVaW50OEFycmF5KGJ1ZikuYnVmZmVyKTtzamNsLnJhbmRvbS5hZGRFbnRyb3B5KGJ1ZiwxMDI0LCJjcnlwdG8ucmFuZG9tQnl0ZXMiKX1lbHNlIGlmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIiYmdHlwZW9mIFVpbnQzMkFycmF5IT09InVuZGVmaW5lZCIpe2FiPW5ldyBVaW50MzJBcnJheSgzMik7aWYod2luZG93LmNyeXB0byYmd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpe3dpbmRvdy5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFiKX1lbHNlIGlmKHdpbmRvdy5tc0NyeXB0byYmd2luZG93Lm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyl7d2luZG93Lm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhYil9ZWxzZXtyZXR1cm59c2pjbC5yYW5kb20uYWRkRW50cm9weShhYiwxMDI0LCJjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzIil9ZWxzZXt9fWNhdGNoKGUpe2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIiYmd2luZG93LmNvbnNvbGUpe2NvbnNvbGUubG9nKCJUaGVyZSB3YXMgYW4gZXJyb3IgY29sbGVjdGluZyBlbnRyb3B5IGZyb20gdGhlIGJyb3dzZXI6Iik7Y29uc29sZS5sb2coZSl9fX0pKCk7c2pjbC5qc29uPXtkZWZhdWx0czp7djoxLGl0ZXI6MWU0LGtzOjEyOCx0czo2NCxtb2RlOiJjY20iLGFkYXRhOiIiLGNpcGhlcjoiYWVzIn0sX2VuY3J5cHQ6ZnVuY3Rpb24ocGFzc3dvcmQscGxhaW50ZXh0LHBhcmFtcyxycCl7cGFyYW1zPXBhcmFtc3x8e307cnA9cnB8fHt9O3ZhciBqPXNqY2wuanNvbixwPWouX2FkZCh7aXY6c2pjbC5yYW5kb20ucmFuZG9tV29yZHMoNCwwKX0sai5kZWZhdWx0cyksdG1wLHBycCxhZGF0YTtqLl9hZGQocCxwYXJhbXMpO2FkYXRhPXAuYWRhdGE7aWYodHlwZW9mIHAuc2FsdD09PSJzdHJpbmciKXtwLnNhbHQ9c2pjbC5jb2RlYy5iYXNlNjQudG9CaXRzKHAuc2FsdCl9aWYodHlwZW9mIHAuaXY9PT0ic3RyaW5nIil7cC5pdj1zamNsLmNvZGVjLmJhc2U2NC50b0JpdHMocC5pdil9aWYoIXNqY2wubW9kZVtwLm1vZGVdfHwhc2pjbC5jaXBoZXJbcC5jaXBoZXJdfHx0eXBlb2YgcGFzc3dvcmQ9PT0ic3RyaW5nIiYmcC5pdGVyPD0xMDB8fHAudHMhPT02NCYmcC50cyE9PTk2JiZwLnRzIT09MTI4fHxwLmtzIT09MTI4JiZwLmtzIT09MTkyJiZwLmtzIT09MjU2fHwocC5pdi5sZW5ndGg8Mnx8cC5pdi5sZW5ndGg+NCkpe3Rocm93IG5ldyBzamNsLmV4Y2VwdGlvbi5pbnZhbGlkKCJqc29uIGVuY3J5cHQ6IGludmFsaWQgcGFyYW1ldGVycyIpfWlmKHR5cGVvZiBwYXNzd29yZD09PSJzdHJpbmciKXt0bXA9c2pjbC5taXNjLmNhY2hlZFBia2RmMihwYXNzd29yZCxwKTtwYXNzd29yZD10bXAua2V5LnNsaWNlKDAscC5rcy8zMik7cC5zYWx0PXRtcC5zYWx0fWVsc2UgaWYoc2pjbC5lY2MmJnBhc3N3b3JkIGluc3RhbmNlb2Ygc2pjbC5lY2MuZWxHYW1hbC5wdWJsaWNLZXkpe3RtcD1wYXNzd29yZC5rZW0oKTtwLmtlbXRhZz10bXAudGFnO3Bhc3N3b3JkPXRtcC5rZXkuc2xpY2UoMCxwLmtzLzMyKX1pZih0eXBlb2YgcGxhaW50ZXh0PT09InN0cmluZyIpe3BsYWludGV4dD1zamNsLmNvZGVjLnV0ZjhTdHJpbmcudG9CaXRzKHBsYWludGV4dCl9aWYodHlwZW9mIGFkYXRhPT09InN0cmluZyIpe3AuYWRhdGE9YWRhdGE9c2pjbC5jb2RlYy51dGY4U3RyaW5nLnRvQml0cyhhZGF0YSl9cHJwPW5ldyBzamNsLmNpcGhlcltwLmNpcGhlcl0ocGFzc3dvcmQpO2ouX2FkZChycCxwKTtycC5rZXk9cGFzc3dvcmQ7aWYocC5tb2RlPT09ImNjbSImJnNqY2wuYXJyYXlCdWZmZXImJnNqY2wuYXJyYXlCdWZmZXIuY2NtJiZwbGFpbnRleHQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil7cC5jdD1zamNsLmFycmF5QnVmZmVyLmNjbS5lbmNyeXB0KHBycCxwbGFpbnRleHQscC5pdixhZGF0YSxwLnRzKX1lbHNle3AuY3Q9c2pjbC5tb2RlW3AubW9kZV0uZW5jcnlwdChwcnAscGxhaW50ZXh0LHAuaXYsYWRhdGEscC50cyl9cmV0dXJuIHB9LGVuY3J5cHQ6ZnVuY3Rpb24ocGFzc3dvcmQscGxhaW50ZXh0LHBhcmFtcyxycCl7dmFyIGo9c2pjbC5qc29uLHA9ai5fZW5jcnlwdC5hcHBseShqLGFyZ3VtZW50cyk7cmV0dXJuIGouZW5jb2RlKHApfSxfZGVjcnlwdDpmdW5jdGlvbihwYXNzd29yZCxjaXBoZXJ0ZXh0LHBhcmFtcyxycCl7cGFyYW1zPXBhcmFtc3x8e307cnA9cnB8fHt9O3ZhciBqPXNqY2wuanNvbixwPWouX2FkZChqLl9hZGQoai5fYWRkKHt9LGouZGVmYXVsdHMpLGNpcGhlcnRleHQpLHBhcmFtcyx0cnVlKSxjdCx0bXAscHJwLGFkYXRhPXAuYWRhdGE7aWYodHlwZW9mIHAuc2FsdD09PSJzdHJpbmciKXtwLnNhbHQ9c2pjbC5jb2RlYy5iYXNlNjQudG9CaXRzKHAuc2FsdCl9aWYodHlwZW9mIHAuaXY9PT0ic3RyaW5nIil7cC5pdj1zamNsLmNvZGVjLmJhc2U2NC50b0JpdHMocC5pdil9aWYoIXNqY2wubW9kZVtwLm1vZGVdfHwhc2pjbC5jaXBoZXJbcC5jaXBoZXJdfHx0eXBlb2YgcGFzc3dvcmQ9PT0ic3RyaW5nIiYmcC5pdGVyPD0xMDB8fHAudHMhPT02NCYmcC50cyE9PTk2JiZwLnRzIT09MTI4fHxwLmtzIT09MTI4JiZwLmtzIT09MTkyJiZwLmtzIT09MjU2fHwhcC5pdnx8KHAuaXYubGVuZ3RoPDJ8fHAuaXYubGVuZ3RoPjQpKXt0aHJvdyBuZXcgc2pjbC5leGNlcHRpb24uaW52YWxpZCgianNvbiBkZWNyeXB0OiBpbnZhbGlkIHBhcmFtZXRlcnMiKX1pZih0eXBlb2YgcGFzc3dvcmQ9PT0ic3RyaW5nIil7dG1wPXNqY2wubWlzYy5jYWNoZWRQYmtkZjIocGFzc3dvcmQscCk7cGFzc3dvcmQ9dG1wLmtleS5zbGljZSgwLHAua3MvMzIpO3Auc2FsdD10bXAuc2FsdH1lbHNlIGlmKHNqY2wuZWNjJiZwYXNzd29yZCBpbnN0YW5jZW9mIHNqY2wuZWNjLmVsR2FtYWwuc2VjcmV0S2V5KXtwYXNzd29yZD1wYXNzd29yZC51bmtlbShzamNsLmNvZGVjLmJhc2U2NC50b0JpdHMocC5rZW10YWcpKS5zbGljZSgwLHAua3MvMzIpfWlmKHR5cGVvZiBhZGF0YT09PSJzdHJpbmciKXthZGF0YT1zamNsLmNvZGVjLnV0ZjhTdHJpbmcudG9CaXRzKGFkYXRhKX1wcnA9bmV3IHNqY2wuY2lwaGVyW3AuY2lwaGVyXShwYXNzd29yZCk7aWYocC5tb2RlPT09ImNjbSImJnNqY2wuYXJyYXlCdWZmZXImJnNqY2wuYXJyYXlCdWZmZXIuY2NtJiZwLmN0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpe2N0PXNqY2wuYXJyYXlCdWZmZXIuY2NtLmRlY3J5cHQocHJwLHAuY3QscC5pdixwLnRhZyxhZGF0YSxwLnRzKX1lbHNle2N0PXNqY2wubW9kZVtwLm1vZGVdLmRlY3J5cHQocHJwLHAuY3QscC5pdixhZGF0YSxwLnRzKX1qLl9hZGQocnAscCk7cnAua2V5PXBhc3N3b3JkO2lmKHBhcmFtcy5yYXc9PT0xKXtyZXR1cm4gY3R9ZWxzZXtyZXR1cm4gc2pjbC5jb2RlYy51dGY4U3RyaW5nLmZyb21CaXRzKGN0KX19LGRlY3J5cHQ6ZnVuY3Rpb24ocGFzc3dvcmQsY2lwaGVydGV4dCxwYXJhbXMscnApe3ZhciBqPXNqY2wuanNvbjtyZXR1cm4gai5fZGVjcnlwdChwYXNzd29yZCxqLmRlY29kZShjaXBoZXJ0ZXh0KSxwYXJhbXMscnApfSxlbmNvZGU6ZnVuY3Rpb24ob2JqKXt2YXIgaSxvdXQ9InsiLGNvbW1hPSIiO2ZvcihpIGluIG9iail7aWYob2JqLmhhc093blByb3BlcnR5KGkpKXtpZighaS5tYXRjaCgvXlthLXowLTldKyQvaSkpe3Rocm93IG5ldyBzamNsLmV4Y2VwdGlvbi5pbnZhbGlkKCJqc29uIGVuY29kZTogaW52YWxpZCBwcm9wZXJ0eSBuYW1lIil9b3V0Kz1jb21tYSsnIicraSsnIjonO2NvbW1hPSIsIjtzd2l0Y2godHlwZW9mIG9ialtpXSl7Y2FzZSJudW1iZXIiOmNhc2UiYm9vbGVhbiI6b3V0Kz1vYmpbaV07YnJlYWs7Y2FzZSJzdHJpbmciOm91dCs9JyInK2VzY2FwZShvYmpbaV0pKyciJzticmVhaztjYXNlIm9iamVjdCI6b3V0Kz0nIicrc2pjbC5jb2RlYy5iYXNlNjQuZnJvbUJpdHMob2JqW2ldLDApKyciJzticmVhaztkZWZhdWx0OnRocm93IG5ldyBzamNsLmV4Y2VwdGlvbi5idWcoImpzb24gZW5jb2RlOiB1bnN1cHBvcnRlZCB0eXBlIil9fX1yZXR1cm4gb3V0KyJ9In0sZGVjb2RlOmZ1bmN0aW9uKHN0cil7c3RyPXN0ci5yZXBsYWNlKC9ccy9nLCIiKTtpZighc3RyLm1hdGNoKC9eXHsuKn0kLykpe3Rocm93IG5ldyBzamNsLmV4Y2VwdGlvbi5pbnZhbGlkKCJqc29uIGRlY29kZTogdGhpcyBpc24ndCBqc29uISIpfXZhciBhPXN0ci5yZXBsYWNlKC9eXHt8fSQvZywiIikuc3BsaXQoLywvKSxvdXQ9e30saSxtO2ZvcihpPTA7aTxhLmxlbmd0aDtpKyspe2lmKCEobT1hW2ldLm1hdGNoKC9eXHMqKD86KFsiJ10/KShbYS16XVthLXowLTldKilcMSlccyo6XHMqKD86KC0/XGQrKXwiKFthLXowLTkrXC8lKl8uQD1cLV0qKSJ8KHRydWV8ZmFsc2UpKSQvaSkpKXt0aHJvdyBuZXcgc2pjbC5leGNlcHRpb24uaW52YWxpZCgianNvbiBkZWNvZGU6IHRoaXMgaXNuJ3QganNvbiEiKX1pZihtWzNdIT1udWxsKXtvdXRbbVsyXV09cGFyc2VJbnQobVszXSwxMCl9ZWxzZSBpZihtWzRdIT1udWxsKXtvdXRbbVsyXV09bVsyXS5tYXRjaCgvXihjdHxhZGF0YXxzYWx0fGl2KSQvKT9zamNsLmNvZGVjLmJhc2U2NC50b0JpdHMobVs0XSk6dW5lc2NhcGUobVs0XSl9ZWxzZSBpZihtWzVdIT1udWxsKXtvdXRbbVsyXV09bVs1XT09PSJ0cnVlIn19cmV0dXJuIG91dH0sX2FkZDpmdW5jdGlvbih0YXJnZXQsc3JjLHJlcXVpcmVTYW1lKXtpZih0YXJnZXQ9PT11bmRlZmluZWQpe3RhcmdldD17fX1pZihzcmM9PT11bmRlZmluZWQpe3JldHVybiB0YXJnZXR9dmFyIGk7Zm9yKGkgaW4gc3JjKXtpZihzcmMuaGFzT3duUHJvcGVydHkoaSkpe2lmKHJlcXVpcmVTYW1lJiZ0YXJnZXRbaV0hPT11bmRlZmluZWQmJnRhcmdldFtpXSE9PXNyY1tpXSl7dGhyb3cgbmV3IHNqY2wuZXhjZXB0aW9uLmludmFsaWQoInJlcXVpcmVkIHBhcmFtZXRlciBvdmVycmlkZGVuIil9dGFyZ2V0W2ldPXNyY1tpXX19cmV0dXJuIHRhcmdldH0sX3N1YnRyYWN0OmZ1bmN0aW9uKHBsdXMsbWludXMpe3ZhciBvdXQ9e30saTtmb3IoaSBpbiBwbHVzKXtpZihwbHVzLmhhc093blByb3BlcnR5KGkpJiZwbHVzW2ldIT09bWludXNbaV0pe291dFtpXT1wbHVzW2ldfX1yZXR1cm4gb3V0fSxfZmlsdGVyOmZ1bmN0aW9uKHNyYyxmaWx0ZXIpe3ZhciBvdXQ9e30saTtmb3IoaT0wO2k8ZmlsdGVyLmxlbmd0aDtpKyspe2lmKHNyY1tmaWx0ZXJbaV1dIT09dW5kZWZpbmVkKXtvdXRbZmlsdGVyW2ldXT1zcmNbZmlsdGVyW2ldXX19cmV0dXJuIG91dH19O3NqY2wuZW5jcnlwdD1zamNsLmpzb24uZW5jcnlwdDtzamNsLmRlY3J5cHQ9c2pjbC5qc29uLmRlY3J5cHQ7c2pjbC5taXNjLl9wYmtkZjJDYWNoZT17fTtzamNsLm1pc2MuY2FjaGVkUGJrZGYyPWZ1bmN0aW9uKHBhc3N3b3JkLG9iail7dmFyIGNhY2hlPXNqY2wubWlzYy5fcGJrZGYyQ2FjaGUsYyxjcCxzdHIsc2FsdCxpdGVyO29iaj1vYmp8fHt9O2l0ZXI9b2JqLml0ZXJ8fDFlMztjcD1jYWNoZVtwYXNzd29yZF09Y2FjaGVbcGFzc3dvcmRdfHx7fTtjPWNwW2l0ZXJdPWNwW2l0ZXJdfHx7Zmlyc3RTYWx0Om9iai5zYWx0JiZvYmouc2FsdC5sZW5ndGg/b2JqLnNhbHQuc2xpY2UoMCk6c2pjbC5yYW5kb20ucmFuZG9tV29yZHMoMiwwKX07c2FsdD1vYmouc2FsdD09PXVuZGVmaW5lZD9jLmZpcnN0U2FsdDpvYmouc2FsdDtjW3NhbHRdPWNbc2FsdF18fHNqY2wubWlzYy5wYmtkZjIocGFzc3dvcmQsc2FsdCxvYmouaXRlcik7cmV0dXJue2tleTpjW3NhbHRdLnNsaWNlKDApLHNhbHQ6c2FsdC5zbGljZSgwKX19O2lmKHR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIiYmbW9kdWxlLmV4cG9ydHMpe21vZHVsZS5leHBvcnRzPXNqY2x9aWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiIpe2RlZmluZShbXSxmdW5jdGlvbigpe3JldHVybiBzamNsfSl9CiAgICB2YXIgQmFzZTY0PXtfa2V5U3RyOiJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSIsZW5jb2RlOmZ1bmN0aW9uKGlucHV0KXt2YXIgb3V0cHV0PSIiO3ZhciBjaHIxLGNocjIsY2hyMyxlbmMxLGVuYzIsZW5jMyxlbmM0O3ZhciBpPTA7aW5wdXQ9QmFzZTY0Ll91dGY4X2VuY29kZShpbnB1dCk7d2hpbGUoaTxpbnB1dC5sZW5ndGgpe2NocjE9aW5wdXQuY2hhckNvZGVBdChpKyspO2NocjI9aW5wdXQuY2hhckNvZGVBdChpKyspO2NocjM9aW5wdXQuY2hhckNvZGVBdChpKyspO2VuYzE9Y2hyMT4+MjtlbmMyPShjaHIxJjMpPDw0fGNocjI+PjQ7ZW5jMz0oY2hyMiYxNSk8PDJ8Y2hyMz4+NjtlbmM0PWNocjMmNjM7aWYoaXNOYU4oY2hyMikpe2VuYzM9ZW5jND02NH1lbHNlIGlmKGlzTmFOKGNocjMpKXtlbmM0PTY0fW91dHB1dD1vdXRwdXQrdGhpcy5fa2V5U3RyLmNoYXJBdChlbmMxKSt0aGlzLl9rZXlTdHIuY2hhckF0KGVuYzIpK3RoaXMuX2tleVN0ci5jaGFyQXQoZW5jMykrdGhpcy5fa2V5U3RyLmNoYXJBdChlbmM0KX1yZXR1cm4gb3V0cHV0fSxkZWNvZGU6ZnVuY3Rpb24oaW5wdXQpe3ZhciBvdXRwdXQ9IiI7dmFyIGNocjEsY2hyMixjaHIzO3ZhciBlbmMxLGVuYzIsZW5jMyxlbmM0O3ZhciBpPTA7aW5wdXQ9aW5wdXQucmVwbGFjZSgvW15BLVphLXowLTlcK1wvXD1dL2csIiIpO3doaWxlKGk8aW5wdXQubGVuZ3RoKXtlbmMxPXRoaXMuX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmMyPXRoaXMuX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmMzPXRoaXMuX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtlbmM0PXRoaXMuX2tleVN0ci5pbmRleE9mKGlucHV0LmNoYXJBdChpKyspKTtjaHIxPWVuYzE8PDJ8ZW5jMj4+NDtjaHIyPShlbmMyJjE1KTw8NHxlbmMzPj4yO2NocjM9KGVuYzMmMyk8PDZ8ZW5jNDtvdXRwdXQ9b3V0cHV0K1N0cmluZy5mcm9tQ2hhckNvZGUoY2hyMSk7aWYoZW5jMyE9NjQpe291dHB1dD1vdXRwdXQrU3RyaW5nLmZyb21DaGFyQ29kZShjaHIyKX1pZihlbmM0IT02NCl7b3V0cHV0PW91dHB1dCtTdHJpbmcuZnJvbUNoYXJDb2RlKGNocjMpfX1vdXRwdXQ9QmFzZTY0Ll91dGY4X2RlY29kZShvdXRwdXQpO3JldHVybiBvdXRwdXR9LF91dGY4X2VuY29kZTpmdW5jdGlvbihzdHJpbmcpe3N0cmluZz1zdHJpbmcucmVwbGFjZSgvXHJcbi9nLCJcbiIpO3ZhciB1dGZ0ZXh0PSIiO2Zvcih2YXIgbj0wO248c3RyaW5nLmxlbmd0aDtuKyspe3ZhciBjPXN0cmluZy5jaGFyQ29kZUF0KG4pO2lmKGM8MTI4KXt1dGZ0ZXh0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGMpfWVsc2UgaWYoYz4xMjcmJmM8MjA0OCl7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjPj42fDE5Mik7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjJjYzfDEyOCl9ZWxzZXt1dGZ0ZXh0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGM+PjEyfDIyNCk7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjPj42JjYzfDEyOCk7dXRmdGV4dCs9U3RyaW5nLmZyb21DaGFyQ29kZShjJjYzfDEyOCl9fXJldHVybiB1dGZ0ZXh0fSxfdXRmOF9kZWNvZGU6ZnVuY3Rpb24odXRmdGV4dCl7dmFyIHN0cmluZz0iIjt2YXIgaT0wO3ZhciBjPWMxPWMyPTA7d2hpbGUoaTx1dGZ0ZXh0Lmxlbmd0aCl7Yz11dGZ0ZXh0LmNoYXJDb2RlQXQoaSk7aWYoYzwxMjgpe3N0cmluZys9U3RyaW5nLmZyb21DaGFyQ29kZShjKTtpKyt9ZWxzZSBpZihjPjE5MSYmYzwyMjQpe2MyPXV0ZnRleHQuY2hhckNvZGVBdChpKzEpO3N0cmluZys9U3RyaW5nLmZyb21DaGFyQ29kZSgoYyYzMSk8PDZ8YzImNjMpO2krPTJ9ZWxzZXtjMj11dGZ0ZXh0LmNoYXJDb2RlQXQoaSsxKTtjMz11dGZ0ZXh0LmNoYXJDb2RlQXQoaSsyKTtzdHJpbmcrPVN0cmluZy5mcm9tQ2hhckNvZGUoKGMmMTUpPDwxMnwoYzImNjMpPDw2fGMzJjYzKTtpKz0zfX1yZXR1cm4gc3RyaW5nfX07CgogICAgICBsb2dnZXIubWVzc2FnZSgiQ29sbGVjdCBBbmQgRW5jcnlwdCBDdXN0b20gUGFzc3dvcmQ6IHN0YXJ0Iik7CiAgICBvdXRjb21lID0gInRydWUiOwogIAogICAgLyogQmVnaW4gQ29uZmlndXJhdGlvbiAqLwogICAgICAKICAgICAgLy8gQXR0cmlidXRlIG5hbWUKICAgICAgdmFyIGlkbUF0dHJOYW1lID0gImZyVW5pbmRleGVkU3RyaW5nMiI7IC8vIEFNOiAiZnItYXR0ci1zdHIyIgogICAgICAKICAgICAgLy8gUGljayBhIHNoYXJlZCBzZWNyZXQgdG8gdXNlIGZvciBlbmNyeXB0aW9uIGFuZCBkZWNyeXB0aW9uCiAgICB2YXIgc2hhcmVkU2VjcmV0ID0gIlJhaW5ib3dQb25pZXNIYXZlTm9TdHJpcGVzIjsKCiAgICAgIC8vIEZpbmUtdHVuZSBlbmNyeXB0aW9uIHNldHRpbmdzLiBEZWZhdWx0IGl0ZXJhdGlvbnMgYXJlIDEwaywgdG8gc3BlZWQgdXAgdGhlIHByb2Nlc3MsIGl0J3MgcmVkdWNlZCB0byAxayBoZXJlLgogICAgICB2YXIgZW5jcnlwdGlvblBhcmFtZXRlcnMgPSB7ICJpdGVyIiA6IDEwMDAgfTsKICAgICAgCiAgICAvLyBCdWlsZCBvdXQgdGhlIHBhc3N3b3JkIHByb21wdAogICAgdmFyIHByb21wdCA9ICJSZXBsYXkgUGFzc3dvcmQiOwoKICAgIC8qIEVuZCBDb25maWd1cmF0aW9uICovCiAgCiAgICB2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICAgICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5QYXNzd29yZENhbGxiYWNrLAogICAgICAgICAgamF2YS5sYW5nLlN0cmluZwogICAgKQogICAgCiAgICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5zZW5kKAogICAgICAgICAgbmV3IGZyLlBhc3N3b3JkQ2FsbGJhY2socHJvbXB0LCBmYWxzZSkKICAgICAgICApLmJ1aWxkKCk7CiAgICB9IAogICAgZWxzZSB7CiAgICAgICAgICAvLyBQYXNzd29yZENhbGxiYWNrIHJldHVybnMgdGhlIHBhc3N3b3JkIGFzIGEgY2hhcltdLCB3aGljaCBpcyBub3QgdGhlIHNhbWUgYXMgYSBKUyBjaGFyIGFycmF5LiBJdCBtdXN0IGJlIGNvbnZlcnRlZCB0byBhIHByb3BlciBzdHJpbmcgdXNpbmcgdGhlIGphdmEubGFuZy5TdGluZy52YWx1ZU9mKGNoYXJbXSkgbWV0aG9kLgogICAgICAgIHZhciBwYXNzd29yZCA9IG5ldyBTdHJpbmcoZnIuU3RyaW5nLnZhbHVlT2YoY2FsbGJhY2tzLmdldCgwKS5nZXRQYXNzd29yZCgpKSk7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIkNvbGxlY3QgQW5kIEVuY3J5cHQgQ3VzdG9tIFBhc3N3b3JkOiBjYWxsYmFja3MgcmVjZWl2ZWQiKTsKCiAgICAgICAgICAvKgogICAgICAgIHZhciBjaXBoZXJQYXNzd29yZEpzb24gPSBzamNsLmVuY3J5cHQoc2hhcmVkU2VjcmV0LCBwYXNzd29yZCwgZW5jcnlwdGlvblBhcmFtZXRlcnMpOwogICAgICAgIC8vc2V0U2hhcmVkT2JqZWN0QXR0cmlidXRlKGlkbUF0dHJOYW1lLCBCYXNlNjQuZW5jb2RlKEpTT04uc3RyaW5naWZ5KGNpcGhlclBhc3N3b3JkSnNvbikpKTsKICAgICAgICBzZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUoaWRtQXR0ck5hbWUsIEpTT04uc3RyaW5naWZ5KGNpcGhlclBhc3N3b3JkSnNvbikpOwogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJDb2xsZWN0IEFuZCBFbmNyeXB0IEN1c3RvbSBQYXNzd29yZDogY2lwaGVyUGFzc3dvcmRKc29uPSIrSlNPTi5zdHJpbmdpZnkoY2lwaGVyUGFzc3dvcmRKc29uKSk7CiAgICAgICAgKi8KICAgICAgCiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIkNvbGxlY3QgQW5kIEVuY3J5cHQgQ3VzdG9tIFBhc3N3b3JkOiBwYXNzd29yZD0iK0Jhc2U2NC5lbmNvZGUocGFzc3dvcmQpKTsKICAgICAgICBzZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUoaWRtQXR0ck5hbWUsIEJhc2U2NC5lbmNvZGUocGFzc3dvcmQpKTsKCiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIkNvbGxlY3QgQW5kIEVuY3J5cHQgQ3VzdG9tIFBhc3N3b3JkOiBmaW5pc2ggW291dGNvbWU9Ii5jb25jYXQob3V0Y29tZSkuY29uY2F0KCJdIikpOwogICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKG91dGNvbWUpLmJ1aWxkKCk7CiAgICB9CgogICAgLyoKICAgICAqIFN0b3JlIGF0dHJpYnV0ZXMgaW4gc2hhcmVkIHN0YXRlIGZvciB1c2Ugd2l0aCB0aGUgQ3JlYXRlL1BhdGNoIE9iamVjdCBub2Rlcy4KICAgICAqLwogICAgZnVuY3Rpb24gc2V0U2hhcmVkT2JqZWN0QXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7CiAgICAgICAgdmFyIHN0b3JhZ2UgPSBzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKTsKICAgICAgICBpZiAoc3RvcmFnZSAmJiB2YWx1ZSkgewogICAgICAgICAgICBpZiAoc3RvcmFnZS5wdXQpIHsKICAgICAgICAgICAgICAgICAgc3RvcmFnZS5wdXQobmFtZSwgdmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgc3RvcmFnZVtuYW1lXSA9IHZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKHZhbHVlKSB7CiAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IHsKICAgICAgICAgICAgICAgICAgbmFtZTogdmFsdWUKICAgICAgICAgICAgfTsKICAgICAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwgb2JqZWN0KTsKICAgICAgICAgICAgLy9zaGFyZWRTdGF0ZS5wdXQoIm9iamVjdEF0dHJpYnV0ZXMiLCBKU09OLnBhcnNlKCJ7XCIiK25hbWUrIlwiOlwiIit2YWx1ZSsiXCJ9IikpOwogICAgICAgIH0KICAgIH0KfSgpKTsKLyogU0pDTCBpcyBvcGVuLiBZb3UgY2FuIHVzZSwgbW9kaWZ5IGFuZCByZWRpc3RyaWJ1dGUgaXQgdW5kZXIgYSBCU0QKbGljZW5zZSBvciB1bmRlciB0aGUgR05VIEdQTCwgdmVyc2lvbiAyLjAuCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMi1DbGF1c2UKCkNvcHlyaWdodCAoYykgMjAwOS0yMDE1LCBFbWlseSBTdGFyaywgTWlrZSBIYW1idXJnIGFuZCBEYW4gQm9uZWggYXQKU3RhbmZvcmQgVW5pdmVyc2l0eS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KClJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dAptb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlCm1ldDoKCjEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0Cm5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KCjIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0Cm5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUKZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KClRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTCklTIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRApUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEKUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUCkhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwKU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEClRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IKUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORwpORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMKU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCgotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9HUEwtMi4wCgpUaGUgU3RhbmZvcmQgSmF2YXNjcmlwdCBDcnlwdG8gTGlicmFyeSAoaG9zdGVkIGhlcmUgb24gR2l0SHViKSBpcyBhCnByb2plY3QgYnkgdGhlIFN0YW5mb3JkIENvbXB1dGVyIFNlY3VyaXR5IExhYiB0byBidWlsZCBhIHNlY3VyZSwKcG93ZXJmdWwsIGZhc3QsIHNtYWxsLCBlYXN5LXRvLXVzZSwgY3Jvc3MtYnJvd3NlciBsaWJyYXJ5IGZvcgpjcnlwdG9ncmFwaHkgaW4gSmF2YXNjcmlwdC4KCkNvcHlyaWdodCAoYykgMjAwOS0yMDE1LCBFbWlseSBTdGFyaywgTWlrZSBIYW1idXJnIGFuZCBEYW4gQm9uZWggYXQKU3RhbmZvcmQgVW5pdmVyc2l0eS4KClRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0CnVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZQpGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDIgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyCm9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgpUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0CldJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVSBHZW5lcmFsClB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCgpZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhbG9uZwp3aXRoIHRoaXMgcHJvZ3JhbTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBJbmMuLAo1OSBUZW1wbGUgUGxhY2UsIFN1aXRlIDMzMCwgQm9zdG9uLCBNQSAwMjExMS0xMzA3IFVTQSAqLwoKLyoKICogQmFzZTY0IGVuY29kZSAvIGRlY29kZQogKiAgaHR0cDovL3d3dy53ZWJ0b29sa2l0LmluZm8vCiAqIAogKiBFeGFtcGxlOgogKiBCYXNlNjQuZW5jb2RlKCdzb21lIHN0cmluZycpCiAqIEJhc2U2NC5kZWNvZGUoJ3NvbWUgZW5jb2RlZCBzdHJpbmcnKQogKi8=",
  },
  {
    "_id": "849ef5f3-7481-4607-a668-f0b5bf47db4c",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Goodbye Message",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twilio IVR: Goodbye Message",
    "script": "LyogVHdpbGlvIElWUjogR29vZGJ5ZSBNZXNzYWdlCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKiAKICogRGVwZW5kaW5nIG9uIHRoZSBhbW91bnQgb2YgZGF0YSBjb2xsZWN0ZWQgdGhyb3VnaCBjYWxsYmFja3MgYW5kIGhvdyBtYW55IG9mIHRoZSBjYWxsUGFyYW1zCiAqIHlvdSBhY3RpdmF0ZSBiZWxvdywgeW91IHdpbGwgbmVlZCB0byBjaGFuZ2UgeW91ciBhdXRoZW50aWNhdGlvbiBzZXNzaW9uIGZyb20gSldUIHRvIENUUyBvcgogKiBNZW1vcnkuCiAqLwpsb2dnZXIud2FybmluZygiVHdpbGlvIElWUjogR29vZGJ5ZSBNZXNzYWdlOiBzdGFydCIpOwpvdXRjb21lID0gInRydWUiOwoKLyogQmVnaW4gQ29uZmlndXJhdGlvbgogKi8KCi8vIEJ1aWxkIG91dCB0aGUgZnVsbCBtZXNzYWdlCnZhciBtZXNzYWdlID0gIlRoYW5rIHlvdSBmb3IgY2FsbGluZyBGb3JnZVJvY2sgSWRlbnRpdHkgQ2xvdWQuIEdvb2RieWUhIjsKCi8qIEVuZCBDb25maWd1cmF0aW9uCiAqLwoKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLAogICAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjawopOwogIAp3aXRoIChmcikgewogICAgICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgICAgIHZhciBvdXRwdXQgPSBuZXcgVGV4dE91dHB1dENhbGxiYWNrKFRleHRPdXRwdXRDYWxsYmFjay5JTkZPUk1BVElPTiwgbWVzc2FnZSk7CiAgICAgICAgYWN0aW9uID0gQWN0aW9uLnNlbmQob3V0cHV0KS5idWlsZCgpOwogICAgICB9IAogICAgICBlbHNlIHsKICAgICAgICBsb2dnZXIud2FybmluZygiVHdpbGlvIElWUjogR29vZGJ5ZSBNZXNzYWdlOiBmaW5pc2ggW291dGNvbWU9Ii5jb25jYXQob3V0Y29tZSkuY29uY2F0KCJdIikpOwogICAgICAgIGFjdGlvbiA9IEFjdGlvbi5nb1RvKG91dGNvbWUpLmJ1aWxkKCk7CiAgICAgIH0KfQ==",
  },
  {
    "_id": "fd560219-00ad-4763-9a29-f65aa9ecf776",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_GetIdPGroupsClaimConfig",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKICogVGhpcyBzY3JpcHQgaXMgdXNlZCB0byByZXRyaWV2ZSBvcHRpb25hbCBjdXN0b20gSWRQIGNvbmZpZ3VyYXRpb24gZnJvbSBJRE0gYXMgYW4gYWRtaW4KICogY29tcGxldGVzIGEgbG9naW4gam91cm5leS4gVGhpcyBuZWVkcyB0byBoYXBwZW4gYWZ0ZXIgYW4gSWRQIGhhcyBiZWVuIHNlbGVjdGVkIHNvIHRoYXQKICogdGhlIGBzZWxlY3RlZElkcGAgZXhpc3RzIGluIHNoYXJlZCBzdGF0ZS4gVGhlIHJlc3VsdCB3aWxsIGJlIHN0b3JlZCBpbiBhIHNoYXJlZCBzdGF0ZQogKiBrZXkgb2YgYGlkcEN1c3RvbUNvbmZpZ2AuIFRoZSB2YWx1ZSB3aWxsIGJlIGBudWxsYCBpZiBubyBjb25maWcgd2FzIGZvdW5kIGluIElETS4KICovCgp2YXIgQU1fSU5URVJOQUxfVVJMID0gJ2h0dHA6Ly9hbS5mci1wbGF0Zm9ybTo4MC9hbSc7CnZhciBJRE1fSU5URVJOQUxfVVJMID0gJ2h0dHA6Ly9pZG0uZnItcGxhdGZvcm06ODAvb3BlbmlkbSc7CnZhciBSU0ZJTFRFUl9QUk9WSVNJT05JTkdfQ0xJRU5UX0lEID0gJ2lkbS1wcm92aXNpb25pbmcnOwp2YXIgUlNGSUxURVJfUFJPVklTSU9OSU5HX1NFQ1JFVCA9ICdES05LNUsybTVROTh0QlR0MHllaSc7Cgp2YXIgU0hBUkVEX1NUQVRFX0tFWSA9ICdpZHBDdXN0b21Db25maWcnOwp2YXIgVFhOX0lEX0hFQURFUiA9ICd4LWZvcmdlcm9jay10cmFuc2FjdGlvbmlkJzsKCi8vIEhlbHBlciBmb3IgcmV0dXJuaW5nIHRoZSByZXF1ZXN0IHRyYW5zYWN0aW9uIElECmZ1bmN0aW9uIGdldFRyYW5zSWQoKSB7CiAgdmFyIHRyYW5zSWRzID0gcmVxdWVzdEhlYWRlcnMuZ2V0KFRYTl9JRF9IRUFERVIpOwogIGlmICh0cmFuc0lkcykgewogICAgcmV0dXJuIGphdmEubGFuZy5TdHJpbmcodHJhbnNJZHMuZ2V0KDApKTsKICB9CiAgcmV0dXJuIG51bGw7Cn0KCi8vIFJldHJpZXZlcyBhbiBhY2Nlc3MgdG9rZW4gdXNpbmcgYSBjbGllbnQgY3JlZGVudGlhbHMgZ3JhbnQKZnVuY3Rpb24gZ2V0QWNjZXNzVG9rZW4odHhuSWQsIGNsaWVudElkLCBjbGllbnRTZWNyZXQsIHNjb3BlKSB7CiAgdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgamF2YS5sYW5nLlN0cmluZywKICAgIG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0LAogICAgb3JnLmZvcmdlcm9jay5odHRwLnByb3RvY29sLlJlc3BvbnNlLAogICAgb3JnLmZvcmdlcm9jay51dGlsLmVuY29kZS5CYXNlNjQKICApOwoKICB2YXIgYmFzaWNBdXRoQ3JlZHMgPSBmci5CYXNlNjQuZW5jb2RlKG5ldyBmci5TdHJpbmcoY2xpZW50SWQgKyAnOicgKyBjbGllbnRTZWNyZXQpLmdldEJ5dGVzKCdVVEYtOCcpKTsKCiAgdmFyIHJlcXVlc3QgPSBuZXcgZnIuUmVxdWVzdCgpOwogIHJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgnYXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgYmFzaWNBdXRoQ3JlZHMpOwogIHJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpOwogIGlmICh0eG5JZCkgewogICAgcmVxdWVzdC5nZXRIZWFkZXJzKCkuYWRkKFRYTl9JRF9IRUFERVIsIHR4bklkKTsKICB9CiAgcmVxdWVzdAogICAgLnNldEVudGl0eSgnZ3JhbnRfdHlwZT1jbGllbnRfY3JlZGVudGlhbHMmc2NvcGU9JyArIHNjb3BlKQogICAgLnNldE1ldGhvZCgnUE9TVCcpCiAgICAuc2V0VXJpKEFNX0lOVEVSTkFMX1VSTCArICcvb2F1dGgyL2FjY2Vzc190b2tlbicpOwoKICB2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0T3JUaHJvdygpOwogIGlmIChyZXNwb25zZS5nZXRTdGF0dXMoKSA9PT0gb3JnLmZvcmdlcm9jay5odHRwLnByb3RvY29sLlN0YXR1cy5PSykgewogICAgdmFyIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpOwogICAgbG9nZ2VyLm1lc3NhZ2UoJ2dvdCBhY2Nlc3MgdG9rZW4gZm9yIGNsaWVudCB7fScsIGNsaWVudElkKTsKICAgIHJldHVybiByZXN1bHQuYWNjZXNzX3Rva2VuOwogIH0KICAKICBsb2dnZXIuZXJyb3IoJ2ZhaWxlZCB0byBnZXQgYWNjZXNzIHRva2VuIGZvciBjbGllbnQge307IHJlY2VpdmVkIHN0YXR1cyB7fScsIGNsaWVudElkLCByZXNwb25zZS5nZXRTdGF0dXMoKSk7CiAgdGhyb3cgJ2ZhaWxlZCB0byBnZXQgYWNjZXNzIHRva2VuJzsKfQoKLy8gUmV0cmlldmVzIHRoZSBJZFAgY3VzdG9tIGNvbmZpZ3VyYXRpb24gZnJvbSBJRE0KZnVuY3Rpb24gZ2V0Q29uZmlnRnJvbUlETSh0eG5JZCwgYWNjZXNzVG9rZW4sIGlkcCkgewogIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgIG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0LAogICAgb3JnLmZvcmdlcm9jay5odHRwLnByb3RvY29sLlJlc3BvbnNlLAogICAgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZSwKICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLnBsYWNlaG9sZGVyLnN1YnN0aXR1dGlvbi5QbGFjZWhvbGRlclN1YnN0aXR1dGlvbiwKICAgIG9yZy5mb3JnZXJvY2suZ3VpY2UuY29yZS5JbmplY3RvckhvbGRlcgogICk7CgogIHZhciByZXF1ZXN0ID0gbmV3IGZyLlJlcXVlc3QoKTsKICByZXF1ZXN0LmdldEhlYWRlcnMoKS5hZGQoJ2F1dGhvcml6YXRpb24nLCAnQmVhcmVyICcgKyBhY2Nlc3NUb2tlbik7CiAgaWYgKHR4bklkKSB7CiAgICByZXF1ZXN0LmdldEhlYWRlcnMoKS5hZGQoVFhOX0lEX0hFQURFUiwgdHhuSWQpOwogIH0KICByZXF1ZXN0CiAgICAuc2V0TWV0aG9kKCdHRVQnKQogICAgLnNldFVyaShJRE1fSU5URVJOQUxfVVJMICsgJy9jb25maWcvZmlkYy9mZWRlcmF0aW9uLScgKyBpZHApOwoKICB2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0T3JUaHJvdygpOwogIGlmIChyZXNwb25zZS5nZXRTdGF0dXMoKSA9PT0gb3JnLmZvcmdlcm9jay5odHRwLnByb3RvY29sLlN0YXR1cy5PSykgewogICAgdmFyIHJhd0NvbmZpZyA9IEpTT04ucGFyc2UocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpOwogICAgdmFyIHBsYWNlaG9sZGVyID0gZnIuSW5qZWN0b3JIb2xkZXIuZ2V0SW5zdGFuY2UoZnIuUGxhY2Vob2xkZXJTdWJzdGl0dXRpb24pOwogICAgdmFyIGZpbmFsQ29uZmlnID0gSlNPTi5wYXJzZShwbGFjZWhvbGRlci5zdWJzdGl0dXRlKGZyLkpzb25WYWx1ZS5qc29uKHJhd0NvbmZpZykpKTsKICAgIHJldHVybiBmaW5hbENvbmZpZzsKICB9IGVsc2UgaWYgKHJlc3BvbnNlLmdldFN0YXR1cygpID09PSBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuU3RhdHVzLk5PVF9GT1VORCkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIAogIGxvZ2dlci5lcnJvcignZmFpbGVkIHRvIGdldCBncm91cHMgY2xhaW0gY29uZmlnIGZvciBJZFAge307IHJlY2VpdmVkIHN0YXR1cyB7fScsIGlkcCwgcmVzcG9uc2UuZ2V0U3RhdHVzKCkpOwogIHRocm93ICdmYWlsZWQgdG8gZ2V0IGdyb3VwcyBjbGFpbSBjb25maWcnOwp9CgooZnVuY3Rpb24gKCkgewogIHRyeSB7CiAgICB2YXIgaWRwID0gbm9kZVN0YXRlLmdldCgnc2VsZWN0ZWRJZHAnKTsKICAgIGlmICghaWRwLmlzU3RyaW5nKCkpIHsKICAgICAgdGhyb3cgJ3NlbGVjdGVkSWRwIG5vdCBmb3VuZCBpbiBzaGFyZWQgc3RhdGUnOwogICAgfQoKICAgIHZhciB0eG5JZCA9IGdldFRyYW5zSWQoKTsKICAgIHZhciBhY2Nlc3NUb2tlbiA9IGdldEFjY2Vzc1Rva2VuKHR4bklkLCBSU0ZJTFRFUl9QUk9WSVNJT05JTkdfQ0xJRU5UX0lELCBSU0ZJTFRFUl9QUk9WSVNJT05JTkdfU0VDUkVULCAnZnI6aWRtOionKTsKCiAgICB2YXIgY29uZmlnID0gZ2V0Q29uZmlnRnJvbUlETSh0eG5JZCwgYWNjZXNzVG9rZW4sIGlkcC5hc1N0cmluZygpKQogICAgaWYgKGNvbmZpZykgewogICAgICBub2RlU3RhdGUucHV0U2hhcmVkKFNIQVJFRF9TVEFURV9LRVksIGNvbmZpZyk7CiAgICAgIGxvZ2dlci5tZXNzYWdlKCdmb3VuZCBncm91cHMgY2xhaW0gY29uZmlnIGZvciBJZFAge30nLCBpZHAuYXNTdHJpbmcoKSk7CiAgICB9IGVsc2UgewogICAgICBsb2dnZXIubWVzc2FnZSgnbm8gZ3JvdXBzIGNsYWltIGNvbmZpZyBmb3VuZCBmb3IgSWRQIHt9JywgaWRwLmFzU3RyaW5nKCkpOwogICAgfQogCiAgICBvdXRjb21lID0gJ1N1Y2Nlc3MnOwogIH0gY2F0Y2ggKGUpIHsKICAgIGxvZ2dlci5lcnJvcignZmFpbGVkIHRvIGdldCBmZWRlcmF0aW9uIGNvbmZpZyBmcm9tIElETToge30nLCBlKTsKICAgIG91dGNvbWUgPSAnRXJyb3InOwogIH0KfSgpKTs=",
  },
  {
    "_id": "cfb208d8-241c-4953-b87b-bf59d1ab3d05",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_EnableEmailClaimCheck",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKbm9kZVN0YXRlLnB1dFNoYXJlZCgnY2hlY2tFbWFpbENsYWltJywgdHJ1ZSk7CgpvdXRjb21lID0gJ1RydWUnOw==",
  },
  {
    "_id": "01e1a3c0-038b-4c16-956a-6c9d89328cff",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for a scripted decision node",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Authentication Tree Decision Node Script",
    "script": "LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwoKb3V0Y29tZSA9ICJ0cnVlIjs=",
  },
  {
    "_id": "355a8b7c-9e3c-40c1-a873-68127e483adf",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Extract Username from request.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "KerberosLogin: Extract Username",
    "script": "LyogS2VyYmVyb3NMb2dpbjogRXh0cmFjdCBVc2VybmFtZQogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICogLSBmYWxzZQogKi8KCmxvZ2dlci53YXJuaW5nKCJLZXJiZXJvc0xvZ2luOiBFeHRyYWN0IFVzZXJuYW1lOiBzdGFydCIpOwpvdXRjb21lID0gImZhbHNlIjsKCi8qCiAqIEJFR0lOIFNDUklQVCBDT05GSUdVUkFUSU9OCiAqLwp2YXIgVVNFUk5BTUVfSEVBREVSX05BTUUgPSAiWC1PcGVuQU0tVXNlcm5hbWUiOwovKgogKiBFTkQgU0NSSVBUIENPTkZJR1VSQVRJT04KICovCgp2YXIgdXNlcm5hbWUgPSBnZXRIZWFkZXIoVVNFUk5BTUVfSEVBREVSX05BTUUpOwppZiAodXNlcm5hbWUpIHsKICAgIAogICAgICBvdXRjb21lID0gInRydWUiOwogICAgc2hhcmVkU3RhdGUucHV0KCJ1c2VybmFtZSIsIHVzZXJuYW1lKTsKICAgIHNldFNoYXJlZE9iamVjdEF0dHJpYnV0ZSgidXNlck5hbWUiLCB1c2VybmFtZSk7Cn0KCmxvZ2dlci53YXJuaW5nKCJLZXJiZXJvc0xvZ2luOiBFeHRyYWN0IFVzZXJuYW1lOiBmaW5pc2ggW291dGNvbWU9Ii5jb25jYXQob3V0Y29tZSkuY29uY2F0KCJdIikpOwoKLyoKICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIHJlcXVlc3RlZCBoZWFkZXIKICovCmZ1bmN0aW9uIGdldEhlYWRlcihoZWFkZXJOYW1lKSB7CiAgICAgIGlmIChyZXF1ZXN0SGVhZGVycy5nZXQoaGVhZGVyTmFtZSkgJiYgcmVxdWVzdEhlYWRlcnMuZ2V0KGhlYWRlck5hbWUpLmdldCgwKSkgewogICAgICAgIHJldHVybiByZXF1ZXN0SGVhZGVycy5nZXQoaGVhZGVyTmFtZSkuZ2V0KDApLnRvU3RyaW5nKCk7CiAgICB9CiAgICAgIHJldHVybiBudWxsOwp9CgovKgogKiBTdG9yZSBhdHRyaWJ1dGVzIGluIHNoYXJlZCBzdGF0ZSBmb3IgdXNlIHdpdGggdGhlIENyZWF0ZS9QYXRjaCBPYmplY3Qgbm9kZXMuCiAqLwpmdW5jdGlvbiBzZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHsKICAgICAgIHZhciBzdG9yYWdlID0gc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIik7CiAgICBpZiAoc3RvcmFnZSAmJiB2YWx1ZSkgewogICAgICAgICAgaWYgKHN0b3JhZ2UucHV0KSB7CiAgICAgICAgICAgICAgc3RvcmFnZS5wdXQobmFtZSwgdmFsdWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHN0b3JhZ2VbbmFtZV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIGlmICh2YWx1ZSkgewogICAgICAgIHNoYXJlZFN0YXRlLnB1dCgib2JqZWN0QXR0cmlidXRlcyIsIEpTT04ucGFyc2UoIntcIiIrbmFtZSsiXCI6XCIiK3ZhbHVlKyJcIn0iKSk7CiAgICB9Cn0=",
  },
  {
    "_id": "8e03eb43-ed5d-4c12-9e15-2051cc9be578",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Copy SAML Data To ObjectAttributes",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "CopySAMLDataToObjectAttributes",
    "script": "LyogQ29weVNBTUxEYXRhVG9PYmplY3RBdHRyaWJ1dGVzCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICogCiAqIENvcHkgU0FNTCBEYXRhIFRvIE9iamVjdEF0dHJpYnV0ZXMuCiAqIAogKiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICovCm91dGNvbWUgPSAidHJ1ZSI7CmlmIChzaGFyZWRTdGF0ZS5nZXQoInVzZXJJbmZvIikpIHsKICAgIGlmIChzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKSkgewogICAgICAgICAgc2hhcmVkU3RhdGUucmVtb3ZlKCJvYmplY3RBdHRyaWJ1dGVzIik7CiAgICB9CiAgICB2YXIgdXNlck5hbWU9bnVsbCxnaXZlbk5hbWU9bnVsbCxzbj1udWxsLG1haWw9bnVsbCx0ZWxlcGhvbmVOdW1iZXI9bnVsbCxyb2xlcz1udWxsOwoKICAgIHRyeSB7IHVzZXJOYW1lPXNoYXJlZFN0YXRlLmdldCgidXNlckluZm8iKS5nZXQoInVzZXJOYW1lcyIpLmdldCgidWlkIikuZ2V0KDApLnRvU3RyaW5nKCk7IH0gY2F0Y2ggKGUpIHt9CiAgICB0cnkgeyBnaXZlbk5hbWU9c2hhcmVkU3RhdGUuZ2V0KCJ1c2VySW5mbyIpLmdldCgiYXR0cmlidXRlcyIpLmdldCgiZ2l2ZW5OYW1lIikuZ2V0KDApLnRvU3RyaW5nKCk7IH0gY2F0Y2ggKGUpIHt9CiAgICB0cnkgeyBzbj1zaGFyZWRTdGF0ZS5nZXQoInVzZXJJbmZvIikuZ2V0KCJhdHRyaWJ1dGVzIikuZ2V0KCJzbiIpLmdldCgwKS50b1N0cmluZygpOyB9IGNhdGNoIChlKSB7fQogICAgdHJ5IHsgbWFpbD1zaGFyZWRTdGF0ZS5nZXQoInVzZXJJbmZvIikuZ2V0KCJhdHRyaWJ1dGVzIikuZ2V0KCJtYWlsIikuZ2V0KDApLnRvU3RyaW5nKCk7IH0gY2F0Y2ggKGUpIHt9CiAgICB0cnkgeyB0ZWxlcGhvbmVOdW1iZXI9c2hhcmVkU3RhdGUuZ2V0KCJ1c2VySW5mbyIpLmdldCgiYXR0cmlidXRlcyIpLmdldCgidGVsZXBob25lTnVtYmVyIikuZ2V0KDApLnRvU3RyaW5nKCk7IH0gY2F0Y2ggKGUpIHt9CiAgICAvL3RyeSB7IHJvbGVzPXNoYXJlZFN0YXRlLmdldCgidXNlckluZm8iKS5nZXQoImF0dHJpYnV0ZXMiKS5nZXQoInJvbGVzIikuZ2V0KDApLnRvU3RyaW5nKCk7IH0gY2F0Y2ggKGUpIHt9CiAgICB0cnkgeyByb2xlcz1zaGFyZWRTdGF0ZS5nZXQoInVzZXJJbmZvIikuZ2V0KCJhdHRyaWJ1dGVzIikuZ2V0KCJyb2xlcyIpLnRvQXJyYXkoKS5qb2luKCJ8Iik7IH0gY2F0Y2ggKGUpIHt9CgogICAgc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwgeyJ1c2VyTmFtZSI6dXNlck5hbWUsImdpdmVuTmFtZSI6Z2l2ZW5OYW1lLCJzbiI6c24sIm1haWwiOm1haWwsInRlbGVwaG9uZU51bWJlciI6dGVsZXBob25lTnVtYmVyLCJyb2xlcyI6cm9sZXN9KTsKfQ==",
  },
  {
    "_id": "8862ca8f-7770-4af5-a888-ac0df0947f36",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from LinkedIn",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "LinkedIn Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5maXJzdE5hbWUubG9jYWxpemVkLmdldCgwKSksCiAgICAgICAgZmllbGQoImZhbWlseU5hbWUiLCByYXdQcm9maWxlLmxhc3ROYW1lLmxvY2FsaXplZC5nZXQoMCkpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucHJvZmlsZVBpY3R1cmUuZGlzcGxheUltYWdlKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLmVsZW1lbnRzLmdldCgwKS5nZXQoImhhbmRsZX4iKS5lbWFpbEFkZHJlc3MpLAogICAgICAgIGZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUuZWxlbWVudHMuZ2V0KDApLmdldCgiaGFuZGxlfiIpLmVtYWlsQWRkcmVzcykpKQ==",
  },
  {
    "_id": "7fb962a5-9f20-41d3-a077-b424a29c1198",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Evaluate IPv4 CIDR access rules from "esv-ipv4-cidr-access-rules".",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "IPv4 CIDR Rules Engine",
    "script": "LyogSVB2NCBDSURSIFJ1bGVzIEVuZ2luZQogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tLCBqdXN0aW4uY2hpbkBmb3JnZXJvY2suY29tCiAqIAogKiBFdmFsdWF0ZSBJUHY0IENJRFIgYWNjZXNzIHJ1bGVzIGZyb20gImVzdi1pcHY0LWNpZHItYWNjZXNzLXJ1bGVzIi4gCiAqIEFjY2VzcyBydWxlcyBtdXN0IGhhdmUgdGhlIGZvbGxvd2luZyBmb3JtYXQ6CiAqIHsKICogICAiYWxsb3ciOiBbCiAqICAgICAiMTQwLjExOC4wLjAvMTYiLAogKiAgICAgIjExMC4zNS4wLjAvMTYiLAogKiAgICAgIjEzMS4yNi4wLjAvMTYiLAogKiAgICAgIjkyLjYxLjIxLjE1My8zMiIKICogICBdCiAqIH0KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gYWxsb3cKICogLSBkZW55CiAqLwooZnVuY3Rpb24gKCkgewogIG91dGNvbWUgPSAiZGVueSI7CiAgCiAgdmFyIHJ1bGVzID0gSlNPTi5wYXJzZShzeXN0ZW1FbnYuZ2V0UHJvcGVydHkoImVzdi5pcHY0LmNpZHIuYWNjZXNzLnJ1bGVzIikpOwogIHZhciBhbGxvdyA9IHJ1bGVzWydhbGxvdyddOwoKICAvKgogICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSByZXF1ZXN0ZWQgaGVhZGVyCiAgICovCiAgZnVuY3Rpb24gZ2V0SGVhZGVyKGhlYWRlck5hbWUpIHsKICAgIHJldHVybiByZXF1ZXN0SGVhZGVycy5nZXQoaGVhZGVyTmFtZSkuZ2V0KDApOwogIH0KCiAgLyoKICAgKiBSZXR1cm5zIHRoZSBjbGllbnQncyBJUCBhZGRyZXNzCiAgICovCiAgZnVuY3Rpb24gZ2V0Q2xpZW50SVBBZGRyZXNzKCkgewogICAgcmV0dXJuIGdldEhlYWRlcigieC1mb3J3YXJkZWQtZm9yIikuc3BsaXQoJywnKVswXTsKICB9CgogIGZ1bmN0aW9uIElQbnVtYmVyKElQYWRkcmVzcykgewogICAgdmFyIGlwID0gSVBhZGRyZXNzLm1hdGNoKC9eKFxkKylcLihcZCspXC4oXGQrKVwuKFxkKykkLyk7CiAgICBpZiAoaXApIHsKICAgICAgcmV0dXJuICgraXBbMV0gPDwgMjQpICsgKCtpcFsyXSA8PCAxNikgKyAoK2lwWzNdIDw8IDgpICsgK2lwWzRdOwogICAgfQogICAgLy8gZWxzZSAuLi4gPwogICAgcmV0dXJuIG51bGw7CiAgfQoKICBmdW5jdGlvbiBJUG1hc2sobWFza1NpemUpIHsKICAgIHJldHVybiAtMSA8PCAoMzIgLSBtYXNrU2l6ZSk7CiAgfQoKICBmdW5jdGlvbiBpc0FsbG93ZWQoaXApIHsKICAgIHZhciBhbGxvd2VkID0gZmFsc2U7CiAgICBhbGxvdy5mb3JFYWNoKChjaWRyKSA9PiB7CiAgICAgIGlmICgKICAgICAgICAoSVBudW1iZXIoaXApICYgSVBtYXNrKGNpZHIuc3BsaXQoJy8nKVsxXSkpID09CiAgICAgICAgSVBudW1iZXIoY2lkci5zcGxpdCgnLycpWzBdKQogICAgICApIHsKICAgICAgICBhbGxvd2VkID0gdHJ1ZTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gYWxsb3dlZDsKICB9CiAgCiAgaWYgKGlzQWxsb3dlZChnZXRDbGllbnRJUEFkZHJlc3MoKSkpIHsKICAgIG91dGNvbWUgPSAiYWxsb3ciOwogIH0KfSgpKTs=",
  },
  {
    "_id": "1244e639-4a31-401d-ab61-d75133d8dc9e",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Instagram",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Instagram Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLmlkKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLnVzZXJuYW1lKSkp",
  },
  {
    "_id": "71e3b4ae-52c1-49d6-98fd-c279f43ea3ce",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "AAcustomLogic",
    "script": "LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwpvdXRjb21lID0gImZhbHNlIjsKdmFyIHByZWRpY3Rpb25SZXN1bHQgPSBzaGFyZWRTdGF0ZS5nZXQoInByZWRpY3Rpb25SZXN1bHQiKTsKdmFyIHByZWRpY3Rpb25SZXN1bHRTdHJpbmcgPSBwcmVkaWN0aW9uUmVzdWx0LnRvU3RyaW5nKCk7Cgp2YXIgaXNfaW1wb3NzaWJsZV90cmF2ZWwgPSAwOwp2YXIgaXNfY3JlZGVudGlhbF9zdHVmZmluZyA9IDA7CnZhciBpc19hdXRvbWF0ZWRfdXNlcl9hZ2VudCA9IDA7CnZhciBpc19icnV0ZV9mb3JjZSA9IDA7CnZhciBpc19zdXNwaWNpb3VzX2lwID0gMDsKCnZhciBzaWduYWxfY291bnQgPSAwOwp2YXIgcG9zaXRpb24gPSAwOwoKcG9zaXRpb24gPSBwcmVkaWN0aW9uUmVzdWx0U3RyaW5nLnNlYXJjaCgiaXNfaW1wb3NzaWJsZV90cmF2ZWw9ZmFsc2UiKTsKaWYocG9zaXRpb248MCkKewogIHNpZ25hbF9jb3VudCsrOwogIGlzX2ltcG9zc2libGVfdHJhdmVsPTE7Cn0KcG9zaXRpb24gPSBwcmVkaWN0aW9uUmVzdWx0U3RyaW5nLnNlYXJjaCgiaXNfY3JlZGVudGlhbF9zdHVmZmluZz1mYWxzZSIpOwppZihwb3NpdGlvbjwwKQp7CiAgc2lnbmFsX2NvdW50Kys7CiAgaXNfY3JlZGVudGlhbF9zdHVmZmluZz0xOwp9CnBvc2l0aW9uID0gcHJlZGljdGlvblJlc3VsdFN0cmluZy5zZWFyY2goImlzX2F1dG9tYXRlZF91c2VyX2FnZW50PWZhbHNlIik7CmlmKHBvc2l0aW9uPDApCnsKICBzaWduYWxfY291bnQrKzsKICBpc19hdXRvbWF0ZWRfdXNlcl9hZ2VudD0xOwp9CnBvc2l0aW9uID0gcHJlZGljdGlvblJlc3VsdFN0cmluZy5zZWFyY2goImlzX2JydXRlX2ZvcmNlPWZhbHNlIik7CmlmKHBvc2l0aW9uPDApCnsKICBzaWduYWxfY291bnQrKzsKICBpc19icnV0ZV9mb3JjZT0xOwp9CnBvc2l0aW9uID0gcHJlZGljdGlvblJlc3VsdFN0cmluZy5zZWFyY2goImlzX3N1c3BpY2lvdXNfaXA9ZmFsc2UiKTsKaWYocG9zaXRpb248MCkKewogIHNpZ25hbF9jb3VudCsrOwogIGlzX3N1c3BpY2lvdXNfaXA9MTsKfQoKc2hhcmVkU3RhdGUucHV0KCJkZWJ1Zy1zaWduYWwtY291bnQiLHNpZ25hbF9jb3VudCk7CmlmKHNpZ25hbF9jb3VudD4xKQp7CiAJb3V0Y29tZT0idHJ1ZSI7IAp9CgoK",
  },
  {
    "_id": "199405e4-050e-4f2a-87d1-d9125f74a8df",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Reset theme to what's preserved in shared state variable "theme-id" or to default theme.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Reset Theme",
    "script": "LyogUmVzZXQgVGhlbWUKICogCiAqIFJlc2V0IHRoZW1lIHRvIHdoYXQncyBwcmVzZXJ2ZWQgaW4gc2hhcmVkIHN0YXRlIHZhcmlhYmxlICJ0aGVtZUlkIiBvciB0byBkZWZhdWx0IHRoZW1lLgogKiAKICogVGhpcyBzY3JpcHQgbmVlZHMgdG8gYmUgcGFyYW1ldHJpemVkIQogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKi8KKGZ1bmN0aW9uICgpIHsKICAgICAgLyogQmVnaW4gU2NyaXB0IENvbmZpZ3VyYXRpb24gKi8KICAgICAgdmFyIGRlZmF1bHRUaGVtZSA9ICJFeHBhbnNlIjsKICAgICAgLyogRW5kIFNjcmlwdCBDb25maWd1cmF0aW9uICovCiAgICAgIAogICAgICBvdXRjb21lID0gInRydWUiOwogICAgICAKICAgICAgdmFyIHRoZW1lID0gZGVmYXVsdFRoZW1lOwogICAgICBpZiAoc2hhcmVkU3RhdGUuZ2V0KCJ0aGVtZUlkIikgJiYgIiIrc2hhcmVkU3RhdGUuZ2V0KCJ0aGVtZUlkIikgIT09ICIiKSB7CiAgICAgICAgICB0aGVtZSA9IHNoYXJlZFN0YXRlLmdldCgidGhlbWVJZCIpOwogICAgfQoKICAgIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuUG9sbGluZ1dhaXRDYWxsYmFjawogICAgKQogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICB2YXIgc3RhZ2UgPSAidGhlbWVJZD0iK3RoZW1lOwogICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5zZW5kKAogICAgICAgICAgICAgIG5ldyBmci5Qb2xsaW5nV2FpdENhbGxiYWNrKCIxMDAiLCAiUGxlYXNlIHdhaXQgLi4uIikKICAgICAgICApLndpdGhTdGFnZShzdGFnZSkuYnVpbGQoKTsKICAgIH0gZWxzZSB7CiAgICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbyhvdXRjb21lKS5idWlsZCgpOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "6dfc6de4-64cb-4d47-8269-6c5ced44344d",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_IsInvited",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaWYgKHNoYXJlZFN0YXRlLmdldCgnaW52aXRlZCcpID09IHRydWUpIHsKICBvdXRjb21lID0gJ1RydWUnOwp9IGVsc2UgewogIG91dGNvbWUgPSAnRmFsc2UnOwp9",
  },
  {
    "_id": "87497360-d89c-412a-a99e-c8a9bec465cc",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ipstack",
    "script": "bG9nZ2VyLndhcm5pbmcoImlwc3RhY2s6IHN0YXJ0Iik7CgpvdXRjb21lID0gInVua25vd24iOwoKdmFyIGlwID0gZ2V0Q2xpZW50SVBBZGRyZXNzKCk7CmxvZ2dlci53YXJuaW5nKCJpcHN0YWNrOiBpcD0iLmNvbmNhdChpcCkpOwoKaWYgKGlwKSB7CgogICAgICAvLyBpcHN0YWNrIEFQSSBDb25maWd1cmF0aW9uCiAgICB2YXIgSVBTVEFDS19BQ0NFU1NfS0VZID0gImVmYzJmOGQ5Nzk2YjlmZWZmNWYwMzM1OWQ2ZmJjY2M5IjsKICAgIHZhciBJUFNUQUNLX0FQSV9VUkkgPSAiaHR0cDovL2FwaS5pcHN0YWNrLmNvbS8iLmNvbmNhdChpcCkuY29uY2F0KCI/YWNjZXNzX2tleT0iKS5jb25jYXQoSVBTVEFDS19BQ0NFU1NfS0VZKTsgICAgCgogICAgdmFyIHJlcXVlc3QgPSBuZXcgb3JnLmZvcmdlcm9jay5odHRwLnByb3RvY29sLlJlcXVlc3QoKTsKICAgIHJlcXVlc3Quc2V0TWV0aG9kKCdHRVQnKTsKICAgIHJlcXVlc3Quc2V0VXJpKElQU1RBQ0tfQVBJX1VSSSk7CgogICAgdmFyIHJlc3BvbnNlID0gaHR0cENsaWVudC5zZW5kKHJlcXVlc3QpLmdldCgpOwogICAgdmFyIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpOwogICAgbG9nZ2VyLndhcm5pbmcoImlwc3RhY2s6IEpTT04gcmVzdWx0OiAiICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7CgogICAgICAvKgogICAgewogICAgICAgICJpcCI6ICI5OS43Mi4yOC4xODIiLAogICAgICAgICJ0eXBlIjogImlwdjQiLAogICAgICAgICJjb250aW5lbnRfY29kZSI6ICJOQSIsCiAgICAgICAgImNvbnRpbmVudF9uYW1lIjogIk5vcnRoIEFtZXJpY2EiLAogICAgICAgICJjb3VudHJ5X2NvZGUiOiAiVVMiLAogICAgICAgICJjb3VudHJ5X25hbWUiOiAiVW5pdGVkIFN0YXRlcyIsCiAgICAgICAgInJlZ2lvbl9jb2RlIjogIlRYIiwKICAgICAgICAicmVnaW9uX25hbWUiOiAiVGV4YXMiLAogICAgICAgICJjaXR5IjogIkdlb3JnZXRvd24iLAogICAgICAgICJ6aXAiOiAiNzg2MjYiLAogICAgICAgICJsYXRpdHVkZSI6IDMwLjU5MjUwMDY4NjY0NTUwOCwKICAgICAgICAibG9uZ2l0dWRlIjogLTk3LjY2NzEwNjYyODQxNzk3LAogICAgICAgICJsb2NhdGlvbiI6IHsKICAgICAgICAgICAgImdlb25hbWVfaWQiOiA0NjkzMzQyLAogICAgICAgICAgICAiY2FwaXRhbCI6ICJXYXNoaW5ndG9uIEQuQy4iLAogICAgICAgICAgICAibGFuZ3VhZ2VzIjogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJjb2RlIjogImVuIiwKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJFbmdsaXNoIiwKICAgICAgICAgICAgICAgICAgICAibmF0aXZlIjogIkVuZ2xpc2giCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJjb3VudHJ5X2ZsYWciOiAiaHR0cDovL2Fzc2V0cy5pcHN0YWNrLmNvbS9mbGFncy91cy5zdmciLAogICAgICAgICAgICAiY291bnRyeV9mbGFnX2Vtb2ppIjogIvCfh7rwn4e4IiwKICAgICAgICAgICAgImNvdW50cnlfZmxhZ19lbW9qaV91bmljb2RlIjogIlUrMUYxRkEgVSsxRjFGOCIsCiAgICAgICAgICAgICJjYWxsaW5nX2NvZGUiOiAiMSIsCiAgICAgICAgICAgICJpc19ldSI6IGZhbHNlCiAgICAgICAgfQogICAgfQogICAgKi8KICAKICAgICAgLy8gcHJlc2VydmUgcmVzdWx0IGluIHRyYW5zaWVudCBzdGF0ZQogICAgICB0cmFuc2llbnRTdGF0ZS5wdXQoImlwc3RhY2siLCBKU09OLnN0cmluZ2lmeShyZXN1bHQpKTsKCiAgICBzd2l0Y2gocmVzdWx0LmNvdW50cnlfY29kZSkgewogICAgICBjYXNlICJDQSI6CiAgICAgICAgb3V0Y29tZSA9IHJlc3VsdC5jb3VudHJ5X2NvZGU7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgIlVLIjoKICAgICAgICBvdXRjb21lID0gcmVzdWx0LmNvdW50cnlfY29kZTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAiVVMiOgogICAgICAgIG91dGNvbWUgPSByZXN1bHQuY291bnRyeV9jb2RlOwogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIG91dGNvbWUgPSAib3RoZXIiOwogICAgfQoKfSBlbHNlIHsKICAgICAgbG9nZ2VyLmVycm9yKCJpcHN0YWNrOiBubyBjbGllbnQgaXAhIik7Cn0KCmxvZ2dlci53YXJuaW5nKCJpcHN0YWNrOiBmaW5pc2giKTsKCiAvKgogICogISEhIEFTU1VNRVMgSUQgQ0xPVUQgISEhCiAgKgogICogUmV0dXJucyB0aGUgY2xpZW50J3MgSVAgYWRkcmVzcwogICovCiBmdW5jdGlvbiBnZXRDbGllbnRJUEFkZHJlc3MoKSB7CiAgICByZXR1cm4gcmVxdWVzdEhlYWRlcnMuZ2V0KCJ4LWZvcndhcmRlZC1mb3IiKS5nZXQoMCkuc3BsaXQoJywnKVswXTsKIH0=",
  },
  {
    "_id": "8bccfdd0-5556-4562-a1ca-6d725a449556",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "display country",
    "script": "dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGksCiAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2sKKTsKICAKb3V0Y29tZSA9ICJ0cnVlIjsKCnZhciBjb3VudHJ5ID0gInVua25vd24iOwppZiAodHJhbnNpZW50U3RhdGUuZ2V0KCJpcHN0YWNrIikpIHsKICAgIGNvdW50cnkgPSBKU09OLnBhcnNlKHRyYW5zaWVudFN0YXRlLmdldCgiaXBzdGFjayIpKS5jb3VudHJ5X2NvZGU7Cn0KICAKd2l0aCAoZnIpIHsKICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgdmFyIGNhbGxiYWNrID0gbmV3IFRleHRPdXRwdXRDYWxsYmFjayhUZXh0T3V0cHV0Q2FsbGJhY2suSU5GT1JNQVRJT04sICJDb3VudHJ5OiAiLmNvbmNhdChjb3VudHJ5KSk7CiAgICBhY3Rpb24gPSBBY3Rpb24uc2VuZChjYWxsYmFjaykuYnVpbGQoKTsKICB9IGVsc2UgewogICAgYWN0aW9uID0gQWN0aW9uLmdvVG8oInRydWUiKS5idWlsZCgpOwogIH0KfQ==",
  },
  {
    "_id": "91d197de-5916-4dca-83b5-9a4df26e7159",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from WordPress",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "WordPress Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnVzZXJuYW1lKSwKICAgICAgICBmaWVsZCgiZGlzcGxheU5hbWUiLCByYXdQcm9maWxlLmRpc3BsYXlfbmFtZSksCiAgICAgICAgZmllbGQoInBob3RvVXJsIiwgcmF3UHJvZmlsZS5hdmF0YXJfVVJMKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLnVzZXJuYW1lKSkp",
  },
  {
    "_id": "e9c9d940-30d9-4a0c-a834-7de69a0600cf",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_CollectUsernameOrEmail",
    "script": "dmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUsCiAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5OYW1lQ2FsbGJhY2ssCiAgamF2YS51dGlsLkhhc2hNYXAKKTsKCndpdGggKGZyKSB7CiAgdHJ5IHsKICAgIAogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgCiAgICAgIGFjdGlvbiA9IEFjdGlvbi5zZW5kKG5ldyBOYW1lQ2FsbGJhY2soJ1VzZXJuYW1lIG9yIGVtYWlsIGFkZHJlc3MnKSkuYnVpbGQoKTsKICAgICAgCiAgICB9IGVsc2UgewoKICAgICAgLy8gSWYgYSB2YWx1ZSBpcyBwcm92aWRlZCwgc3RvcmUgaXQgYXMgdXNlcm5hbWUgYW5kIGFuIG9iamVjdCBhdHRyaWJ1dGUKICAgICAgdmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzLml0ZXJhdG9yKCkubmV4dCgpOwogICAgICB2YXIgbmFtZSA9IGNhbGxiYWNrLmdldE5hbWUoKS50cmltKCk7CiAgICAgIGlmIChuYW1lKSB7CiAgICAgICAgdmFyIG9iakF0dHJzID0gc2hhcmVkU3RhdGUuZ2V0KCdvYmplY3RBdHRyaWJ1dGVzJykgfHwgbmV3IEhhc2hNYXAoKTsKICAgICAgICBvYmpBdHRycy5wdXQoJ21haWwnLCBuYW1lKTsKICAgICAgICBzaGFyZWRTdGF0ZS5wdXQoJ3VzZXJuYW1lJywgbmFtZSk7CiAgICAgICAgc2hhcmVkU3RhdGUucHV0KCdvYmplY3RBdHRyaWJ1dGVzJywgb2JqQXR0cnMpOwoKICAgICAgICBhY3Rpb24gPSBBY3Rpb24uZ29UbygnQ29sbGVjdGVkJykuYnVpbGQoKTsKICAgICAgfQogICAgICAKICAgIH0KICAgIAogIH0gY2F0Y2ggKGUpIHsKICAgIAogICAgbG9nZ2VyLmVycm9yKCdBZG1pbl9Db2xsZWN0VXNlcm5hbWVPckVtYWlsOiB7fScsIGUpOwogICAgYWN0aW9uID0gQWN0aW9uLmdvVG8oJ0Vycm9yJykuYnVpbGQoKTsKICAgIAogIH0KfQ==",
  },
  {
    "_id": "e232cff3-2460-47cd-80b2-36c86c0d0f06",
    "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Used by endUserUIClient",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Alpha endUserUIClient OAuth2 Access Token Modification Script",
    "script": "KGZ1bmN0aW9uICgpIHsKICBpZiAoc2NvcGVzLmNvbnRhaW5zKCdmcjphdXRvYWNjZXNzOionKSB8fCBzY29wZXMuY29udGFpbnMoJ2ZyOmlnYToqJykpIHsKICAgIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgY29tLnN1bi5pZGVudGl0eS5pZG0uSWRUeXBlCiAgICApOwogICAgdmFyIGdyb3VwcyA9IFtdOwogICAgaWRlbnRpdHkuZ2V0TWVtYmVyc2hpcHMoZnIuSWRUeXBlLkdST1VQKS50b0FycmF5KCkuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXApIHsKICAgICAgZ3JvdXBzLnB1c2goZ3JvdXAuZ2V0QXR0cmlidXRlKCdjbicpLnRvQXJyYXkoKVswXSk7CiAgICB9KTsKICAgIGFjY2Vzc1Rva2VuLnNldEZpZWxkKCdncm91cHMnLCBncm91cHMpOwogIH0KfSgpKTsK",
  },
  {
    "_id": "10643e95-873a-4ec0-b713-a7f56760d179",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if username has already been collected.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FrodoTestScript4",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "d6f3befb-c73a-437e-b02a-66d9b4c93f8b",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Extract impersonatee and impersonator from headers and become impersonator.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Impersonate: Extract Actors And Become Impersonator",
    "script": "LyogSW1wZXJzb25hdGU6IEV4dHJhY3QgQWN0b3JzIEFuZCBCZWNvbWUgSW1wZXJzb25hdG9yCiAqCiAqIEV4dHJhY3QgaW1wZXJzb25hdGVlIGFuZCBpbXBlcnNvbmF0b3IgZnJvbSBoZWFkZXJzIGFuZCBiZWNvbWUgaW1wZXJzb25hdGVlLgogKgogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKiAtIGZhbHNlCiAqLwoKKGZ1bmN0aW9uICgpIHsKICAgIGxvZ2dlci53YXJuaW5nKCJJbXBlcnNvbmF0ZTogRXh0cmFjdCBBY3RvcnM6IHN0YXJ0Iik7CiAgICBvdXRjb21lID0gImZhbHNlIjsKCiAgICAvKgogICAgICogQkVHSU4gU0NSSVBUIENPTkZJR1VSQVRJT04KICAgICAqLwogICAgdmFyIElNUEVSU09OQVRFRV9IRUFERVJfTkFNRSA9ICJYLUltcGVyc29uYXRlZSI7CiAgICB2YXIgSU1QRVJTT05BVE9SX0hFQURFUl9OQU1FID0gIlgtSW1wZXJzb25hdG9yIjsKICAgIC8qCiAgICAgKiBFTkQgU0NSSVBUIENPTkZJR1VSQVRJT04KICAgICAqLwoKICAgIHZhciBpbXBlcnNvbmF0ZWUgPSBnZXRIZWFkZXIoSU1QRVJTT05BVEVFX0hFQURFUl9OQU1FKTsKICAgIHZhciBpbXBlcnNvbmF0b3IgPSBnZXRIZWFkZXIoSU1QRVJTT05BVE9SX0hFQURFUl9OQU1FKTsKICAgIGlmIChpbXBlcnNvbmF0ZWUgJiYgaW1wZXJzb25hdG9yKSB7CiAgICAgICAgb3V0Y29tZSA9ICJ0cnVlIjsKICAgICAgICBzaGFyZWRTdGF0ZS5wdXQoImltcGVyc29uYXRlZSIsIGltcGVyc29uYXRlZSk7CiAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJpbXBlcnNvbmF0b3IiLCBpbXBlcnNvbmF0b3IpOwogICAgICAgIHNoYXJlZFN0YXRlLnB1dCgidXNlcm5hbWUiLCBpbXBlcnNvbmF0b3IpOwogICAgICAgIHNldFNoYXJlZE9iamVjdEF0dHJpYnV0ZSgidXNlck5hbWUiLCBpbXBlcnNvbmF0b3IpOwogICAgfQoKICAgIGxvZ2dlci53YXJuaW5nKCJJbXBlcnNvbmF0ZTogRXh0cmFjdCBBY3RvcnM6IGZpbmlzaCBbb3V0Y29tZT0iLmNvbmNhdChvdXRjb21lKS5jb25jYXQoIl0iKSk7CgogICAgLyoKICAgICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSByZXF1ZXN0ZWQgaGVhZGVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldEhlYWRlcihoZWFkZXJOYW1lKSB7CiAgICAgICAgaWYgKHJlcXVlc3RIZWFkZXJzLmdldChoZWFkZXJOYW1lKSAmJiByZXF1ZXN0SGVhZGVycy5nZXQoaGVhZGVyTmFtZSkuZ2V0KDApKSB7CiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0SGVhZGVycy5nZXQoaGVhZGVyTmFtZSkuZ2V0KDApLnRvU3RyaW5nKCk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIC8qCiAgICAgKiBTdG9yZSBhdHRyaWJ1dGVzIGluIHNoYXJlZCBzdGF0ZSBmb3IgdXNlIHdpdGggdGhlIENyZWF0ZS9QYXRjaCBPYmplY3Qgbm9kZXMuCiAgICAgKi8KICAgIGZ1bmN0aW9uIHNldFNoYXJlZE9iamVjdEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkgewogICAgICAgICB2YXIgc3RvcmFnZSA9IHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpOwogICAgICAgIGlmIChzdG9yYWdlICYmIHZhbHVlKSB7CiAgICAgICAgICAgIGlmIChzdG9yYWdlLnB1dCkgewogICAgICAgICAgICAgICAgICBzdG9yYWdlLnB1dChuYW1lLCB2YWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBzdG9yYWdlW25hbWVdID0gdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAodmFsdWUpIHsKICAgICAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwgSlNPTi5wYXJzZSgie1wiIituYW1lKyJcIjpcIiIrdmFsdWUrIlwifSIpKTsKICAgICAgICB9CiAgICB9Cn0oKSk7",
  },
  {
    "_id": "58c824ae-84ed-4724-82cd-db128fc3f6c",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Converts a normalized social profile into a managed user",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Normalized Profile to Managed User",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmltcG9ydCBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlCgpKc29uVmFsdWUgbWFuYWdlZFVzZXIgPSBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lKSwKICAgICAgICBmaWVsZCgic24iLCBub3JtYWxpemVkUHJvZmlsZS5mYW1pbHlOYW1lKSwKICAgICAgICBmaWVsZCgibWFpbCIsIG5vcm1hbGl6ZWRQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlck5hbWUiLCBub3JtYWxpemVkUHJvZmlsZS51c2VybmFtZSkpKQoKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgicG9zdGFsQWRkcmVzcyIsIG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MpCmlmIChub3JtYWxpemVkUHJvZmlsZS5hZGRyZXNzTG9jYWxpdHkuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgiY2l0eSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NMb2NhbGl0eSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24uaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgic3RhdGVQcm92aW5jZSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24pCmlmIChub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInBvc3RhbENvZGUiLCBub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlKQppZiAobm9ybWFsaXplZFByb2ZpbGUuY291bnRyeS5pc05vdE51bGwoKSkgbWFuYWdlZFVzZXIucHV0KCJjb3VudHJ5Iiwgbm9ybWFsaXplZFByb2ZpbGUuY291bnRyeSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBob25lLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInRlbGVwaG9uZU51bWJlciIsIG5vcm1hbGl6ZWRQcm9maWxlLnBob25lKQoKLy8gaWYgdGhlIGdpdmVuTmFtZSBhbmQgZmFtaWx5TmFtZSBpcyBudWxsIG9yIGVtcHR5Ci8vIHRoZW4gYWRkIGEgYm9vbGVhbiBmbGFnIHRvIHRoZSBzaGFyZWQgc3RhdGUgdG8gaW5kaWNhdGUgbmFtZXMgYXJlIG5vdCBwcmVzZW50Ci8vIHRoaXMgY291bGQgYmUgdXNlZCBlbHNld2hlcmUKLy8gZm9yIGVnLiB0aGlzIGNvdWxkIGJlIHVzZWQgaW4gYSBzY3JpcHRlZCBkZWNpc2lvbiBub2RlIHRvIGJ5LXBhc3MgcGF0Y2hpbmcKLy8gdGhlIHVzZXIgb2JqZWN0IHdpdGggYmxhbmsgdmFsdWVzIHdoZW4gZ2l2ZW5OYW1lICBhbmQgZmFtaWx5TmFtZSBpcyBub3QgcHJlc2VudApib29sZWFuIG5vR2l2ZW5OYW1lID0gbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lLmlzTnVsbCgpIHx8ICghbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lLmFzU3RyaW5nKCk/LnRyaW0oKSkKYm9vbGVhbiBub0ZhbWlseU5hbWUgPSBub3JtYWxpemVkUHJvZmlsZS5mYW1pbHlOYW1lLmlzTnVsbCgpIHx8ICghbm9ybWFsaXplZFByb2ZpbGUuZmFtaWx5TmFtZS5hc1N0cmluZygpPy50cmltKCkpCnNoYXJlZFN0YXRlLnB1dCgibmFtZUVtcHR5T3JOdWxsIiwgbm9HaXZlbk5hbWUgJiYgbm9GYW1pbHlOYW1lKQoKcmV0dXJuIG1hbmFnZWRVc2VyCg==",
  },
  {
    "_id": "809330cf-874c-4d57-a8f1-5882c6dd855b",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Converts a normalized social profile for iddataweb into a Managed user",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Normalized idddataweb Profile to Managed User",
    "script": "LyogTm9ybWFsaXplZCBpZGRkYXRhd2ViIFByb2ZpbGUgdG8gTWFuYWdlZCBVc2VyCiAqIENvcHlyaWdodCAyMDIyIEZvcmdlUm9jayBBUy4gQWxsIFJpZ2h0cyBSZXNlcnZlZAogKgogKiBVc2Ugb2YgdGhpcyBjb2RlIHJlcXVpcmVzIGEgY29tbWVyY2lhbCBzb2Z0d2FyZSBsaWNlbnNlIHdpdGggRm9yZ2VSb2NrIEFTLgogKiBvciB3aXRoIG9uZSBvZiBpdHMgYWZmaWxpYXRlcy4gQWxsIHVzZSBzaGFsbCBiZSBleGNsdXNpdmVseSBzdWJqZWN0CiAqIHRvIHN1Y2ggbGljZW5zZSBiZXR3ZWVuIHRoZSBsaWNlbnNlZSBhbmQgRm9yZ2VSb2NrIEFTLiBOb3QgZm9yIHByb2R1Y3Rpb24gdXNlLgogKiBNb2RpZmllZCBieSBTdGVwaGVuIFBheW5lLCAyMDIxLU1hci0zMAogKi8KaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKaW1wb3J0IG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUKbG9nZ2VyLmVycm9yKCJOb3JtYWxpemVkX1Byb2ZpbGVfSUREYXRhV2ViOiBTdGFydCAiICsgbm9ybWFsaXplZFByb2ZpbGUpOwoKSnNvblZhbHVlIG1hbmFnZWRVc2VyID0ganNvbihvYmplY3QoCiAgICAgICAgZmllbGQoImdpdmVuTmFtZSIsIG5vcm1hbGl6ZWRQcm9maWxlLmdpdmVuTmFtZSksCiAgICAgICAgZmllbGQoInNuIiwgbm9ybWFsaXplZFByb2ZpbGUuZmFtaWx5TmFtZSksCiAgICAgICAgZmllbGQoInVzZXJOYW1lIiwgbm9ybWFsaXplZFByb2ZpbGUudXNlcm5hbWUpKSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgicG9zdGFsQWRkcmVzcyIsIG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MpCmlmIChub3JtYWxpemVkUHJvZmlsZS5hZGRyZXNzTG9jYWxpdHkuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgiY2l0eSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NMb2NhbGl0eSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24uaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgic3RhdGVQcm92aW5jZSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24pCmlmIChub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInBvc3RhbENvZGUiLCBub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlKQppZiAobm9ybWFsaXplZFByb2ZpbGUuY291bnRyeS5pc05vdE51bGwoKSkgbWFuYWdlZFVzZXIucHV0KCJjb3VudHJ5Iiwgbm9ybWFsaXplZFByb2ZpbGUuY291bnRyeSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBob25lLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInRlbGVwaG9uZU51bWJlciIsIG5vcm1hbGl6ZWRQcm9maWxlLnBob25lKQppZiAobm9ybWFsaXplZFByb2ZpbGUuRE9CLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoImZySW5kZXhlZFN0cmluZzIiLCBub3JtYWxpemVkUHJvZmlsZS5ET0IpCgpyZXR1cm4gbWFuYWdlZFVzZXIK",
  },
  {
    "_id": "6ad22934-5d12-43a6-96a7-a2fba8d999bf",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Call out to University of Phoenix Course Registration System and get current course.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "UOP Get Course ID",
    "script": "LyogVU9QIEdldCBDb3Vyc2UgSUQKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2FsbCBvdXQgdG8gVW5pdmVyc2l0eSBvZiBQaG9lbml4IENvdXJzZSBSZWdpc3RyYXRpb24gU3lzdGVtIGFuZCBnZXQgY3VycmVudCBjbGFzcy4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuIAogKiBJdCByZXF1aXJlcyB0aGUgSWRlbnRpZnkgRXhpc3RpbmcgVXNlciBub2RlIGJlZm9yZSBpdCBpcyBiZWluZyBjYWxsZWQuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gaGFzIGNsYXNzZXMKICogLSBubyBjbGFzc2VzCiAqIC0gZXJyb3IKICovCmxvZ2dlci53YXJuaW5nKCJVT1AgR2V0IENvdXJzZSBJRDogc3RhcnQgbm93Iik7CgpvdXRjb21lID0gImVycm9yIjsKCmlmIChzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpICYmIGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUoc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKSwgIm1haWwiKS5pdGVyYXRvcigpLmhhc05leHQoKSkgewoKICAgICAgIC8qIEJFR0lOIFNDUklQVCBDT05GSUdVUkFUSU9OCiAgICAgKgogICAgICogUkVQTEFDRSBXSVRIIFlPVVIgT1dOIEFQSSBTRVRUSU5HUwogICAgICovCiAgICAgIHZhciBlbWFpbCA9IGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUoc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKSwgIm1haWwiKS5pdGVyYXRvcigpLm5leHQoKTsKICAgIHZhciBVT1BfQ0xBU1NfQVBJX1VSSSA9ICJodHRwczovL2R5NHJwZXc1dmEuZXhlY3V0ZS1hcGkudXMtZWFzdC0xLmFtYXpvbmF3cy5jb20vZm9yZ2Vyb2NrL2NvdXJzZT9jb3Vyc2VJZD1DRVM0MjIiOwogICAgICAvL3ZhciBVT1BfQ0xBU1NfQVBJX1VSSSA9ICJodHRwczovL2R5NHJwZXc1dmEuZXhlY3V0ZS1hcGkudXMtZWFzdC0xLmFtYXpvbmF3cy5jb20vZm9yZ2Vyb2NrL2NvdXJzZT9lbWFpbElkPSIuY29uY2F0KGVtYWlsKTsKICAgIC8qCiAgICAgKiBFTkQgU0NSSVBUIENPTkZJR1VSQVRJT04KICAgICAqLwoKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldE1ldGhvZCgnR0VUJyk7CiAgICByZXF1ZXN0LnNldFVyaShVT1BfQ0xBU1NfQVBJX1VSSSk7CgogICAgdmFyIHJlc3BvbnNlID0gaHR0cENsaWVudC5zZW5kKHJlcXVlc3QpLmdldCgpOwogICAgdmFyIFVPUENsYXNzSUQgPSByZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKTsKICAgIGxvZ2dlci53YXJuaW5nKCJVT1AgR2V0IENvdXJzZSBJRDogQVBJIGNhbGwgcmVzdWx0OiBDb3Vyc2UgSUQ9Ii5jb25jYXQoVU9QQ2xhc3NJRCkpOwoKICAgIC8qIFNhbXBsZSBBUEkgcmVzcG9uc2UKICAgIENFUzQyMQogICAgKi8KCiAgICBpZiAoVU9QQ2xhc3NJRCkgewogICAgICAgIG91dGNvbWUgPSAiaGFzIGNsYXNzZXMiOwoKICAgICAgICAvLyBwcmVzZXJ2ZSByZXN1bHQgaW4gc2hhcmVkIHN0YXRlCiAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJ1b3BDdXJyZW50Q2xhc3NJRCIsIFVPUENsYXNzSUQpOwogICAgfSAKICAgIGVsc2UgaWYgKFVPUENsYXNzSUQgPT09ICIiKSB7CiAgICAgICAgb3V0Y29tZSA9ICJubyBjbGFzc2VzIjsKICAgIH0KICAgIGVsc2UgewogICAgICAgIG91dGNvbWUgPSAiZXJyb3IiOwogICAgfQoKfSBlbHNlIHsKICAgIGxvZ2dlci5lcnJvcigiVU9QIEdldCBDb3Vyc2UgSUQ6IG5vIGNsYXNzZXMhIik7Cn0KCmxvZ2dlci53YXJuaW5nKCJVT1AgR2V0IENvdXJzZSBJRDogRW5kIChvdXRjb21lPSIuY29uY2F0KG91dGNvbWUpLmNvbmNhdCgiKSIpKTs=",
  },
  {
    "_id": "c9cb4b1e-1cd3-4e5b-8f56-140f83ba9f6d",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if username has already been collected.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FrodoTestScript1",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "9535446c-0ff6-4a76-8576-616599119d64",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Remove button from page.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Remove Button",
    "script": "LyogUmVtb3ZlIEJ1dHRvbgogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBIaWRlIGJ1dHRvbnMgb24gdGhlIGpvdXJuZXkgcGFnZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKi8KKGZ1bmN0aW9uICgpIHsKICAgIHZhciBzY3JpcHQgPSAiQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2J1dHRvbicpKS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7ZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnfSkiCiAgICB2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICAgICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2ssCiAgICAgICAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrCiAgICApCiAgICB2YXIgbWVzc2FnZSA9ICIgIgogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICAgICAgbmV3IGZyLlRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICAgICAgICAgIGZyLlRleHRPdXRwdXRDYWxsYmFjay5JTkZPUk1BVElPTiwKICAgICAgICAgICAgICAgIG1lc3NhZ2UKICAgICAgICAgICAgKSwKICAgICAgICAgICAgbmV3IGZyLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICAgICAgKS5idWlsZCgpCiAgICB9Cn0oKSk7",
  },
  {
    "_id": "23143919-6b78-40c3-b25e-beca19b229e0",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Normalizes raw profile data from GitHub",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "GitHub Profile Normalization (VS)",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmxvZ2dlci53YXJuaW5nKCJHaXRIdWIgcmF3UHJvZmlsZTogIityYXdQcm9maWxlKQoKcmV0dXJuIGpzb24ob2JqZWN0KAogICAgICAgIGZpZWxkKCJpZCIsIHJhd1Byb2ZpbGUuaWQpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIHJhd1Byb2ZpbGUubmFtZSksCiAgICAgICAgZmllbGQoImdpdmVuTmFtZSIsIHJhd1Byb2ZpbGUuZmlyc3RfbmFtZSksCiAgICAgICAgZmllbGQoImZhbWlseU5hbWUiLCByYXdQcm9maWxlLmxhc3RfbmFtZSksCiAgICAgICAgZmllbGQoInBob3RvVXJsIiwgcmF3UHJvZmlsZS5waWN0dXJlLmRhdGEudXJsKSwKICAgICAgICBmaWVsZCgiZW1haWwiLCByYXdQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCByYXdQcm9maWxlLmVtYWlsKSkp",
  },
  {
    "_id": "739bdc48-fd24-4c52-b353-88706d75558a",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if username has already been collected.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Check Username",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "aa2dabff-f5c4-4dc5-b4ac-5909e88a3a8f",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Verify known caller by first name",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twilio IVR: Verify Known Caller",
    "script": "LyogVHdpbGlvIElWUjogVmVyaWZ5IEtub3duIENhbGxlcgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICogLSBmYWxzZQogKiAKICogRGVwZW5kaW5nIG9uIHRoZSBhbW91bnQgb2YgZGF0YSBjb2xsZWN0ZWQgdGhyb3VnaCBjYWxsYmFja3MgYW5kIGhvdyBtYW55IG9mIHRoZSBjYWxsUGFyYW1zCiAqIHlvdSBhY3RpdmF0ZSBiZWxvdywgeW91IHdpbGwgbmVlZCB0byBjaGFuZ2UgeW91ciBhdXRoZW50aWNhdGlvbiBzZXNzaW9uIGZyb20gSldUIHRvIENUUyBvcgogKiBNZW1vcnkuCiAqLwpsb2dnZXIud2FybmluZygiVHdpbGlvIElWUjogVmVyaWZ5IEtub3duIENhbGxlcjogc3RhcnQiKTsKb3V0Y29tZSA9ICJmYWxzZSI7CgovKiBCZWdpbiBDb25maWd1cmF0aW9uCiAqLwoKLy8gRm9yIElEIENsb3VkIHVzZSAiX2lkIiwgZm9yIGNsYXNzaWMgZGVwbG95bWVudHMgdXNlICJ1c2VybmFtZSIKdmFyIHVzZXJpZCA9IHNoYXJlZFN0YXRlLmdldCgiX2lkIikKCi8vIFJldHJpZXZlIHRoZSBrbm93biBjYWxsZXIncyBmaXJzdCBuYW1lCnZhciBmaXJzdE5hbWUgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHVzZXJpZCwgImdpdmVuTmFtZSIpLml0ZXJhdG9yKCkubmV4dCgpLnJlcGxhY2VBbGwoIlteYS16QS1aIF0iLCAiIikudG9Mb3dlckNhc2UoKTsKCi8vIEJ1aWxkIG91dCB0aGUgZnVsbCBtZXNzYWdlCnZhciBtZXNzYWdlID0gIkkgc2VlIHdlIGhhdmUgYSBwcm9maWxlIGFzc29jaWF0ZWQgd2l0aCB5b3VyIHBob25lIG51bWJlciEiOwoKLy8gQnVpbGQgb3V0IHRoZSB2ZXJpZmljYXRpb24gcHJvbXB0CnZhciBwcm9tcHQgPSAiVG8gdmVyaWZ5IEkgaGF2ZSB0aGUgcmlnaHQgYWNjb3VudCwgcGxlYXNlIHNheSB5b3VyIGZpcnN0IG5hbWUuIjsKCi8qIEVuZCBDb25maWd1cmF0aW9uCiAqLwoKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLAogICAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjaywKICAgICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0SW5wdXRDYWxsYmFjawopOwogIAp3aXRoIChmcikgewogICAgICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgICAgIHZhciBvdXRwdXQgPSBuZXcgVGV4dE91dHB1dENhbGxiYWNrKFRleHRPdXRwdXRDYWxsYmFjay5JTkZPUk1BVElPTiwgbWVzc2FnZSk7CiAgICAgICAgdmFyIGlucHV0ID0gbmV3IFRleHRJbnB1dENhbGxiYWNrKHByb21wdCk7CiAgICAgICAgYWN0aW9uID0gQWN0aW9uLnNlbmQob3V0cHV0LCBpbnB1dCkuYnVpbGQoKTsKICAgICAgfSAKICAgICAgZWxzZSB7CiAgICAgICAgICB2YXIgYW5zd2VyID0gY2FsbGJhY2tzLmdldCgxKS5nZXRUZXh0KCkucmVwbGFjZUFsbCgiW15hLXpBLVogXSIsICIiKS50b0xvd2VyQ2FzZSgpOwogICAgICAgIGxvZ2dlci53YXJuaW5nKCJUd2lsaW8gSVZSOiBWZXJpZnkgS25vd24gQ2FsbGVyOiBjYWxsYmFja3MgcmVjZWl2ZWQ6IGFuc3dlcj0iLmNvbmNhdChhbnN3ZXIpLmNvbmNhdCgiIFtmaXJzdE5hbWU9IikuY29uY2F0KGZpcnN0TmFtZSkuY29uY2F0KCJdIikpOwogICAgICAgIGlmIChhbnN3ZXIgPT0gZmlyc3ROYW1lKSB7CiAgICAgICAgICAgICAgb3V0Y29tZSA9ICJ0cnVlIjsKICAgICAgICB9CiAgICAgICAgICBlbHNlIGlmIChhbnN3ZXIubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICBvdXRjb21lID0gIm5vIGlucHV0IjsKICAgICAgICB9CiAgICAgICAgbG9nZ2VyLndhcm5pbmcoIlR3aWxpbyBJVlI6IFZlcmlmeSBLbm93biBDYWxsZXI6IGZpbmlzaCBbb3V0Y29tZT0iLmNvbmNhdChvdXRjb21lKS5jb25jYXQoIl0iKSk7CiAgICAgICAgYWN0aW9uID0gQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKICAgICAgfQp9",
  },
  {
    "_id": "484e6246-dbc6-4288-97e6-54e55431402e",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Apple",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Apple Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEtMjAyMiBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICoKICogSW4gc29tZSBjb21tb24gZGVmYXVsdCBjb25maWd1cmF0aW9ucywgdGhlIGZvbGxvd2luZyBrZXlzIGFyZSByZXF1aXJlZCB0byBiZSBub3QgZW1wdHk6CiAqIHVzZXJuYW1lLCBnaXZlbk5hbWUsIGZhbWlseU5hbWUsIGVtYWlsLgogKgogKiBGcm9tIFJGQzQ1MTc6IEEgdmFsdWUgb2YgdGhlIERpcmVjdG9yeSBTdHJpbmcgc3ludGF4IGlzIGEgc3RyaW5nIG9mIG9uZSBvciBtb3JlCiAqIGFyYml0cmFyeSBjaGFyYWN0ZXJzIGZyb20gdGhlIFVuaXZlcnNhbCBDaGFyYWN0ZXIgU2V0IChVQ1MpLgogKiBBIHplcm8tbGVuZ3RoIGNoYXJhY3RlciBzdHJpbmcgaXMgbm90IHBlcm1pdHRlZC4KICovCgppbXBvcnQgc3RhdGljIG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUuZmllbGQKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmpzb24KaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLm9iamVjdAoKU3RyaW5nIGVtYWlsID0gImNoYW5nZUBtZS5jb20iClN0cmluZyBzdWJqZWN0SWQgPSByYXdQcm9maWxlLnN1YgpTdHJpbmcgZmlyc3ROYW1lID0gIiAiClN0cmluZyBsYXN0TmFtZSA9ICIgIgpTdHJpbmcgdXNlcm5hbWUgPSBzdWJqZWN0SWQKU3RyaW5nIG5hbWUKCmlmIChyYXdQcm9maWxlLmlzRGVmaW5lZCgiZW1haWwiKSAmJiByYXdQcm9maWxlLmVtYWlsLmlzTm90TnVsbCgpKXsgLy8gVXNlciBjYW4gZWxlY3QgdG8gbm90IHNoYXJlIHRoZWlyIGVtYWlsCiAgICBlbWFpbCA9IHJhd1Byb2ZpbGUuZW1haWwuYXNTdHJpbmcoKQogICAgdXNlcm5hbWUgPSBlbWFpbAp9CmlmIChyYXdQcm9maWxlLmlzRGVmaW5lZCgibmFtZSIpICYmIHJhd1Byb2ZpbGUubmFtZS5pc05vdE51bGwoKSkgewogICAgaWYgKHJhd1Byb2ZpbGUubmFtZS5pc0RlZmluZWQoImZpcnN0TmFtZSIpICYmIHJhd1Byb2ZpbGUubmFtZS5maXJzdE5hbWUuaXNOb3ROdWxsKCkpIHsKICAgICAgICBmaXJzdE5hbWUgPSByYXdQcm9maWxlLm5hbWUuZmlyc3ROYW1lLmFzU3RyaW5nKCkKICAgIH0KICAgIGlmIChyYXdQcm9maWxlLm5hbWUuaXNEZWZpbmVkKCJsYXN0TmFtZSIpICYmIHJhd1Byb2ZpbGUubmFtZS5sYXN0TmFtZS5pc05vdE51bGwoKSkgewogICAgICAgIGxhc3ROYW1lID0gcmF3UHJvZmlsZS5uYW1lLmxhc3ROYW1lLmFzU3RyaW5nKCkKICAgIH0KfQoKbmFtZSA9IChmaXJzdE5hbWU/LnRyaW0oKSA/IGZpcnN0TmFtZSA6ICIiKSArIChsYXN0TmFtZT8udHJpbSgpID8gKChmaXJzdE5hbWU/LnRyaW0oKSA/ICIgIiA6ICIiKSArIGxhc3ROYW1lKSA6ICIiKQpuYW1lID0gICghbmFtZT8udHJpbSgpKSA/ICIgIiA6IG5hbWUKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCBzdWJqZWN0SWQpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIG5hbWUpLAogICAgICAgIGZpZWxkKCJlbWFpbCIsIGVtYWlsKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgZmlyc3ROYW1lKSwKICAgICAgICBmaWVsZCgiZmFtaWx5TmFtZSIsIGxhc3ROYW1lKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCB1c2VybmFtZSkpKQ==",
  },
  {
    "_id": "e15a13ee-9168-40cf-934f-656a5f568a6a",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "hashdeviceProfile",
    "script": "LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwoKLy88c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwOi8vd3d3Lm15ZXJzZGFpbHkub3JnL2pvc2VwaC9qYXZhc2NyaXB0L21kNS5qcyIgLz4KCmZ1bmN0aW9uIGhhc2hDb2RlKHIpe3ZhciBlLGg9MDtmb3IoZT0wO2U8ci5sZW5ndGg7ZSsrKWg9KGg8PDUpLWgrci5jaGFyQ29kZUF0KGUpLGh8PTA7cmV0dXJuIGg+Pj4wfQoKCnZhciBoYXNoTWUgPSBzaGFyZWRTdGF0ZS5nZXQoImZvcmdlUm9jay5kZXZpY2UucHJvZmlsZSIpOwp2YXIgaGFzaE1lID0gc2hhcmVkU3RhdGUucHV0KCJmb3JnZVJvY2suZGV2aWNlLnByb2ZpbGUiLCJkZWxldGVkIGluIHNjcmlwdCAtIGhhc2hkZXZpY2VQcm9maWxlIik7Ci8vdmFyIGhhc2hNZVN0ciA9IEpTT04uc3RyaW5naWZ5KGhhc2hNZSk7Ci8vbG9nZ2VyLmVycm9yKCJIYXNoTWVTdHI6ICIgKyBoYXNoTWVTdHIpOwoKc2hhcmVkU3RhdGUucHV0KCJkZXZpY2VIYXNoIixoYXNoQ29kZShlc2NhcGUoaGFzaE1lKSkudG9TdHJpbmcoKSk7CnNoYXJlZFN0YXRlLnB1dCgiZnJJbmRleGVkU3RyaW5nMSIsaGFzaENvZGUoZXNjYXBlKGhhc2hNZSkpLnRvU3RyaW5nKCkpOwoKb3V0Y29tZSA9ICJ0cnVlIjs=",
  },
  {
    "_id": "1c0c73e8-2be1-41ce-b042-3c39694346b5",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Verify unknown caller by account number",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twilio IVR: Verify Unknown Caller",
    "script": "LyogVHdpbGlvIElWUjogVmVyaWZ5IFVua25vd24gQ2FsbGVyCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKiAKICogRGVwZW5kaW5nIG9uIHRoZSBhbW91bnQgb2YgZGF0YSBjb2xsZWN0ZWQgdGhyb3VnaCBjYWxsYmFja3MgYW5kIGhvdyBtYW55IG9mIHRoZSBjYWxsUGFyYW1zCiAqIHlvdSBhY3RpdmF0ZSBiZWxvdywgeW91IHdpbGwgbmVlZCB0byBjaGFuZ2UgeW91ciBhdXRoZW50aWNhdGlvbiBzZXNzaW9uIGZyb20gSldUIHRvIENUUyBvcgogKiBNZW1vcnkuCiAqLwpsb2dnZXIud2FybmluZygiVHdpbGlvIElWUjogVmVyaWZ5IFVua25vd24gQ2FsbGVyOiBzdGFydCIpOwpvdXRjb21lID0gInRydWUiOwoKLyogQmVnaW4gQ29uZmlndXJhdGlvbgogKi8KCi8vIEJ1aWxkIG91dCB0aGUgdmVyaWZpY2F0aW9uIHByb21wdAp2YXIgcHJvbXB0ID0gIlRvIGxvb2t1cCB5b3VyIGFjY291bnQsIHBsZWFzZSBlbnRlciBvciBzYXkgeW91ciBhY2NvdW50IG51bWJlci4iOwoKLyogRW5kIENvbmZpZ3VyYXRpb24KICovCgp2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGksCiAgICAgIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suVGV4dElucHV0Q2FsbGJhY2sKKTsKICAKd2l0aCAoZnIpIHsKICAgICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICB2YXIgaW5wdXQgPSBuZXcgVGV4dElucHV0Q2FsbGJhY2socHJvbXB0KTsKICAgICAgICBhY3Rpb24gPSBBY3Rpb24uc2VuZChpbnB1dCkuYnVpbGQoKTsKICAgICAgfSAKICAgICAgZWxzZSB7CiAgICAgICAgICB2YXIgYW5zd2VyID0gbmV3IFN0cmluZyhjYWxsYmFja3MuZ2V0KDApLmdldFRleHQoKSkucmVwbGFjZSgvW14wLTldL2csICIiKTsKICAgICAgICBsb2dnZXIud2FybmluZygiVHdpbGlvIElWUjogVmVyaWZ5IFVua25vd24gQ2FsbGVyOiBjYWxsYmFja3MgcmVjZWl2ZWQ6IGFuc3dlcj0iLmNvbmNhdChhbnN3ZXIpKTsKICAgICAgICAgIHNldFNoYXJlZE9iamVjdEF0dHJpYnV0ZSgiZnJJbmRleGVkSW50ZWdlcjUiLCBhbnN3ZXIpOwogICAgICAgIGxvZ2dlci53YXJuaW5nKCJUd2lsaW8gSVZSOiBWZXJpZnkgVW5rbm93biBDYWxsZXI6IGZpbmlzaCBbb3V0Y29tZT0iLmNvbmNhdChvdXRjb21lKS5jb25jYXQoIl0iKSk7CiAgICAgICAgYWN0aW9uID0gQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKICAgICAgfQp9CgovKgogKiBTdG9yZSBhdHRyaWJ1dGVzIGluIHNoYXJlZCBzdGF0ZSBmb3IgdXNlIHdpdGggdGhlIENyZWF0ZS9QYXRjaCBPYmplY3Qgbm9kZXMuCiAqLwpmdW5jdGlvbiBzZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHsKICAgICAgIHZhciBzdG9yYWdlID0gc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIik7CiAgICBpZiAoc3RvcmFnZSAmJiB2YWx1ZSkgewogICAgICAgICAgaWYgKHN0b3JhZ2UucHV0KSB7CiAgICAgICAgICAgICAgc3RvcmFnZS5wdXQobmFtZSwgdmFsdWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHN0b3JhZ2VbbmFtZV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIGlmICh2YWx1ZSkgewogICAgICAgIHNoYXJlZFN0YXRlLnB1dCgib2JqZWN0QXR0cmlidXRlcyIsIEpTT04ucGFyc2UoIntcIiIrbmFtZSsiXCI6XCIiK3ZhbHVlKyJcIn0iKSk7CiAgICB9Cn0=",
  },
  {
    "_id": "fff76556-2882-4109-a9a6-c42d546cfe57",
    "context": "OAUTH2_SCRIPTED_JWT_ISSUER",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Service Account - JWT Issuers",
    "script": "KGZ1bmN0aW9uICgpIHsKICB2YXIgZnJKYXZhID0gSmF2YUltcG9ydGVyKAogICAgb3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5UcnVzdGVkSnd0SXNzdWVyQ29uZmlnLAogICAgamF2YS51dGlsLkhhc2hTZXQKICApOwoKICB3aXRoIChmckphdmEpIHsKICAgIHZhciBpc3MgPSBpZFJlcG9zaXRvcnkuZ2V0SWRlbnRpdHkoaXNzdWVyKTsKICAgIGlmIChpc3MgPT0gbnVsbCkgewogICAgICBsb2dnZXIubWVzc2FnZSgnTm8gaXNzdWVyIGZvdW5kIGZvcjogJyArIGlzc3Vlcik7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgbG9nZ2VyLm1lc3NhZ2UoJ0ZvdW5kIGlzc3VlcjogJyArIGlzcyk7CgogICAgdmFyIGFjY291bnRTdGF0dXMgPSBpc3MuZ2V0QXR0cmlidXRlVmFsdWVzKCdpbmV0VXNlclN0YXR1cycpOwogICAgaWYgKCFhY2NvdW50U3RhdHVzIHx8IGFjY291bnRTdGF0dXMubGVuZ3RoID09PSAwKSB7CiAgICAgIGxvZ2dlci5tZXNzYWdlKCdObyBpbmV0VXNlclN0YXR1cyBhdHRyaWJ1dGUgaW4gaXNzdWVyJyk7CiAgICAgIHJldHVybiBudWxsOwogICAgfSBlbHNlIGlmIChhY2NvdW50U3RhdHVzWzBdLnRvTG93ZXJDYXNlKCkgIT0gJ2FjdGl2ZScpIHsKICAgICAgbG9nZ2VyLm1lc3NhZ2UoJ0lzc3VlciBpcyBub3QgYWN0aXZlJyk7CiAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIHZhciBqd2tzQXR0cnMgPSBpc3MuZ2V0QXR0cmlidXRlVmFsdWVzKCdmci1hdHRyLWp3a3MnKTsKICAgIGlmICghandrc0F0dHJzIHx8IGp3a3NBdHRycy5sZW5ndGggPT09IDApIHsKICAgICAgbG9nZ2VyLm1lc3NhZ2UoJ05vIGp3a3MgYXR0cmlidXRlcyBpbiBpc3N1ZXInKTsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgdmFyIGp3a1NldCA9IGp3a3NBdHRyc1swXTsKICAgIGlmICghandrU2V0KSB7CiAgICAgIGxvZ2dlci5tZXNzYWdlKCdObyBqd2sgc2V0IGluIGlzc3VlcicpOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICB2YXIgY29uZmlnID0gbmV3IFRydXN0ZWRKd3RJc3N1ZXJDb25maWcoCiAgICAgIGlzc3VlciwKICAgICAgJ3N1YicsCiAgICAgICdzY29wZScsCiAgICAgIG5ldyBIYXNoU2V0KFtpc3N1ZXJdKSwKICAgICAgandrU2V0LAogICAgICBudWxsLCBudWxsLCBudWxsCiAgICApOwoKICAgIHJldHVybiBjb25maWc7CiAgfQp9KCkpOw==",
  },
  {
    "_id": "b7259916-71ed-4675-8c5a-de86a80e4aed",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if username has already been collected.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FrodoTestScript2",
    "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "b3824c66-2dff-4613-9e54-4a7577fdb765",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Places a timestamp in the frIndexedMultivalued1 attribute",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "TimeStamp_Login",
    "script": "LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwoKCi8vdmFyIHRpbWVzdGFtcHMgPSBzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKS5nZXQoImZySW5kZXhlZE11bHRpdmFsdWVkMSIpOwoKCnZhciBsYXN0TG9naW4gPSBuZXcgRGF0ZSgpOwovKgp2YXIgZGF0ZXRpbWUgPSAiIisgY3VycmVudGRhdGUuZ2V0RGF0ZSgpICsgIi8iCiAgICAgICAgICAgICAgICArIChjdXJyZW50ZGF0ZS5nZXRNb250aCgpKzEpICArICIvIiAKICAgICAgICAgICAgICAgICsgY3VycmVudGRhdGUuZ2V0RnVsbFllYXIoKSArICIgQCAiICAKICAgICAgICAgICAgICAgICsgY3VycmVudGRhdGUuZ2V0SG91cnMoKSArICI6IiAgCiAgICAgICAgICAgICAgICArIGN1cnJlbnRkYXRlLmdldE1pbnV0ZXMoKSArICI6IiAKICAgICAgICAgICAgICAgICsgY3VycmVudGRhdGUuZ2V0U2Vjb25kcygpOwoqLwoKdmFyIG9iamVjdEF0dHJpYnV0ZXMgPSBzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKTsKCgpzaGFyZWRTdGF0ZS5wdXQoImxhc3QgTG9naW4iLGxhc3RMb2dpbi50b1N0cmluZygpKTsKCgoKCgpvYmplY3RBdHRyaWJ1dGVzLnB1dCgiZnJVbmluZGV4ZWRTdHJpbmcxIixsYXN0TG9naW4udG9TdHJpbmcoKSk7CgoKc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIixvYmplY3RBdHRyaWJ1dGVzKTsKCgpvdXRjb21lID0gInRydWUiOw==",
  },
  {
    "_id": "790045fa-a325-4e3e-96f8-d4a91b32e9de",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Use Have I Been Pwned Password to check if password has been breached.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "HIBP Password Breach Analysis",
    "script": "LyogSElCUCBQYXNzd29yZCBCcmVhY2ggQW5hbHlzaXMKICoKICogQXV0aG9yczogam9uLmtuaWdodEBmb3JnZXJvY2suY29tLCB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogVXNlIEhhdmUgSSBCZWVuIFB3bmVkIFBhc3N3b3JkIHRvIGNoZWNrIGlmIHBhc3N3b3JkIGhhcyBiZWVuIGJyZWFjaGVkLgogKiBDYWxscyBISUJQIEFQSSB0byByZXRyaWV2ZSB0aGUgY291bnQgb2YgbWF0Y2hpbmcgcGFzc3dvcmRzIGluIGJyZWFjaGVkIAogKiBwYXNzd29yZCBkYXRhYmFzZQogKiAKICogVGhpcyBzY3JpcHQgbmVlZHMgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIG5vdCB3b3JrIHByb3Blcmx5IGFzIGlzLiAKICogSXQgcmVxdWlyZXMgdGhlIFBhc3N3b3JkIG9yIFBsYXRmb3JtIFBhc3N3b3JkIGNvbGxlY3RvciBub2RlcyBiZWZvcmUKICogaXQgY2FuIG9wZXJhdGUuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gY2xlYXIKICogICBUaGUgbnVtYmVyIG9mIGJyZWFjaGVzIGZvciBwYXNzd29yZCB3YXMgZWl0aGVyIHplcm8gb3IgbGVzcyB0aGFuIHRoZSAKICogICB2YWx1ZSBvZiBUSFJFU0hPTEQKICogLSBicmVhY2hlZCAKICogICBUaGUgbnVtYmVyIG9mIGluY2lkZW50cyBvZiB0aGUgcGFzc3dvcmQgaW4gdGhlIGJyZWFjaGVkIHBhc3N3b3JkIAogKiAgIGRhdGFiYXNlIGV4Y2VlZHMgVEhSRVNIT0xECiAqIC0gZmFpbGVkCiAqICAgVGhlIEFQSSBjYWxsIHdhcyByZWplY3RlZC4KICovCihmdW5jdGlvbiAoKSB7CiAgICB2YXIgVVNFUl9BR0VOVD0iRm9yZ2VSb2NrIjsKICAgIHZhciBISUJQX0FQSV9LRVk9c3lzdGVtRW52LmdldFByb3BlcnR5KCJlc3YuaGlicC5hcGkua2V5Iik7CiAgICB2YXIgVEhSRVNIT0xEPTA7CgogICAgZnVuY3Rpb24gdG9IZXhTdHJpbmcoYnl0ZUFycmF5KSB7CiAgICAgICAgdmFyIHMgPSAnJzsKICAgICAgICBieXRlQXJyYXkuZm9yRWFjaChmdW5jdGlvbihieXRlKSB7CiAgICAgICAgICAgIHMgKz0gKCcwJyArIChieXRlICYgMHhGRikudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHM7CiAgICB9CgogICAgb3V0Y29tZSA9ICJmYWlsZWQiOwoKICAgIHZhciBtZCA9IGphdmEuc2VjdXJpdHkuTWVzc2FnZURpZ2VzdC5nZXRJbnN0YW5jZSgnU0hBLTEnKTsKICAgICAgdmFyIHBhc3N3b3JkID0gbm9kZVN0YXRlLmdldCgicGFzc3dvcmQiKS5hc1N0cmluZygpOwovLyAgICAgIHZhciBwYXNzd29yZCA9IG5ldyBqYXZhLmxhbmcuU3RyaW5nKCIiKTsKLy8gICAgICBpZiAobm9kZVN0YXRlLmdldCgicGFzc3dvcmQiKSkgewovLyAgICAgIHBhc3N3b3JkID0gbm9kZVN0YXRlLmdldCgicGFzc3dvcmQiKS5hc1N0cmluZygpOwovLyAgICB9CiAgICB2YXIgYnl0ZUFycmF5ID0gcGFzc3dvcmQuZ2V0Qnl0ZXMoIlVURi04Iik7CiAgICBtZC51cGRhdGUoYnl0ZUFycmF5KTsKICAgIHZhciBkaWdlc3QgPSBtZC5kaWdlc3QoKTsKICAgIHZhciBoZXggPSBTdHJpbmcodG9IZXhTdHJpbmcoZGlnZXN0KSkudG9VcHBlckNhc2UoKTsKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRNZXRob2QoJ0dFVCcpOwogICAgcmVxdWVzdC5zZXRVcmkoJ2h0dHBzOi8vYXBpLnB3bmVkcGFzc3dvcmRzLmNvbS9yYW5nZS8nICsgaGV4LnN1YnN0cmluZygwLDUpKTsKICAgIHJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgiQWNjZXB0IiwiKi8qIik7CiAgICByZXF1ZXN0LmdldEhlYWRlcnMoKS5hZGQoIkNvbnRlbnQtVHlwZSIsImFwcGxpY2F0aW9uL2pzb24iKTsKICAgIHJlcXVlc3QuZ2V0SGVhZGVycygpLmFkZCgiVXNlci1BZ2VudCIsIFVTRVJfQUdFTlQpOwogICAgcmVxdWVzdC5nZXRIZWFkZXJzKCkuYWRkKCJoaWJwLWFwaS1rZXkiLCBISUJQX0FQSV9LRVkpOwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKCiAgICBpZiAocmVzcG9uc2UuZ2V0U3RhdHVzKCkuZ2V0Q29kZSgpID09PSAyMDApIHsKICAgICAgICB2YXIgbWF4ID0gMDsKICAgICAgICBvdXRjb21lID0gImNsZWFyIjsKICAgICAgICB2YXIgcmVzdWx0ID0gcmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCk7CiAgICAgICAgdmFyIGxpbmVzID0gcmVzdWx0LnNwbGl0KCdcbicpOwogICAgICAgIGZvciAoaT0wOyBpPGxpbmVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBwcmVmaXggPSBsaW5lc1tpXS5zcGxpdCgnOicpWzBdOwogICAgICAgICAgICBpZiAoU3RyaW5nKGhleC5zdWJzdHJpbmcoMCw1KSArIHByZWZpeCkgPT0gaGV4KSB7CiAgICAgICAgICAgICAgICB2YXIgY291bnQgPSBsaW5lc1tpXS5zcGxpdCgnOicpWzFdOwogICAgICAgICAgICAgICAgaWYgKGNvdW50ID4gbWF4KSBtYXggPSBjb3VudDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAobWF4ID4gVEhSRVNIT0xEKSBvdXRjb21lID0gImJyZWFjaGVkIjsKICAgICAgICBzaGFyZWRTdGF0ZS5wdXQoImhpYnBfcGFzc3dvcmRfY291bnQiLCBtYXgpOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "0d471aff-81f3-41ce-8bf9-35c27cdc0a26",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_CanBeInvited",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKKGZ1bmN0aW9uKCkgewogIHZhciBmciA9IG5ldyBKYXZhSW1wb3J0ZXIoCiAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGVzLAogICAgb3JnLmZvcmdlcm9jay5ndWljZS5jb3JlCiAgKTsKCiAgd2l0aCAoZnIpIHsKICAgIHRyeSB7CgogICAgICBvdXRjb21lID0gJ0ZhbHNlJzsKCiAgICAgIHZhciByZWFsbSA9IHNoYXJlZFN0YXRlLmdldCgncmVhbG0nKTsKICAgICAgdmFyIHV1aWQgPSBzaGFyZWRTdGF0ZS5nZXQoJ3VzZXJuYW1lJyk7CiAgICAgIHZhciBpZGVudGl0eVByb3ZpZGVyID0gSW5qZWN0b3JIb2xkZXIuZ2V0SW5zdGFuY2UoSWRlbnRpdHlQcm92aWRlcik7CiAgICAgIHZhciBpZGVudGl0eSA9IGlkZW50aXR5UHJvdmlkZXIuZ2V0SWRlbnRpdHkodXVpZCwgcmVhbG0pOwogICAgICB2YXIgYXR0cnMgPSBpZGVudGl0eS5nZXRBdHRyaWJ1dGVzKCk7CgogICAgICBpZiAoIWF0dHJzLmNvbnRhaW5zS2V5KCdmci1pZG0taW52aXRlRGF0ZScpKSB7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoJ0FkbWluIGNhbm5vdCBiZSBpbnZpdGVkOiBubyBpbnZpdGUgZGF0ZScpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKGF0dHJzLmNvbnRhaW5zS2V5KCdmci1pZG0tb25ib2FyZERhdGUnKSkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCdBZG1pbiBjYW5ub3QgYmUgaW52aXRlZDogYWxyZWFkeSBvbmJvYXJkZWQnKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBlbWFpbCA9IGF0dHJzLmdldCgnbWFpbCcpLml0ZXJhdG9yKCkubmV4dCgpOwogICAgICB2YXIgb2JqQXR0cnMgPSB7CiAgICAgICAgbWFpbDogZW1haWwsCiAgICAgICAgdXNlck5hbWU6IGVtYWlsLAogICAgICB9OwogICAgICBzaGFyZWRTdGF0ZS5wdXQoJ29iamVjdEF0dHJpYnV0ZXMnLCBvYmpBdHRycyk7CgogICAgICBsb2dnZXIubWVzc2FnZSgnQWRtaW4gY2FuIGJlIGludml0ZWQnKTsKICAgICAgb3V0Y29tZSA9ICdUcnVlJzsKCiAgICB9IGNhdGNoIChlKSB7CgogICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBkZXRlcm1pbmUgaWYgYWRtaW4gY2FuIGJlIGludml0ZWQ6IHt9JywgZSk7CgogICAgfQogIH0KfSgpKTs=",
  },
  {
    "_id": "988c10fa-98da-4bf7-8ac9-a558d2fef1fd",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Protection from malicious IDPs. Only allow white-listed email domains (usernames are email addresses).",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "IDP Integrity Check",
    "script": "LyogSURQIEludGVncml0eSBDaGVjawogKiAKICogUHJvdGVjdGlvbiBmcm9tIG1hbGljaW91cyBJRFBzLiBPbmx5IGFsbG93IHdoaXRlLWxpc3RlZCBlbWFpbCBkb21haW5zICh1c2VybmFtZXMgYXJlIGVtYWlsIGFkZHJlc3NlcykuCiAqIAogKiBUaGlzIHNjcmlwdCBkb2VzIG5vdCByZXF1aXJlIGNvZmlndXJhdGlvbi4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICogLSBmYWxzZQogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqLwooZnVuY3Rpb24gKCkgewogICAgb3V0Y29tZSA9ICJmYWxzZSI7CiAgICAgIHZhciByb3V0ZWRJRFAgPSBzaGFyZWRTdGF0ZS5nZXQoInJvdXRlZElEUHMiKS5nZXQoMCk7CiAgICAgIHZhciB2YWxpZERvbWFpbnMgPSBbXTsKICAgICAgaWYgKHJvdXRlZElEUCkgewogICAgICAgICAgdmFsaWREb21haW5zID0gcm91dGVkSURQLmdldCgiaWRwRG9tYWlucyIpOwogICAgfQogICAgICAKICAgICAgdmFyIHVzZXJuYW1lID0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpOwogICAgICB2YXIgZG9tYWluID0gdXNlcm5hbWUuc3Vic3RyKHVzZXJuYW1lLmxhc3RJbmRleE9mKCJAIikrMSk7CiAgICAgIGlmICh2YWxpZERvbWFpbnMuaW5kZXhPZihkb21haW4pID4gLTEpIHsKICAgICAgICAgIG91dGNvbWUgPSAidHJ1ZSI7CiAgICB9Cn0oKSk7",
  },
  {
    "_id": "cdea92a1-d2bf-4364-a525-fde8b7a95792",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Get Lockout Status",
    "script": "b3V0Y29tZSA9ICJ0cnVlIjsKCnZhciB1c2VybmFtZSA9IHNoYXJlZFN0YXRlLmdldCgiX2lkIikKdmFyIGxvY2tvdXREYXRhQXR0ciA9ICJzdW5BTUF1dGhJbnZhbGlkQXR0ZW1wdHNEYXRhIgp2YXIgYWNjb3VudFN0YXR1c0F0dHIgPSAiaW5ldFVzZXJTdGF0dXMiCgp2YXIgbG9ja291dERhdGEgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHVzZXJuYW1lLCBsb2Nrb3V0RGF0YUF0dHIpCnZhciBhY2NvdW50U3RhdHVzID0gaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZSh1c2VybmFtZSwgYWNjb3VudFN0YXR1c0F0dHIpCgp0cmFuc2llbnRTdGF0ZS5wdXQoImxvY2tvdXREYXRhIiwgbG9ja291dERhdGEpCnRyYW5zaWVudFN0YXRlLnB1dCgiYWNjb3VudFN0YXR1cyIsIGFjY291bnRTdGF0dXMpCgpsb2dnZXIuZXJyb3IobG9ja291dERhdGEudG9TdHJpbmcoKSk=",
  },
  {
    "_id": "3156d7e9-1589-4ffb-a659-37a1647ee03d",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Converts a normalized social profile coming from ADFS into a managed user",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Normalized ADFS Profile to Managed User",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjIgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCmltcG9ydCBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlCgpKc29uVmFsdWUgbWFuYWdlZFVzZXIgPSBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lKSwKICAgICAgICBmaWVsZCgic24iLCBub3JtYWxpemVkUHJvZmlsZS5mYW1pbHlOYW1lKSwKICAgICAgICBmaWVsZCgibWFpbCIsIG5vcm1hbGl6ZWRQcm9maWxlLmVtYWlsKSwKICAgICAgICBmaWVsZCgidXNlck5hbWUiLCBub3JtYWxpemVkUHJvZmlsZS51c2VybmFtZSkpKQoKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgicG9zdGFsQWRkcmVzcyIsIG5vcm1hbGl6ZWRQcm9maWxlLnBvc3RhbEFkZHJlc3MpCmlmIChub3JtYWxpemVkUHJvZmlsZS5hZGRyZXNzTG9jYWxpdHkuaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgiY2l0eSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NMb2NhbGl0eSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24uaXNOb3ROdWxsKCkpIG1hbmFnZWRVc2VyLnB1dCgic3RhdGVQcm92aW5jZSIsIG5vcm1hbGl6ZWRQcm9maWxlLmFkZHJlc3NSZWdpb24pCmlmIChub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInBvc3RhbENvZGUiLCBub3JtYWxpemVkUHJvZmlsZS5wb3N0YWxDb2RlKQppZiAobm9ybWFsaXplZFByb2ZpbGUuY291bnRyeS5pc05vdE51bGwoKSkgbWFuYWdlZFVzZXIucHV0KCJjb3VudHJ5Iiwgbm9ybWFsaXplZFByb2ZpbGUuY291bnRyeSkKaWYgKG5vcm1hbGl6ZWRQcm9maWxlLnBob25lLmlzTm90TnVsbCgpKSBtYW5hZ2VkVXNlci5wdXQoInRlbGVwaG9uZU51bWJlciIsIG5vcm1hbGl6ZWRQcm9maWxlLnBob25lKQptYW5hZ2VkVXNlci5wdXQoImFjY291bnRTdGF0dXMiLCAobm9ybWFsaXplZFByb2ZpbGUucm9sZXMuYXNTdHJpbmcoKSA9PSAiZmlkYy12b2xrZXItZGV2LWFkbWlucyIpID8gJ0FjdGl2ZScgOiAnSW5hY3RpdmUnKQoKLy8gaWYgdGhlIGdpdmVuTmFtZSBhbmQgZmFtaWx5TmFtZSBpcyBudWxsIG9yIGVtcHR5Ci8vIHRoZW4gYWRkIGEgYm9vbGVhbiBmbGFnIHRvIHRoZSBzaGFyZWQgc3RhdGUgdG8gaW5kaWNhdGUgbmFtZXMgYXJlIG5vdCBwcmVzZW50Ci8vIHRoaXMgY291bGQgYmUgdXNlZCBlbHNld2hlcmUKLy8gZm9yIGVnLiB0aGlzIGNvdWxkIGJlIHVzZWQgaW4gYSBzY3JpcHRlZCBkZWNpc2lvbiBub2RlIHRvIGJ5LXBhc3MgcGF0Y2hpbmcKLy8gdGhlIHVzZXIgb2JqZWN0IHdpdGggYmxhbmsgdmFsdWVzIHdoZW4gZ2l2ZW5OYW1lICBhbmQgZmFtaWx5TmFtZSBpcyBub3QgcHJlc2VudApib29sZWFuIG5vR2l2ZW5OYW1lID0gbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lLmlzTnVsbCgpIHx8ICghbm9ybWFsaXplZFByb2ZpbGUuZ2l2ZW5OYW1lLmFzU3RyaW5nKCk/LnRyaW0oKSkKYm9vbGVhbiBub0ZhbWlseU5hbWUgPSBub3JtYWxpemVkUHJvZmlsZS5mYW1pbHlOYW1lLmlzTnVsbCgpIHx8ICghbm9ybWFsaXplZFByb2ZpbGUuZmFtaWx5TmFtZS5hc1N0cmluZygpPy50cmltKCkpCnNoYXJlZFN0YXRlLnB1dCgibmFtZUVtcHR5T3JOdWxsIiwgbm9HaXZlbk5hbWUgJiYgbm9GYW1pbHlOYW1lKQoKcmV0dXJuIG1hbmFnZWRVc2VyCg==",
  },
  {
    "_id": "85523e71-2d77-4577-b078-6f9674cc54e2",
    "context": "SAML2_IDP_ADAPTER",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Always redirect browser pre-auth",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Saml2 IDP Adapter Always Auth",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEtMjAyMiBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCgovKgogKiBUaGUgc2NyaXB0IGhhcyB0aGVzZSB0b3AgbGV2ZWwgZnVuY3Rpb25zIHRoYXQgY291bGQgYmUgZXhlY3V0ZWQgZHVyaW5nIGEgU0FNTDIgZmxvdy4KICogICAgICAtIHByZVNpbmdsZVNpZ25PbgogKiAgICAgIC0gcHJlQXV0aGVudGljYXRpb24KICogICAgICAtIHByZVNlbmRSZXNwb25zZQogKiAgICAgIC0gcHJlU2lnblJlc3BvbnNlCiAqICAgICAgLSBwcmVTZW5kRmFpbHVyZVJlc3BvbnNlCiAqCiAqIFBsZWFzZSBzZWUgdGhlIGphdmFkb2MgZm9yIHRoZSBpbnRlcmZhY2UgZGVmaW5pdGlvbiBhbmQgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGVzZSBtZXRob2RzLgogKiBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4yL2FwaWRvY3MvY29tL3N1bi9pZGVudGl0eS9zYW1sMi9wbHVnaW5zL1NBTUwySWRlbnRpdHlQcm92aWRlckFkYXB0ZXIuaHRtbAogKiBOb3RlIHRoYXQgdGhlIGluaXRpYWxpemUgbWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhlIHNjcmlwdHMuCiAqCiAqIERlZmluZWQgdmFyaWFibGVzLiBDaGVjayB0aGUgZG9jdW1lbnRhdGlvbiBvbiB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvbnMgZm9yIHRoZSB2YXJpYWJsZXMgYXZhaWxhYmxlIHRvIGl0LgogKgogKiBob3N0ZWRFbnRpdHlJZCAtIFN0cmluZwogKiAgICAgRW50aXR5IElEIGZvciB0aGUgaG9zdGVkIElEUAogKiByZWFsbSAtIFN0cmluZwogKiAgICAgUmVhbG0gb2YgdGhlIGhvc3RlZCBJRFAKICogaWRwQWRhcHRlclNjcmlwdEhlbHBlciAtIElkcEFkYXB0ZXJTY3JpcHRIZWxwZXIgKDEpCiAqICAgICBBbiBpbnN0YW5jZSBvZiBJZHBBZGFwdGVyU2NyaXB0SGVscGVyIGNvbnRhaW5pbmcgaGVscGVyIG1ldGhvZHMuIFNlZSBKYXZhZG9jIGZvciBtb3JlIGRldGFpbHMuCiAqIHJlcXVlc3QgLSBIdHRwU2VydmxldFJlcXVlc3QgKDIpCiAqICAgICBTZXJ2bGV0IHJlcXVlc3Qgb2JqZWN0CiAqIHJlc3BvbnNlIC0gSHR0cFNlcnZsZXRSZXNwb25zZSAoMykKICogICAgIFNlcnZsZXQgcmVzcG9uc2Ugb2JqZWN0CiAqIGF1dGhuUmVxdWVzdCAtIEF1dGhuUmVxdWVzdCAoNCkKICogICAgIFRoZSBvcmlnaW5hbCBhdXRoZW50aWNhdGlvbiByZXF1ZXN0IHNlbnQgZnJvbSBTUAogKiByZXFJZCAtIFN0cmluZwogKiAgICAgVGhlIGlkIHRvIHVzZSBmb3IgY29udGludWF0aW9uIG9mIHByb2Nlc3NpbmcgaWYgdGhlIGFkYXB0ZXIgcmVkaXJlY3RzCiAqIHJlcyAtIFJlc3BvbnNlICg1KQogKiAgICAgVGhlIFNBTUwgUmVzcG9uc2UKICogc2Vzc2lvbiAtIFNTT1Rva2VuICg2KQogKiAgICAgVGhlIHNpbmdsZSBzaWduLW9uIHNlc3Npb24uIFRoZSByZWZlcmVuY2UgdHlwZSBvZiB0aGlzIGlzIE9iamVjdCBhbmQgd291bGQgbmVlZCB0byBiZSBjYXN0ZWQgdG8gU1NPVG9rZW4uCiAqIHJlbGF5U3RhdGUgLSBTdHJpbmcKICogICAgIFRoZSByZWxheVN0YXRlIHRoYXQgd2lsbCBiZSB1c2VkIGluIHRoZSByZWRpcmVjdAogKiBmYXVsdENvZGUgLSBTdHJpbmcKICogICAgIHRoZSBmYXVsdCBjb2RlIHRoYXQgd2lsbCBiZSByZXR1cm5lZCBpbiB0aGUgU0FNTCByZXNwb25zZQogKiBmYXVsdERldGFpbCAtIFN0cmluZwogKiAgICAgdGhlIGZhdWx0IGRldGFpbCB0aGF0IHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlIFNBTUwgcmVzcG9uc2UKICogbG9nZ2VyIC0gTG9nZ2VyIGluc3RhbmNlCiAqICAgICBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9zY3JpcHRpbmctZ3VpZGUvc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLmh0bWwjc2NyaXB0aW5nLWFwaS1nbG9iYWwtbG9nZ2VyLgogKiAgICAgQ29ycmVzcG9uZGluZyBsb2cgZmlsZXMgd2lsbCBiZSBwcmVmaXhlZCB3aXRoOiBzY3JpcHRzLjxzY3JpcHQgbmFtZT4KICoKICogVGhyb3dzIFNBTUwyRXhjZXB0aW9uICg3KToKICogICAgIGZvciBhbnkgZXhjZXB0aW9ucyBvY2N1cnJpbmcgaW4gdGhlIGFkYXB0ZXIuIFRoZSBmZWRlcmF0aW9uIHByb2Nlc3Mgd2lsbCBjb250aW51ZQogKgogKiBDbGFzcyByZWZlcmVuY2U6CiAqICgxKSBpZHBBZGFwdGVyU2NyaXB0SGVscGVyIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMi9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvcGx1Z2lucy9zY3JpcHRlZC9JZHBBZGFwdGVyU2NyaXB0SGVscGVyLmh0bWwuCiAqICgyKSBIdHRwU2VydmxldFJlcXVlc3QgLSBodHRwczovL3RvbWNhdC5hcGFjaGUub3JnL3RvbWNhdC03LjAtZG9jL3NlcnZsZXRhcGkvamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdC5odG1sLgogKiAoMykgSHR0cFNlcnZsZXRSZXNwb25zZSAtIGh0dHBzOi8vdG9tY2F0LmFwYWNoZS5vcmcvdG9tY2F0LTcuMC1kb2Mvc2VydmxldGFwaS9qYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZS5odG1sLgogKiAoNCkgQXV0aG5SZXF1ZXN0IC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMi9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvcHJvdG9jb2wvQXV0aG5SZXF1ZXN0Lmh0bWwuCiAqICg1KSBSZXNwb25zZSAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83LjIvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L3NhbWwyL3Byb3RvY29sL1Jlc3BvbnNlLmh0bWwuCiAqICg2KSBTU09Ub2tlbiAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83LjIvYXBpZG9jcy9jb20vaXBsYW5ldC9zc28vU1NPVG9rZW4uaHRtbC4KICogKDcpIFNBTUwyRXhjZXB0aW9uIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMi9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvY29tbW9uL1NBTUwyRXhjZXB0aW9uLmh0bWwuCiAqLwoKLyoKICogVGVtcGxhdGUvZGVmYXVsdCBzY3JpcHQgZm9yIFNBTUwyIElEUCBBZGFwdGVyIHNjcmlwdGVkIHBsdWdpbi4KICovCgovKgogKiBBdmFpbGFibGUgdmFyaWFibGVzIGZvciBwcmVTaW5nbGVTaWduT246CiAqICAgICBob3N0ZWRFbnRpdHlJZAogKiAgICAgcmVhbG0KICogICAgIGlkcEFkYXB0ZXJTY3JpcHRIZWxwZXIKICogICAgIHJlcXVlc3QKICogICAgIGF1dGhuUmVxdWVzdAogKiAgICAgcmVzcG9uc2UKICogICAgIHJlcUlkCiAqICAgICBsb2dnZXIKICoKICogUmV0dXJuIC0gdHJ1ZSBpZiBicm93c2VyIHJlZGlyZWN0aW9uIGlzIGhhcHBlbmluZyBhZnRlciBwcm9jZXNzaW5nLCBmYWxzZSBvdGhlcndpc2UuIERlZmF1bHQgdG8gZmFsc2UuCiAqLwpmdW5jdGlvbiBwcmVTaW5nbGVTaWduT24gKCkgewogICAgICBsb2dnZXIuZXJyb3IoIkNoaWNhZ286IHByZVNpbmdsZVNpZ25PbiIpOwogICAgcmV0dXJuIHRydWU7Cn0KCi8qCiAqIEF2YWlsYWJsZSB2YXJpYWJsZXMgZm9yIHByZUF1dGhlbnRpY2F0aW9uOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICBhdXRoblJlcXVlc3QKICogICAgIHJlc3BvbnNlCiAqICAgICByZXFJZAogKiAgICAgc2Vzc2lvbgogKiAgICAgcmVsYXlTdGF0ZQogKiAgICAgbG9nZ2VyCiAqCiAqIFJldHVybiAtIHRydWUgaWYgYnJvd3NlciByZWRpcmVjdGlvbiBpcyBoYXBwZW5pbmcgYWZ0ZXIgcHJvY2Vzc2luZywgZmFsc2Ugb3RoZXJ3aXNlLiBEZWZhdWx0IHRvIGZhbHNlLgogKi8KZnVuY3Rpb24gcHJlQXV0aGVudGljYXRpb24gKCkgewogICAgICBsb2dnZXIuZXJyb3IoIkNoaWNhZ286IHByZUF1dGhlbnRpY2F0aW9uIik7CiAgICByZXR1cm4gdHJ1ZTsKfQoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlU2VuZFJlc3BvbnNlOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICBhdXRoblJlcXVlc3QKICogICAgIHJlc3BvbnNlCiAqICAgICByZXFJZAogKiAgICAgc2Vzc2lvbgogKiAgICAgcmVsYXlTdGF0ZQogKiAgICAgbG9nZ2VyCiAqCiAqIFJldHVybiAtIHRydWUgaWYgYnJvd3NlciByZWRpcmVjdGlvbiBoYXBwZW5lZCBhZnRlciBwcm9jZXNzaW5nLCBmYWxzZSBvdGhlcndpc2UuIERlZmF1bHQgdG8gZmFsc2UuCiAqLwpmdW5jdGlvbiBwcmVTZW5kUmVzcG9uc2UgKCkgewogICAgICBsb2dnZXIuZXJyb3IoIkNoaWNhZ286IHByZVNlbmRSZXNwb25zZSIpOwogICAgICBsb2dnZXIuZXJyb3IoIkNoaWNhZ286IGF1dGhuUmVxdWVzdDogIithdXRoblJlcXVlc3QpOwogICAgICByZXNwb25zZS5zZW5kUmVkaXJlY3QoImh0dHBzOi8vaWRjLnNjaGV1YmVyLmlvL2FtL1hVSS8/cmVhbG09YWxwaGEmYXV0aEluZGV4VHlwZT1zZXJ2aWNlJmF1dGhJbmRleFZhbHVlPURpc3BhdGNoZXImRm9yY2VBdXRoPXRydWUmZ290bz0iK3JlbGF5U3RhdGUpOwogICAgcmV0dXJuIHRydWU7Cn0KCi8qCiAqIEF2YWlsYWJsZSB2YXJpYWJsZXMgZm9yIHByZVNpZ25SZXNwb25zZToKICogICAgIGhvc3RlZEVudGl0eUlkCiAqICAgICByZWFsbQogKiAgICAgaWRwQWRhcHRlclNjcmlwdEhlbHBlcgogKiAgICAgcmVxdWVzdAogKiAgICAgYXV0aG5SZXF1ZXN0CiAqICAgICBzZXNzaW9uCiAqICAgICByZWxheVN0YXRlCiAqICAgICByZXMKICogICAgIGxvZ2dlcgogKi8KZnVuY3Rpb24gcHJlU2lnblJlc3BvbnNlICgpIHsKICAgICAgbG9nZ2VyLmVycm9yKCJDaGljYWdvOiBwcmVTaWduUmVzcG9uc2UiKTsKfQoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlU2VuZEZhaWx1cmVSZXNwb25zZToKICogICAgIGhvc3RlZEVudGl0eUlkCiAqICAgICByZWFsbQogKiAgICAgaWRwQWRhcHRlclNjcmlwdEhlbHBlcgogKiAgICAgcmVxdWVzdAogKiAgICAgcmVzcG9uc2UKICogICAgIGZhdWx0Q29kZQogKiAgICAgZmF1bHREZXRhaWwKICogICAgIGxvZ2dlcgogKi8KZnVuY3Rpb24gcHJlU2VuZEZhaWx1cmVSZXNwb25zZSAoKSB7CiAgICAgIGxvZ2dlci5lcnJvcigiQ2hpY2FnbzogcHJlU2VuZEZhaWx1cmVSZXNwb25zZSIpOwp9",
  },
  {
    "_id": "a31a1796-8410-46b8-82ca-eb0c6e901775",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Collect all the configuration items required for the Set Custom Cookie node to function properly.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Collect Set Custom Cookie Node Config",
    "script": "LyogQ29sbGVjdCBTZXQgQ3VzdG9tIENvb2tpZSBOb2RlIENvbmZpZwogKiAKICogQ29sbGVjdCBhbGwgdGhlIGNvbmZpZ3VyYXRpb24gaXRlbXMgcmVxdWlyZWQgZm9yIHRoZSBTZXQgQ3VzdG9tIENvb2tpZSBub2RlIHRvIGZ1bmN0aW9uIHByb3Blcmx5LgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgICBvdXRjb21lID0gInRydWUiOwogICAgICB2YXIgY29uZmlnID0gewogICAgICAgICJuYW1lIjogIm9yZW8iLAogICAgICAgICJ2YWx1ZSI6ICJvcmlnaW5hbCIsCiAgICAgICAgImRvbWFpbiI6ICIuc2NoZXViZXIuaW8iLAogICAgICAgICJwYXRoIjogIi8iLAogICAgICAgICJtYXhBZ2UiOiAzNjAwLAogICAgICAgICJ1c2VIdHRwT25seUNvb2tpZSI6IHRydWUsCiAgICAgICAgInVzZVNlY3VyZUNvb2tpZSI6IHRydWUsCiAgICAgICAgInNhbWVTaXRlIjogIk5PTkUiCiAgICB9OwogIAogICAgICB2YXIgc2NyaXB0ID0gIiI7CiAgICBzY3JpcHQgKz0gIkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCI7CiAgICBzY3JpcHQgKz0gIiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKSI7CiAgICBzY3JpcHQgKz0gIikuZm9yRWFjaCgiOwogICAgc2NyaXB0ICs9ICIgICAgZnVuY3Rpb24gKGlucHV0LGkpIHsiOwogICAgc2NyaXB0ICs9ICIgICAgICAgIGNvbnNvbGUubG9nKCdpbnB1dCAnK2kpOyIKICAgIHNjcmlwdCArPSAiICAgICAgICB2YXIgY29uZmlnID0gSlNPTi5wYXJzZSgnIitKU09OLnN0cmluZ2lmeShjb25maWcpKyInKTsiOwogICAgc2NyaXB0ICs9ICIgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoY29uZmlnKTsiOwogICAgc2NyaXB0ICs9ICIgICAgICAgIGlmIChpbnB1dC50eXBlID09PSAndGV4dCcpIHsiOwogICAgc2NyaXB0ICs9ICIgICAgICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgY29uZmlnW2tleXNbaV1dKTsiOwogICAgc2NyaXB0ICs9ICIgICAgICAgICAgICBpbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBLZXlib2FyZEV2ZW50KCAnaW5wdXQnICwgeydrZXknOidFbnRlcid9ICkpOyI7CiAgICBzY3JpcHQgKz0gIiAgICAgICAgfSI7CiAgICBzY3JpcHQgKz0gIiAgICB9IjsKICAgIHNjcmlwdCArPSAiKTsiOwogICAgdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogICAgICAgICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5OYW1lQ2FsbGJhY2ssCiAgICAgICAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrCiAgICApCiAgICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5zZW5kKAogICAgICAgICAgICBuZXcgZnIuTmFtZUNhbGxiYWNrKCJuYW1lIiksCiAgICAgICAgICAgIG5ldyBmci5OYW1lQ2FsbGJhY2soInZhbHVlIiksCiAgICAgICAgICAgIG5ldyBmci5OYW1lQ2FsbGJhY2soImRvbWFpbiIpLAogICAgICAgICAgICBuZXcgZnIuTmFtZUNhbGxiYWNrKCJwYXRoIiksCiAgICAgICAgICAgIG5ldyBmci5OYW1lQ2FsbGJhY2soIm1heEFnZSIpLAogICAgICAgICAgICBuZXcgZnIuTmFtZUNhbGxiYWNrKCJ1c2VIdHRwT25seUNvb2tpZSIpLAogICAgICAgICAgICBuZXcgZnIuTmFtZUNhbGxiYWNrKCJ1c2VTZWN1cmVDb29raWUiKSwKICAgICAgICAgICAgbmV3IGZyLk5hbWVDYWxsYmFjaygic2FtZVNpdGUiKSwKICAgICAgICAgICAgICBuZXcgZnIuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrKHNjcmlwdCkKICAgICAgICApLmJ1aWxkKCk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAgIGNvbmZpZ1tjYWxsYmFja3MuZ2V0KDApLmdldFByb21wdCgpXSA9IGNhbGxiYWNrcy5nZXQoMCkuZ2V0TmFtZSgpOwogICAgICAgICAgY29uZmlnW2NhbGxiYWNrcy5nZXQoMSkuZ2V0UHJvbXB0KCldID0gY2FsbGJhY2tzLmdldCgxKS5nZXROYW1lKCk7CiAgICAgICAgICBjb25maWdbY2FsbGJhY2tzLmdldCgyKS5nZXRQcm9tcHQoKV0gPSBjYWxsYmFja3MuZ2V0KDIpLmdldE5hbWUoKTsKICAgICAgICAgIGNvbmZpZ1tjYWxsYmFja3MuZ2V0KDMpLmdldFByb21wdCgpXSA9IGNhbGxiYWNrcy5nZXQoMykuZ2V0TmFtZSgpOwogICAgICAgICAgY29uZmlnW2NhbGxiYWNrcy5nZXQoNCkuZ2V0UHJvbXB0KCldID0gcGFyc2VJbnQoY2FsbGJhY2tzLmdldCg0KS5nZXROYW1lKCksIDEwKS50b0ZpeGVkKCk7CiAgICAgICAgICBjb25maWdbY2FsbGJhY2tzLmdldCg1KS5nZXRQcm9tcHQoKV0gPSAoIiIrY2FsbGJhY2tzLmdldCg1KS5nZXROYW1lKCkgPT09ICd0cnVlJyk7CiAgICAgICAgICBjb25maWdbY2FsbGJhY2tzLmdldCg2KS5nZXRQcm9tcHQoKV0gPSAoIiIrY2FsbGJhY2tzLmdldCg2KS5nZXROYW1lKCkgPT09ICd0cnVlJyk7CiAgICAgICAgICBjb25maWdbY2FsbGJhY2tzLmdldCg3KS5nZXRQcm9tcHQoKV0gPSBjYWxsYmFja3MuZ2V0KDcpLmdldE5hbWUoKTsKICAgICAgICAgIG5vZGVTdGF0ZS5wdXRTaGFyZWQoIm5vZGVDb25maWciLCBjb25maWcpOwogICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5nb1RvKG91dGNvbWUpLmJ1aWxkKCk7CiAgICB9Cn0oKSk7",
  },
  {
    "_id": "e49225eb-e7ad-4699-bf2a-d57689f9cd6e",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Display sharedState and transientState.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Display States - imported (1)",
    "script": "LyogRGlzcGxheSBTdGF0ZXMKICogCiAqIERpc3BsYXkgc2hhcmVkU3RhdGUgYW5kIHRyYW5zaWVudFN0YXRlLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgICBvdXRjb21lID0gInRydWUiOwoKICAgIHZhciBhbmNob3IgPSAiYW5jaG9yLSIuY29uY2F0KGdlbmVyYXRlTnVtZXJpY1Rva2VuKCd4eHgnKSk7CiAgICB2YXIgaGFsaWduID0gImxlZnQiOwogICAgdmFyIG1lc3NhZ2UgPSAiPGg0PkN1cnJlbnQgU3RhdGUgVmFsdWVzPC9oND4iLmNvbmNhdCgKICAgICAgICAiPHA+PGI+U2hhcmVkIFN0YXRlPC9iPjo8YnIvPiIpLmNvbmNhdCgKICAgICAgICBzaGFyZWRTdGF0ZS50b1N0cmluZygpKS5jb25jYXQoIjwvcD4iKS5jb25jYXQoCiAgICAgICAgIjxwPjxiPlRyYW5zaWVudCBTdGF0ZTwvYj46PGJyLz4iKS5jb25jYXQoCiAgICAgICAgdHJhbnNpZW50U3RhdGUudG9TdHJpbmcoKSkuY29uY2F0KCI8L3A+IikuY29uY2F0KAogICAgICAgICI8cD48Yj5SZXF1ZXN0IEhlYWRlcnM8L2I+Ojxici8+IikuY29uY2F0KAogICAgICAgIHJlcXVlc3RIZWFkZXJzLnRvU3RyaW5nKCkpLmNvbmNhdCgiPC9wPiIpCiAgICB2YXIgc2NyaXB0ID0gIkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFxuIi5jb25jYXQoCiAgICAgICJkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYWxsYmFjay1jb21wb25lbnQnKSkuZm9yRWFjaChcbiIpLmNvbmNhdCgKICAgICAgImZ1bmN0aW9uIChlKSB7XG4iKS5jb25jYXQoCiAgICAgICIgIHZhciBtZXNzYWdlID0gZS5maXJzdEVsZW1lbnRDaGlsZDtcbiIpLmNvbmNhdCgKICAgICAgIiAgaWYgKG1lc3NhZ2UuZmlyc3RDaGlsZCAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZU5hbWUgPT0gJyN0ZXh0JyAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZVZhbHVlLnRyaW0oKSA9PSAnIikuY29uY2F0KGFuY2hvcikuY29uY2F0KCInKSB7XG4iKS5jb25jYXQoCiAgICAgICIgICAgbWVzc2FnZS5jbGFzc05hbWUgPSBcIlwiO1xuIikuY29uY2F0KAogICAgICAiICAgIG1lc3NhZ2Uuc3R5bGUgPSBcInRleHQtYWxpZ246IGxlZnQ7IGlubGluZS1zaXplOiA0MzBweDsgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcIjtcbiIpLmNvbmNhdCgKICAgICAgIiAgICBtZXNzYWdlLmFsaWduID0gXCIiKS5jb25jYXQoaGFsaWduKS5jb25jYXQoIlwiO1xuIikuY29uY2F0KAogICAgICAiICAgIG1lc3NhZ2UuaW5uZXJIVE1MID0gJyIpLmNvbmNhdChtZXNzYWdlKS5jb25jYXQoIic7XG4iKS5jb25jYXQoCiAgICAgICIgIH1cbiIpLmNvbmNhdCgKICAgICAgIn0pIikKICAgIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjaywKICAgICAgICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2sKICAgICkKICAgIGlmIChtZXNzYWdlLmxlbmd0aCAmJiBjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgICAgIG5ldyBmci5UZXh0T3V0cHV0Q2FsbGJhY2soCiAgICAgICAgICAgICAgICBmci5UZXh0T3V0cHV0Q2FsbGJhY2suSU5GT1JNQVRJT04sCiAgICAgICAgICAgICAgICBhbmNob3IKICAgICAgICAgICAgKSwKICAgICAgICAgICAgbmV3IGZyLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICAgICAgKS5idWlsZCgpCiAgICB9CiAgICBlbHNlIHsKICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKICAgIH0KCiAgICAgLyoKICAgICAgKiBHZW5lcmF0ZSBhIHRva2VuIGluIHRoZSBkZXNpcmVkIGZvcm1hdC4gQWxsICd4JyBjaGFyYWN0ZXJzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBhIHJhbmRvbSBudW1iZXIgMC05LgogICAgICAqIAogICAgICAqIEV4YW1wbGU6CiAgICAgICogJ3h4eHh4JyBwcm9kdWNlcyAnMjg1MzUnCiAgICAgICogJ3h4eC14eHgnIHByb2R1Y2VzICc0MzItNTIxJwogICAgICAqLwogICAgZnVuY3Rpb24gZ2VuZXJhdGVOdW1lcmljVG9rZW4oZm9ybWF0KSB7CiAgICAgICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC9beF0vZywgZnVuY3Rpb24oYykgewogICAgICAgICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkqMTB8MDsKICAgICAgICAgICAgdmFyIHYgPSByOwogICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxMCk7CiAgICAgICAgfSk7CiAgICB9Cn0oKSk7",
  },
  {
    "_id": "b63981d8-cb73-4e47-8749-e58654dcaa31",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "This script uses phonevalidator.com to determine the type of phone number stored in the user profile.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Phone Validator - Line Type",
    "script": "LyogUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICogCiAqIFRoaXMgc2NyaXB0IHVzZXMgcGhvbmV2YWxpZGF0b3IuY29tIHRvIGRldGVybWluZSB0aGUgdHlwZSBvZiBwaG9uZSBudW1iZXIgc3RvcmVkIGluIHRoZSB1c2VyIHByb2ZpbGUuCiAqIEdldCB5b3VyIG93biBBUEkgS2V5IGF0IGh0dHBzOi8vd3d3LnBob25ldmFsaWRhdG9yLmNvbQogKiAKICogVGhpcyBzY3JpcHQgbmVlZHMgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIG5vdCB3b3JrIHByb3Blcmx5IGFzIGlzLiAKICogSXQgcmVxdWlyZXMgdGhlIElkZW50aWZ5IEV4aXN0aW5nIFVzZXIgbm9kZSBiZWZvcmUgaXQgaXMgYmVpbmcgY2FsbGVkLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIENFTEwgUEhPTkUKICogLSBMQU5ETElORQogKiAtIFZPSVAKICogLSBUT0xMLUZSRUUKICogLSBVTktOT1dOCiAqIC0gZmFpbGVkCiAqLwpsb2dnZXIud2FybmluZygiUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlOiBzdGFydCIpOwoKaWYgKGdldFNoYXJlZE9iamVjdEF0dHJpYnV0ZSgidGVsZXBob25lTnVtYmVyIikgfHwgKHNoYXJlZFN0YXRlLmdldCgiX2lkIikgJiYgaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZShzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpLCAidGVsZXBob25lTnVtYmVyIikuaXRlcmF0b3IoKS5oYXNOZXh0KCkpKSB7CgogICAgLyogQkVHSU4gU0NSSVBUIENPTkZJR1VSQVRJT04KICAgICAqCiAgICAgKiBSRVBMQUNFIFdJVEggWU9VUiBPV04gQVpVUkUgQUQgU0VUVElOR1MKICAgICAqCiAgICAgICAqIFBob25lIFZhbGlkYXRvciAtIExpbmUgVHlwZSBBUEkgQ29uZmlndXJhdGlvbgogICAgICAgKiBHZXQgeW91ciBvd24gQVBJIEtleSBhdCBodHRwczovL3d3dy5waG9uZXZhbGlkYXRvci5jb20KICAgICAqLwogICAgdmFyIFBWX0FQSV9LRVkgPSAiODQ5ZDU2NGEtNTk0ZC00YmRlLWI2OTEtYWZlNWRkYWRkNTQ3IjsKICAgIC8qCiAgICAgKiBFTkQgU0NSSVBUIENPTkZJR1VSQVRJT04KICAgICAqLwoKICAgICAgdmFyIFBWX0FQSV9UWVBFID0gImJhc2ljIjsKICAgIHZhciBQVl9BUElfUEhPTkUgPSBnZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUoInRlbGVwaG9uZU51bWJlciIpIHx8IGlkUmVwb3NpdG9yeS5nZXRBdHRyaWJ1dGUoc2hhcmVkU3RhdGUuZ2V0KCJfaWQiKSwgInRlbGVwaG9uZU51bWJlciIpLml0ZXJhdG9yKCkubmV4dCgpOwogICAgdmFyIFBWX0FQSV9VUkkgPSAiaHR0cHM6Ly93d3cucGhvbmV2YWxpZGF0b3IuY29tL2FwaS92Mi9waG9uZXNlYXJjaD9hcGlrZXk9Ii5jb25jYXQoUFZfQVBJX0tFWSkuY29uY2F0KCImcGhvbmU9IikuY29uY2F0KFBWX0FQSV9QSE9ORSkuY29uY2F0KCImdHlwZT0iKS5jb25jYXQoUFZfQVBJX1RZUEUpOyAgICAKCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRNZXRob2QoJ0dFVCcpOwogICAgcmVxdWVzdC5zZXRVcmkoUFZfQVBJX1VSSSk7CgogICAgdmFyIHJlc3BvbnNlID0gaHR0cENsaWVudC5zZW5kKHJlcXVlc3QpLmdldCgpOwogICAgdmFyIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzcG9uc2UuZ2V0RW50aXR5KCkuZ2V0U3RyaW5nKCkpOwoKICAgIGlmIChyZXN1bHRbIlN0YXR1c0NvZGUiXT09IjIwMCIpIHsKICAgICAgICBvdXRjb21lID0gcmVzdWx0WyJQaG9uZUJhc2ljIl1bIkxpbmVUeXBlIl07CiAgICB9IGVsc2UgewogICAgICAgIG91dGNvbWUgPSAiZmFpbGVkIjsKICAgIH0KICAgIGxvZ2dlci5lcnJvcigiUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlOiBTdGF0dXNDb2RlID0gIi5jb25jYXQocmVzdWx0WyJTdGF0dXNDb2RlIl0pKTsKICAgIGxvZ2dlci5lcnJvcigiUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlOiBTdGF0dXNNZXNzYWdlID0gIi5jb25jYXQocmVzdWx0WyJTdGF0dXNNZXNzYWdlIl0pKTsKICAgIGxvZ2dlci5lcnJvcigiUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlOiBvdXRjb21lID0gIi5jb25jYXQob3V0Y29tZSkpOwp9IGVsc2UgewogICAgICBvdXRjb21lID0gImZhaWxlZCI7CiAgICAgIGxvZ2dlci5lcnJvcigiUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlOiBObyB1c2VyIG9yIHBob25lIG51bWJlciBmb3VuZCEgVXNlICdJZGVudGlmeSBFeGlzdGluZyBVc2VyIG5vZGUgYmVmb3JlIHRoaXMgc2NyaXB0IHRvIHBvcHVsYXRlIHRoZSB1c2VyJ3MgX2lkIGluIHNoYXJlZCBzdGF0ZSBvciBwdXQgYSB2YWxpZCBjZWxsIHBob25lIG51bWJlciBpbnRvIHNoYXJlZFN0YXRlLm9iamVjdEF0dHJpYnV0ZXMudGVsZXBob25lTnVtYmVyISciKTsKICAgIGxvZ2dlci5lcnJvcigiUGhvbmUgVmFsaWRhdG9yIC0gTGluZSBUeXBlOiBvdXRjb21lID0gIi5jb25jYXQob3V0Y29tZSkpOwp9CgovKgogKiBSZWFkIGF0dHJpYnV0ZXMgaW4gc2hhcmVkIHN0YXRlIGZvciB1c2Ugd2l0aCB0aGUgQ3JlYXRlL1BhdGNoIE9iamVjdCBub2Rlcy4KICovCmZ1bmN0aW9uIGdldFNoYXJlZE9iamVjdEF0dHJpYnV0ZShuYW1lKSB7CiAgICB2YXIgc3RvcmFnZSA9IHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpOwogICAgaWYgKHN0b3JhZ2UpIHsKICAgICAgICAgIGlmIChzdG9yYWdlLmdldCkgewogICAgICAgICAgICByZXR1cm4gc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikuZ2V0KG5hbWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICByZXR1cm4gc3RvcmFnZS5uYW1lOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9",
  },
  {
    "_id": "d25a1315-8beb-4a0c-84bf-534214fed087",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Prepare Reset Of OTP Profile Attribute",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "MobileOTP: Prepare Reset Of OTP Profile Attribute",
    "script": "LyoKICogUmVzZXQgT1RQIHByb2ZpbGUgYXR0cmlidXRlIGluIE9iamVjdEF0dHJpYnV0ZXMgc28gaXQgY2FuIGJlIHBhdGNoZWQgdG8gdGhlIHVzZXIgcHJvZmlsZS4KICovCm91dGNvbWUgPSAidHJ1ZSI7CgpzZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUoImZyLWF0dHItaW50NSIsICIwIik7CgovKgogKiBTdG9yZSBhdHRyaWJ1dGVzIGluIHNoYXJlZCBzdGF0ZSBmb3IgdXNlIHdpdGggdGhlIENyZWF0ZS9QYXRjaCBPYmplY3Qgbm9kZXMuCiAqLwpmdW5jdGlvbiBzZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHsKICAgICAgdmFyIHN0b3JhZ2UgPSBzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKTsKICAgIGlmIChzdG9yYWdlICYmIHZhbHVlKSB7CiAgICAgICAgICBpZiAoc3RvcmFnZS5wdXQpIHsKICAgICAgICAgICAgICBzdG9yYWdlLnB1dChuYW1lLCB2YWx1ZSk7CiAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgc3RvcmFnZVtuYW1lXSA9IHZhbHVlOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgaWYgKHZhbHVlKSB7CiAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwgSlNPTi5wYXJzZSgie1wiIituYW1lKyJcIjpcIiIrdmFsdWUrIlwifSIpKTsKICAgIH0KfQ==",
  },
  {
    "_id": "58258c2d-46f3-4811-85c4-ea1476dd9cf4",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Service Account - Cluster Internal Requests Only",
    "script": "CnRyeSB7CiAgdmFyIGNsaWVudElwQWRkcmVzc2VzID0gcmVxdWVzdEhlYWRlcnMuZ2V0KG5ldyBqYXZhLmxhbmcuU3RyaW5nKCd4LWZvcndhcmRlZC1mb3InKSk7CiAgaWYgKCFjbGllbnRJcEFkZHJlc3NlcykgewogICAgbG9nZ2VyLm1lc3NhZ2UoJ05vIGZvcndhcmRlZCBoZWFkZXI7IGludGVybmFsIGNsdXN0ZXIgcmVxdWVzdCcpOwogICAgb3V0Y29tZSA9ICdUcnVlJwogIH0gZWxzZSB7CiAgICBsb2dnZXIubWVzc2FnZSgnRm9yd2FyZGVkIGhlYWRlciB7fScsIGNsaWVudElwQWRkcmVzc2VzKTsKICAgIG91dGNvbWUgPSAnRmFsc2UnOwogIH0KfSBjYXRjaCAoZSkgewogIGxvZ2dlci5lcnJvcignU2VydmljZSBBY2NvdW50IC0gQ2x1c3RlciBJbnRlcm5hbCBSZXF1ZXN0cyBPbmx5IC0gZmFpbGVkIGRlZHVjaW5nIGhlYWRlcicpOwogIGxvZ2dlci5lcnJvcihlKTsKICBvdXRjb21lID0gJ0Vycm9yJzsKfQ==",
  },
  {
    "_id": "703dab1a-1921-4981-98dd-b8e5349d8548",
    "context": "AUTHENTICATION_SERVER_SIDE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for server side Device Id (Match) Authentication Module",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Device Id (Match) - Server Side",
    "script": "",
  },
  {
    "_id": "e4417108-4dc9-4ffc-9995-3cd490adf2ed",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Collect PIN",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Collect PIN",
    "script": "LyogQ29sbGVjdCBQSU4KICogCiAqIENvbGxlY3QgUElOIHVzaW5nIHBhc3N3b3JkIGNhbGxiYWNrIGFuZCBzdG9yZSBpbiB1c2VyIHByb2ZpbGUuCiAqIAogKiBUaGlzIHNjcmlwdCBtdXN0IGJlIHBhcmFtZXRyaXplZC4gSXQgbWF5IG5vdCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKi8KKGZ1bmN0aW9uICgpIHsKICAKICAvKioqIEJFR0lOIFBBUkFNRVRSSVpBVElPTiAqKiovCiAgdmFyIHBpbkF0dHJOYW1lID0gJ2ZyVW5pbmRleGVkU3RyaW5nMyc7CiAgdmFyIHBpblByb21wdCA9ICdOZXcgUElOJzsKICAvKioqKiBFTkQgUEFSQU1FVFJJWkFUSU9OICoqKiovCiAgCiAgb3V0Y29tZSA9ICd0cnVlJzsKICB2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5QYXNzd29yZENhbGxiYWNrCiAgKQogIGlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgbmV3IGZyLlBhc3N3b3JkQ2FsbGJhY2socGluUHJvbXB0LCBmYWxzZSkKICAgICkuYnVpbGQoKTsKICB9CiAgZWxzZSB7CiAgICAgIHZhciBwaW4gPSBuZXcgamF2YS5sYW5nLlN0cmluZyhjYWxsYmFja3MuZ2V0KDApLmdldFBhc3N3b3JkKCkpOwogICAgc2V0VHJhbnNpZW50T2JqZWN0QXR0cmlidXRlKHBpbkF0dHJOYW1lLCBwaW4pOwogICAgYWN0aW9uID0gZnIuQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKICB9CgogIC8qCiAgICogU3RvcmUgYXR0cmlidXRlcyBpbiB0cmFuc2llbnQgc3RhdGUgZm9yIHVzZSB3aXRoIHRoZSBDcmVhdGUvUGF0Y2ggT2JqZWN0IG5vZGVzLgogICAqLwogIGZ1bmN0aW9uIHNldFRyYW5zaWVudE9iamVjdEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkgewogICAgdmFyIHRyYW5zaWVudFN0b3JhZ2UgPSB0cmFuc2llbnRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKTsKICAgIGlmICh0cmFuc2llbnRTdG9yYWdlICYmIHZhbHVlKSB7CiAgICAgIGlmICh0cmFuc2llbnRTdG9yYWdlLnB1dCkgewogICAgICAgIHRyYW5zaWVudFN0b3JhZ2UucHV0KG5hbWUsIHZhbHVlKTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICB0cmFuc2llbnRTdG9yYWdlW25hbWVdID0gdmFsdWU7CiAgICAgIH0KICAgIH0KICAgIGVsc2UgaWYgKHZhbHVlKSB7CiAgICAgIHRyYW5zaWVudFN0YXRlLnB1dCgib2JqZWN0QXR0cmlidXRlcyIsIEpTT04ucGFyc2UoIntcIiIrbmFtZSsiXCI6XCIiK3ZhbHVlKyJcIn0iKSk7CiAgICB9CiAgfQp9KCkpOw==",
  },
  {
    "_id": "2eb48a0c-24e0-4dac-acaf-02085c142ec5",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Integration to Okta Authentication API okta_url/api/v1/authn",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Okta API AuthN",
    "script": "LyogT2t0YSBQYXNzdGhydSBBdXRoZW50aWNhdGlvbgogKgogKiBBdXRob3JzOiBjaGljby5kZW1ldHRyb2ZmQGZvcmdlcm9jay5jb20sIHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBPa3RhIHBhc3MgdGhyb3VnaCBhdXRoZW50aWNhdGlvbiB1c2luZyBPa3RhIEF1dGhlbnRpY2F0aW9uIEFQSS4KICogCiAqIFRoaXMgc2NyaXB0IG5lZWRzIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCBub3Qgd29yayBwcm9wZXJseSBhcyBpcy4gCiAqIEl0IHJlcXVpcmVzIHRoZSBQbGF0Zm9ybSBVc2VybmFtZSBhbmQgUGxhdGZvcm0gUGFzc3dvcmQgY29sbGVjdG9yIG5vZGVzCiAqIGJlZm9yZSBpdCBjYW4gb3BlcmF0ZS4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSBTdWNjZXNzCiAqIC0gRmFpbHVyZQogKiAtIFRpbWVvdXQKICogLSBFcnJvcgogKi8KbG9nZ2VyLm1lc3NhZ2UoIk9rdGEgUGFzc3RocnUgQXV0aGVudGljYXRpb246IHN0YXJ0Iik7CgppZiAoc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpICYmIHRyYW5zaWVudFN0YXRlLmdldCgicGFzc3dvcmQiKSkgewogICAgICAvKgogICAgICogQkVHSU4gU0NSSVBUIENPTkZJR1VSQVRJT04KICAgICAqCiAgICAgKiBSRVBMQUNFIFdJVEggWU9VUiBPV04gT0tUQSBURU5BTlQgU0VUVElOR1MKICAgICAqCiAgICAgKi8KICAgIHZhciBPS1RBX0FQSV9VUkkgPSAiaHR0cHM6Ly9kZXYtMTgwMzA5MzMub2t0YS5jb20vYXBpL3YxL2F1dGhuLyI7CiAgICAvKgogICAgICogRU5EIFNDUklQVCBDT05GSUdVUkFUSU9OCiAgICAgKi8KCiAgICB2YXIgcmVxdWVzdCA9IG5ldyBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVxdWVzdCgpOwogICAgcmVxdWVzdC5zZXRNZXRob2QoJ1BPU1QnKTsKICAgIHJlcXVlc3Quc2V0VXJpKE9LVEFfQVBJX1VSSSk7CiAgICByZXF1ZXN0LmdldEhlYWRlcnMoKS5hZGQoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uIik7CiAgICAgIC8vdmFyIGJvZHkgPSAgICAgIntcInVzZXJuYW1lXCI6Ii5jb25jYXQoc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKS5jb25jYXQoIixcInBhc3N3b3JkXCI6IikuY29uY2F0KHRyYW5zaWVudFN0YXRlLmdldCgicGFzc3dvcmQiKSkuY29uY2F0KCIsXCJvcHRpb25zXCI6e1wibXVsdGlPcHRpb25hbEZhY3RvckVucm9sbFwiOnRydWUsXCJ3YXJuQmVmb3JlUGFzc3dvcmRFeHBpcmVkXCI6dHJ1ZX19Iik7CiAgICB2YXIgYm9keSA9IHsKICAgICAgICAidXNlcm5hbWUiOiBzaGFyZWRTdGF0ZS5nZXQoInVzZXJuYW1lIiksCiAgICAgICAgInBhc3N3b3JkIjogdHJhbnNpZW50U3RhdGUuZ2V0KCJwYXNzd29yZCIpLAogICAgICAgICJvcHRpb25zIjogewogICAgICAgICAgICAibXVsdGlPcHRpb25hbEZhY3RvckVucm9sbCI6IHRydWUsCiAgICAgICAgICAgICJ3YXJuQmVmb3JlUGFzc3dvcmRFeHBpcmVkIjogdHJ1ZQogICAgICAgIH0KICAgIH0KICAgICAgcmVxdWVzdC5nZXRFbnRpdHkoKS5zZXRKc29uKGJvZHkpOwoKICAgIHZhciByZXNwb25zZSA9IGh0dHBDbGllbnQuc2VuZChyZXF1ZXN0KS5nZXQoKTsKICAgIHZhciByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3BvbnNlLmdldEVudGl0eSgpLmdldFN0cmluZygpKTsKICAgIGxvZ2dlci5tZXNzYWdlKCJPa3RhIFBhc3N0aHJ1IEF1dGhlbnRpY2F0aW9uOiBKU09OIHJlc3VsdDogIiArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpOwoKICAgICAgaWYgKHJlc3BvbnNlLmdldFN0YXR1cygpLmdldENvZGUoKSA9PT0gMjAwICYmIHJlc3VsdC5zdGF0dXMgPT09ICJTVUNDRVNTIikgewogICAgICAgICAgb3V0Y29tZSA9ICJTdWNjZXNzIgogICAgICAgIHRyYW5zaWVudFN0YXRlLnB1dCgib2t0YVByb2ZpbGUiLCByZXN1bHQuX2VtYmVkZGVkLnVzZXIucHJvZmlsZSk7CiAgICB9IGVsc2UgewogICAgICAgIC8qIE91dGNvbWVzOgogICAgICAgICAqIC0gU3VjY2VzcwogICAgICAgICAqIC0gRmFpbHVyZQogICAgICAgICAqIC0gVGltZW91dAogICAgICAgICAqIC0gRXJyb3IKICAgICAgICAgKgogICAgICAgICAqIEV4cGVjdGVkL2tub3duIEVycm9yIENvZGVzOgogICAgICAgICAqIEUwMDAwMDA0IC0gQXV0aGVudGljYXRpb24gZmFpbGVkLgogICAgICAgICAqIEUwMDAwMDAzIC0gVGhlIHJlcXVlc3QgYm9keSB3YXMgbm90IHdlbGwtZm9ybWVkCiAgICAgICAgICovCiAgICAgIAogICAgLyoKewogICAgImV4cGlyZXNBdCI6ICIyMDIxLTEwLTE0VDIyOjE1OjA0LjAwMFoiLAogICAgInN0YXR1cyI6ICJTVUNDRVNTIiwKICAgICJzZXNzaW9uVG9rZW4iOiAiMjAxMTFGTlZzZVQzV3lDekJIRkJpM2RZdHg5ODBGSGVuNDZRS2xXWFJOVGUxa1JlZjNHUXUxVyIsCiAgICAiX2VtYmVkZGVkIjogewogICAgICAgICJ1c2VyIjogewogICAgICAgICAgICAiaWQiOiAiMDB1MXhxdzg1MWRFcU0xWTE1ZDciLAogICAgICAgICAgICAicGFzc3dvcmRDaGFuZ2VkIjogIjIwMjEtMDktMjFUMTg6MjY6MjUuMDAwWiIsCiAgICAgICAgICAgICJwcm9maWxlIjogewogICAgICAgICAgICAgICAgImxvZ2luIjogImNoaWNvQGNyb3NzZml0aGlnaHZvbHRhZ2UuY29tIiwKICAgICAgICAgICAgICAgICJmaXJzdE5hbWUiOiAiY2hpY28iLAogICAgICAgICAgICAgICAgImxhc3ROYW1lIjogImRlbWUiLAogICAgICAgICAgICAgICAgImxvY2FsZSI6ICJlbiIsCiAgICAgICAgICAgICAgICAidGltZVpvbmUiOiAiQW1lcmljYS9Mb3NfQW5nZWxlcyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAiX2xpbmtzIjogewogICAgICAgICJjYW5jZWwiOiB7CiAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vZGV2LTE4MDMwOTMzLm9rdGEuY29tL2FwaS92MS9hdXRobi9jYW5jZWwiLAogICAgICAgICAgICAiaGludHMiOiB7CiAgICAgICAgICAgICAgICAiYWxsb3ciOiBbCiAgICAgICAgICAgICAgICAgICAgIlBPU1QiCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KKi8KCiAgLyoKICBGQUlMRUQKICB7CiAgICAiZXJyb3JDb2RlIjogIkUwMDAwMDA0IiwKICAgICJlcnJvclN1bW1hcnkiOiAiQXV0aGVudGljYXRpb24gZmFpbGVkIiwKICAgICJlcnJvckxpbmsiOiAiRTAwMDAwMDQiLAogICAgImVycm9ySWQiOiAib2FlMVkzS2tfV3ZSQU9CU0RlRzlxZXlIUSIsCiAgICAiZXJyb3JDYXVzZXMiOiBbXQp9CiovCiAgICAgICAgdHJhbnNpZW50U3RhdGUucHV0KCJva3RhUmVzdWx0IiwgcmVzdWx0KTsKICAgICAgICBpZiAocmVzdWx0LnRpbWVkX291dCkgewogICAgICAgICAgICBvdXRjb21lID0gIlRpbWVvdXQiOwogICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmVycm9yQ29kZSA9PT0gIkUwMDAwMDA0IikgewogICAgICAgICAgICBvdXRjb21lID0gIkZhaWx1cmUiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG91dGNvbWUgPSAiRXJyb3IiOwogICAgICAgIH0KICAgICAgICBsb2dnZXIubWVzc2FnZSgiT2t0YSBQYXNzdGhydSBBdXRoZW50aWNhdGlvbjogZXJyb3JDb2RlID0gIi5jb25jYXQocmVzdWx0LmVycm9yQ29kZSkpOwogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJPa3RhIFBhc3N0aHJ1IEF1dGhlbnRpY2F0aW9uOiBlcnJvclN1bW1hcnkgPSAiLmNvbmNhdChyZXN1bHQuZXJyb3JTdW1tYXJ5KSk7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIk9rdGEgUGFzc3RocnUgQXV0aGVudGljYXRpb246IGVycm9ySWQgPSAiLmNvbmNhdChyZXN1bHQuZXJyb3JJZCkpOwogICAgfQp9IGVsc2UgewogICAgICBvdXRjb21lID0gIkVycm9yIjsKICAgICAgbG9nZ2VyLm1lc3NhZ2UoIk9rdGEgUGFzc3RocnUgQXV0aGVudGljYXRpb246IE5vIHVzZXIgb3IgcGFzc3dvcmQgZm91bmQgaW4gc2hhcmVkIHN0YXRlISBVc2UgdXNlcm5hbWUgYW5kIHBhc3N3b3JkIGNvbGxlY3RvciBub2RlcyBiZWZvcmUgdGhpcyBzY3JpcHQgdG8gcG9wdWxhdGUgc2hhcmVkIGFuZCB0cmFuc2llbnQgc3RhdGVzISciKTsKfQpsb2dnZXIubWVzc2FnZSgiT2t0YSBQYXNzdGhydSBBdXRoZW50aWNhdGlvbjogRW5kIChvdXRjb21lPSIuY29uY2F0KG91dGNvbWUpLmNvbmNhdCgiKSIpKTs=",
  },
  {
    "_id": "71545db5-ce01-46b1-b79f-d41af36bd548",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Capture Evidence",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Onfido-CaptureEvidence",
    "script": "bG9nZ2VyLmVycm9yKCJPbmZpZG8tQ2FwdHVyZUV2aWRlbmNlOiBTdGFydCIpOwovKgogKiAhISEgRXh0ZW5kIHlvdXIgYXV0aGVudGljYXRpb24gc2Vzc2lvbiB0aW1lIHNvIHlvdXIgaWRlbnRpdHkgcHJvb2ZpbmcgZmxvd3MgZG9uJ3QgdGltZSBvdXQgISEhCiAqCiAqIEF1dGhlbnRpY2F0aW9uID4gU2V0dGluZ3MgPiBUcmVlcyA+IE1heCBEdXJhdGlvbiAoTWludXRlcykKICoKICogU2V0IHRvIDE1IG1pbnV0ZXMuCiAqCiAqLwoKLyoKICogQkVHSU4gU0NSSVBUIENPTkZJR1VSQVRJT04KICovCnZhciBvbmZpZG9fYXV0aF90b2tlbiA9IFN0cmluZyhzaGFyZWRTdGF0ZS5nZXQoIm9uZmlkb0F1dGhUb2tlbiIpKTsKdmFyIG9uZmlkb19kaWFsb2dfdGl0bGUgPSAiSm9pbiB0aGUgRXhwYW5zZSBmYW1pbHkhIjsKdmFyIG9uZmlkb19kaWFsb2dfbXNnMSA9ICJUbyBvcGVuIGFuIEV4cGFuc2UgYWNjb3VudCwgd2Ugd2lsbCBuZWVkIHRvIHZlcmlmeSB5b3VyIGlkZW50aXR5LiI7CnZhciBvbmZpZG9fZGlhbG9nX21zZzIgPSAiSXQgd2lsbCBvbmx5IHRha2UgYSBjb3VwbGUgb2YgbWludXRlcy4iOwp2YXIgb25maWRvX2NvdW50cnlfY29kZSA9ICJVUyI7Ci8qCiAqIEVORCBTQ1JJUFQgQ09ORklHVVJBVElPTgogKi8KCnZhciBtb2JpbGUgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHNoYXJlZFN0YXRlLmdldCgiX2lkIiksICJ0ZWxlcGhvbmVOdW1iZXIiKTsKdmFyIHNtc051bWJlciA9ICIiOwppZiAobW9iaWxlICYmIG1vYmlsZS5pdGVyYXRvcigpLmhhc05leHQoKSkgewogICAgc21zTnVtYmVyID0gU3RyaW5nKG1vYmlsZS5pdGVyYXRvcigpLm5leHQoKS50b1N0cmluZygpKTsKfQoKLy8gSW5qZWN0IE9uZmlkbyBTREsgaW50byBsb2dpbiBwYWdlCm9uZmlkb1NjcmlwdCA9IFN0cmluZygidmFyIGJvZHk9ZG9jdW1lbnQuYm9keTtcbiIgKwogICAgInZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiIgKwogICAgImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYWxsYmFja3NQYW5lbCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4iICsKICAgICJ2YXIgb25maWRvX2RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4iICsKICAgICJvbmZpZG9fZGl2LmlkPVwib25maWRvLW1vdW50XCI7XG4iICsKICAgICJzY3JpcHQuc3JjID0gJ2h0dHBzOi8vYXNzZXRzLm9uZmlkby5jb20vd2ViLXNkay1yZWxlYXNlcy81LjIuMS9vbmZpZG8ubWluLmpzJztcbiIgKwogICAgInZhciBoZWFkID0gZG9jdW1lbnQuaGVhZDsgXG4gIiArCiAgICAidmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTsgIFxuIiArCiAgICAiICAgICBsaW5rLnR5cGUgPSBcInRleHQvY3NzXCI7IFxuICIgKwogICAgIiAgICAgbGluay5yZWwgPSBcInN0eWxlc2hlZXRcIjsgXG4gIiArCiAgICAiICAgICBsaW5rLmhyZWYgPSAnaHR0cHM6Ly9hc3NldHMub25maWRvLmNvbS93ZWItc2RrLXJlbGVhc2VzLzUuMi4xL3N0eWxlLmNzcyc7IFxuICIgKwogICAgIiAgICBoZWFkLmFwcGVuZENoaWxkKGxpbmspOyBcbiAiICsKICAgICI7XG4iICsKICAgICJ2YXIgb25maWRvID0ge307XG4iICsKICAgICJzY3JpcHQub25sb2FkPWZ1bmN0aW9uKCkge1xuIiArCiAgICAiICAgIG9uZmlkbz1PbmZpZG8uaW5pdCh7XG4iICsKICAgICIgICAgICAgdG9rZW46ICciICsgb25maWRvX2F1dGhfdG9rZW4gKyAiJywgXG4iICsKICAgICIgICAgICAgdXNlTW9kYWw6IHRydWUsIFxuIiArCiAgICAiICAgICAgIGlzTW9kYWxPcGVuOiB0cnVlLCBcbiIgKwogICAgIiAgICAgICBzbXNOdW1iZXJDb3VudHJ5Q29kZTogJyIgKyBvbmZpZG9fY291bnRyeV9jb2RlICsgIicsIFxuIiArCiAgICAiICAgICAgIHVzZXJEZXRhaWxzOiB7IFxuIiArCiAgICAiICAgICAgICAgICBzbXNOdW1iZXI6ICciICsgc21zTnVtYmVyICsgIicgXG4iICsKICAgICIgICAgICAgfSwgXG4iICsKICAgICIgICAgICAgc3RlcHM6IFtcbiIgKwogICAgIiAgICAgICAgICAge1xuIiArCiAgICAiICAgICAgICAgICAgICAgdHlwZTond2VsY29tZScsXG4iICsKICAgICIgICAgICAgICAgICAgICBvcHRpb25zOntcbiIgKwogICAgIiAgICAgICAgICAgICAgICAgICB0aXRsZTonIiArIG9uZmlkb19kaWFsb2dfdGl0bGUgKyAiJyxcbiIgKwogICAgIiAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbnM6W1xuIiArCiAgICAiICAgICAgICAgICAgICAgICAgICAgICAnIiArIG9uZmlkb19kaWFsb2dfbXNnMSArICInLFxuIiArCiAgICAiICAgICAgICAgICAgICAgICAgICAgICAnIiArIG9uZmlkb19kaWFsb2dfbXNnMiArICInLFxuIiArCiAgICAiICAgICAgICAgICAgICAgICAgIF1cbiIgKwogICAgIiAgICAgICAgICAgICAgIH1cbiIgKwogICAgIiAgICAgICAgICB9LFxuIiArCiAgICAiICAgICAgICAgICdkb2N1bWVudCcsXG4iICsKICAgICIgICAgICAgICAgJ2ZhY2UnLFxuIiArCiAgICAiICAgICAgICAgICdjb21wbGV0ZScsXG4iICsKICAgICIgICAgICAgXSxcbiIgKwogICAgIiAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbihkYXRhKXsgY29uc29sZS5sb2coJ0RPTkUnKTsgb25maWRvLnNldE9wdGlvbnMoeyBpc01vZGFsT3BlbjpmYWxzZSB9KTsgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvZ2luQnV0dG9uXzAnKS5jbGljaygpOyB9IFxuIiArCiAgICAiICAgIH0pXG4iICsKICAgICJ9O1xuIiArCiAgICAiZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIik7Cgp2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLAogICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5OYW1lQ2FsbGJhY2ssCiAgICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2sKKTsKCndpdGggKGZyKSB7CiAgICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgICAgIGxvZ2dlci5lcnJvcigiT25maWRvLUNhcHR1cmVFdmlkZW5jZTogU2VuZGluZyBjYWxsYmFja3MiKTsKICAgICAgICBhY3Rpb24gPSBBY3Rpb24uc2VuZChuZXcgU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrKG9uZmlkb1NjcmlwdCkpLmJ1aWxkKCk7CiAgICB9IGVsc2UgewogICAgICAgIGxvZ2dlci5lcnJvcigiT25maWRvLUNhcHR1cmVFdmlkZW5jZTogRW5kIChvdXRjb21lPXRydWUpIik7CiAgICAgICAgYWN0aW9uID0gQWN0aW9uLmdvVG8oInRydWUiKS5idWlsZCgpOwogICAgfQp9",
  },
  {
    "_id": "169150da-0bd1-4866-8095-eae0bbc269e4",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Collect all the configuration items required for the Message Node to function properly.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Collect Message Node Config",
    "script": "LyogQ29sbGVjdCBNZXNzYWdlIE5vZGUgQ29uZmlnCiAqIAogKiBDb2xsZWN0IGFsbCB0aGUgY29uZmlndXJhdGlvbiBpdGVtcyByZXF1aXJlZCBmb3IgdGhlIE1lc3NhZ2UgTm9kZSB0byBmdW5jdGlvbiBwcm9wZXJseS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqLwooZnVuY3Rpb24gKCkgewogICAgb3V0Y29tZSA9ICJ0cnVlIjsKICAgICAgdmFyIGNvbmZpZyA9IHsKICAgICAgICAibWVzc2FnZSI6IHsiZW4iOiAiSSBiZWxpZXZlIEkgY2FuIGZseSEifSwKICAgICAgICAibWVzc2FnZVllcyI6IHsiZW4iOiAiR2xvcmlvdXMhIn0sCiAgICAgICAgIm1lc3NhZ2VObyI6IHsiZW4iOiAiSW5jb25jZWl2YWJsZSEifQogICAgfTsKICAgICAgdmFyIHNjcmlwdCA9ICIiOwogICAgc2NyaXB0ICs9ICJBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCgiOwogICAgc2NyaXB0ICs9ICIgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0JykiOwogICAgc2NyaXB0ICs9ICIpLmZvckVhY2goIjsKICAgIHNjcmlwdCArPSAiICAgIGZ1bmN0aW9uIChpbnB1dCxpKSB7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICBjb25zb2xlLmxvZygnaW5wdXQgJytpKTsiCiAgICBzY3JpcHQgKz0gIiAgICAgICAgdmFyIGNvbmZpZyA9IEpTT04ucGFyc2UoJyIrSlNPTi5zdHJpbmdpZnkoY29uZmlnKSsiJyk7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGNvbmZpZyk7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3RleHQnKSB7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIGNvbmZpZ1trZXlzW2ldXS5lbik7IjsKICAgIHNjcmlwdCArPSAiICAgICAgICAgICAgaW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgS2V5Ym9hcmRFdmVudCggJ2lucHV0JyAsIHsna2V5JzonRW50ZXInfSApKTsiOwogICAgc2NyaXB0ICs9ICIgICAgICAgIH0iOwogICAgc2NyaXB0ICs9ICIgICAgfSI7CiAgICBzY3JpcHQgKz0gIik7IjsKICAgIHZhciBmciA9IEphdmFJbXBvcnRlcigKICAgICAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGUuYXBpLkFjdGlvbiwKICAgICAgICAgIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suTmFtZUNhbGxiYWNrLAogICAgICAgIGNvbS5zdW4uaWRlbnRpdHkuYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjawogICAgKQogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICAgICAgbmV3IGZyLk5hbWVDYWxsYmFjaygibWVzc2FnZSIsIGNvbmZpZy5tZXNzYWdlLmVuKSwKICAgICAgICAgICAgbmV3IGZyLk5hbWVDYWxsYmFjaygibWVzc2FnZVllcyIsIGNvbmZpZy5tZXNzYWdlWWVzLmVuKSwKICAgICAgICAgICAgbmV3IGZyLk5hbWVDYWxsYmFjaygibWVzc2FnZU5vIiwgY29uZmlnLm1lc3NhZ2VOby5lbiksCiAgICAgICAgICAgICAgbmV3IGZyLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICAgICAgKS5idWlsZCgpOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgICBjb25maWdbY2FsbGJhY2tzLmdldCgwKS5nZXRQcm9tcHQoKV0uZW4gPSBjYWxsYmFja3MuZ2V0KDApLmdldE5hbWUoKTsKICAgICAgICAgIGNvbmZpZ1tjYWxsYmFja3MuZ2V0KDEpLmdldFByb21wdCgpXS5lbiA9IGNhbGxiYWNrcy5nZXQoMSkuZ2V0TmFtZSgpOwogICAgICAgICAgY29uZmlnW2NhbGxiYWNrcy5nZXQoMikuZ2V0UHJvbXB0KCldLmVuID0gY2FsbGJhY2tzLmdldCgyKS5nZXROYW1lKCk7CiAgICAgICAgICBub2RlU3RhdGUucHV0U2hhcmVkKCJub2RlQ29uZmlnIiwgY29uZmlnKTsKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbyhvdXRjb21lKS5idWlsZCgpOwogICAgfQp9KCkpOw==",
  },
  {
    "_id": "c234ba0b-58a1-4cfd-9567-09edde980745",
    "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "createdBy": "null",
    "creationDate": 1433147666269,
    "default": true,
    "description": "Internal token modification script",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "ForgeRock Internal: OAuth2 Access Token Modification Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwovLyBTY3JpcHQgaXMgaW50ZW50aW9uYWxseSBlbXB0eQo=",
  },
  {
    "_id": "58d29080-4563-480b-89bb-1e7719776a21",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Normalizes raw profile data from Google",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Google Profile Normalization",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjAgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmZpZWxkCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5qc29uCmltcG9ydCBzdGF0aWMgb3JnLmZvcmdlcm9jay5qc29uLkpzb25WYWx1ZS5vYmplY3QKCnJldHVybiBqc29uKG9iamVjdCgKICAgICAgICBmaWVsZCgiaWQiLCByYXdQcm9maWxlLnN1YiksCiAgICAgICAgZmllbGQoImRpc3BsYXlOYW1lIiwgcmF3UHJvZmlsZS5uYW1lKSwKICAgICAgICBmaWVsZCgiZ2l2ZW5OYW1lIiwgcmF3UHJvZmlsZS5naXZlbl9uYW1lKSwKICAgICAgICBmaWVsZCgiZmFtaWx5TmFtZSIsIHJhd1Byb2ZpbGUuZmFtaWx5X25hbWUpLAogICAgICAgIGZpZWxkKCJwaG90b1VybCIsIHJhd1Byb2ZpbGUucGljdHVyZSksCiAgICAgICAgZmllbGQoImVtYWlsIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoInVzZXJuYW1lIiwgcmF3UHJvZmlsZS5lbWFpbCksCiAgICAgICAgZmllbGQoImxvY2FsZSIsIHJhd1Byb2ZpbGUubG9jYWxlKSkp",
  },
  {
    "_id": "9e9c6c4d-5d9d-4990-9f05-d8b2b25ad52b",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Custom risk policy engine combining Autonomous Access signals with external signals.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "AA Custom Policy Engine",
    "script": "",
  },
  {
    "_id": "9399ac8b-3a6e-423b-95a2-6e0fd07262b1",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "APIProtection: Get Key And Secret",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "APIProtection: Get Key And Secret",
    "script": "bG9nZ2VyLndhcm5pbmcoIkFQSVByb3RlY3Rpb246IEdldCBLZXkgQW5kIFNlY3JldDogc3RhcnQiKTsKCi8qCiAqIEJFR0lOIFNDUklQVCBDT05GSUdVUkFUSU9OCiAqLwp2YXIgS0VZX0hFQURFUl9OQU1FID0gIngtYXBpLWtleSI7CnZhciBTRUNSRVRfSEVBREVSX05BTUUgPSAieC1hcGktc2VjcmV0IjsKdmFyIFVTRVJOQU1FX0hFQURFUl9OQU1FID0gIlgtT3BlbkFNLVVzZXJuYW1lIjsKdmFyIFBBU1NXT1JEX0hFQURFUl9OQU1FID0gIlgtT3BlbkFNLVBhc3N3b3JkIjsKLyoKICogRU5EIFNDUklQVCBDT05GSUdVUkFUSU9OCiAqLwoKb3V0Y29tZSA9ICJmYWxzZSI7Cgp2YXIga2V5ID0gZ2V0SGVhZGVyKEtFWV9IRUFERVJfTkFNRSkgfHwgcmVhZFZhbHVlKEtFWV9IRUFERVJfTkFNRSkgfHwgbnVsbDsKdmFyIHNlY3JldCA9IGdldEhlYWRlcihTRUNSRVRfSEVBREVSX05BTUUpIHx8IHJlYWRUcmFuc2llbnRWYWx1ZShTRUNSRVRfSEVBREVSX05BTUUpIHx8IG51bGw7Cgp2YXIgdXNlcm5hbWUgPSBzaGFyZWRTdGF0ZS5nZXQoInVzZXJuYW1lIikgfHwgbnVsbDsKdmFyIHBhc3N3b3JkID0gdHJhbnNpZW50U3RhdGUuZ2V0KCJwYXNzd29yZCIpIHx8IG51bGw7CgppZiAoa2V5ICYmIHNlY3JldCkgewogICAgbG9nZ2VyLndhcm5pbmcoIkFQSVByb3RlY3Rpb246IEdldCBLZXkgQW5kIFNlY3JldDoga2V5PSIuY29uY2F0KGtleSkpOwogIAogICAgICBzdG9yZVZhbHVlKEtFWV9IRUFERVJfTkFNRSwga2V5KTsKICAgICAgc3RvcmVWYWx1ZSgidXNlcm5hbWUiLCB1c2VybmFtZSk7CiAgICAgIHNoYXJlZFN0YXRlLnB1dCgidXNlcm5hbWUiLCBrZXkpOwogICAgICAKICAgICAgc3RvcmVUcmFuc2llbnRWYWx1ZShTRUNSRVRfSEVBREVSX05BTUUsIHNlY3JldCk7CiAgICAgIHN0b3JlVHJhbnNpZW50VmFsdWUoInBhc3N3b3JkIiwgcGFzc3dvcmQpOwogICAgICB0cmFuc2llbnRTdGF0ZS5wdXQoInBhc3N3b3JkIiwgc2VjcmV0KTsKICAKICAgIG91dGNvbWUgPSAidHJ1ZSI7Cn0KCmxvZ2dlci53YXJuaW5nKCJBUElQcm90ZWN0aW9uOiBHZXQgS2V5IEFuZCBTZWNyZXQ6IGZpbmlzaCBbb3V0Y29tZT0iLmNvbmNhdChvdXRjb21lKS5jb25jYXQoIl0iKSk7CgovKgogKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgcmVxdWVzdGVkIGhlYWRlcgogKi8KZnVuY3Rpb24gZ2V0SGVhZGVyKGhlYWRlck5hbWUpIHsKICAgICAgaWYgKHJlcXVlc3RIZWFkZXJzLmdldChoZWFkZXJOYW1lKSAmJiByZXF1ZXN0SGVhZGVycy5nZXQoaGVhZGVyTmFtZSkuZ2V0KDApKSB7CiAgICAgICAgcmV0dXJuIHJlcXVlc3RIZWFkZXJzLmdldChoZWFkZXJOYW1lKS5nZXQoMCkudG9TdHJpbmcoKTsKICAgIH0KICAgICAgcmV0dXJuIG51bGw7Cn0KCi8qCiAqIFN0b3JlIHZhbHVlIGZvciBBUElQcm90ZWN0aW9uIHNjcmlwdCB1c2UKICovCmZ1bmN0aW9uIHN0b3JlVmFsdWUobmFtZSwgdmFsdWUpIHsKICAgICAgdmFyIHN0b3JhZ2UgPSBzaGFyZWRTdGF0ZS5nZXQoIkFQSVByb3RlY3Rpb24iKTsKICAgIGlmIChzdG9yYWdlICYmIHZhbHVlKSB7CiAgICAgICAgICBpZiAoc3RvcmFnZS5wdXQpIHsKICAgICAgICAgICAgc3RvcmFnZS5wdXQobmFtZSwgdmFsdWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHN0b3JhZ2VbbmFtZV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIGlmICh2YWx1ZSkgewogICAgICAgIHNoYXJlZFN0YXRlLnB1dCgiQVBJUHJvdGVjdGlvbiIsIEpTT04ucGFyc2UoIntcIiIrbmFtZSsiXCI6XCIiK3ZhbHVlKyJcIn0iKSk7CiAgICB9Cn0KCi8qCiAqIFJlYWQgdmFsdWUgZnJvbSBzdG9yYWdlIGZvciBBUElQcm90ZWN0aW9uIHNjcmlwdCB1c2UKICovCmZ1bmN0aW9uIHJlYWRWYWx1ZShuYW1lKSB7CiAgICAgIHZhciBzdG9yYWdlID0gc2hhcmVkU3RhdGUuZ2V0KCJBUElQcm90ZWN0aW9uIik7CiAgICBpZiAoc3RvcmFnZSkgewogICAgICAgICAgaWYgKHN0b3JhZ2UuZ2V0KSB7CiAgICAgICAgICAgIHJldHVybiBzaGFyZWRTdGF0ZS5nZXQoIkFQSVByb3RlY3Rpb24iKS5nZXQobmFtZSk7CiAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIHN0b3JhZ2UubmFtZTsKICAgICAgICB9CiAgICB9CiAgICAgIHJldHVybiBudWxsOwp9CgovKgogKiBTdG9yZSB0cmFuc2llbnQgdmFsdWUgZm9yIEFQSVByb3RlY3Rpb24gc2NyaXB0IHVzZQogKi8KZnVuY3Rpb24gc3RvcmVUcmFuc2llbnRWYWx1ZShuYW1lLCB2YWx1ZSkgewogICAgdmFyIHRyYW5zaWVudFN0b3JhZ2UgPSB0cmFuc2llbnRTdGF0ZS5nZXQoIkFQSVByb3RlY3Rpb24iKTsKICAgIGlmICh0cmFuc2llbnRTdG9yYWdlICYmIHZhbHVlKSB7CiAgICAgICAgICBpZiAodHJhbnNpZW50U3RvcmFnZS5wdXQpIHsKICAgICAgICAgICAgdHJhbnNpZW50U3RvcmFnZS5wdXQobmFtZSwgdmFsdWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHRyYW5zaWVudFN0b3JhZ2VbbmFtZV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIGlmICh2YWx1ZSkgewogICAgICAgIHRyYW5zaWVudFN0YXRlLnB1dCgiQVBJUHJvdGVjdGlvbiIsIEpTT04ucGFyc2UoIntcIiIrbmFtZSsiXCI6XCIiK3ZhbHVlKyJcIn0iKSk7CiAgICB9Cn0KCi8qCiAqIFJlYWQgdHJhbnNpZW50IHZhbHVlIGZyb20gc3RvcmFnZSBmb3IgQVBJUHJvdGVjdGlvbiBzY3JpcHQgdXNlCiAqLwpmdW5jdGlvbiByZWFkVHJhbnNpZW50VmFsdWUobmFtZSkgewogICAgICB2YXIgdHJhbnNpZW50U3RvcmFnZSA9IHRyYW5zaWVudFN0YXRlLmdldCgiQVBJUHJvdGVjdGlvbiIpOwogICAgaWYgKHRyYW5zaWVudFN0b3JhZ2UpIHsKICAgICAgICAgIGlmICh0cmFuc2llbnRTdG9yYWdlLmdldCkgewogICAgICAgICAgICByZXR1cm4gdHJhbnNpZW50U3RhdGUuZ2V0KCJBUElQcm90ZWN0aW9uIikuZ2V0KG5hbWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHJldHVybiB0cmFuc2llbnRTdG9yYWdlLm5hbWU7CiAgICAgICAgfQogICAgfQogICAgICByZXR1cm4gbnVsbDsKfQ==",
  },
  {
    "_id": "fe35a8fb-31b1-441c-bb9b-27932565061c",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_MfaGetApp",
    "script": "LyoKVGhpcyBjcmVhdGVzIHRoZSBmb2xsb3dpbmcgY2FsbGJhY2tzOgotIFRleHRPdXRwdXRDYWxsYmFjazogRGlzcGxheSB0aGUgc3RlcCB0aXRsZSBhbmQgZGVzY3JpcHRpb24KLSBDb25maXJtYXRpb25DYWxsYmFjazogRGlzcGxheSB0aGUgIk5leHQiIGJ1dHRvbgotIEhpZGRlblZhbHVlQ2FsbGJhY2s6IENhcHR1cmVzIHRoZSAiR2V0IGFwcCIgb3B0aW9uLCBpZiBzZWxlY3RlZAotIFNjcmlwdFRleHRPdXRwdXRDYWxsYmFjazogQ3JlYXRlcyBhICJEb3dubG9hZCB0aGUgYXBwIiBsaW5rIGJ1dHRvbiBhbmQgcG9zaXRpb25zIGl0IGJlbG93IHRoZSAiTmV4dCIgYnV0dG9uCiovCgp2YXIgdG9rZW4gPSBnZW5lcmF0ZU51bWVyaWNUb2tlbigneHh4Jyk7CnZhciBsb2FkaW5nTWVzc2FnZSA9ICdMb2FkaW5nLi4uJzsKdmFyIGxpbmtCdXR0b24gPSAiPGJ1dHRvbiBpZD0nZ2V0YXBwLWxpbmstIi5jb25jYXQodG9rZW4pLmNvbmNhdCgiJyBjbGFzcz0nYnRuIGJ0bi1ibG9jayBidG4tbGluaycgdHlwZT0nc3VibWl0Jz5Eb3dubG9hZCB0aGUgYXBwPC9idXR0b24+Iik7CnZhciBtZXNzYWdlID0gIjxoMiBjbGFzcz0naDInPlNldCB1cCB0aGUgRm9yZ2VSb2NrIEF1dGhlbnRpY2F0b3I8L2gyPjxkaXYgc3R5bGU9J21hcmdpbi1ib3R0b206MWVtJz5UbyBnZXQgc3RhcnRlZCwgeW91IG5lZWQgdG8gcmVnaXN0ZXIgeW91ciBkZXZpY2UgdXNpbmcgdGhlIEZvcmdlUm9jayBBdXRoZW50aWNhdG9yIGFwcC48L2Rpdj4iOwp2YXIgY2hvaWNlcyA9IFsnTmV4dCddOwp2YXIgZGVmYXVsdENob2ljZSA9IDA7CnZhciBnZXRBcHBWYWx1ZSA9ICdHZXQgYXBwJzsKdmFyIGdldEFwcElucHV0SWQgPSAnZ2V0YXBwLWlucHV0LScuY29uY2F0KHRva2VuKTsKCnZhciBzZXR1cFBhZ2VTY3JpcHQgPQogICd2YXIgc2V0dXBQYWdlID0gZnVuY3Rpb24oKSB7Jy5jb25jYXQoCiAgJyAgdmFyIGdldEFwcElucHV0RWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCInKS5jb25jYXQoZ2V0QXBwSW5wdXRJZCkuY29uY2F0KCciKTsnKS5jb25jYXQoCiAgJyAgdmFyIG1lc3NhZ2VFbGVtOycpLmNvbmNhdCgKICAnICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJjYWxsYmFjay1jb21wb25lbnQiKS5mb3JFYWNoKCcpLmNvbmNhdCgKICAnICAgIGZ1bmN0aW9uIChlKSB7JykuY29uY2F0KAogICcgICAgICB2YXIgbSA9IGUuZmlyc3RFbGVtZW50Q2hpbGQ7JykuY29uY2F0KAogICcgICAgICBpZiAobS5maXJzdENoaWxkICYmIG0uZmlyc3RDaGlsZC5ub2RlTmFtZSA9PSAiI3RleHQiICYmIG0uZmlyc3RDaGlsZC5ub2RlVmFsdWUudHJpbSgpID09ICInKS5jb25jYXQobG9hZGluZ01lc3NhZ2UpLmNvbmNhdCgnIikgeycpLmNvbmNhdCgKICAnICAgICAgICBtZXNzYWdlRWxlbSA9IG07JykuY29uY2F0KAogICcgICAgICB9JykuY29uY2F0KAogICcgICAgfScpLmNvbmNhdCgKICAnICApOycpLmNvbmNhdCgKICAnICBpZiAoIWdldEFwcElucHV0RWxlbSB8fCAhbWVzc2FnZUVsZW0pIHsnKS5jb25jYXQoCiAgJyAgICByZXR1cm4gc2V0VGltZW91dChzZXR1cFBhZ2UsIDUwKTsnKS5jb25jYXQoCiAgJyAgfScpLmNvbmNhdCgKICAnICB2YXIgc2tpcENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOycpLmNvbmNhdCgKICAnICBza2lwQ29udGFpbmVyLnN0eWxlID0gIndpZHRoOjEwMCUiOycpLmNvbmNhdCgKICAnICBza2lwQ29udGFpbmVyLmlubmVySFRNTCA9ICInKS5jb25jYXQobGlua0J1dHRvbikuY29uY2F0KCciOycpLmNvbmNhdCgKICAnICBnZXRBcHBJbnB1dEVsZW0ucGFyZW50Tm9kZS5hcHBlbmQoc2tpcENvbnRhaW5lcik7JykuY29uY2F0KAogICcgIG1lc3NhZ2VFbGVtLmFsaWduID0gImNlbnRlciI7JykuY29uY2F0KAogICcgIG1lc3NhZ2VFbGVtLmlubmVySFRNTCA9ICInKS5jb25jYXQobWVzc2FnZSkuY29uY2F0KCciOycpLmNvbmNhdCgKICAnICB2YXIgYmluZEdldEFwcExpbmsgPSBmdW5jdGlvbigpIHsnKS5jb25jYXQoCiAgJyAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZ2V0YXBwLWxpbmstJykuY29uY2F0KHRva2VuKS5jb25jYXQoJyIpLm9uY2xpY2sgPSBmdW5jdGlvbigpIHsnKS5jb25jYXQoCiAgJyAgICAgIGdldEFwcElucHV0RWxlbS52YWx1ZSA9ICInKS5jb25jYXQoZ2V0QXBwVmFsdWUpLmNvbmNhdCgnIjsnKS5jb25jYXQoCiAgJyAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsb2dpbkJ1dHRvbl8wIikuY2xpY2soKTsnKS5jb25jYXQoCiAgJyAgICAgIHJldHVybiBmYWxzZTsnKS5jb25jYXQoCiAgJyAgICB9OycpLmNvbmNhdCgKICAnICB9OycpLmNvbmNhdCgKICAnICBzZXRUaW1lb3V0KGJpbmRHZXRBcHBMaW5rLCAxMDApOycpLmNvbmNhdCgKICAnfTsnKS5jb25jYXQoCiAgJ3NldHVwUGFnZSgpOycpOwoKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suQ29uZmlybWF0aW9uQ2FsbGJhY2ssCiAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2ssCiAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuSGlkZGVuVmFsdWVDYWxsYmFjaywKICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2sKKQoKd2l0aCAoZnIpIHsKICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgYWN0aW9uID0gQWN0aW9uLnNlbmQoCiAgICAgIG5ldyBUZXh0T3V0cHV0Q2FsbGJhY2soCiAgICAgICAgICBUZXh0T3V0cHV0Q2FsbGJhY2suSU5GT1JNQVRJT04sCiAgICAgICAgICBsb2FkaW5nTWVzc2FnZQogICAgICApLAogICAgICBuZXcgQ29uZmlybWF0aW9uQ2FsbGJhY2soCiAgICAgICAgICBDb25maXJtYXRpb25DYWxsYmFjay5JTkZPUk1BVElPTiwKICAgICAgICAgIGNob2ljZXMsCiAgICAgICAgICBkZWZhdWx0Q2hvaWNlCiAgICAgICksCiAgICAgIG5ldyBIaWRkZW5WYWx1ZUNhbGxiYWNrKGdldEFwcElucHV0SWQsICdmYWxzZScpLAogICAgICBuZXcgU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrKHNldHVwUGFnZVNjcmlwdCkKICAgICkuYnVpbGQoKQogIH0gZWxzZSB7CiAgICBpZiAoY2FsbGJhY2tzLmdldCgyKS5nZXRWYWx1ZSgpID09IGdldEFwcFZhbHVlKSB7CiAgICAgIGFjdGlvbiA9IEFjdGlvbi5nb1RvKGdldEFwcFZhbHVlKS5idWlsZCgpOwogICAgfSBlbHNlIHsKICAgICAgYWN0aW9uID0gQWN0aW9uLmdvVG8oY2hvaWNlc1tjYWxsYmFja3MuZ2V0KDEpLmdldFNlbGVjdGVkSW5kZXgoKV0pLmJ1aWxkKCk7CiAgICB9CiAgfQp9CgogLyoKICAqIEdlbmVyYXRlIGEgdG9rZW4gaW4gdGhlIGRlc2lyZWQgZm9ybWF0LiBBbGwgJ3gnIGNoYXJhY3RlcnMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGEgcmFuZG9tIG51bWJlciAwLTkuCiAgKiAKICAqIEV4YW1wbGU6CiAgKiAneHh4eHgnIHByb2R1Y2VzICcyODUzNScKICAqICd4eHgteHh4JyBwcm9kdWNlcyAnNDMyLTUyMScKICAqLwpmdW5jdGlvbiBnZW5lcmF0ZU51bWVyaWNUb2tlbihmb3JtYXQpIHsKICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1t4XS9nLCBmdW5jdGlvbihjKSB7CiAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkqMTB8MDsKICAgIHZhciB2ID0gcjsKICAgIHJldHVybiB2LnRvU3RyaW5nKDEwKTsKICB9KTsKfQ==",
  },
  {
    "_id": "5b29c5b7-b161-4a42-a41f-d6c85316b951",
    "context": "SAML2_IDP_ADAPTER",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Saml2 IDP Adapter Script",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoKICogVGhlIHNjcmlwdCBoYXMgdGhlc2UgdG9wIGxldmVsIGZ1bmN0aW9ucyB0aGF0IGNvdWxkIGJlIGV4ZWN1dGVkIGR1cmluZyBhIFNBTUwyIGZsb3cuCiAqICAgICAgLSBwcmVTaW5nbGVTaWduT24KICogICAgICAtIHByZUF1dGhlbnRpY2F0aW9uCiAqICAgICAgLSBwcmVTZW5kUmVzcG9uc2UKICogICAgICAtIHByZVNpZ25SZXNwb25zZQogKiAgICAgIC0gcHJlU2VuZEZhaWx1cmVSZXNwb25zZQogKgogKiBQbGVhc2Ugc2VlIHRoZSBqYXZhZG9jIGZvciB0aGUgaW50ZXJmYWNlIGRlZmluaXRpb24gYW5kIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlc2UgbWV0aG9kcy4KICogaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMi9hcGlkb2NzL2NvbS9zdW4vaWRlbnRpdHkvc2FtbDIvcGx1Z2lucy9TQU1MMklkZW50aXR5UHJvdmlkZXJBZGFwdGVyLmh0bWwKICogTm90ZSB0aGF0IHRoZSBpbml0aWFsaXplIG1ldGhvZCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBzY3JpcHRzLgogKgogKiBEZWZpbmVkIHZhcmlhYmxlcy4gQ2hlY2sgdGhlIGRvY3VtZW50YXRpb24gb24gdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25zIGZvciB0aGUgdmFyaWFibGVzIGF2YWlsYWJsZSB0byBpdC4KICoKICogaG9zdGVkRW50aXR5SWQgLSBTdHJpbmcKICogICAgIEVudGl0eSBJRCBmb3IgdGhlIGhvc3RlZCBJRFAKICogcmVhbG0gLSBTdHJpbmcKICogICAgIFJlYWxtIG9mIHRoZSBob3N0ZWQgSURQCiAqIGlkcEFkYXB0ZXJTY3JpcHRIZWxwZXIgLSBJZHBBZGFwdGVyU2NyaXB0SGVscGVyICgxKQogKiAgICAgQW4gaW5zdGFuY2Ugb2YgSWRwQWRhcHRlclNjcmlwdEhlbHBlciBjb250YWluaW5nIGhlbHBlciBtZXRob2RzLiBTZWUgSmF2YWRvYyBmb3IgbW9yZSBkZXRhaWxzLgogKiByZXF1ZXN0IC0gSHR0cFNlcnZsZXRSZXF1ZXN0ICgyKQogKiAgICAgU2VydmxldCByZXF1ZXN0IG9iamVjdAogKiByZXNwb25zZSAtIEh0dHBTZXJ2bGV0UmVzcG9uc2UgKDMpCiAqICAgICBTZXJ2bGV0IHJlc3BvbnNlIG9iamVjdAogKiBhdXRoblJlcXVlc3QgLSBBdXRoblJlcXVlc3QgKDQpCiAqICAgICBUaGUgb3JpZ2luYWwgYXV0aGVudGljYXRpb24gcmVxdWVzdCBzZW50IGZyb20gU1AKICogcmVxSWQgLSBTdHJpbmcKICogICAgIFRoZSBpZCB0byB1c2UgZm9yIGNvbnRpbnVhdGlvbiBvZiBwcm9jZXNzaW5nIGlmIHRoZSBhZGFwdGVyIHJlZGlyZWN0cwogKiByZXMgLSBSZXNwb25zZSAoNSkKICogICAgIFRoZSBTQU1MIFJlc3BvbnNlCiAqIHNlc3Npb24gLSBTU09Ub2tlbiAoNikKICogICAgIFRoZSBzaW5nbGUgc2lnbi1vbiBzZXNzaW9uLiBUaGUgcmVmZXJlbmNlIHR5cGUgb2YgdGhpcyBpcyBPYmplY3QgYW5kIHdvdWxkIG5lZWQgdG8gYmUgY2FzdGVkIHRvIFNTT1Rva2VuLgogKiByZWxheVN0YXRlIC0gU3RyaW5nCiAqICAgICBUaGUgcmVsYXlTdGF0ZSB0aGF0IHdpbGwgYmUgdXNlZCBpbiB0aGUgcmVkaXJlY3QKICogZmF1bHRDb2RlIC0gU3RyaW5nCiAqICAgICB0aGUgZmF1bHQgY29kZSB0aGF0IHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlIFNBTUwgcmVzcG9uc2UKICogZmF1bHREZXRhaWwgLSBTdHJpbmcKICogICAgIHRoZSBmYXVsdCBkZXRhaWwgdGhhdCB3aWxsIGJlIHJldHVybmVkIGluIHRoZSBTQU1MIHJlc3BvbnNlCiAqIGxvZ2dlciAtIExvZ2dlciBpbnN0YW5jZQogKiAgICAgaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvc2NyaXB0aW5nLWd1aWRlL3NjcmlwdGluZy1hcGktZ2xvYmFsLWxvZ2dlci5odG1sI3NjcmlwdGluZy1hcGktZ2xvYmFsLWxvZ2dlci4KICogICAgIENvcnJlc3BvbmRpbmcgbG9nIGZpbGVzIHdpbGwgYmUgcHJlZml4ZWQgd2l0aDogc2NyaXB0cy48c2NyaXB0IG5hbWU+CiAqCiAqIFRocm93cyBTQU1MMkV4Y2VwdGlvbiAoNyk6CiAqICAgICBmb3IgYW55IGV4Y2VwdGlvbnMgb2NjdXJyaW5nIGluIHRoZSBhZGFwdGVyLiBUaGUgZmVkZXJhdGlvbiBwcm9jZXNzIHdpbGwgY29udGludWUKICoKICogQ2xhc3MgcmVmZXJlbmNlOgogKiAoMSkgaWRwQWRhcHRlclNjcmlwdEhlbHBlciAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83LjIvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L3NhbWwyL3BsdWdpbnMvc2NyaXB0ZWQvSWRwQWRhcHRlclNjcmlwdEhlbHBlci5odG1sLgogKiAoMikgSHR0cFNlcnZsZXRSZXF1ZXN0IC0gaHR0cHM6Ly90b21jYXQuYXBhY2hlLm9yZy90b21jYXQtNy4wLWRvYy9zZXJ2bGV0YXBpL2phdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QuaHRtbC4KICogKDMpIEh0dHBTZXJ2bGV0UmVzcG9uc2UgLSBodHRwczovL3RvbWNhdC5hcGFjaGUub3JnL3RvbWNhdC03LjAtZG9jL3NlcnZsZXRhcGkvamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UuaHRtbC4KICogKDQpIEF1dGhuUmVxdWVzdCAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83LjIvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L3NhbWwyL3Byb3RvY29sL0F1dGhuUmVxdWVzdC5odG1sLgogKiAoNSkgUmVzcG9uc2UgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4yL2FwaWRvY3MvY29tL3N1bi9pZGVudGl0eS9zYW1sMi9wcm90b2NvbC9SZXNwb25zZS5odG1sLgogKiAoNikgU1NPVG9rZW4gLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4yL2FwaWRvY3MvY29tL2lwbGFuZXQvc3NvL1NTT1Rva2VuLmh0bWwuCiAqICg3KSBTQU1MMkV4Y2VwdGlvbiAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83LjIvYXBpZG9jcy9jb20vc3VuL2lkZW50aXR5L3NhbWwyL2NvbW1vbi9TQU1MMkV4Y2VwdGlvbi5odG1sLgogKi8KCi8qCiAqIFRlbXBsYXRlL2RlZmF1bHQgc2NyaXB0IGZvciBTQU1MMiBJRFAgQWRhcHRlciBzY3JpcHRlZCBwbHVnaW4uCiAqLwoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlU2luZ2xlU2lnbk9uOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICBhdXRoblJlcXVlc3QKICogICAgIHJlc3BvbnNlCiAqICAgICByZXFJZAogKiAgICAgbG9nZ2VyCiAqCiAqIFJldHVybiAtIHRydWUgaWYgYnJvd3NlciByZWRpcmVjdGlvbiBpcyBoYXBwZW5pbmcgYWZ0ZXIgcHJvY2Vzc2luZywgZmFsc2Ugb3RoZXJ3aXNlLiBEZWZhdWx0IHRvIGZhbHNlLgogKi8KZnVuY3Rpb24gcHJlU2luZ2xlU2lnbk9uICgpIHsKICAgIHJldHVybiBmYWxzZTsKfQoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlQXV0aGVudGljYXRpb246CiAqICAgICBob3N0ZWRFbnRpdHlJZAogKiAgICAgcmVhbG0KICogICAgIGlkcEFkYXB0ZXJTY3JpcHRIZWxwZXIKICogICAgIHJlcXVlc3QKICogICAgIGF1dGhuUmVxdWVzdAogKiAgICAgcmVzcG9uc2UKICogICAgIHJlcUlkCiAqICAgICBzZXNzaW9uCiAqICAgICByZWxheVN0YXRlCiAqICAgICBsb2dnZXIKICoKICogUmV0dXJuIC0gdHJ1ZSBpZiBicm93c2VyIHJlZGlyZWN0aW9uIGlzIGhhcHBlbmluZyBhZnRlciBwcm9jZXNzaW5nLCBmYWxzZSBvdGhlcndpc2UuIERlZmF1bHQgdG8gZmFsc2UuCiAqLwpmdW5jdGlvbiBwcmVBdXRoZW50aWNhdGlvbiAoKSB7CiAgICByZXR1cm4gZmFsc2U7Cn0KCi8qCiAqIEF2YWlsYWJsZSB2YXJpYWJsZXMgZm9yIHByZVNlbmRSZXNwb25zZToKICogICAgIGhvc3RlZEVudGl0eUlkCiAqICAgICByZWFsbQogKiAgICAgaWRwQWRhcHRlclNjcmlwdEhlbHBlcgogKiAgICAgcmVxdWVzdAogKiAgICAgYXV0aG5SZXF1ZXN0CiAqICAgICByZXNwb25zZQogKiAgICAgcmVxSWQKICogICAgIHNlc3Npb24KICogICAgIHJlbGF5U3RhdGUKICogICAgIGxvZ2dlcgogKgogKiBSZXR1cm4gLSB0cnVlIGlmIGJyb3dzZXIgcmVkaXJlY3Rpb24gaGFwcGVuZWQgYWZ0ZXIgcHJvY2Vzc2luZywgZmFsc2Ugb3RoZXJ3aXNlLiBEZWZhdWx0IHRvIGZhbHNlLgogKi8KZnVuY3Rpb24gcHJlU2VuZFJlc3BvbnNlICgpIHsKICAgIHJldHVybiBmYWxzZTsKfQoKLyoKICogQXZhaWxhYmxlIHZhcmlhYmxlcyBmb3IgcHJlU2lnblJlc3BvbnNlOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICBhdXRoblJlcXVlc3QKICogICAgIHNlc3Npb24KICogICAgIHJlbGF5U3RhdGUKICogICAgIHJlcwogKiAgICAgbG9nZ2VyCiAqLwpmdW5jdGlvbiBwcmVTaWduUmVzcG9uc2UgKCkgewp9CgovKgogKiBBdmFpbGFibGUgdmFyaWFibGVzIGZvciBwcmVTZW5kRmFpbHVyZVJlc3BvbnNlOgogKiAgICAgaG9zdGVkRW50aXR5SWQKICogICAgIHJlYWxtCiAqICAgICBpZHBBZGFwdGVyU2NyaXB0SGVscGVyCiAqICAgICByZXF1ZXN0CiAqICAgICByZXNwb25zZQogKiAgICAgZmF1bHRDb2RlCiAqICAgICBmYXVsdERldGFpbAogKiAgICAgbG9nZ2VyCiAqLwpmdW5jdGlvbiBwcmVTZW5kRmFpbHVyZVJlc3BvbnNlICgpIHsKfQ==",
  },
  {
    "_id": "fbc563cb-eced-4e1b-9cd4-022680347668",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "FRAAS-7955 Show Object Values",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FRAAS-7955 Show Object Values",
    "script": "dmFyIG91dGNvbWUgPSB0cnVlOwoKLy8gUmVxdWlyZXMgSWRlbnRpZnkgRXhpc3RpbmcgVXNlciBhdXRoIG5vZGUgdG8gcmV0cmlldmUgcmVhbCB1c2VyIElEIGZyb20gSURNCnZhciB1c2VyaWQgPSBzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpOwoKLy8gUmV0cmlldmUgdXNlciBwcm9maWxlIGF0dHJpYnV0ZXMKdmFyIHVzZXJOYW1lID0gaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZSh1c2VyaWQsICJ1aWQiKS5pdGVyYXRvcigpLm5leHQoKS50b1N0cmluZygpOwp2YXIgZmlyc3ROYW1lID0gaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZSh1c2VyaWQsICJnaXZlbk5hbWUiKS5pdGVyYXRvcigpLm5leHQoKS50b1N0cmluZygpOwp2YXIgbGFzdE5hbWUgPSBpZFJlcG9zaXRvcnkuZ2V0QXR0cmlidXRlKHVzZXJpZCwgInNuIikuaXRlcmF0b3IoKS5uZXh0KCkudG9TdHJpbmcoKTsKdmFyIGVtYWlsID0gaWRSZXBvc2l0b3J5LmdldEF0dHJpYnV0ZSh1c2VyaWQsICJtYWlsIikuaXRlcmF0b3IoKS5uZXh0KCkudG9TdHJpbmcoKTsKCnZhciBhbmNob3IgPSAiYW5jaG9yLSIuY29uY2F0KGdlbmVyYXRlTnVtZXJpY1Rva2VuKCd4eHgnKSk7CnZhciBoYWxpZ24gPSAibGVmdCI7CnZhciBtZXNzYWdlID0gIjxoND5PYmplY3QgVmFsdWVzPC9oND4iLmNvbmNhdCgKICAgICI8cD48Yj5Vc2VybmFtZTwvYj46ICIpLmNvbmNhdCh1c2VyTmFtZSkuY29uY2F0KCI8L3A+IikuY29uY2F0KAogICAgIjxwPjxiPkZpcnN0IE5hbWU8L2I+OiAiKS5jb25jYXQoZmlyc3ROYW1lKS5jb25jYXQoIjwvcD4iKS5jb25jYXQoCiAgICAiPHA+PGI+TGFzdCBOYW1lPC9iPjogIikuY29uY2F0KGxhc3ROYW1lKS5jb25jYXQoIjwvcD4iKS5jb25jYXQoCiAgICAiPHA+PGI+RW1haWw8L2I+OiAiKS5jb25jYXQoZW1haWwpLmNvbmNhdCgiPC9wPiIpCnZhciBzY3JpcHQgPSAiQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG4iLmNvbmNhdCgKICAiZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2FsbGJhY2stY29tcG9uZW50JykpLmZvckVhY2goXG4iKS5jb25jYXQoCiAgImZ1bmN0aW9uIChlKSB7XG4iKS5jb25jYXQoCiAgIiAgdmFyIG1lc3NhZ2UgPSBlLmZpcnN0RWxlbWVudENoaWxkO1xuIikuY29uY2F0KAogICIgIGlmIChtZXNzYWdlLmZpcnN0Q2hpbGQgJiYgbWVzc2FnZS5maXJzdENoaWxkLm5vZGVOYW1lID09ICcjdGV4dCcgJiYgbWVzc2FnZS5maXJzdENoaWxkLm5vZGVWYWx1ZS50cmltKCkgPT0gJyIpLmNvbmNhdChhbmNob3IpLmNvbmNhdCgiJykge1xuIikuY29uY2F0KAogICIgICAgbWVzc2FnZS5jbGFzc05hbWUgPSBcInRleHQtbGVmdFwiO1xuIikuY29uY2F0KAogICIgICAgbWVzc2FnZS5hbGlnbiA9IFwiIikuY29uY2F0KGhhbGlnbikuY29uY2F0KCJcIjtcbiIpLmNvbmNhdCgKICAiICAgIG1lc3NhZ2UuaW5uZXJIVE1MID0gJyIpLmNvbmNhdChtZXNzYWdlKS5jb25jYXQoIic7XG4iKS5jb25jYXQoCiAgIiAgfVxuIikuY29uY2F0KAogICJ9KSIpCnZhciBmciA9IEphdmFJbXBvcnRlcigKICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2ssCiAgICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2sKKQppZiAobWVzc2FnZS5sZW5ndGggJiYgY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgbmV3IGZyLlRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICAgICAgZnIuVGV4dE91dHB1dENhbGxiYWNrLklORk9STUFUSU9OLAogICAgICAgICAgICBhbmNob3IKICAgICAgICApLAogICAgICAgIG5ldyBmci5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2soc2NyaXB0KQogICAgKS5idWlsZCgpCn0KZWxzZSB7CiAgYWN0aW9uID0gZnIuQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKfQoKIC8qCiAgKiBHZW5lcmF0ZSBhIHRva2VuIGluIHRoZSBkZXNpcmVkIGZvcm1hdC4gQWxsICd4JyBjaGFyYWN0ZXJzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBhIHJhbmRvbSBudW1iZXIgMC05LgogICogCiAgKiBFeGFtcGxlOgogICogJ3h4eHh4JyBwcm9kdWNlcyAnMjg1MzUnCiAgKiAneHh4LXh4eCcgcHJvZHVjZXMgJzQzMi01MjEnCiAgKi8KZnVuY3Rpb24gZ2VuZXJhdGVOdW1lcmljVG9rZW4oZm9ybWF0KSB7CiAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1t4XS9nLCBmdW5jdGlvbihjKSB7CiAgICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpKjEwfDA7CiAgICAgICAgdmFyIHYgPSByOwogICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDEwKTsKICAgIH0pOwp9",
  },
  {
    "_id": "a873fcd8-8f17-4675-9dd6-54ab1c11e2df",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Record that MFA has been performed for this journey and no longer needs to be performed. This allows journeys and inner journeys to check that flag before performing MFA multiple times.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Record MFA",
    "script": "LyogTUZBIFN0YXR1cwogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBSZWNvcmQgdGhhdCBNRkEgaGFzIGJlZW4gcGVyZm9ybWVkIGZvciB0aGlzIGpvdXJuZXkgYW5kIG5vIGxvbmdlciBuZWVkcyAKICogdG8gYmUgcGVyZm9ybWVkLiBUaGlzIGFsbG93cyBqb3VybmV5cyBhbmQgaW5uZXIgam91cm5leXMgdG8gY2hlY2sgdGhhdCAKICogZmxhZyBiZWZvcmUgcGVyZm9ybWluZyBNRkEgbXVsdGlwbGUgdGltZXMuCiAqIAogKiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICovCm91dGNvbWUgPSAidHJ1ZSI7CnNoYXJlZFN0YXRlLnB1dCgibWZhUGVyZm9ybWVkIiwgInRydWUiKTs=",
  },
  {
    "_id": "39c08084-1238-43e8-857f-2e11005eac49",
    "context": "OAUTH2_ACCESS_TOKEN_MODIFICATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Default alpha realm script for OAuth2 Access Token Modification",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Alpha OAuth2 Access Token Modification Script",
    "script": "",
  },
  {
    "_id": "d3405f9c-d338-4dc2-b00d-7aacf77b731d",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Return the generated OTP using a TextOutputCallback",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Return OTP",
    "script": "LyogUmV0dXJuIE9UUAogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBSZXR1cm4gdGhlIGdlbmVyYXRlZCBPVFAgdXNpbmcgYSBUZXh0T3V0cHV0Q2FsbGJhY2suCiAqIAogKiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICovCm91dGNvbWUgPSAidHJ1ZSI7CnZhciBmciA9IEphdmFJbXBvcnRlcigKICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2sKKQppZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgbmV3IGZyLlRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICAgICAgZnIuVGV4dE91dHB1dENhbGxiYWNrLklORk9STUFUSU9OLAogICAgICAgICAgICBub2RlU3RhdGUuZ2V0KCJvbmVUaW1lUGFzc3dvcmQiKS5hc1N0cmluZygpCiAgICAgICAgKQogICAgKS5idWlsZCgpCn0KZWxzZSB7CiAgYWN0aW9uID0gZnIuQWN0aW9uLmdvVG8ob3V0Y29tZSkuYnVpbGQoKTsKfQ==",
  },
  {
    "_id": "ab78dcb5-85cb-41a6-813e-e07a77761376",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_ProfileToManagedObject",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKZnVuY3Rpb24gc2V0SWZWYWxpZFN0cmluZyhtYW5hZ2VkRGF0YSwgbWFuYWdlZEtleSwgcHJvZmlsZUtleSkgewogIHZhciBub3JtYWxpemVkVmFsdWUgPSBub3JtYWxpemVkUHJvZmlsZS5nZXQocHJvZmlsZUtleSk7CiAgaWYgKG5vcm1hbGl6ZWRWYWx1ZSAmJiAhbm9ybWFsaXplZFZhbHVlLmlzTnVsbCgpICYmIG5vcm1hbGl6ZWRWYWx1ZS5hc1N0cmluZygpICE9ICcnKSB7CiAgICBtYW5hZ2VkRGF0YS5wdXQobWFuYWdlZEtleSwgbm9ybWFsaXplZFZhbHVlKTsKICB9Cn0KCihmdW5jdGlvbiAoKSB7CiAgdmFyIGZySmF2YSA9IEphdmFJbXBvcnRlcigKICAgIG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUsCiAgICBqYXZhLnV0aWwuSGFzaE1hcAogICk7CgogIHZhciBPQkpfQVRUUiA9ICdvYmplY3RBdHRyaWJ1dGVzJzsKCiAgLy8gV2Ugc2hvdWxkIGhhdmUgb2JqZWN0QXR0cmlidXRlcyBkdXJpbmcgb25ib2FyZGluZyBiZWNhdXNlIHRoZSB1c2VyIGlzIGVzdGFibGlzaGVkIGVhcmxpZXIgaW4KICAvLyB0aGUgam91cm5leS4gIFdlIHdvbid0IGhhdmUgb2JqZWN0QXR0cmlidXRlcyBkdXJpbmcgbG9naW4sIHRob3VnaC4KICB2YXIgb2JqQXR0cnMgPSBzaGFyZWRTdGF0ZS5jb250YWluc0tleShPQkpfQVRUUikgPyBzaGFyZWRTdGF0ZS5nZXQoT0JKX0FUVFIpIDogbmV3IGZySmF2YS5IYXNoTWFwKCk7CgogIC8vIElmIHRoaXMgZmxvdyByZXF1aXJlcyBlbWFpbCBtYXRjaGluZywgY29uZmlybSB0aGUgSWRQIHVzZXIgZW1haWwgYWRkcmVzcyBtYXRjaGVzIHRoZSBGUiBlbWFpbCBhZGRyZXNzCiAgaWYgKHNoYXJlZFN0YXRlLmNoZWNrRW1haWxDbGFpbSA9PSB0cnVlKSB7CiAgICB2YXIgaWRwRW1haWwgPSBub3JtYWxpemVkUHJvZmlsZS5nZXQoJ2VtYWlsJykuYXNTdHJpbmcoKTsKICAgIHZhciBmckVtYWlsID0gb2JqQXR0cnMuZ2V0KCdtYWlsJyk7CiAgICBpZiAoaWRwRW1haWwgIT0gZnJFbWFpbCkgewogICAgICB0aHJvdyAnRW1haWwgY2xhaW0gZnJvbSBJRFAgZG9lcyBub3QgbWF0Y2ggaWRlbnRpdHkgbWFpbCBhdHRyaWJ1dGUnOwogICAgfQogIH0KCiAgLy8gVXBkYXRlIHVzZXIgd2l0aCBmaXJzdC9sYXN0IG5hbWUgZnJvbSBJRFAsIGlmIGF2YWlsYWJsZQogIHZhciBtYW5hZ2VkVXNlckRhdGEgPSBmckphdmEuSnNvblZhbHVlLmpzb24oZnJKYXZhLkpzb25WYWx1ZS5vYmplY3QoKSk7CiAgc2V0SWZWYWxpZFN0cmluZyhtYW5hZ2VkVXNlckRhdGEsICdnaXZlbk5hbWUnLCAnZ2l2ZW5OYW1lJyk7CiAgc2V0SWZWYWxpZFN0cmluZyhtYW5hZ2VkVXNlckRhdGEsICdzbicsICdmYW1pbHlOYW1lJyk7CiAgCiAgLy8gRm9yIGxvZ2luOiBFbnN1cmUgdGhlIG1haWwgYXR0cmlidXRlIGlzIHNldCBpbiBjYXNlIHdlIGhhdmUgdG8gbG9vayB1cCB0aGUgYWRtaW4gdXNpbmcKICAvLyB0aGVpciBlbWFpbC4gIFRoaXMgd2lsbCBvY2N1ciB3aGVuIGFuIGV4aXN0aW5nIGFkbWluIGlzIGZlZGVyYXRpbmcgZm9yIHRoZSBmaXJzdCB0aW1lLgogIGlmICghb2JqQXR0cnMuY29udGFpbnNLZXkoJ21haWwnKSkgewogICAgbWFuYWdlZFVzZXJEYXRhLnB1dCgnbWFpbCcsIG5vcm1hbGl6ZWRQcm9maWxlLmdldCgnZW1haWwnKS5hc1N0cmluZygpKTsKICB9CgogIGlmICghbm9ybWFsaXplZFByb2ZpbGUuZ2V0KCdncm91cHMnKS5pc051bGwoKSkgewogICAgbWFuYWdlZFVzZXJEYXRhLnB1dCgnZ3JvdXBzJywgbm9ybWFsaXplZFByb2ZpbGUuZ2V0KCdncm91cHMnKS5hc0xpc3QoKSk7CiAgfQogIAogIC8vIE1lcmdlIGFueXRoaW5nIHdlJ3ZlIHB1dCBpbnRvIGBtYW5hZ2VkVXNlckRhdGFgIGludG8gc2hhcmVkU3RhdGUub2JqZWN0QXR0cmlidXRlcyBiZWNhdXNlCiAgLy8gYG1hbmFnZWRVc2VyRGF0YWAgZ29lcyBpbnRvIHRyYW5zaWVudCBzdGF0ZSwgd2hpY2ggaXNuJ3QgdXNlZCBieSBvdXIgZG93bnN0cmVhbSBub2RlcwogIHZhciBrZXlzID0gbWFuYWdlZFVzZXJEYXRhLmtleXMoKS50b0FycmF5KCk7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7CiAgICBvYmpBdHRycy5wdXQoa2V5c1tpXSwgbWFuYWdlZFVzZXJEYXRhLmdldChrZXlzW2ldKSk7CiAgfQogIHNoYXJlZFN0YXRlLnB1dChPQkpfQVRUUiwgb2JqQXR0cnMpOwoKICByZXR1cm4gbWFuYWdlZFVzZXJEYXRhOwp9KCkpOw==",
  },
  {
    "_id": "c827d2b4-3608-4693-868e-bbcf86bd87c7",
    "context": "AUTHENTICATION_CLIENT_SIDE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for client side Scripted Authentication Module",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Scripted Module - Client Side",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMTYtMjAxNyBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4KICovCi8qIERlZmF1bHQgQXV0aGVudGljYXRpb24gY2xpZW50IHNpZGUgc2NyaXB0IHRvIHVzZSBhcyBhIHRlbXBsYXRlIGZvciBuZXcgc2NyaXB0cyAqLw==",
  },
  {
    "_id": "41c24257-d7fc-4654-8b46-c2666dc5b56d",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "set per level shared state variable",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "level",
    "script": "KGZ1bmN0aW9uICgpIHsKICBvdXRjb21lID0gJ3RydWUnOwogIHZhciBsZXZlbCA9IG5vZGVTdGF0ZS5nZXQoJ2xldmVsJykuYXNJbnRlZ2VyKCk7CiAgc2hhcmVkU3RhdGUucHV0KCdsZXZlbCcgKyBsZXZlbCArICdWYWx1ZScsICdMZXZlbCAnICsgbGV2ZWwgKyAnOiBUaGlzIGlzIGEgbG9uZ2VyIHN0cmluZyB2YWx1ZSBzZXQgYXQgZWFjaCBsZXZlbCBvZiB0aGUgbmVzdGVkIGpvdXJuZXlzLiBJdCBjb250YWlucyBhbiBpbmRpY2F0b3IgaW4gd2hpY2ggbGV2ZWwgaXQgd2FzIHNldC4nKTsKfSgpKTs=",
  },
  {
    "_id": "3cb43516-ae69-433a-8787-501d45db14e9",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Display sharedState, transientState, and headers.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "debug",
    "script": "LyogZGVidWcKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogRGlzcGxheSBzaGFyZWRTdGF0ZSwgdHJhbnNpZW50U3RhdGUsIGFuZCBoZWFkZXJzLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqLwp2YXIgYW5jaG9yID0gImFuY2hvci0iLmNvbmNhdChnZW5lcmF0ZU51bWVyaWNUb2tlbigneHh4JykpOwp2YXIgaGFsaWduID0gImxlZnQiOwp2YXIgbWVzc2FnZSA9ICI8cD48Yj5TaGFyZWQgU3RhdGU8L2I+Ojxici8+Ii5jb25jYXQoCiAgICAgIHNoYXJlZFN0YXRlLnRvU3RyaW5nKCkpLmNvbmNhdCgiPC9wPiIpLmNvbmNhdCgKICAgICI8cD48Yj5UcmFuc2llbnQgU3RhdGU8L2I+Ojxici8+IikuY29uY2F0KAogICAgICB0cmFuc2llbnRTdGF0ZS50b1N0cmluZygpKS5jb25jYXQoIjwvcD4iKS5jb25jYXQoCiAgICAiPHA+PGI+UmVxdWVzdCBIZWFkZXJzPC9iPjo8YnIvPiIpLmNvbmNhdCgKICAgICAgcmVxdWVzdEhlYWRlcnMudG9TdHJpbmcoKSkuY29uY2F0KCI8L3A+IikKdmFyIHNjcmlwdCA9ICJBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcbiIuY29uY2F0KAogICJkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYWxsYmFjay1jb21wb25lbnQnKSkuZm9yRWFjaChcbiIpLmNvbmNhdCgKICAiZnVuY3Rpb24gKGUpIHtcbiIpLmNvbmNhdCgKICAiICB2YXIgbWVzc2FnZSA9IGUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4iKS5jb25jYXQoCiAgIiAgaWYgKG1lc3NhZ2UuZmlyc3RDaGlsZCAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZU5hbWUgPT0gJyN0ZXh0JyAmJiBtZXNzYWdlLmZpcnN0Q2hpbGQubm9kZVZhbHVlLnRyaW0oKSA9PSAnIikuY29uY2F0KGFuY2hvcikuY29uY2F0KCInKSB7XG4iKS5jb25jYXQoCiAgIiAgICBtZXNzYWdlLmNsYXNzTmFtZSA9IFwidGV4dC1sZWZ0XCI7XG4iKS5jb25jYXQoCiAgIiAgICBtZXNzYWdlLmFsaWduID0gXCIiKS5jb25jYXQoaGFsaWduKS5jb25jYXQoIlwiO1xuIikuY29uY2F0KAogICIgICAgbWVzc2FnZS5pbm5lckhUTUwgPSAnIikuY29uY2F0KG1lc3NhZ2UpLmNvbmNhdCgiJztcbiIpLmNvbmNhdCgKICAiICB9XG4iKS5jb25jYXQoCiAgIn0pIikKdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjaywKICAgIGNvbS5zdW4uaWRlbnRpdHkuYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjawopCmlmIChtZXNzYWdlLmxlbmd0aCAmJiBjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICBuZXcgZnIuVGV4dE91dHB1dENhbGxiYWNrKAogICAgICAgICAgICBmci5UZXh0T3V0cHV0Q2FsbGJhY2suSU5GT1JNQVRJT04sCiAgICAgICAgICAgIGFuY2hvcgogICAgICAgICksCiAgICAgICAgbmV3IGZyLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICApLmJ1aWxkKCkKfQplbHNlIHsKICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbygidHJ1ZSIpLmJ1aWxkKCk7Cn0KCiAvKgogICogR2VuZXJhdGUgYSB0b2tlbiBpbiB0aGUgZGVzaXJlZCBmb3JtYXQuIEFsbCAneCcgY2hhcmFjdGVycyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggYSByYW5kb20gbnVtYmVyIDAtOS4KICAqIAogICogRXhhbXBsZToKICAqICd4eHh4eCcgcHJvZHVjZXMgJzI4NTM1JwogICogJ3h4eC14eHgnIHByb2R1Y2VzICc0MzItNTIxJwogICovCmZ1bmN0aW9uIGdlbmVyYXRlTnVtZXJpY1Rva2VuKGZvcm1hdCkgewogICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKC9beF0vZywgZnVuY3Rpb24oYykgewogICAgICAgIHZhciByID0gTWF0aC5yYW5kb20oKSoxMHwwOwogICAgICAgIHZhciB2ID0gcjsKICAgICAgICByZXR1cm4gdi50b1N0cmluZygxMCk7CiAgICB9KTsKfQ==",
  },
  {
    "_id": "4f1273be-9c52-4879-bbe9-9a47068aeed9",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Unverified caller message",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Twilio IVR: Unverified Caller Message",
    "script": "LyogVHdpbGlvIElWUjogVW52ZXJpZmllZCBDYWxsZXIgTWVzc2FnZQogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICogCiAqIERlcGVuZGluZyBvbiB0aGUgYW1vdW50IG9mIGRhdGEgY29sbGVjdGVkIHRocm91Z2ggY2FsbGJhY2tzIGFuZCBob3cgbWFueSBvZiB0aGUgY2FsbFBhcmFtcwogKiB5b3UgYWN0aXZhdGUgYmVsb3csIHlvdSB3aWxsIG5lZWQgdG8gY2hhbmdlIHlvdXIgYXV0aGVudGljYXRpb24gc2Vzc2lvbiBmcm9tIEpXVCB0byBDVFMgb3IKICogTWVtb3J5LgogKi8Kb3V0Y29tZSA9ICJ0cnVlIjsKCi8qIEJlZ2luIENvbmZpZ3VyYXRpb24KICovCgovLyBCdWlsZCBvdXQgdGhlIGZ1bGwgbWVzc2FnZQp2YXIgbWVzc2FnZSA9ICJUaGF0IGRvZXNuJ3QgbWF0Y2ggb3VyIHJlY29yZHMuIExldCB1cyB0cnkgdGhpcyBhbm90aGVyIHdheS4iOwoKLyogRW5kIENvbmZpZ3VyYXRpb24KICovCgp2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGksCiAgICAgIGphdmF4LnNlY3VyaXR5LmF1dGguY2FsbGJhY2suVGV4dE91dHB1dENhbGxiYWNrCik7CiAgCndpdGggKGZyKSB7CiAgICAgIGlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICAgICAgdmFyIG91dHB1dCA9IG5ldyBUZXh0T3V0cHV0Q2FsbGJhY2soVGV4dE91dHB1dENhbGxiYWNrLklORk9STUFUSU9OLCBtZXNzYWdlKTsKICAgICAgICBhY3Rpb24gPSBBY3Rpb24uc2VuZChvdXRwdXQpLmJ1aWxkKCk7CiAgICAgIH0gCiAgICAgIGVsc2UgewogICAgICAgIGFjdGlvbiA9IEFjdGlvbi5nb1RvKG91dGNvbWUpLmJ1aWxkKCk7CiAgICAgIH0KfQ==",
  },
  {
    "_id": "5e68fee3-047d-4fff-8e99-89fb5908f068",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_ForgotUsernameMailCheck",
    "script": "dmFyIGZyID0gbmV3IEphdmFJbXBvcnRlcigKICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGVzLAogIG9yZy5mb3JnZXJvY2suZ3VpY2UuY29yZSwKICBqYXZhLnV0aWwuSGFzaE1hcAopOwoKLy8gVGhpcyBjb25maXJtcyB0aGUgSWRlbnRpZnkgRXhpc3RpbmcgVXNlciBub2RlIHdhcyBhYmxlIHRvIGZpbmQgdGhlCi8vIGFkbWluLCBvdGhlcndpc2Ugd2UgcmVtb3ZlIHRoZSBtYWlsIGF0dHJpYnV0ZSBzbyBubyBlbWFpbCBjYW4gYmUgc2VudAp3aXRoIChmcikgewogIHRyeSB7CgogICAgdmFyIG9iakF0dHJzID0gc2hhcmVkU3RhdGUuZ2V0KCdvYmplY3RBdHRyaWJ1dGVzJykgfHwgbmV3IEhhc2hNYXAoKTsKICAgIHZhciB1c2VybmFtZSA9IG9iakF0dHJzLmdldCgndXNlck5hbWUnKTsKICAgIG91dGNvbWUgPSB1c2VybmFtZSA/ICdWYWxpZCcgOiAnSW52YWxpZCc7CiAgICBpZiAodXNlcm5hbWUpIHsKICAgICAgb3V0Y29tZSA9ICdWYWxpZCc7CiAgICB9IGVsc2UgewogICAgICBvYmpBdHRycy5yZW1vdmUoJ21haWwnKTsKICAgICAgc2hhcmVkU3RhdGUucHV0KCdvYmplY3RBdHRyaWJ1dGVzJywgb2JqQXR0cnMpOwogICAgICBvdXRjb21lID0gJ0ludmFsaWQnOwogICAgfQoKICAgIGxvZ2dlci5tZXNzYWdlKCdBZG1pbl9Gb3Jnb3RVc2VybmFtZU1haWxDaGVjazogJyArIG91dGNvbWUpOwoKICB9IGNhdGNoIChlKSB7CgogICAgbG9nZ2VyLmVycm9yKCdBZG1pbl9Gb3Jnb3RVc2VybmFtZU1haWxDaGVjazogRmFpbGVkIHRvIGRldGVybWluZSBtYWlsIHZhbGlkaXR5Jyk7CiAgICBsb2dnZXIuZXJyb3IoZSk7CiAgICBvdXRjb21lID0gJ0Vycm9yJzsKCiAgfQp9",
  },
  {
    "_id": "452d73ee-c6f3-4f4e-9dae-e75bb3886cbd",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Copy sharedState to transientState",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Copy to transientState",
    "script": "b3V0Y29tZSA9ICJ0cnVlIjsKaWYgKHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpKSB7CiAgICB0cmFuc2llbnRTdGF0ZS5wdXQoIm9iamVjdEF0dHJpYnV0ZXMiLCBzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKSkKfQppZiAoc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICB0cmFuc2llbnRTdGF0ZS5wdXQoInVzZXJuYW1lIiwgc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKQp9CmlmIChzaGFyZWRTdGF0ZS5nZXQoIl9pZCIpKSB7CiAgICB0cmFuc2llbnRTdGF0ZS5wdXQoIl9pZCIsIHNoYXJlZFN0YXRlLmdldCgiX2lkIikpCn0=",
  },
  {
    "_id": "ac9fc25e-3ad9-4f80-a796-2d9093795439",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Check if MFA has already been performed for this journey. This allows journeys and inner journeys not to perform MFA multiple times.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "MFA Status",
    "script": "LyogTUZBIFN0YXR1cwogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBDaGVjayBpZiBNRkEgaGFzIGFscmVhZHkgYmVlbiBwZXJmb3JtZWQgZm9yIHRoaXMgam91cm5leS4gCiAqIFRoaXMgYWxsb3dzIGpvdXJuZXlzIGFuZCBpbm5lciBqb3VybmV5cyBub3QgdG8gcGVyZm9ybSBNRkEgbXVsdGlwbGUgdGltZXMuCiAqIAogKiBUaGlzIHNjcmlwdCBkb2VzIG5vdCBuZWVkIHRvIGJlIHBhcmFtZXRyaXplZC4gSXQgd2lsbCB3b3JrIHByb3Blcmx5IGFzIGlzLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIHRydWUKICogLSBmYWxzZQogKi8Kb3V0Y29tZSA9ICJmYWxzZSI7CmlmIChzaGFyZWRTdGF0ZS5nZXQoIm1mYVBlcmZvcm1lZCIpPT0idHJ1ZSIpIHsKICAgICAgb3V0Y29tZSA9ICJ0cnVlIjsKfQ==",
  },
  {
    "_id": "3814d347-a2f2-4be9-a810-ab41a1e374bd",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Hide buttons on the journey page.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Remove Button - imported (1)",
    "script": "LyogUmVtb3ZlIEJ1dHRvbgogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqIAogKiBIaWRlIGJ1dHRvbnMgb24gdGhlIGpvdXJuZXkgcGFnZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gdHJ1ZQogKi8KKGZ1bmN0aW9uICgpIHsKICAgIHZhciBzY3JpcHQgPSAiQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2J1dHRvbicpKS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7ZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnfSkiCiAgICB2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgICAgICAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5UZXh0T3V0cHV0Q2FsbGJhY2ssCiAgICAgICAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrCiAgICApCiAgICB2YXIgbWVzc2FnZSA9ICIgIgogICAgaWYgKGNhbGxiYWNrcy5pc0VtcHR5KCkpIHsKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uc2VuZCgKICAgICAgICAgICAgbmV3IGZyLlRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICAgICAgICAgIGZyLlRleHRPdXRwdXRDYWxsYmFjay5JTkZPUk1BVElPTiwKICAgICAgICAgICAgICAgIG1lc3NhZ2UKICAgICAgICAgICAgKSwKICAgICAgICAgICAgbmV3IGZyLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzY3JpcHQpCiAgICAgICAgKS5idWlsZCgpCiAgICB9Cn0oKSk7",
  },
  {
    "_id": "8508a00e-ad45-4310-b3c7-c6871b6a41a9",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Browser Language Decision",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Browser Language Decision",
    "script": "LyogQnJvd3NlciBMYW5ndWFnZSBEZWNpc2lvbgogKiAKICogRGV0ZWN0IHRoZSBicm93c2VyIGxhbmd1YWdlIGluIHRoZSByZXF1ZXN0IGFuZCBicmFuY2ggb3V0IHRvIGl0cyBuYW1lZCBleGl0IChlLmcuOiAiZGUiIG9yICJlbiIgb3IgImZyIikgCiAqIGlmIGl0IGlzIHBhcnQgb2YgdGhlIHN1cHBvcnRlZExhbmd1YWdlcyBhcnJheSwgb3RoZXJ3aXNlIHRha2UgdGhlICJvdGhlciIgZXhpdC4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0gb3RoZXIKICogLSA8YWxsIG9mIHRoZSBpdGVtcyBpbiB0aGUgc3VwcG9ydGVkTGFuZ3VhZ2VzIGFycmF5PgogKgogKiBBdXRob3I6IHZvbGtlci5zY2hldWJlckBmb3JnZXJvY2suY29tCiAqLwooZnVuY3Rpb24gKCkgewogICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogICAgICAvKiBCZWdpbiBTY3JpcHQgQ29uZmlndXJhdGlvbiAqLwogICAgICAKICAgICAgLy8gYWRkIGFsbCB0aGUgbGFuZ3VhZ2UgY29kZXMgeW91IHdhbnQgdG8gc3VwcG9ydAogICAgICB2YXIgc3VwcG9ydGVkTGFuZ3VhZ2VzID0gWyJkZSIsImVuIiwiZnIiXTsKICAgICAgCiAgICAgIC8qIEVuZCBTY3JpcHQgQ29uZmlndXJhdGlvbiAgICovCiAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiAgCiAgICAgIG91dGNvbWUgPSBnZXRCcm93c2VyTGFuZ3VhZ2UoKTsKICAgICAgCiAgICAvKgogICAgICogUmV0dXJucyB0aGUgc3VwcG9ydGVkIGJyb3dzZXIgbGFuZ3VhZ2Ugb3IgIm90aGVyIgogICAgICovCiAgICBmdW5jdGlvbiBnZXRCcm93c2VyTGFuZ3VhZ2UoKSB7CiAgICAgICAgICB2YXIgbGFuZ3VhZ2VIZWFkZXIgPSBnZXRIZWFkZXIoImFjY2VwdC1sYW5ndWFnZSIpOwogICAgICAgICAgdmFyIGxhbmd1YWdlID0gbGFuZ3VhZ2VIZWFkZXIuc3BsaXQoJzsnKVswXS5zcGxpdCgnLCcpWzBdLnNwbGl0KCctJylbMF07CiAgICAgICAgICBpZiAoc3VwcG9ydGVkTGFuZ3VhZ2VzLmluZGV4T2YobGFuZ3VhZ2UpIDwgMCkgewogICAgICAgICAgICAgIHJldHVybiAib3RoZXIiOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbGFuZ3VhZ2U7CiAgICB9CgogICAgLyoKICAgICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSByZXF1ZXN0ZWQgaGVhZGVyCiAgICAgKi8KICAgIGZ1bmN0aW9uIGdldEhlYWRlcihoZWFkZXJOYW1lKSB7CiAgICAgICAgcmV0dXJuIHJlcXVlc3RIZWFkZXJzLmdldChoZWFkZXJOYW1lKS5nZXQoMCkrIiI7CiAgICB9Cn0oKSk7",
  },
  {
    "_id": "38f698de-fe11-43d2-8480-44e1312d121d",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "FRAAS-7955 Both States",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "FRAAS-7955 Both States",
    "script": "b3V0Y29tZSA9ICJ0cnVlIjsKCnNldFNoYXJlZE9iamVjdEF0dHJpYnV0ZSgidXNlck5hbWUiLCAiRlJBQVMtNzk1NSIpOwpzZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUoImdpdmVuTmFtZSIsICJGaXJzdC1zaGFyZWQiKTsKc2V0U2hhcmVkT2JqZWN0QXR0cmlidXRlKCJzbiIsICJMYXN0LXNoYXJlZCIpOwpzZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUoIm1haWwiLCAiZmlyc3QubGFzdC1zaGFyZWRAY29tcGFueS5jb20iKTsKCnNldFRyYW5zaWVudE9iamVjdEF0dHJpYnV0ZSgidXNlck5hbWUiLCAiRlJBQVMtNzk1NSIpOwpzZXRUcmFuc2llbnRPYmplY3RBdHRyaWJ1dGUoImdpdmVuTmFtZSIsICJGaXJzdC10cmFuc2llbnQiKTsKc2V0VHJhbnNpZW50T2JqZWN0QXR0cmlidXRlKCJzbiIsICJMYXN0LXRyYW5zaWVudCIpOwpzZXRUcmFuc2llbnRPYmplY3RBdHRyaWJ1dGUoIm1haWwiLCAiZmlyc3QubGFzdC10cmFuc2llbnRAY29tcGFueS5jb20iKTsKCi8qCiAqIFN0b3JlIGF0dHJpYnV0ZXMgaW4gc2hhcmVkIHN0YXRlIGZvciB1c2Ugd2l0aCB0aGUgQ3JlYXRlL1BhdGNoIE9iamVjdCBub2Rlcy4KICovCmZ1bmN0aW9uIHNldFNoYXJlZE9iamVjdEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkgewogICAgICAgdmFyIHN0b3JhZ2UgPSBzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKTsKICAgIGlmIChzdG9yYWdlICYmIHZhbHVlKSB7CiAgICAgICAgICBpZiAoc3RvcmFnZS5wdXQpIHsKICAgICAgICAgICAgICBzdG9yYWdlLnB1dChuYW1lLCB2YWx1ZSk7CiAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgc3RvcmFnZVtuYW1lXSA9IHZhbHVlOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgaWYgKHZhbHVlKSB7CiAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwgSlNPTi5wYXJzZSgie1wiIituYW1lKyJcIjpcIiIrdmFsdWUrIlwifSIpKTsKICAgIH0KfQoKLyoKICogU3RvcmUgYXR0cmlidXRlcyBpbiB0cmFuc2llbnQgc3RhdGUgZm9yIHVzZSB3aXRoIHRoZSBDcmVhdGUvUGF0Y2ggT2JqZWN0IG5vZGVzLgogKi8KZnVuY3Rpb24gc2V0VHJhbnNpZW50T2JqZWN0QXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7CiAgICB2YXIgdHJhbnNpZW50U3RvcmFnZSA9IHRyYW5zaWVudFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpOwogICAgaWYgKHRyYW5zaWVudFN0b3JhZ2UgJiYgdmFsdWUpIHsKICAgICAgICAgIGlmICh0cmFuc2llbnRTdG9yYWdlLnB1dCkgewogICAgICAgICAgICB0cmFuc2llbnRTdG9yYWdlLnB1dChuYW1lLCB2YWx1ZSk7CiAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHRyYW5zaWVudFN0b3JhZ2VbbmFtZV0gPSB2YWx1ZTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIGlmICh2YWx1ZSkgewogICAgdHJhbnNpZW50U3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwgSlNPTi5wYXJzZSgie1wiIituYW1lKyJcIjpcIiIrdmFsdWUrIlwifSIpKTsKICAgIH0KfQ==",
  },
  {
    "_id": "68d5a8e7-fcc9-4215-9e63-a01afe8fa849",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Perform IDP lookup based on email domain. Set users' external IDP in shared state or continue to local authentication.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "IDP Lookup",
    "script": "LyogSURQIExvb2t1cAogKiAKICogUGVyZm9ybSBJRFAgbG9va3VwIGJhc2VkIG9uIGVtYWlsIGRvbWFpbi4gU2V0IHVzZXJzJyBleHRlcm5hbCBJRFAgaW4gc2hhcmVkIHN0YXRlIG9yIGNvbnRpbnVlIHRvIGxvY2FsIGF1dGhlbnRpY2F0aW9uLgogKiAKICogVGhpcyBzY3JpcHQgcmVxdWlyZXMgcGFyYW1ldHJpemF0aW9uLiBNYWtlIHN1cmUgeW91IGNhcmVmdWxseSByZXZpZXcgdGhlIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSBvbmUKICogLSBtdWx0aXBsZQogKiAtIG5vbmUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKi8KKGZ1bmN0aW9uICgpIHsKICAgIGxvZ2dlci5tZXNzYWdlKCJJRFAgTG9va3VwOiBzdGFydCIpOwogICAgICBvdXRjb21lID0gIm5vbmUiOwogICAgICB2YXIgdXNlcm5hbWUgPSBzaGFyZWRTdGF0ZS5nZXQoInVzZXJuYW1lIik7CiAgICAgIHZhciBkb21haW4gPSB1c2VybmFtZS5zdWJzdHIodXNlcm5hbWUubGFzdEluZGV4T2YoIkAiKSsxKTsKICAgICAgdmFyIHJlZmVyZXIgPSBwYXJzZVVybChyZXF1ZXN0SGVhZGVycy5nZXQoInJlZmVyZXIiKS5nZXQoMCkpOwoKICAgICAgLyogQmVnaW4gQ29uZmlndXJhdGlvbiAqLwogIAogICAgLy8gbG9uZy1saXZlZCB0b2tlbgogICAgdmFyIElETV9BUElfVE9LRU4gPSBzeXN0ZW1FbnYuZ2V0UHJvcGVydHkoImVzdi5hZG1pbi50b2tlbiIpOwogIAogICAgLy8gSURNIEFQSSBDb25maWd1cmF0aW9uCiAgICB2YXIgSURNX0FQSV9VUkkgPSByZWZlcmVyLm9yaWdpbiArICIvb3BlbmlkbS9tYW5hZ2VkL2FscGhhX29yZ2FuaXphdGlvbj9fcXVlcnlGaWx0ZXI9aWRwRG9tYWlucytjbysnIiArIGRvbWFpbiArICInJl9maWVsZHM9bmFtZSxkZXNjcmlwdGlvbixpZHBOYW1lLGlkcFR5cGUsaWRwRG9tYWlucyxpZHBKb3VybmV5LGlkcFRoZW1lLGlkcFBlcnNpc3Qsc2FtbENvbmZpZyI7CgogICAgICAvKiBFbmQgQ29uZmlndXJhdGlvbiAqLwoKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldE1ldGhvZCgnR0VUJyk7CiAgICByZXF1ZXN0LnNldFVyaShJRE1fQVBJX1VSSSk7CiAgICByZXF1ZXN0LmdldEhlYWRlcnMoKS5hZGQoIkNvbnRlbnQtVHlwZSIsICJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04Iik7CiAgICByZXF1ZXN0LmdldEhlYWRlcnMoKS5hZGQoIkF1dGhvcml6YXRpb24iLCAiQmVhcmVyICIgKyBJRE1fQVBJX1RPS0VOKTsKCiAgICB2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0KCk7CiAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICBsb2dnZXIubWVzc2FnZSgiSURQIExvb2t1cDogSlNPTiByZXN1bHQ6ICIgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQpKTsKICAgIAogICAgICB2YXIgcm91dGVkSURQcyA9IHJlc3VsdC5yZXN1bHQubGVuZ3RoID8gcmVzdWx0LnJlc3VsdCA6IFt7fV07CiAgICAgIC8vIHN0cmluZ2lmeSB0aGUgc2FtbENvbmZpZyBwcm9wZXJ0eQogICAgICByb3V0ZWRJRFBzLmZvckVhY2goZnVuY3Rpb24gKHJvdXRlZElEUCwgaW5kZXgpIHsKICAgICAgICAgIHJvdXRlZElEUHNbaW5kZXhdLnNhbWxDb25maWcgPSBKU09OLnN0cmluZ2lmeShyb3V0ZWRJRFAuc2FtbENvbmZpZyk7CiAgICB9KTsKICAgICAgc2hhcmVkU3RhdGUucHV0KCJyb3V0ZWRJRFBzIiwgcm91dGVkSURQcyk7CiAgICBpZiAocmVzdWx0LnJlc3VsdENvdW50ID09PSAxKSB7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIklEUCBMb29rdXA6IEZvdW5kIGV4YWN0bHkgMSBJRFAiKTsKICAgICAgICBvdXRjb21lID0gIm9uZSI7CiAgICB9CiAgICAgIGVsc2UgaWYgKHJlc3VsdC5yZXN1bHRDb3VudCA+IDEpIHsKICAgICAgICBsb2dnZXIubWVzc2FnZSgiSURQIExvb2t1cDogRm91bmQge30gSURQcyIsIHJlc3VsdC5yZXN1bHRDb3VudCk7CiAgICAgICAgb3V0Y29tZSA9ICJtdWx0aXBsZSI7CiAgICB9CiAgICAgIGVsc2UgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJJRFAgTG9va3VwOiBGb3VuZCBubyBJRFBzIik7CiAgICB9CiAgICBsb2dnZXIubWVzc2FnZSgiSURQIExvb2t1cDogZW5kIFtvdXRjb21lPXt9XSIsIG91dGNvbWUpOwoKICAgIC8qCiAgICAgKiBQYXJzZSBhIFVSTCBpbnRvIGl0cyBjb21wb25lbnRzIGFuZCBtYWtlIHRoZW0gZWFzaWx5IGFjY2Vzc2libGUgYnkgbmFtZQogICAgICoKICAgICAqIFVzZSBpbiBhIFNjcmlwdGUgRGVjaXNpb24gTm9kZSBTY3JpcHQgYXMgZm9sbG93czoKICAgICAqIHZhciByZWZlcmVyID0gcGFyc2VVcmwocmVxdWVzdEhlYWRlcnMuZ2V0KCJyZWZlcmVyIikuZ2V0KDApKTsKICAgICAqIHZhciBvcmlnaW4gPSByZWZlcmVyLm9yaWdpbjsKICAgICAqIAogICAgICogZS5nLjogaHR0cHM6Ly9vcGVuYW0tdm9sa2VyLWRldi5mb3JnZWJsb2Nrcy5jb20vYW0vWFVJLz9yZWFsbT0vYnJhdm8mYXV0aEluZGV4VHlwZT1zZXJ2aWNlJmF1dGhJbmRleFZhbHVlPUluaXRpYXRlT3duZXJDbGFpbSMvCiAgICAgKiB7CiAgICAgKiAgICAgaGFzaDogJyMvJywKICAgICAqICAgICBob3N0OiAnb3BlbmFtLXZvbGtlci1kZXYuZm9yZ2VibG9ja3MuY29tJywKICAgICAqICAgICBob3N0bmFtZTogJ29wZW5hbS12b2xrZXItZGV2LmZvcmdlYmxvY2tzLmNvbScsCiAgICAgKiAgICAgaHJlZjogJ2h0dHBzOi8vb3BlbmFtLXZvbGtlci1kZXYuZm9yZ2VibG9ja3MuY29tL2FtL1hVSS8/cmVhbG09L2JyYXZvJmF1dGhJbmRleFR5cGU9c2VydmljZSZhdXRoSW5kZXhWYWx1ZT1Jbml0aWF0ZU93bmVyQ2xhaW0jLycsCiAgICAgKiAgICAgb3JpZ2luOiAnaHR0cHM6Ly9vcGVuYW0tdm9sa2VyLWRldi5mb3JnZWJsb2Nrcy5jb20nLAogICAgICogICAgIHBhdGhuYW1lOiAnL2FtL1hVSS8nLAogICAgICogICAgIHBvcnQ6ICcnLAogICAgICogICAgIHByb3RvY29sOiAnaHR0cHMnLAogICAgICogICAgIHNlYXJjaDogJz9yZWFsbT0vYnJhdm8mYXV0aEluZGV4VHlwZT1zZXJ2aWNlJmF1dGhJbmRleFZhbHVlPUluaXRpYXRlT3duZXJDbGFpbScsCiAgICAgKiAgICAgdXNlcm5hbWU6ICcnLAogICAgICogICAgIHBhc3N3b3JkOiAnJywKICAgICAqICAgICBzZWFyY2hQYXJhbTogewogICAgICogICAgICAgICByZWFsbTogJy9icmF2bycsCiAgICAgKiAgICAgICAgIGF1dGhJbmRleFR5cGU6ICdzZXJ2aWNlJywKICAgICAqICAgICAgICAgYXV0aEluZGV4VmFsdWU6ICdJbml0aWF0ZU93bmVyQ2xhaW0nCiAgICAgKiAgICAgfQogICAgICogfQogICAgICovCiAgICBmdW5jdGlvbiBwYXJzZVVybChocmVmKSB7CiAgICAgICAgdmFyIG0gPSBocmVmLm1hdGNoKC9eKChbXjpcLz8jXSspOj8oPzpcL1wvKCg/OihbXlwvPyM6XSopOihbXlwvPyM6XSopQCk/KFteXC8/IzpdKikoPzo6KFteXC8/IzpdKikpPykpKT8oW14/I10qKShcP1teI10qKT8oIy4qKT8kLyksCiAgICAgICAgciA9IHsKICAgICAgICAgICAgaGFzaDogbVsxMF0gfHwgIiIsICAgICAgICAgICAgICAgICAgICAgIC8vICMvCiAgICAgICAgICAgIGhvc3Q6IG1bM10gfHwgIiIsICAgICAgICAgICAgICAgICAgICAgICAvLyBvcGVuYW0tdm9sa2VyLWRldi5mb3JnZWJsb2Nrcy5jb20KICAgICAgICAgICAgaG9zdG5hbWU6IG1bNl0gfHwgIiIsICAgICAgICAgICAgICAgICAgIC8vIG9wZW5hbS12b2xrZXItZGV2LmZvcmdlYmxvY2tzLmNvbQogICAgICAgICAgICBocmVmOiBtWzBdIHx8ICIiLCAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9vcGVuYW0tdm9sa2VyLWRldi5mb3JnZWJsb2Nrcy5jb20vYW0vWFVJLz9yZWFsbT0vYnJhdm8mYXV0aEluZGV4VHlwZT1zZXJ2aWNlJmF1dGhJbmRleFZhbHVlPUluaXRpYXRlT3duZXJDbGFpbSMvCiAgICAgICAgICAgIG9yaWdpbjogbVsxXSB8fCAiIiwgICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL29wZW5hbS12b2xrZXItZGV2LmZvcmdlYmxvY2tzLmNvbQogICAgICAgICAgICBwYXRobmFtZTogbVs4XSB8fCAobVsxXSA/ICIvIiA6ICIiKSwgICAgLy8gL2FtL1hVSS8KICAgICAgICAgICAgcG9ydDogbVs3XSB8fCAiIiwgICAgICAgICAgICAgICAgICAgICAgIC8vIAogICAgICAgICAgICBwcm90b2NvbDogbVsyXSB8fCAiIiwgICAgICAgICAgICAgICAgICAgLy8gaHR0cHMKICAgICAgICAgICAgc2VhcmNoOiBtWzldIHx8ICIiLCAgICAgICAgICAgICAgICAgICAgIC8vID9yZWFsbT0vYnJhdm8mYXV0aEluZGV4VHlwZT1zZXJ2aWNlJmF1dGhJbmRleFZhbHVlPUluaXRpYXRlT3duZXJDbGFpbQogICAgICAgICAgICB1c2VybmFtZTogbVs0XSB8fCAiIiwgICAgICAgICAgICAgICAgICAgLy8gCiAgICAgICAgICAgIHBhc3N3b3JkOiBtWzVdIHx8ICIiLCAgICAgICAgICAgICAgICAgICAvLyAKICAgICAgICAgICAgc2VhcmNoUGFyYW06IHt9ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHsgcmVhbG06ICcvYnJhdm8nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBhdXRoSW5kZXhUeXBlOiAnc2VydmljZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGF1dGhJbmRleFZhbHVlOiAnSW5pdGlhdGVPd25lckNsYWltJyB9CiAgICAgICAgfTsKICAgICAgICBpZiAoci5wcm90b2NvbC5sZW5ndGggPT0gMikgewogICAgICAgICAgICByLnByb3RvY29sID0gImZpbGU6Ly8vIiArIHIucHJvdG9jb2wudG9VcHBlckNhc2UoKTsKICAgICAgICAgICAgci5vcmlnaW4gPSByLnByb3RvY29sICsgIi8vIiArIHIuaG9zdDsKICAgICAgICB9CiAgICAgICAgaWYgKHIuc2VhcmNoLmxlbmd0aCA+IDIpIHsKICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gKHIuc2VhcmNoLmluZGV4T2YoJz8nKSA9PT0gMCkgPyByLnNlYXJjaC5zdWJzdHIoMSkgOiByLnNlYXJjaDsKICAgICAgICAgICAgdmFyIHZhcnMgPSBxdWVyeS5zcGxpdCgnJicpOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIHBhaXIgPSB2YXJzW2ldLnNwbGl0KCc9Jyk7CiAgICAgICAgICAgIHIuc2VhcmNoUGFyYW1bZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByLmhyZWYgPSByLm9yaWdpbiArIHIucGF0aG5hbWUgKyByLnNlYXJjaCArIHIuaGFzaDsKICAgICAgICByZXR1cm4gcjsKICAgIH07Cn0oKSk7",
  },
  {
    "_id": "6963d84e-e2f0-4db1-a746-116604189602",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_SetCurrentYear",
    "script": "dmFyIGN1cnJlbnRZZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCk7Cgp2YXIgb2JqQXR0cnMgPSBzaGFyZWRTdGF0ZS5nZXQoJ29iamVjdEF0dHJpYnV0ZXMnKSB8fCBuZXcgamF2YS51dGlsLkhhc2hNYXAoKTsKb2JqQXR0cnMucHV0KCdjdXJyZW50WWVhcicsIGN1cnJlbnRZZWFyKTsKc2hhcmVkU3RhdGUucHV0KCdvYmplY3RBdHRyaWJ1dGVzJywgb2JqQXR0cnMpOwoKb3V0Y29tZSA9ICdUcnVlJzsK",
  },
  {
    "_id": "f1a2764b-d05a-4480-8f5f-78fda7814227",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "APIProtection: Reset State",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "APIProtection: Reset States",
    "script": "bG9nZ2VyLndhcm5pbmcoIkFQSVByb3RlY3Rpb246IFJlc2V0IFN0YXRlczogc3RhcnQiKTsKCi8qCiAqIEJFR0lOIFNDUklQVCBDT05GSUdVUkFUSU9OCiAqCiAqIE91dGNvbWVzOgogKiAtICJ0cnVlIgogKi8KdmFyIEtFWV9IRUFERVJfTkFNRSA9ICJ4LWFwaS1rZXkiOwp2YXIgU0VDUkVUX0hFQURFUl9OQU1FID0gIngtYXBpLXNlY3JldCI7Ci8qCiAqIEVORCBTQ1JJUFQgQ09ORklHVVJBVElPTgogKi8KCm91dGNvbWUgPSAidHJ1ZSI7CgppZiAoc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpID09IHJlYWRWYWx1ZShLRVlfSEVBREVSX05BTUUpKSB7CiAgICBsb2dnZXIud2FybmluZygiQVBJUHJvdGVjdGlvbjogUmVzZXQgU3RhdGVzOiByZXNldHRpbmcgdXNlcm5hbWUgdG86Ii5jb25jYXQocmVhZFZhbHVlKCJ1c2VybmFtZSIpKSk7CiAgICAgIHNoYXJlZFN0YXRlLnB1dCgidXNlcm5hbWUiLCByZWFkVmFsdWUoInVzZXJuYW1lIikpOwp9CgppZiAodHJhbnNpZW50U3RhdGUuZ2V0KCJwYXNzd29yZCIpID09IHJlYWRUcmFuc2llbnRWYWx1ZShTRUNSRVRfSEVBREVSX05BTUUpKSB7CiAgICBsb2dnZXIud2FybmluZygiQVBJUHJvdGVjdGlvbjogUmVzZXQgU3RhdGVzOiByZXNldHRpbmcgcGFzc3dvcmQiKTsKICAgICAgdHJhbnNpZW50U3RhdGUucHV0KCJwYXNzd29yZCIsIHJlYWRUcmFuc2llbnRWYWx1ZSgicGFzc3dvcmQiKSk7Cn0KCmxvZ2dlci53YXJuaW5nKCJBUElQcm90ZWN0aW9uOiBSZXNldCBTdGF0ZXM6IGZpbmlzaCBbb3V0Y29tZT0iLmNvbmNhdChvdXRjb21lKS5jb25jYXQoIl0iKSk7CgovKgogKiBSZWFkIHZhbHVlIGZyb20gc3RvcmFnZSBmb3IgQVBJUHJvdGVjdGlvbiBzY3JpcHQgdXNlCiAqLwpmdW5jdGlvbiByZWFkVmFsdWUobmFtZSkgewogICAgICB2YXIgc3RvcmFnZSA9IHNoYXJlZFN0YXRlLmdldCgiQVBJUHJvdGVjdGlvbiIpOwogICAgaWYgKHN0b3JhZ2UpIHsKICAgICAgICAgIGlmIChzdG9yYWdlLmdldCkgewogICAgICAgICAgICByZXR1cm4gc2hhcmVkU3RhdGUuZ2V0KCJBUElQcm90ZWN0aW9uIikuZ2V0KG5hbWUpOwogICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHJldHVybiBzdG9yYWdlLm5hbWU7CiAgICAgICAgfQogICAgfQogICAgICByZXR1cm4gbnVsbDsKfQoKLyoKICogUmVhZCB0cmFuc2llbnQgdmFsdWUgZnJvbSBzdG9yYWdlIGZvciBBUElQcm90ZWN0aW9uIHNjcmlwdCB1c2UKICovCmZ1bmN0aW9uIHJlYWRUcmFuc2llbnRWYWx1ZShuYW1lKSB7CiAgICAgIHZhciB0cmFuc2llbnRTdG9yYWdlID0gdHJhbnNpZW50U3RhdGUuZ2V0KCJBUElQcm90ZWN0aW9uIik7CiAgICBpZiAodHJhbnNpZW50U3RvcmFnZSkgewogICAgICAgICAgaWYgKHRyYW5zaWVudFN0b3JhZ2UuZ2V0KSB7CiAgICAgICAgICAgIHJldHVybiB0cmFuc2llbnRTdGF0ZS5nZXQoIkFQSVByb3RlY3Rpb24iKS5nZXQobmFtZSk7CiAgICAgICAgfQogICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zaWVudFN0b3JhZ2UubmFtZTsKICAgICAgICB9CiAgICB9CiAgICAgIHJldHVybiBudWxsOwp9",
  },
  {
    "_id": "5e854779-6ec1-4c39-aeba-0477e0986646",
    "context": "CONFIG_PROVIDER_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Default global script for Config Provider",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Config Provider",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjEgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKLyoqCiAqIFRoZSBmb2xsb3dpbmcgc2NyaXB0IGlzIGEgc2ltcGxpZmllZCB0ZW1wbGF0ZSBmb3IgdW5kZXJzdGFuZGluZyBob3cgdG8gYnVpbGQKICogdXAgYSBjb25maWcgTWFwIG9iamVjdCB3aXRoIGN1c3RvbSB2YWx1ZXMuIFRoZSBDb25maWcgUHJvdmlkZXIgTm9kZSB3aWxsIHRoZW4KICogcHJvdmlkZSB0aGlzIGNvbmZpZyBNYXAgdG8gdGhlIGRlc2lyZWQgbm9kZSB0eXBlLiBJdCBpcyBpbXBvcnRhbnQgdGhhdCB0aGUgTWFwCiAqIHlvdSBidWlsZCBoZXJlIGlzIG5hbWVkICdjb25maWcnLgogKgogKiBEZWZpbmVkIHZhcmlhYmxlczoKICoKICogbm9kZVN0YXRlIC0gTm9kZSBTdGF0ZSAoMSkKICogICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGlzIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgdmFsdWVzIHN0b3JlZCBpbiB0aGUgbm9kZSBzdGF0ZS4KICoKICogaWRSZXBvc2l0b3J5IC0gUHJvZmlsZSBEYXRhICgyKQogKiAgICAgICAgICAgQWx3YXlzIHByZXNlbnQsIGEgcmVwb3NpdG9yeSB0byByZXRyaWV2ZSB1c2VyIGluZm9ybWF0aW9uLgogKgogKiBzZWNyZXRzIC0gQ3JlZGVudGlhbHMgYW5kIFNlY3JldHMgKDMpCiAqICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgYW4gaW50ZXJmYWNlIHRvIGFjY2VzcyB0aGUgU2VjcmV0cyBBUEkgZnJvbSBhIHNjcmlwdGluZyBjb250ZXh0LgogKgogKiByZXF1ZXN0SGVhZGVycyAoNCkgLSBNYXAgKDUpCiAqICAgICAgICAgICBBbHdheXMgcHJlc2VudCwgYW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgbWV0aG9kcyBmb3IgYWNjZXNzaW5nIGhlYWRlcnMgaW4gdGhlIGxvZ2luIHJlcXVlc3QuCiAqCiAqIGxvZ2dlciAtIERlYnVnIExvZ2dpbmcgKDYpCiAqICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgZGVidWcgbG9nZ2VyIGluc3RhbmNlLgogKgogKiBodHRwQ2xpZW50IC0gSFRUUCBDbGllbnQgKDcpCiAqICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgSFRUUCBjbGllbnQgdGhhdCBjYW4gYmUgdXNlZCB0byBtYWtlIGV4dGVybmFsIEhUVFAgcmVxdWVzdHMuCiAqCiAqIHJlYWxtIC0gU3RyaW5nIChwcmltaXRpdmUpLgogKiAgICAgICAgICBBbHdheXMgcHJlc2VudCwgdGhlIG5hbWUgb2YgdGhlIHJlYWxtIHRoZSB1c2VyIGlzIGF1dGhlbnRpY2F0aW5nIHRvLgogKgogKiBleGlzdGluZ1Nlc3Npb24gLSBNYXA8U3RyaW5nLCBTdHJpbmc+ICg1KQogKiAgICAgICAgICBQcmVzZW50IGlmIHRoZSByZXF1ZXN0IGNvbnRhaW5zIHRoZSBzZXNzaW9uIGNvb2tpZSwgdGhlIHVzZXIncyBzZXNzaW9uIG9iamVjdC4gVGhlIHJldHVybmVkIG1hcCBmcm9tCiAqICAgICAgICAgIFNTT1Rva2VuLmdldFByb3BlcnRpZXMoKSAoOCkKICoKICogcmVxdWVzdFBhcmFtZXRlcnMgLSBNYXAgKDUpCiAqICAgICAgICAgIEFsd2F5cyBwcmVzZW50LCB0aGUgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QgcGFyYW1ldGVycy4KICoKICoKICogT3V0cHV0czoKICoKICogY29uZmlnIC0gTWFwICg1KQogKiAgICAgICAgICAgRGVmaW5lIGFuZCBmaWxsIGEgTWFwIG9iamVjdCBuYW1lZCAnY29uZmlnJyB3aXRoIGN1c3RvbSB2YWx1ZXMsIHRoaXMgd2lsbCBkZWZpbmUgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZQogKiAgICAgICAgICAgYXNzb2NpYXRlZCBub2RlIHNlbGVjdGVkIGluIHRoZSBDb25maWdQcm92aWRlck5vZGUuCiAqCiAqIFJlZmVyZW5jZToKICogKDEpIE5vZGUgU3RhdGUgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvaWRjbG91ZC1hbS9sYXRlc3QvYXV0aGVudGljYXRpb24tZ3VpZGUvc2NyaXB0aW5nLWFwaS1ub2RlLmh0bWwjc2NyaXB0aW5nLWFwaS1ub2RlLW5vZGVTdGF0ZQogKiAoMikgUHJvZmlsZSBEYXRhIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcuMS9hdXRoZW50aWNhdGlvbi1ndWlkZS9zY3JpcHRpbmctYXBpLW5vZGUuaHRtbCNzY3JpcHRpbmctYXBpLW5vZGUtaWQtcmVwbwogKiAoMykgQ3JlZGVudGlhbHMgYW5kIFNlY3JldHMgLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy4xL2F1dGhlbnRpY2F0aW9uLWd1aWRlL3NjcmlwdGluZy1hcGktbm9kZS5odG1sI3NjcmlwdGluZy1hcGktYXV0aG4tc2VjcmV0cwogKiAoNCkgUmVxdWVzdCBIZWFkZXJzIC0gaHR0cHM6Ly9iYWNrc3RhZ2UuZm9yZ2Vyb2NrLmNvbS9kb2NzL2FtLzcvYXV0aGVudGljYXRpb24tZ3VpZGUvc2NyaXB0aW5nLWFwaS1ub2RlLmh0bWwjc2NyaXB0aW5nLWFwaS1ub2RlLXJlcXVlc3RIZWFkZXJzLgogKiAoNSkgTWFwIC0gaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZG9jcy9hcGkvamF2YS5iYXNlL2phdmEvdXRpbC9NYXAuaHRtbAogKiAoNikgRGVidWcgTG9nZ2luZyAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L3NjcmlwdGluZy1ndWlkZS9zY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuaHRtbCNzY3JpcHRpbmctYXBpLWdsb2JhbC1sb2dnZXIuCiAqICg3KSBIVFRQIENsaWVudCAtIGh0dHBzOi8vYmFja3N0YWdlLmZvcmdlcm9jay5jb20vZG9jcy9hbS83L2FwaWRvY3Mvb3JnL2Zvcmdlcm9jay9odHRwL0NsaWVudC5odG1sLgogKiAoOCkgU1NPVG9rZW4gLSBodHRwczovL2JhY2tzdGFnZS5mb3JnZXJvY2suY29tL2RvY3MvYW0vNy9hcGlkb2NzL2NvbS9pcGxhbmV0L3Nzby9TU09Ub2tlbi5odG1sLgogKi8KCmNvbmZpZyA9IG5vZGVTdGF0ZS5nZXQoJ25vZGVDb25maWcnKS5hc01hcCgpOw==",
  },
  {
    "_id": "1b52a7e0-4019-40fa-958a-15a49870e901",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "set the same shared state variable",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "shared",
    "script": "KGZ1bmN0aW9uICgpIHsKICBvdXRjb21lID0gJ3RydWUnOwogIHZhciBsZXZlbCA9IG5vZGVTdGF0ZS5nZXQoJ2xldmVsJykuYXNJbnRlZ2VyKCk7CiAgc2hhcmVkU3RhdGUucHV0KCdzaGFyZWRWYWx1ZScsICdMZXZlbCAnICsgbGV2ZWwgKyAnOiBUaGlzIGlzIGEgbG9uZ2VyIHN0cmluZyB2YWx1ZSBzaGFyZWQgYWNyb3NzIGFsbCBuZXN0ZWQgam91cm5leXMuIEl0IGNvbnRhaW5zIGFuIGluZGljYXRvciBpbiB3aGljaCBsZXZlbCBpdCB3YXMgbGFzdCBzZXQuJyk7Cn0oKSk7",
  },
  {
    "_id": "2997bd4d-14be-4dc6-8701-27f08d10b8b7",
    "context": "SOCIAL_IDP_PROFILE_TRANSFORMATION",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Profile Normalization Script for idddataweb",
    "language": "GROOVY",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "iddataweb Profile Normalization",
    "script": "LyovKgogKiBDb3B5cmlnaHQgMjAyMiBGb3JnZVJvY2sgQVMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQKICoKICogVXNlIG9mIHRoaXMgY29kZSByZXF1aXJlcyBhIGNvbW1lcmNpYWwgc29mdHdhcmUgbGljZW5zZSB3aXRoIEZvcmdlUm9jayBBUy4KICogb3Igd2l0aCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMuIEFsbCB1c2Ugc2hhbGwgYmUgZXhjbHVzaXZlbHkgc3ViamVjdAogKiB0byBzdWNoIGxpY2Vuc2UgYmV0d2VlbiB0aGUgbGljZW5zZWUgYW5kIEZvcmdlUm9jayBBUy4gTm90IGZvciBQcm9kdWN0aW9uIHVzZS4gCiAqIE1vZGlmaWVkIGJ5IFN0ZXBoZW4gUGF5bmUKICovCi8qIFNvY2lhbCBJZGVudGl0eSBQcm92aWRlciBQcm9maWxlIFRyYW5zZm9ybWF0aW9uIHNjcmlwdCBmb3IgSUQgRGF0YVdlYiAqLwppbXBvcnQgc3RhdGljIG9yZy5mb3JnZXJvY2suanNvbi5Kc29uVmFsdWUuZmllbGQKaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLmpzb24KaW1wb3J0IHN0YXRpYyBvcmcuZm9yZ2Vyb2NrLmpzb24uSnNvblZhbHVlLm9iamVjdAoKbG9nZ2VyLmVycm9yKCJpZGRhdGF3ZWJfU29jaWFsIElkZW50aXR5IFByb3ZpZGVyIFByb2ZpbGUgVHJhbnNmb3JtYXRpb24gc2NyaXB0OiBTdGFydCIpOwp1c2VyTmFtZSA9IHNoYXJlZFN0YXRlLmdldCgib2JqZWN0QXR0cmlidXRlcyIpLmdldCgibWFpbCIpOwpsb2dnZXIuZXJyb3IoImlkZGF0YXdlYl9Tb2NpYWwgSWRlbnRpdHkgUHJvdmlkZXIgUHJvZmlsZSBUcmFuc2Zvcm1hdGlvbiBzY3JpcHQ6IHVzZXJOYW1lIiArIHVzZXJOYW1lICk7CnVzZXJuYW1lID0gdXNlck5hbWU7CnNoYXJlZFN0YXRlLnB1dCgidXNlck5hbWUiLCB1c2VyTmFtZSk7CgpyZXR1cm4ganNvbihvYmplY3QoCiAgICAgICAgZmllbGQoImlkIiwgcmF3UHJvZmlsZS5zdWIpLAogICAgICAgIGZpZWxkKCJkaXNwbGF5TmFtZSIsIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRnVsbE5hbWVfZm5hbWUuYXNTdHJpbmcoKSArICIgIiArIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRnVsbE5hbWVfbG5hbWUuYXNTdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmNhcGl0YWxpemUoKSApLAogICAgICAgIGZpZWxkKCJnaXZlbk5hbWUiLCByYXdQcm9maWxlLmFjcXVpcmVkQXR0cmlidXRlc19BY3F1aXJlZEZ1bGxOYW1lX2ZuYW1lLmFzU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5jYXBpdGFsaXplKCkgKSwKICAgICAgICBmaWVsZCgiZmFtaWx5TmFtZSIsIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRnVsbE5hbWVfbG5hbWUuYXNTdHJpbmcoKS50b0xvd2VyQ2FzZSgpLmNhcGl0YWxpemUoKSApLAogICAgICAgIGZpZWxkKCJwb3N0YWxBZGRyZXNzIiwgcmF3UHJvZmlsZS5hY3F1aXJlZEF0dHJpYnV0ZXNfQWNxdWlyZWRBZGRyZXNzX2FkZHJlc3MpLAogICAgICAgIGZpZWxkKCJhZGRyZXNzTG9jYWxpdHkiLCByYXdQcm9maWxlLmFjcXVpcmVkQXR0cmlidXRlc19BY3F1aXJlZEFkZHJlc3NfbG9jYWxpdHkpLAogICAgICAgIGZpZWxkKCJhZGRyZXNzUmVnaW9uIiwgcmF3UHJvZmlsZS5hY3F1aXJlZEF0dHJpYnV0ZXNfQWNxdWlyZWRBZGRyZXNzX2FkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMSksCiAgICAgICAgZmllbGQoInBvc3RhbENvZGUiLCByYXdQcm9maWxlLmFjcXVpcmVkQXR0cmlidXRlc19BY3F1aXJlZEFkZHJlc3NfcG9zdGFsX2NvZGUpLAogICAgICAgIGZpZWxkKCJjb3VudHJ5IiwgcmF3UHJvZmlsZS5hY3F1aXJlZEF0dHJpYnV0ZXNfQWNxdWlyZWRBZGRyZXNzX2NvdW50cnkpLAogICAgICAgIGZpZWxkKCJkcml2ZXJzTGljZW5zZSIsIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRHJpdmVyc0xpY2Vuc2VOdW1iZXJfYWNxdWlyZWREcml2ZXJzTGljZW5zZU51bWJlciksCiAgICAgICAgZmllbGQoImRyaXZlcnNMaWNlbnNlSXNzdWVyIiwgcmF3UHJvZmlsZS5hY3F1aXJlZEF0dHJpYnV0ZXNfRHJpdmVyc0xpY2Vuc2VJc3N1ZXJDb2RlX0RyaXZlcnNMaWNlbnNlSXNzdWVyQ29kZSksCiAgICAgICAgICBmaWVsZCgiRE9CIiwgcmF3UHJvZmlsZS5hY3F1aXJlZEF0dHJpYnV0ZXNfQWNxdWlyZWRET0JfbW9udGguYXNTdHJpbmcoKSArICIvIiArIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRE9CX2RheS5hc1N0cmluZygpICsgIi8iICsgcmF3UHJvZmlsZS5hY3F1aXJlZEF0dHJpYnV0ZXNfQWNxdWlyZWRET0JfeWVhci5hc1N0cmluZygpICksCgogICAgICAgIGZpZWxkKCJJRFdTY29yZSIsIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0lEV1Njb3JlKSwKICAgICAgICBmaWVsZCgicG9saWN5RGVjaXNpb24iLCByYXdQcm9maWxlLnBvbGljeURlY2lzaW9uX2NvbmNsdXNpb24pLAogICAgICAgIGZpZWxkKCJwaG9uZSIsIHJhd1Byb2ZpbGUudXNlckF0dHJpYnV0ZXNfSW50ZXJuYXRpb25hbFRlbGVwaG9uZV9kaWFsQ29kZS5hc1N0cmluZygpICsgcmF3UHJvZmlsZS51c2VyQXR0cmlidXRlc19JbnRlcm5hdGlvbmFsVGVsZXBob25lX3RlbGVwaG9uZS5hc1N0cmluZygpKSwKICAgICAgICBmaWVsZCgidXNlcm5hbWUiLCB1c2VyTmFtZSApCiAgICAgICAvL2ZpZWxkKCJ1c2VybmFtZSIsIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRnVsbE5hbWVfZm5hbWUuYXNTdHJpbmcoKSArICIuIiArIHJhd1Byb2ZpbGUuYWNxdWlyZWRBdHRyaWJ1dGVzX0FjcXVpcmVkRnVsbE5hbWVfbG5hbWUuYXNTdHJpbmcoKSApCgogICApCikK",
  },
  {
    "_id": "f2107949-22f8-46c4-865d-ae1d1110a9cb",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Detect and preserve currently active theme before setting the new theme.",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Set OATH Theme",
    "script": "LyogU2V0IE9BVEggVGhlbWUKICogCiAqIERldGVjdCBhbmQgcHJlc2VydmUgY3VycmVudGx5IGFjdGl2ZSB0aGVtZSBiZWZvcmUgc2V0dGluZyB0aGUgbmV3IHRoZW1lLgogKiAKICogVGhpcyBzY3JpcHQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJhbWV0cml6ZWQuIEl0IHdpbGwgd29yayBwcm9wZXJseSBhcyBpcy4KICogCiAqIFRoZSBTY3JpcHRlZCBEZWNpc2lvbiBOb2RlIG5lZWRzIHRoZSBmb2xsb3dpbmcgb3V0Y29tZXMgZGVmaW5lZDoKICogLSB0cnVlCiAqCiAqIEF1dGhvcjogdm9sa2VyLnNjaGV1YmVyQGZvcmdlcm9jay5jb20KICovCihmdW5jdGlvbiAoKSB7CiAgICAgIG91dGNvbWUgPSAidHJ1ZSI7CiAgICAgIAogICAgICB2YXIgdGhlbWUgPSAiRXhwYW5zZV9PQVRIIjsKCiAgICAvLyBkbyBub3QgY2hhbmdlLCBtdXN0IGJlIGEgcmFuZG9tIGlkZW50aWZpZXIKICAgIHZhciBhbmNob3IgPSBnZW5lcmF0ZU51bWVyaWNUb2tlbigneHh4Jyk7CiAgCiAgICAgIHZhciBzY3JpcHQgPSAiIjsKICAgIHNjcmlwdCArPSAiZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aGVtZS1pZC0iK2FuY2hvcisiXCIpLnZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3RoZW1lLWlkJyk7IjsKICAgIHNjcmlwdCArPSAiY29uc29sZS5sb2coJ3RoZW1lLWlkPScrZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aGVtZS1pZC0iK2FuY2hvcisiXCIpLnZhbHVlKTsiOwogICAgICBzY3JpcHQgKz0gImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9naW5CdXR0b25fMFwiKS5jbGljaygpOyI7CgogICAgdmFyIGZyID0gSmF2YUltcG9ydGVyKAogICAgICAgIG9yZy5mb3JnZXJvY2sub3BlbmFtLmF1dGgubm9kZS5hcGkuQWN0aW9uLAogICAgICAgICAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLlBvbGxpbmdXYWl0Q2FsbGJhY2ssCiAgICAgICAgY29tLnN1bi5pZGVudGl0eS5hdXRoZW50aWNhdGlvbi5jYWxsYmFja3MuSGlkZGVuVmFsdWVDYWxsYmFjaywKICAgICAgICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5TY3JpcHRUZXh0T3V0cHV0Q2FsbGJhY2sKICAgICkKICAgIC8vIGRpc2NvdmVyIGFjdGl2ZSB0aGVtZSBmcm9tIFVJCiAgICBpZiAoY2FsbGJhY2tzLmlzRW1wdHkoKSkgewogICAgICAgIGFjdGlvbiA9IGZyLkFjdGlvbi5zZW5kKAogICAgICAgICAgICBuZXcgZnIuSGlkZGVuVmFsdWVDYWxsYmFjaygidGhlbWUtaWQtIithbmNob3IsICJmYWxzZSIpLAogICAgICAgICAgICBuZXcgZnIuU2NyaXB0VGV4dE91dHB1dENhbGxiYWNrKHNjcmlwdCkKICAgICAgICApLmJ1aWxkKCk7CiAgICB9CiAgICAgIC8vIGdldCBhY3RpdmUgdGhlbWUgZnJvbSBjYWxsYmFjayBhbmQgc2V0IG5ldyB0aGVtZQogICAgICBlbHNlIGlmIChjYWxsYmFja3Muc2l6ZSgpID09PSAyKSB7CiAgICAgICAgLy8gZGlkIHdlIGdldCB0aGUgaWQgb2YgdGhlIGN1cnJlbnRseSBhY3RpdmUgdGhlbWU/CiAgICAgICAgaWYgKGNhbGxiYWNrcy5nZXQoMCkuZ2V0VmFsdWUoKSAhPT0gInRoZW1lLWlkLSIrYW5jaG9yKSB7CiAgICAgICAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJ0aGVtZUlkIiwgY2FsbGJhY2tzLmdldCgwKS5nZXRWYWx1ZSgpKTsKICAgICAgICB9CiAgICAgICAgLy8gc2V0IG5ldyB0aGVtZQogICAgICAgIHZhciBzdGFnZSA9ICJ0aGVtZUlkPSIrdGhlbWU7CiAgICAgICAgYWN0aW9uID0gZnIuQWN0aW9uLnNlbmQoCiAgICAgICAgICAgICAgbmV3IGZyLlBvbGxpbmdXYWl0Q2FsbGJhY2soIjAiLCAiUGxlYXNlIHdhaXQgLi4uIikKICAgICAgICApLndpdGhTdGFnZShzdGFnZSkuYnVpbGQoKTsKICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgLy8gY29udGludWUKICAgICAgICBhY3Rpb24gPSBmci5BY3Rpb24uZ29UbyhvdXRjb21lKS5idWlsZCgpOwogICAgfQoKICAgICAvKgogICAgICAqIEdlbmVyYXRlIGEgdG9rZW4gaW4gdGhlIGRlc2lyZWQgZm9ybWF0LiBBbGwgJ3gnIGNoYXJhY3RlcnMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGEgcmFuZG9tIG51bWJlciAwLTkuCiAgICAgICogCiAgICAgICogRXhhbXBsZToKICAgICAgKiAneHh4eHgnIHByb2R1Y2VzICcyODUzNScKICAgICAgKiAneHh4LXh4eCcgcHJvZHVjZXMgJzQzMi01MjEnCiAgICAgICovCiAgICBmdW5jdGlvbiBnZW5lcmF0ZU51bWVyaWNUb2tlbihmb3JtYXQpIHsKICAgICAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1t4XS9nLCBmdW5jdGlvbihjKSB7CiAgICAgICAgICAgIHZhciByID0gTWF0aC5yYW5kb20oKSoxMHwwOwogICAgICAgICAgICB2YXIgdiA9IHI7CiAgICAgICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDEwKTsKICAgICAgICB9KTsKICAgIH0KfSgpKTs=",
  },
  {
    "_id": "157298c0-7d31-4059-a95b-eeb08473b7e5",
    "context": "AUTHENTICATION_CLIENT_SIDE",
    "createdBy": "null",
    "creationDate": 0,
    "default": true,
    "description": "Default global script for client side Device Id (Match) Authentication Module",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Device Id (Match) - Client Side",
    "script": "",
  },
  {
    "_id": "158e500b-8180-4641-ad48-23577fe9d976",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_MfaOptIn",
    "script": "LyoKVGhpcyBjcmVhdGVzIHRoZSBmb2xsb3dpbmcgY2FsbGJhY2tzOgotIFRleHRPdXRwdXRDYWxsYmFjazogRGlzcGxheSB0aGUgc3RlcCB0aXRsZSBhbmQgZGVzY3JpcHRpb24KLSBDb25maXJtYXRpb25DYWxsYmFjazogRGlzcGxheSBhIGxpc3Qgb2YgYnV0dG9ucyBmb3IgY2hvaWNlcwotIEhpZGRlblZhbHVlQ2FsbGJhY2s6IENhcHR1cmVzIHRoZSAic2tpcCIgb3B0aW9uLCBpZiBzZWxlY3RlZAotIFNjcmlwdFRleHRPdXRwdXRDYWxsYmFjazogQ3JlYXRlcyBhICJTa2lwIGZvciBub3ciIGxpbmsgYnV0dG9uIGFuZCBwb3NpdGlvbnMgaXQgYmVsb3cgdGhlIGJ1dHRvbnMgCiovCgp2YXIgdG9rZW4gPSBnZW5lcmF0ZU51bWVyaWNUb2tlbigneHh4Jyk7CnZhciBsb2FkaW5nTWVzc2FnZSA9ICdMb2FkaW5nLi4uJzsKdmFyIGxpbmtCdXR0b24gPSAiPGJ1dHRvbiBpZD0nc2tpcC1saW5rLSIuY29uY2F0KHRva2VuKS5jb25jYXQoIicgY2xhc3M9J2J0biBidG4tYmxvY2sgYnRuLWxpbmsnIHR5cGU9c3VibWl0PlNraXAgZm9yIG5vdzwvYnV0dG9uPiIpOwp2YXIgbWVzc2FnZSA9ICI8aDIgY2xhc3M9aDI+U2V0IHVwIDItc3RlcCB2ZXJpZmljYXRpb248L2gyPjxkaXYgc3R5bGU9J21hcmdpbi1ib3R0b206MWVtJz5Qcm90ZWN0IHlvdXIgYWNjb3VudCBieSBhZGRpbmcgYSBzZWNvbmQgc3RlcCBhZnRlciBlbnRlcmluZyB5b3VyIHBhc3N3b3JkIHRvIHZlcmlmeSBpdCdzIHlvdSBzaWduaW5nIGluLjwvZGl2PiI7CnZhciBjaG9pY2VzID0gWydTZXQgdXAnXTsKdmFyIGRlZmF1bHRDaG9pY2UgPSAwOwp2YXIgc2tpcFZhbHVlID0gJ1NraXAnOwoKLy8gVGhpcyB3aWxsIHJ1biByZWN1cnNpdmVseSBpbiB0aGUgYnJvd3NlciB1bnRpbCByZWZlcmVuY2VzIGNhbiBiZSBvYnRhaW5lZCB0byBrZXkgRE9NIGVsZW1lbnRzLCBhdCB3aGljaCBwb2ludC4KLy8gaXQgd2lsbCBjdXN0b21pemUgdGhlIERPTS4gIFRoaXMgaXMgdG8gYXZvaWQgcmFjZSBjb25kaXRpb25zIHdpdGggdGhlIFVJIHJlbmRlcmluZyBjYWxsYmFja3MuCnZhciBzZXR1cFBhZ2VTY3JpcHQgPQogICd2YXIgc2V0dXBQYWdlID0gZnVuY3Rpb24oKSB7Jy5jb25jYXQoCiAgJyAgdmFyIHNraXBJbnB1dEVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic2tpcC1pbnB1dC0nKS5jb25jYXQodG9rZW4pLmNvbmNhdCgnIik7JykuY29uY2F0KAogICcgIHZhciBtZXNzYWdlRWxlbTsnKS5jb25jYXQoCiAgJyAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiY2FsbGJhY2stY29tcG9uZW50IikuZm9yRWFjaCgnKS5jb25jYXQoCiAgJyAgICBmdW5jdGlvbiAoZSkgeycpLmNvbmNhdCgKICAnICAgICAgdmFyIG0gPSBlLmZpcnN0RWxlbWVudENoaWxkOycpLmNvbmNhdCgKICAnICAgICAgaWYgKG0uZmlyc3RDaGlsZCAmJiBtLmZpcnN0Q2hpbGQubm9kZU5hbWUgPT0gIiN0ZXh0IiAmJiBtLmZpcnN0Q2hpbGQubm9kZVZhbHVlLnRyaW0oKSA9PSAiJykuY29uY2F0KGxvYWRpbmdNZXNzYWdlKS5jb25jYXQoJyIpIHsnKS5jb25jYXQoCiAgJyAgICAgICAgbWVzc2FnZUVsZW0gPSBtOycpLmNvbmNhdCgKICAnICAgICAgfScpLmNvbmNhdCgKICAnICAgIH0nKS5jb25jYXQoCiAgJyAgKTsnKS5jb25jYXQoCiAgJyAgaWYgKCFza2lwSW5wdXRFbGVtIHx8ICFtZXNzYWdlRWxlbSkgeycpLmNvbmNhdCgKICAnICAgIHJldHVybiBzZXRUaW1lb3V0KHNldHVwUGFnZSwgNTApOycpLmNvbmNhdCgKICAnICB9JykuY29uY2F0KAogICcgIHZhciBza2lwQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7JykuY29uY2F0KAogICcgIHNraXBDb250YWluZXIuc3R5bGUgPSAid2lkdGg6MTAwJSI7JykuY29uY2F0KAogICcgIHNraXBDb250YWluZXIuaW5uZXJIVE1MID0gIicpLmNvbmNhdChsaW5rQnV0dG9uKS5jb25jYXQoJyI7JykuY29uY2F0KAogICcgIHNraXBJbnB1dEVsZW0ucGFyZW50Tm9kZS5hcHBlbmQoc2tpcENvbnRhaW5lcik7JykuY29uY2F0KAogICcgIG1lc3NhZ2VFbGVtLmFsaWduID0gImNlbnRlciI7JykuY29uY2F0KAogICcgIG1lc3NhZ2VFbGVtLmlubmVySFRNTCA9ICInKS5jb25jYXQobWVzc2FnZSkuY29uY2F0KCciOycpLmNvbmNhdCgKICAnICB2YXIgYmluZFNraXBMaW5rID0gZnVuY3Rpb24oKSB7JykuY29uY2F0KAogICcgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInNraXAtbGluay0nKS5jb25jYXQodG9rZW4pLmNvbmNhdCgnIikub25jbGljayA9IGZ1bmN0aW9uKCkgeycpLmNvbmNhdCgKICAnICAgICAgc2tpcElucHV0RWxlbS52YWx1ZSA9ICInKS5jb25jYXQoc2tpcFZhbHVlKS5jb25jYXQoJyI7JykuY29uY2F0KAogICcgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibG9naW5CdXR0b25fMCIpLmNsaWNrKCk7JykuY29uY2F0KAogICcgICAgICByZXR1cm4gZmFsc2U7JykuY29uY2F0KAogICcgICAgfTsnKS5jb25jYXQoCiAgJyAgfTsnKS5jb25jYXQoCiAgJyAgc2V0VGltZW91dChiaW5kU2tpcExpbmssIDEwMCk7JykuY29uY2F0KAogICd9OycpLmNvbmNhdCgKICAnc2V0dXBQYWdlKCk7Jyk7Cgp2YXIgZnIgPSBKYXZhSW1wb3J0ZXIoCiAgb3JnLmZvcmdlcm9jay5vcGVuYW0uYXV0aC5ub2RlLmFwaS5BY3Rpb24sCiAgamF2YXguc2VjdXJpdHkuYXV0aC5jYWxsYmFjay5Db25maXJtYXRpb25DYWxsYmFjaywKICBqYXZheC5zZWN1cml0eS5hdXRoLmNhbGxiYWNrLlRleHRPdXRwdXRDYWxsYmFjaywKICBjb20uc3VuLmlkZW50aXR5LmF1dGhlbnRpY2F0aW9uLmNhbGxiYWNrcy5IaWRkZW5WYWx1ZUNhbGxiYWNrLAogIGNvbS5zdW4uaWRlbnRpdHkuYXV0aGVudGljYXRpb24uY2FsbGJhY2tzLlNjcmlwdFRleHRPdXRwdXRDYWxsYmFjawopCgp3aXRoIChmcikgewogIGlmIChjYWxsYmFja3MuaXNFbXB0eSgpKSB7CiAgICBhY3Rpb24gPSBBY3Rpb24uc2VuZCgKICAgICAgbmV3IFRleHRPdXRwdXRDYWxsYmFjaygKICAgICAgICAgIFRleHRPdXRwdXRDYWxsYmFjay5JTkZPUk1BVElPTiwKICAgICAgICAgIGxvYWRpbmdNZXNzYWdlCiAgICAgICksCiAgICAgIG5ldyBDb25maXJtYXRpb25DYWxsYmFjaygKICAgICAgICAgIENvbmZpcm1hdGlvbkNhbGxiYWNrLklORk9STUFUSU9OLAogICAgICAgICAgY2hvaWNlcywKICAgICAgICAgIGRlZmF1bHRDaG9pY2UKICAgICAgKSwKICAgICAgbmV3IEhpZGRlblZhbHVlQ2FsbGJhY2soJ3NraXAtaW5wdXQtJy5jb25jYXQodG9rZW4pLCAnZmFsc2UnKSwKICAgICAgbmV3IFNjcmlwdFRleHRPdXRwdXRDYWxsYmFjayhzZXR1cFBhZ2VTY3JpcHQpCiAgICApLmJ1aWxkKCkKICB9IGVsc2UgewogICAgaWYgKGNhbGxiYWNrcy5nZXQoMikuZ2V0VmFsdWUoKSA9PSBza2lwVmFsdWUpIHsKICAgICAgYWN0aW9uID0gQWN0aW9uLmdvVG8oc2tpcFZhbHVlKS5idWlsZCgpOwogICAgfSBlbHNlIHsKICAgICAgYWN0aW9uID0gQWN0aW9uLmdvVG8oY2hvaWNlc1tjYWxsYmFja3MuZ2V0KDEpLmdldFNlbGVjdGVkSW5kZXgoKV0pLmJ1aWxkKCk7CiAgICB9CiAgfQp9CgogLyoKICAqIEdlbmVyYXRlIGEgdG9rZW4gaW4gdGhlIGRlc2lyZWQgZm9ybWF0LiBBbGwgJ3gnIGNoYXJhY3RlcnMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGEgcmFuZG9tIG51bWJlciAwLTkuCiAgKiAKICAqIEV4YW1wbGU6CiAgKiAneHh4eHgnIHByb2R1Y2VzICcyODUzNScKICAqICd4eHgteHh4JyBwcm9kdWNlcyAnNDMyLTUyMScKICAqLwpmdW5jdGlvbiBnZW5lcmF0ZU51bWVyaWNUb2tlbihmb3JtYXQpIHsKICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL1t4XS9nLCBmdW5jdGlvbihjKSB7CiAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkqMTB8MDsKICAgIHZhciB2ID0gcjsKICAgIHJldHVybiB2LnRvU3RyaW5nKDEwKTsKICB9KTsKfQ==",
  },
  {
    "_id": "a064f7b7-29c5-480b-ac09-d3d122829278",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Sanitize objectAttributes",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Sanitize objectAttributes",
    "script": "LyoKewogICAgInVzZXJOYW1lIjogInNob2xtZXMiLAogICAgImdpdmVuTmFtZSI6ICJTaGVybG9jayIsCiAgICAic24iOiAiSG9sbWVzIiwKICAgICJtYWlsIjogImluZm85MThAMDYxNTJhbGVydHMuc2VjdXJpdHkub3JnIiwKICAgICJ0ZWxlcGhvbmVOdW1iZXIiOiAsCiAgICAicG9zdGFsQWRkcmVzcyI6ICIyMjFCIEJha2VyIFN0cmVldCIsCiAgICAiY2l0eSI6ICJMb25kb24iLAogICAgInN0YXRlUHJvdmluY2UiOiAsCiAgICAicG9zdGFsQ29kZSI6ICJOVzEiLAogICAgImNvdW50cnkiOiAiVW5pdGVkIFN0YXRlcyIsCiAgICAicHJlZmVyZW5jZXMiOiB7CiAgICAgICAgIm1hcmtldGluZyI6IGZhbHNlLAogICAgICAgICJ1cGRhdGVzIjogdHJ1ZQogICAgfQp9CiovCmxvZ2dlci5lcnJvcigiU2FuaXRpemUgb2JqZWN0QXR0cmlidXRlczogc3RhcnQiKTsKb3V0Y29tZSA9ICJ0cnVlIjsKdmFyIGF0dHJzID0gc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIik7CmlmIChhdHRycykgewogIHZhciBrZXlzID0gWwogICAgInVzZXJOYW1lIiwKICAgICJnaXZlbk5hbWUiLAogICAgInNuIiwKICAgICJtYWlsIiwKICAgICJ0ZWxlcGhvbmVOdW1iZXIiLAogICAgInBvc3RhbEFkZHJlc3MiLAogICAgImNpdHkiLAogICAgInN0YXRlUHJvdmluY2UiLAogICAgInBvc3RhbENvZGUiLAogICAgImNvdW50cnkiLAogICAgImZySW5kZXhlZFN0cmluZzIiCiAgXQogIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICBpZiAoYXR0cnMuZ2V0KGtleSkgJiYgYXR0cnMuZ2V0KGtleSkudG9TdHJpbmcoKSA9PSAiIikgewogICAgICBsb2dnZXIuZXJyb3IoIlNhbml0aXplIG9iamVjdEF0dHJpYnV0ZXM6IHJlbW92ZSAiLmNvbmNhdChrZXkpKTsKICAgICAgYXR0cnMucmVtb3ZlKGtleSk7CiAgICB9CiAgfSkKfQppZiAodHJhbnNpZW50U3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikgJiYgdHJhbnNpZW50U3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikuZ2V0KCJwYXNzd29yZCIpLnRvU3RyaW5nKCkgIT09ICIiKSB7CiAgbG9nZ2VyLmVycm9yKCJTYW5pdGl6ZSBvYmplY3RBdHRyaWJ1dGVzOiBwcmVzZXJ2ZSBwYXNzd29yZCBpbiBzaGFyZWQgc3RhdGUiKTsKICBzZXRTaGFyZWRPYmplY3RBdHRyaWJ1dGUoInBhc3N3b3JkIiwgdHJhbnNpZW50U3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikuZ2V0KCJwYXNzd29yZCIpLnRvU3RyaW5nKCkpOwp9CmxvZ2dlci5lcnJvcigiU2FuaXRpemUgb2JqZWN0QXR0cmlidXRlczogZW5kIik7CgovKgogKiBQcm9wZXJseSBzZXQgYXR0cmlidXRlcyBpbiBzaGFyZWQgc3RhdGUgZm9yIHVzZSB3aXRoIHRoZSBDcmVhdGUvUGF0Y2ggT2JqZWN0IG5vZGVzLgogKi8KZnVuY3Rpb24gc2V0U2hhcmVkT2JqZWN0QXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7CiAgICBpZiAoc2hhcmVkU3RhdGUuZ2V0KCJvYmplY3RBdHRyaWJ1dGVzIikpIHsKICAgICAgICBzaGFyZWRTdGF0ZS5nZXQoIm9iamVjdEF0dHJpYnV0ZXMiKS5wdXQobmFtZSwgdmFsdWUpOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgc2hhcmVkU3RhdGUucHV0KCJvYmplY3RBdHRyaWJ1dGVzIiwgSlNPTi5wYXJzZSgie1wiIituYW1lKyJcIjoiK3ZhbHVlKyJ9IikpOwogICAgfQp9",
  },
  {
    "_id": "4c7bb7bb-c5d6-47ac-92dc-256fb8121fa9",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_MfaRequiredCheck",
    "script": "aWYgKCJmYWxzZSIgPT0gInRydWUiKSB7CiAgb3V0Y29tZSA9ICJSZXF1aXJlZCI7Cn0gZWxzZSB7CiAgb3V0Y29tZSA9ICJPcHRpb25hbCI7Cn0=",
  },
  {
    "_id": "13cd3c60-a04b-4455-b028-fbfd01ed88b1",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "Azure AD pass through authentication using Resource Owner Password Credential flow",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "AAD Passthru ROPC",
    "script": "LyogQUFEIFBhc3N0aHJ1IFJPUEMKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQXp1cmUgQUQgcGFzcyB0aHJvdWdoIGF1dGhlbnRpY2F0aW9uIHVzaW5nIFJlc291cmNlIE93bmVyIFBhc3N3b3JkIENyZWRlbnRpYWwgZmxvdwogKiAKICogVGhpcyBzY3JpcHQgbmVlZHMgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIG5vdCB3b3JrIHByb3Blcmx5IGFzIGlzLiAKICogSXQgcmVxdWlyZXMgdGhlIFBsYXRmb3JtIFVzZXJuYW1lIGFuZCBQbGF0Zm9ybSBQYXNzd29yZCBjb2xsZWN0b3Igbm9kZXMKICogYmVmb3JlIGl0IGNhbiBvcGVyYXRlLgogKiAKICogVGhlIFNjcmlwdGVkIERlY2lzaW9uIE5vZGUgbmVlZHMgdGhlIGZvbGxvd2luZyBvdXRjb21lcyBkZWZpbmVkOgogKiAtIFZhbGlkCiAqIC0gSW52YWxpZAogKiAtIEV4cGlyZWQKICogLSBEaXNhYmxlZAogKiAtIEVycm9yCiAqLwpsb2dnZXIubWVzc2FnZSgiQUFEIFBhc3N0aHJ1IFJPUEM6IHN0YXJ0Iik7CgppZiAoc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpICYmIHRyYW5zaWVudFN0YXRlLmdldCgicGFzc3dvcmQiKSkgewogICAgICAvKgogICAgICogQkVHSU4gU0NSSVBUIENPTkZJR1VSQVRJT04KICAgICAqCiAgICAgKiBSRVBMQUNFIFdJVEggWU9VUiBPV04gQVpVUkUgQUQgU0VUVElOR1MKICAgICAqCiAgICAgKiBBQURfVEVOQU5UX0lEIGlzIHlvdXIgdGVuYW50IElEOiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9hY3RpdmUtZGlyZWN0b3J5L2Z1bmRhbWVudGFscy9hY3RpdmUtZGlyZWN0b3J5LWhvdy10by1maW5kLXRlbmFudAogICAgICogQUFEX0NMSUVOVF9JRCBpcyB5b3VyIHJlZ2lzdGVyZWQgYXBwIElEOiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9hY3RpdmUtZGlyZWN0b3J5L2RldmVsb3AvcXVpY2tzdGFydC1yZWdpc3Rlci1hcHAKICAgICAqLwogICAgdmFyIEFBRF9URU5BTlRfSUQgPSAiNzExZmZhOWMtNTk3Mi00NzEzLWFjZTMtNjg4Yzk3MzI2MTRhIjsKICAgIHZhciBBQURfQ0xJRU5UX0lEID0gIjUxZjEzMGVjLWQyOWQtNDQxOS1hNDkyLTAwMTFkMDljMWExNiI7CiAgICAvKgogICAgICogRU5EIFNDUklQVCBDT05GSUdVUkFUSU9OCiAgICAgKi8KICAgICAgCiAgICAvLyBBenVyZSBBRCBST1BDIENvbmZpZ3VyYXRpb24KICAgIHZhciBBQURfU0NPUEUgPSAicHJvZmlsZSI7CiAgICAgIHZhciBBQURfUkVTT1VSQ0UgPSAiaHR0cHM6Ly9ncmFwaC5taWNyb3NvZnQuY29tLyIKICAgIHZhciBBQURfT0FVVEgyX1RPS0VOX1VSSSA9ICJodHRwczovL2xvZ2luLndpbmRvd3MubmV0LyIuY29uY2F0KEFBRF9URU5BTlRfSUQpLmNvbmNhdCgiL29hdXRoMi90b2tlbiIpOwoKICAgIHZhciByZXF1ZXN0ID0gbmV3IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0KCk7CiAgICByZXF1ZXN0LnNldE1ldGhvZCgnUE9TVCcpOwogICAgcmVxdWVzdC5zZXRVcmkoQUFEX09BVVRIMl9UT0tFTl9VUkkpOwogICAgcmVxdWVzdC5nZXRIZWFkZXJzKCkuYWRkKCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIik7CiAgICB2YXIgcGFyYW1zID0gcmVxdWVzdC5nZXRGb3JtKCk7CiAgICBwYXJhbXMuYWRkKCJyZXNvdXJjZSIsIEFBRF9SRVNPVVJDRSk7CiAgICBwYXJhbXMuYWRkKCJjbGllbnRfaWQiLCBBQURfQ0xJRU5UX0lEKTsKICAgIHBhcmFtcy5hZGQoImdyYW50X3R5cGUiLCAicGFzc3dvcmQiKTsKICAgIHBhcmFtcy5hZGQoInNjb3BlIiwgQUFEX1NDT1BFKTsKICAgIHBhcmFtcy5hZGQoInVzZXJuYW1lIiwgc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKTsKICAgIHBhcmFtcy5hZGQoInBhc3N3b3JkIiwgdHJhbnNpZW50U3RhdGUuZ2V0KCJwYXNzd29yZCIpKTsKICAgIHJlcXVlc3QuZ2V0RW50aXR5KCkuc2V0U3RyaW5nKHBhcmFtcy50b1N0cmluZygpKTsKCiAgICB2YXIgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQocmVxdWVzdCkuZ2V0KCk7CiAgICB2YXIgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZS5nZXRFbnRpdHkoKS5nZXRTdHJpbmcoKSk7CiAgICAvL2xvZ2dlci5tZXNzYWdlKCJBQUQgUGFzc3RocnUgUk9QQzogSlNPTiByZXN1bHQ6ICIgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQpKTsKCiAgICAgIGlmIChyZXNwb25zZS5nZXRTdGF0dXMoKS5nZXRDb2RlKCkgPT09IDIwMCkgewogICAgICAgICAgb3V0Y29tZSA9ICJWYWxpZCIKICAgICAgICB0cmFuc2llbnRTdGF0ZS5wdXQoImFhZEFjY2Vzc1Rva2VuIiwgcmVzdWx0LmFjY2Vzc190b2tlbik7CiAgICB9IGVsc2UgewogICAgICAgIC8qIE91dGNvbWVzOgogICAgICAgICAqIC0gVmFsaWQKICAgICAgICAgKiAtIEludmFsaWQKICAgICAgICAgKiAtIEV4cGlyZWQKICAgICAgICAgKiAtIERpc2FibGVkCiAgICAgICAgICogLSBFcnJvcgogICAgICAgICAqCiAgICAgICAgICogRXhwZWN0ZWQgRXJyb3IgQ29kZXM6CiAgICAgICAgICogNTAxMjYgLSBFcnJvciB2YWxpZGF0aW5nIGNyZWRlbnRpYWxzIGR1ZSB0byBpbnZhbGlkIHVzZXJuYW1lIG9yIHBhc3N3b3JkLgogICAgICAgICAqIDUwMDU1IC0gVGhlIHBhc3N3b3JkIGlzIGV4cGlyZWQuCiAgICAgICAgICogNTAwNTcgLSBUaGUgdXNlciBhY2NvdW50IGlzIGRpc2FibGVkLgogICAgICAgICAqIDUwMTk2IC0gVGhlIHNlcnZlciB0ZXJtaW5hdGVkIGFuIG9wZXJhdGlvbiBiZWNhdXNlIGl0IGVuY291bnRlcmVkIGEgY2xpZW50IHJlcXVlc3QgbG9vcC4gUGxlYXNlIGNvbnRhY3QgeW91ciBhcHAgdmVuZG9yLgogICAgICAgICAqLwogICAgICAgIGlmIChyZXN1bHQuZXJyb3JfY29kZXMuaW5jbHVkZXMoNTAxMjYpKSB7CiAgICAgICAgICAgIG91dGNvbWUgPSAiSW52YWxpZCI7CiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuZXJyb3JfY29kZXMuaW5jbHVkZXMoNTAwNTUpKSB7CiAgICAgICAgICAgIG91dGNvbWUgPSAiRXhwaXJlZCI7CiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuZXJyb3JfY29kZXMuaW5jbHVkZXMoNTAwNTcpKSB7CiAgICAgICAgICAgIG91dGNvbWUgPSAiRGlzYWJsZWQiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG91dGNvbWUgPSAiRXJyb3IiOwogICAgICAgIH0KICAgICAgICBsb2dnZXIubWVzc2FnZSgiQUFEIFBhc3N0aHJ1IFJPUEM6IGVycm9yID0gIi5jb25jYXQocmVzdWx0LmVycm9yKSk7CiAgICAgICAgbG9nZ2VyLm1lc3NhZ2UoIkFBRCBQYXNzdGhydSBST1BDOiBlcnJvcl9kZXNjcmlwdGlvbiA9ICIuY29uY2F0KHJlc3VsdC5lcnJvcl9kZXNjcmlwdGlvbikpOwogICAgICAgIGxvZ2dlci5tZXNzYWdlKCJBQUQgUGFzc3RocnUgUk9QQzogZXJyb3JfY29kZXMgPSAiLmNvbmNhdChyZXN1bHQuZXJyb3JfY29kZXMpKTsKICAgIH0KfSBlbHNlIHsKICAgICAgb3V0Y29tZSA9ICJFcnJvciI7CiAgICAgIGxvZ2dlci5tZXNzYWdlKCJBQUQgUGFzc3RocnUgUk9QQzogTm8gdXNlciBvciBwYXNzd29yZCBmb3VuZCBpbiBzaGFyZWQgc3RhdGUhIFVzZSB1c2VybmFtZSBhbmQgcGFzc3dvcmQgY29sbGVjdG9yIG5vZGVzIGJlZm9yZSB0aGlzIHNjcmlwdCB0byBwb3B1bGF0ZSBzaGFyZWQgYW5kIHRyYW5zaWVudCBzdGF0ZXMhJyIpOwp9CmxvZ2dlci5tZXNzYWdlKCJBQUQgUGFzc3RocnUgUk9QQzogRW5kIChvdXRjb21lPSIuY29uY2F0KG91dGNvbWUpLmNvbmNhdCgiKSIpKTs=",
  },
  {
    "_id": "13b6a418-4ccc-41b6-86ce-0a13f352da22",
    "context": "AUTHENTICATION_TREE_DECISION_NODE",
    "createdBy": "null",
    "creationDate": 0,
    "default": false,
    "description": "null",
    "language": "JAVASCRIPT",
    "lastModifiedBy": "null",
    "lastModifiedDate": 0,
    "name": "Admin_HasOnboarded",
    "script": "LyoKICogQ29weXJpZ2h0IDIwMjMgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKKGZ1bmN0aW9uKCkgewogIHZhciBmciA9IG5ldyBKYXZhSW1wb3J0ZXIoCiAgICBvcmcuZm9yZ2Vyb2NrLm9wZW5hbS5hdXRoLm5vZGVzLAogICAgb3JnLmZvcmdlcm9jay5ndWljZS5jb3JlCiAgKTsKCiAgd2l0aCAoZnIpIHsKICAgIHRyeSB7CgogICAgICBvdXRjb21lID0gJ0ZhbHNlJzsKCiAgICAgIHZhciByZWFsbSA9IHNoYXJlZFN0YXRlLmdldCgncmVhbG0nKTsKICAgICAgdmFyIHV1aWQgPSBzaGFyZWRTdGF0ZS5nZXQoJ19pZCcpOwogICAgICB2YXIgaWRlbnRpdHlQcm92aWRlciA9IEluamVjdG9ySG9sZGVyLmdldEluc3RhbmNlKElkZW50aXR5UHJvdmlkZXIpOwogICAgICB2YXIgaWRlbnRpdHkgPSBpZGVudGl0eVByb3ZpZGVyLmdldElkZW50aXR5KHV1aWQsIHJlYWxtKTsKICAgICAgdmFyIGF0dHJzID0gaWRlbnRpdHkuZ2V0QXR0cmlidXRlcygpOwoKICAgICAgaWYgKGF0dHJzLmNvbnRhaW5zS2V5KCdmci1pZG0tb25ib2FyZERhdGUnKSkgewogICAgICAgIGxvZ2dlci5tZXNzYWdlKCdBZG1pbiBoYXMgb25ib2FyZCBkYXRlJyk7CiAgICAgICAgb3V0Y29tZSA9ICdUcnVlJzsKICAgICAgfQoKICAgIH0gY2F0Y2ggKGUpIHsKCiAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGRldGVybWluZSBpZiBhZG1pbiBoYXMgb25ib2FyZGVkOiB7fScsIGUpOwogICAgICBvdXRjb21lID0gJ0Vycm9yJzsKCiAgICB9CiAgfQp9KCkpOw==",
  },
]
`;

exports[`ScriptOps updateScript() 1: Update script '3b2f6836-184c-4ee9-8a1d-557cb01837a5' 1`] = `
{
  "_id": "3b2f6836-184c-4ee9-8a1d-557cb01837a5",
  "_rev": "-1466669380",
  "context": "AUTHENTICATION_TREE_DECISION_NODE",
  "createdBy": "id=b672336b-41ef-428d-ae4a-e0c082875377,ou=user,ou=am-config",
  "creationDate": 1696092321727,
  "default": false,
  "description": "Check if username has already been collected.",
  "language": "JAVASCRIPT",
  "lastModifiedBy": "id=b672336b-41ef-428d-ae4a-e0c082875377,ou=user,ou=am-config",
  "lastModifiedDate": 1696092321727,
  "name": "FrodoTestScript3",
  "script": "LyogQ2hlY2sgVXNlcm5hbWUKICoKICogQXV0aG9yOiB2b2xrZXIuc2NoZXViZXJAZm9yZ2Vyb2NrLmNvbQogKiAKICogQ2hlY2sgaWYgdXNlcm5hbWUgaGFzIGFscmVhZHkgYmVlbiBjb2xsZWN0ZWQuCiAqIFJldHVybiAia25vd24iIGlmIHllcywgInVua25vd24iIG90aGVyd2lzZS4KICogCiAqIFRoaXMgc2NyaXB0IGRvZXMgbm90IG5lZWQgdG8gYmUgcGFyYW1ldHJpemVkLiBJdCB3aWxsIHdvcmsgcHJvcGVybHkgYXMgaXMuCiAqIAogKiBUaGUgU2NyaXB0ZWQgRGVjaXNpb24gTm9kZSBuZWVkcyB0aGUgZm9sbG93aW5nIG91dGNvbWVzIGRlZmluZWQ6CiAqIC0ga25vd24KICogLSB1bmtub3duCiAqLwooZnVuY3Rpb24gKCkgewogICAgaWYgKG51bGwgIT0gc2hhcmVkU3RhdGUuZ2V0KCJ1c2VybmFtZSIpKSB7CiAgICAgICAgb3V0Y29tZSA9ICJrbm93biI7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBvdXRjb21lID0gInVua25vd24iOwogICAgfQp9KCkpOw==",
}
`;
